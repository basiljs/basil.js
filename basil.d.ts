/**
 * An assignment.
 */
declare class Assignment {
	/**
	 * A collection of assigned stories.
	 */
	readonly assignedStories: AssignedStories;

	/**
	 * The status of the assignment file.
	 */
	readonly assignmentFileStatus: AssignmentStatus;

	/**
	 * The path to the document that the hyperlink destination points to.
	 */
	readonly documentPath: File;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The content to export in the assignment.
	 */
	exportOptions: AssignmentExportOptions;

	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	readonly filePath: string | File;

	/**
	 * The color of the assignment's frames.
	 */
	frameColor: [number, number, number] | UIColors | NothingEnum;

	/**
	 * The unique ID of the Assignment.
	 */
	readonly id: number;

	/**
	 * If true, includes linked files when packaging the assignment.
	 */
	includeLinksWhenPackage: boolean;

	/**
	 * The index of the Assignment within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the Assignment.
	 */
	name: string;

	/**
	 * If true, the assignment package is up to date.
	 */
	readonly packageUpToDate: boolean;

	/**
	 * If true, the assignment is packaged.
	 */
	readonly packaged: boolean;

	/**
	 * The parent of the Assignment (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The user name to assign to tracked changes and notes.
	 */
	userName: string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Cancels the package for an assignment.
	 */
	cancelPackage(): void;

	/**
	 * Creates an assignment package.
	 * @param filePath The full path name of the assignment package file.
	 * @param submit If true, submits assigned stories before packaging the assignment.
	 * @param withProperties Initial values for properties of the new Assignment
	 */
	createPackage(filePath: File, submit?: boolean, withProperties?: object): File;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Assignment[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the assignment and its file.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Assignment.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Updates the assignment file.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	update(versionComments: string, forceSave?: boolean): void;

}

/**
 * A collection of assignments.
 */
declare class Assignments {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Assignment with the specified index.
	 * @param index The index.
	 */
	[index: number]: Assignment;

	/**
	 * Creates a new assignment.
	 * @param filePath The full path name of the new assignment.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 * @param withProperties Initial values for properties of the new Assignment
	 */
	add(filePath: File, versionComments: string, forceSave?: boolean, withProperties?: object): Assignment;

	/**
	 * Returns any Assignment in the collection.
	 */
	anyItem(): Assignment;

	/**
	 * Displays the number of elements in the Assignment.
	 */
	count(): number;

	/**
	 * Returns every Assignment in the collection.
	 */
	everyItem(): Assignment[];

	/**
	 * Returns the first Assignment in the collection.
	 */
	firstItem(): Assignment;

	/**
	 * Returns the Assignment with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Assignment;

	/**
	 * Returns the Assignment with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Assignment;

	/**
	 * Returns the Assignment with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Assignment;

	/**
	 * Returns the Assignments within the specified range.
	 * @param from The Assignment, index, or name at the beginning of the range.
	 * @param to The Assignment, index, or name at the end of the range.
	 */
	itemByRange(from: Assignment | number | string, to: Assignment | number | string): Assignment[];

	/**
	 * Returns the last Assignment in the collection.
	 */
	lastItem(): Assignment;

	/**
	 * Returns the middle Assignment in the collection.
	 */
	middleItem(): Assignment;

	/**
	 * Returns the Assignment whose index follows the specified Assignment in the collection.
	 * @param obj The Assignment whose index comes before the desired Assignment.
	 */
	nextItem(obj: Assignment): Assignment;

	/**
	 * Returns the Assignment with the index previous to the specified index.
	 * @param obj The index of the Assignment that follows the desired Assignment.
	 */
	previousItem(obj: Assignment): Assignment;

	/**
	 * Generates a string which, if executed, will return the Assignment.
	 */
	toSource(): string;

}

/**
 * An assigned story.
 */
declare class AssignedStory {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	readonly filePath: string | File;

	/**
	 * The unique ID of the AssignedStory.
	 */
	readonly id: number;

	/**
	 * The index of the AssignedStory within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the AssignedStory.
	 */
	name: string;

	/**
	 * The parent of the AssignedStory (a Assignment).
	 */
	readonly parent: Assignment;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A reference to the assigned story.
	 */
	readonly storyReference: Story | PageItem | Oval | Rectangle | Polygon;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): AssignedStory[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the assigned story to the specified location.
	 * @param to The location of the assigned story relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to?: LocationOptions, reference?: Assignment | AssignedStory): AssignedStory;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the AssignedStory.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of assigned stories.
 */
declare class AssignedStories {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the AssignedStory with the specified index.
	 * @param index The index.
	 */
	[index: number]: AssignedStory;

	/**
	 * Returns any AssignedStory in the collection.
	 */
	anyItem(): AssignedStory;

	/**
	 * Displays the number of elements in the AssignedStory.
	 */
	count(): number;

	/**
	 * Returns every AssignedStory in the collection.
	 */
	everyItem(): AssignedStory[];

	/**
	 * Returns the first AssignedStory in the collection.
	 */
	firstItem(): AssignedStory;

	/**
	 * Returns the AssignedStory with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): AssignedStory;

	/**
	 * Returns the AssignedStory with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): AssignedStory;

	/**
	 * Returns the AssignedStory with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): AssignedStory;

	/**
	 * Returns the AssignedStories within the specified range.
	 * @param from The AssignedStory, index, or name at the beginning of the range.
	 * @param to The AssignedStory, index, or name at the end of the range.
	 */
	itemByRange(from: AssignedStory | number | string, to: AssignedStory | number | string): AssignedStory[];

	/**
	 * Returns the last AssignedStory in the collection.
	 */
	lastItem(): AssignedStory;

	/**
	 * Returns the middle AssignedStory in the collection.
	 */
	middleItem(): AssignedStory;

	/**
	 * Returns the AssignedStory whose index follows the specified AssignedStory in the collection.
	 * @param obj The AssignedStory whose index comes before the desired AssignedStory.
	 */
	nextItem(obj: AssignedStory): AssignedStory;

	/**
	 * Returns the AssignedStory with the index previous to the specified index.
	 * @param obj The index of the AssignedStory that follows the desired AssignedStory.
	 */
	previousItem(obj: AssignedStory): AssignedStory;

	/**
	 * Generates a string which, if executed, will return the AssignedStory.
	 */
	toSource(): string;

}

/**
 * A print event
 */
declare class PrintEvent extends Event {
	/**
	 * Dispatched after a PrintEvent is printed. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_PRINT: string;

	/**
	 * Dispatched before a PrintEvent is printed. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_PRINT: string;

	/**
	 * UI options for print document
	 */
	documentPrintUiOption: DocumentPrintUiOptions[];

}

/**
 * Represents the place gun.
 */
declare class PlaceGun extends Preference {
	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * A collection of EPS files.
	 */
	readonly epss: EPSs;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * Imported InDesign pages.
	 */
	readonly importedPages: ImportedPages;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * Whether the place gun is currently loaded with content for placing.
	 */
	readonly loaded: boolean;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of PDF files.
	 */
	readonly pdfs: PDFs;

	/**
	 * A collection of PICT graphics.
	 */
	readonly picts: PICTs;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * A collection of IDML snippets.
	 */
	readonly snippets: Snippets;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of WMF graphics.
	 */
	readonly wmfs: WMFs;

	/**
	 * Delete the contents of the place gun.
	 */
	abortPlaceGun(): void;

	/**
	 * Load the place gun with one or more files.
	 * @param fileName One or more files to place.
	 * @param showingOptions Whether to display the import options dialog
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	loadPlaceGun(fileName: File | File[], showingOptions?: boolean, withProperties?: object): void;

	/**
	 * Rotate the contents of the place gun.
	 * @param direction Which direction to rotate the contents
	 */
	rotate(direction?: RotationDirection): void;

}

/**
 * An event listener.
 */
declare class EventListener {
	/**
	 * The name of the event.
	 */
	readonly eventType: string;

	/**
	 * The handler to invoke when the event occurs.
	 */
	readonly handler: File | Function;

	/**
	 * The unique ID of the EventListener.
	 */
	readonly id: number;

	/**
	 * The index of the EventListener within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the EventListener; this is an alias to the EventListener's label property.
	 */
	name: string;

	/**
	 * The parent of the EventListener (a Object, UIDBasedObject, CellStyleGroup, CellStyle, TableStyleGroup, Article, ConditionSet, HiddenText, Condition, MotionPreset, AssignedStory, Assignment, ObjectStyleGroup, ObjectStyle, NumberingList, Snippet, Dialog, ColorGroup, Swatch, Color, Tint, Gradient, MixedInkGroup, MixedInk, Behavior, SubmitFormBehavior, PrintFormBehavior, ClearFormBehavior, GotoPageBehavior, GotoAnchorBehavior, SoundBehavior, ViewZoomBehavior, GotoStateBehavior, GotoPreviousStateBehavior, GotoNextStateBehavior, OpenFileBehavior, AnimationBehavior, ShowHideFieldsBehavior, MovieBehavior, GotoURLBehavior, GotoPreviousViewBehavior, GotoNextViewBehavior, GotoPreviousPageBehavior, GotoNextPageBehavior, GotoLastPageBehavior, GotoFirstPageBehavior, PreflightProfileRule, PreflightRuleInstance, PreflightProfile, CrossReferenceFormat, HyperlinkURLDestination, HyperlinkExternalPageDestination, HyperlinkPageDestination, HyperlinkTextDestination, ParagraphDestination, HyperlinkTextSource, CrossReferenceSource, HyperlinkPageItemSource, Bookmark, Hyperlink, IndexSection, PageReference, CrossReference, Index, TOCStyle, FlattenerPreset, BookContent, MenuAction, ScriptMenuAction, NamedGrid, CompositeFontEntry, CompositeFont, CharacterStyleGroup, ParagraphStyleGroup, TextVariableInstance, Footnote, XMLRuleProcessor, XMLTag, Note, TableStyle, TextPath, Asset, Link, Section, MojikumiTable, KinsokuTable, Guide, LanguageWithVendors, Language, PageItem, HtmlItem, FormField, SignatureField, TextBox, RadioButton, ListBox, ComboBox, CheckBox, MultiStateObject, Button, MediaItem, Sound, Movie, EPSText, SplineItem, Polygon, GraphicLine, Rectangle, Oval, Graphic, ImportedPage, PICT, WMF, PDF, EPS, Image, Group, TextFrame, EndnoteTextFrame, EndnoteRange, Endnote, Reply, PDFComment, MasterSpread, TrapPreset, Ink, DocumentPreset, Page, Spread, Layer, CharacterStyle, ParagraphStyle, Story, XmlStory, IDBasedObject, ArticleChild, ArticleMember, DialogRow, DialogColumn, Widget, BorderPanel, MeasurementEditbox, MeasurementCombobox, RealCombobox, AngleEditbox, PercentEditbox, RealEditbox, PercentCombobox, AngleCombobox, EnablingGroup, IntegerCombobox, IntegerEditbox, RadiobuttonControl, RadiobuttonGroup, CheckboxControl, Dropdown, StaticText, TextEditbox, ColorGroupSwatch, BackgroundTask, State, RuleDataObject, XMLItem, DTD, XMLInstruction, XMLComment, XMLElement, Table, Cell, IdleTask, StrokeStyle, StripedStrokeStyle, DottedStrokeStyle, DashedStrokeStyle, GraphicLayer, NonIDBasedObject, TableStyleMapping, CharStyleMapping, CellStyleMapping, ParaStyleMapping, TimingTarget, TimingGroup, TimingList, OpacityGradientStop, ObjectStyleExportTagMap, DataMergeQrcodePlaceholder, DataMergeField, DataMergeImagePlaceholder, DataMergeTextPlaceholder, Panel, LibraryPanel, PagesPanel, Window, StoryWindow, LayoutWindow, NavigationPoint, PreflightProcess, PreflightRule, BuildingBlock, DisplaySetting, IndexingSortOption, Topic, TOCStyleEntry, MenuElement, MenuSeparator, MenuItem, Submenu, Menu, StyleExportTagMap, TextVariable, XMLRuleMatchData, ValidationError, XMLExportMap, XMLImportMap, XMLAttribute, PrinterPreset, Row, Column, Change, HttpLinkConnectionManagerObject, RootObject, Document, Application, Book, Library, Preference, ContentPlacerObject, LinkedPageItemOption, LinkedStoryOption, PublishExportPreference, HTMLFXLExportPreference, EPubExportPreviewAppPreference, EPubFixedLayoutExportPreference, HTMLExportPreference, EPubExportPreference, ConditionalTextPreference, TimingSetting, AnimationSetting, XFLExportPreference, SWFExportPreference, TransformAttributeOption, AlignDistributePreference, TypeContextualUiPreference, GrabberPreference, ObjectStyleContentEffectsCategorySettings, ObjectStyleFillEffectsCategorySettings, ObjectStyleStrokeEffectsCategorySettings, ObjectStyleObjectEffectsCategorySettings, ChapterNumberPreference, NumberingRestartPolicy, Bullet, DataMerge, DataMergeOption, DataMergePreference, JPEGExportPreference, TrackChangesPreference, NotePreference, TransformPreference, ClipboardPreference, GeneralPreference, WatermarkPreference, ButtonPreference, PNGExportPreference, PreflightBookOption, PreflightOption, XMLViewPreference, GpuPerformancePreference, DisplayPerformancePreference, IndexOptions, LinkMetadata, MetadataPreference, ExcelImportPreference, TaggedTextImportPreference, TaggedTextExportPreference, WordRTFImportPreference, TextExportPreference, TextImportPreference, FindChangeContentTransparencySetting, FindChangeFillTransparencySetting, FindChangeStrokeTransparencySetting, FindChangeTransparencySetting, GradientFeatherSetting, FindChangeGradientFeatherSetting, DirectionalFeatherSetting, FindChangeDirectionalFeatherSetting, ContentTransparencySetting, SatinSetting, FindChangeSatinSetting, BevelAndEmbossSetting, FindChangeBevelAndEmbossSetting, InnerGlowSetting, FindChangeInnerGlowSetting, OuterGlowSetting, FindChangeOuterGlowSetting, InnerShadowSetting, FindChangeInnerShadowSetting, FeatherSetting, FindChangeFeatherSetting, DropShadowSetting, FindChangeDropShadowSetting, BlendingSetting, FindChangeBlendingSetting, FillTransparencySetting, StrokeTransparencySetting, TransparencySetting, TransparencyPreference, FlattenerPreference, GalleyPreference, GridPrintingPreference, CjkGridPreference, StoryGridDataInformation, LayoutGridDataInformation, GridDataInformation, CaptionMetadataVariablePreference, CustomTextVariablePreference, MatchParagraphStylePreference, MatchCharacterStylePreference, FileNameVariablePreference, DateVariablePreference, ChapterNumberVariablePreference, PageNumberVariablePreference, FootnoteOption, BaselineFrameGridOption, AnchoredObjectSetting, AnchoredObjectDefault, ExportForWebPreference, XMLPreference, XMLExportPreference, XMLImportPreference, InCopyExportOption, LinkingPreference, ChangeTransliteratePreference, ChangeObjectPreference, ChangeGlyphPreference, ChangeGrepPreference, ChangeTextPreference, FindTransliteratePreference, FindObjectPreference, FindGlyphPreference, FindGrepPreference, FindTextPreference, FindChangeTransliterateOption, FindChangeObjectOption, FindChangeGlyphOption, FindChangeGrepOption, FindChangeTextOption, ColorSetting, ScriptArg, ScriptPreference, PlaceGun, AdjustLayoutPreference, StrokeFillProxySetting, ImportedPageAttribute, EPSImportPreference, SmartGuidePreference, AutoCorrectPreference, SpellPreference, PolygonPreference, DictionaryPreference, FontLockingPreference, MojikumiUiPreference, ContourOption, TextWrapPreference, TextEditingPreference, FrameFittingOption, ObjectExportOption, PageItemDefault, EndnoteOption, TaggedPDFPreference, InteractivePDFExportPreference, PDFAttribute, PDFPlacePreference, PDFExportPreference, IMEPreference, GraphicLayerOption, ClippingPathSettings, ImageIOPreference, ImagePreference, ToolBox, EPSExportPreference, PrintBookletPrintPreference, PrintBookletOption, PrintPreference, ViewPreference, PasteboardPreference, MarginPreference, GuidePreference, GridPreference, DocumentPreference, TextDefault, TextPreference, TextFramePreference, StoryPreference, PathPoint, Path, GradientStop, AutoCorrectTable, UserDictionary, HyphenationException, Font, TransformationMatrix, PDFExportPreset, NestedStyle, TabStop, Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, Line, Word, Character, NestedGrepStyle or NestedLineStyle).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): EventListener[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the EventListener.
	 */
	remove(): void;

	/**
	 * Generates a string which, if executed, will return the EventListener.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of event listeners.
 */
declare class EventListeners {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the EventListener with the specified index.
	 * @param index The index.
	 */
	[index: number]: EventListener;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 * @param withProperties Initial values for properties of the new EventListener
	 */
	add(eventType: string, handler: File | Function, captures?: boolean, withProperties?: object): EventListener;

	/**
	 * Returns any EventListener in the collection.
	 */
	anyItem(): EventListener;

	/**
	 * Displays the number of elements in the EventListener.
	 */
	count(): number;

	/**
	 * Returns every EventListener in the collection.
	 */
	everyItem(): EventListener[];

	/**
	 * Returns the first EventListener in the collection.
	 */
	firstItem(): EventListener;

	/**
	 * Returns the EventListener with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): EventListener;

	/**
	 * Returns the EventListener with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): EventListener;

	/**
	 * Returns the EventListener with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): EventListener;

	/**
	 * Returns the EventListeners within the specified range.
	 * @param from The EventListener, index, or name at the beginning of the range.
	 * @param to The EventListener, index, or name at the end of the range.
	 */
	itemByRange(from: EventListener | number | string, to: EventListener | number | string): EventListener[];

	/**
	 * Returns the last EventListener in the collection.
	 */
	lastItem(): EventListener;

	/**
	 * Returns the middle EventListener in the collection.
	 */
	middleItem(): EventListener;

	/**
	 * Returns the EventListener whose index follows the specified EventListener in the collection.
	 * @param obj The EventListener whose index comes before the desired EventListener.
	 */
	nextItem(obj: EventListener): EventListener;

	/**
	 * Returns the EventListener with the index previous to the specified index.
	 * @param obj The index of the EventListener that follows the desired EventListener.
	 */
	previousItem(obj: EventListener): EventListener;

	/**
	 * Generates a string which, if executed, will return the EventListener.
	 */
	toSource(): string;

}

/**
 * An event.
 */
declare class Event {
	/**
	 * Dispatched after the Event becomes active. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_ACTIVATE: string;

	/**
	 * Dispatched when a Event is closing. Since the close has been committed, it can no longer be canceled. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_CLOSE: string;

	/**
	 * Dispatched after the active context changes. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_CONTEXT_CHANGED: string;

	/**
	 * Dispatched after a Event is deleted. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_DELETE: string;

	/**
	 * Dispatched after a Event is embedded. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_EMBED: string;

	/**
	 * Dispatched after the Event is invoked. This event does not bubble. This event is not cancelable.
	 */
	static readonly AFTER_INVOKE: string;

	/**
	 * Dispatched after one or more links in the Event have been added, deleted, or modified. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_LINKS_CHANGED: string;

	/**
	 * Dispatched after a Event is relocated from one object to another. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_MOVE: string;

	/**
	 * Dispatched after a Event is created. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_NEW: string;

	/**
	 * Dispatched after a Event is opened. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_OPEN: string;

	/**
	 * Dispatched after a Event is placed. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_PLACE: string;

	/**
	 * Dispatched when the Event is quitting. Since the quit has been committed, it can not be canceled. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_QUIT: string;

	/**
	 * Dispatched after an attribute on the active selection changes. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_SELECTION_ATTRIBUTE_CHANGED: string;

	/**
	 * Dispatched after the active selection changes. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_SELECTION_CHANGED: string;

	/**
	 * Dispatched after a Event is unembedded. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_UNEMBED: string;

	/**
	 * Dispatched after a Event is updated. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_UPDATE: string;

	/**
	 * Dispatched before a Event is closed. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_CLOSE: string;

	/**
	 * Dispatched before the Event becomes inactive. This event bubbles. This event is not cancelable.
	 */
	static readonly BEFORE_DEACTIVATE: string;

	/**
	 * Dispatched before a Event is deleted. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_DELETE: string;

	/**
	 * Dispatched before the Event is displayed. This event does not bubble. This event is not cancelable.
	 */
	static readonly BEFORE_DISPLAY: string;

	/**
	 * Dispatched before a Event is embedded. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_EMBED: string;

	/**
	 * Dispatched before the Event is invoked. This event does not bubble. This event is cancelable.
	 */
	static readonly BEFORE_INVOKE: string;

	/**
	 * Dispatched before a Event is relocated from one object to another. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_MOVE: string;

	/**
	 * Dispatched before a Event is placed. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_PLACE: string;

	/**
	 * Dispatched before the Event is quit. Allows the quit to be canceled. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_QUIT: string;

	/**
	 * Dispatched before a Event is unembedded. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_UNEMBED: string;

	/**
	 * Dispatched before a Event is updated. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_UPDATE: string;

	/**
	 * Dispatched when the Event is invoked. This event does not bubble. This event is not cancelable.
	 */
	static readonly ON_INVOKE: string;

	/**
	 * If true, the event supports the bubbling phase of propagation.
	 */
	readonly bubbles: boolean;

	/**
	 * If true, the default behavior of the event on its target can be canceled.
	 */
	readonly cancelable: boolean;

	/**
	 * The current propagation target of the event.
	 */
	readonly currentTarget: object;

	/**
	 * If true, the default behavior of the event on its target has been canceled.
	 */
	readonly defaultPrevented: boolean;

	/**
	 * The current propagation phase of the event.
	 */
	readonly eventPhase: EventPhases;

	/**
	 * The name of the event.
	 */
	readonly eventType: string;

	/**
	 * The unique ID of the Event.
	 */
	readonly id: number;

	/**
	 * The index of the Event within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the Event (a Object, UIDBasedObject, CellStyleGroup, CellStyle, TableStyleGroup, Article, ConditionSet, HiddenText, Condition, MotionPreset, AssignedStory, Assignment, ObjectStyleGroup, ObjectStyle, NumberingList, Snippet, Dialog, ColorGroup, Swatch, Color, Tint, Gradient, MixedInkGroup, MixedInk, Behavior, SubmitFormBehavior, PrintFormBehavior, ClearFormBehavior, GotoPageBehavior, GotoAnchorBehavior, SoundBehavior, ViewZoomBehavior, GotoStateBehavior, GotoPreviousStateBehavior, GotoNextStateBehavior, OpenFileBehavior, AnimationBehavior, ShowHideFieldsBehavior, MovieBehavior, GotoURLBehavior, GotoPreviousViewBehavior, GotoNextViewBehavior, GotoPreviousPageBehavior, GotoNextPageBehavior, GotoLastPageBehavior, GotoFirstPageBehavior, PreflightProfileRule, PreflightRuleInstance, PreflightProfile, CrossReferenceFormat, HyperlinkURLDestination, HyperlinkExternalPageDestination, HyperlinkPageDestination, HyperlinkTextDestination, ParagraphDestination, HyperlinkTextSource, CrossReferenceSource, HyperlinkPageItemSource, Bookmark, Hyperlink, IndexSection, PageReference, CrossReference, Index, TOCStyle, FlattenerPreset, BookContent, MenuAction, ScriptMenuAction, NamedGrid, CompositeFontEntry, CompositeFont, CharacterStyleGroup, ParagraphStyleGroup, TextVariableInstance, Footnote, XMLRuleProcessor, XMLTag, Note, TableStyle, TextPath, Asset, Link, Section, MojikumiTable, KinsokuTable, Guide, LanguageWithVendors, Language, PageItem, HtmlItem, FormField, SignatureField, TextBox, RadioButton, ListBox, ComboBox, CheckBox, MultiStateObject, Button, MediaItem, Sound, Movie, EPSText, SplineItem, Polygon, GraphicLine, Rectangle, Oval, Graphic, ImportedPage, PICT, WMF, PDF, EPS, Image, Group, TextFrame, EndnoteTextFrame, EndnoteRange, Endnote, Reply, PDFComment, MasterSpread, TrapPreset, Ink, DocumentPreset, Page, Spread, Layer, CharacterStyle, ParagraphStyle, Story, XmlStory, IDBasedObject, ArticleChild, ArticleMember, DialogRow, DialogColumn, Widget, BorderPanel, MeasurementEditbox, MeasurementCombobox, RealCombobox, AngleEditbox, PercentEditbox, RealEditbox, PercentCombobox, AngleCombobox, EnablingGroup, IntegerCombobox, IntegerEditbox, RadiobuttonControl, RadiobuttonGroup, CheckboxControl, Dropdown, StaticText, TextEditbox, ColorGroupSwatch, BackgroundTask, State, RuleDataObject, XMLItem, DTD, XMLInstruction, XMLComment, XMLElement, Table, Cell, IdleTask, StrokeStyle, StripedStrokeStyle, DottedStrokeStyle, DashedStrokeStyle, GraphicLayer, NonIDBasedObject, TableStyleMapping, CharStyleMapping, CellStyleMapping, ParaStyleMapping, TimingTarget, TimingGroup, TimingList, OpacityGradientStop, ObjectStyleExportTagMap, DataMergeQrcodePlaceholder, DataMergeField, DataMergeImagePlaceholder, DataMergeTextPlaceholder, Panel, LibraryPanel, PagesPanel, Window, StoryWindow, LayoutWindow, NavigationPoint, PreflightProcess, PreflightRule, BuildingBlock, DisplaySetting, IndexingSortOption, Topic, TOCStyleEntry, MenuElement, MenuSeparator, MenuItem, Submenu, Menu, StyleExportTagMap, TextVariable, XMLRuleMatchData, ValidationError, XMLExportMap, XMLImportMap, XMLAttribute, PrinterPreset, Row, Column, Change, HttpLinkConnectionManagerObject, RootObject, Document, Application, Book, Library, Preference, ContentPlacerObject, LinkedPageItemOption, LinkedStoryOption, PublishExportPreference, HTMLFXLExportPreference, EPubExportPreviewAppPreference, EPubFixedLayoutExportPreference, HTMLExportPreference, EPubExportPreference, ConditionalTextPreference, TimingSetting, AnimationSetting, XFLExportPreference, SWFExportPreference, TransformAttributeOption, AlignDistributePreference, TypeContextualUiPreference, GrabberPreference, ObjectStyleContentEffectsCategorySettings, ObjectStyleFillEffectsCategorySettings, ObjectStyleStrokeEffectsCategorySettings, ObjectStyleObjectEffectsCategorySettings, ChapterNumberPreference, NumberingRestartPolicy, Bullet, DataMerge, DataMergeOption, DataMergePreference, JPEGExportPreference, TrackChangesPreference, NotePreference, TransformPreference, ClipboardPreference, GeneralPreference, WatermarkPreference, ButtonPreference, PNGExportPreference, PreflightBookOption, PreflightOption, XMLViewPreference, GpuPerformancePreference, DisplayPerformancePreference, IndexOptions, LinkMetadata, MetadataPreference, ExcelImportPreference, TaggedTextImportPreference, TaggedTextExportPreference, WordRTFImportPreference, TextExportPreference, TextImportPreference, FindChangeContentTransparencySetting, FindChangeFillTransparencySetting, FindChangeStrokeTransparencySetting, FindChangeTransparencySetting, GradientFeatherSetting, FindChangeGradientFeatherSetting, DirectionalFeatherSetting, FindChangeDirectionalFeatherSetting, ContentTransparencySetting, SatinSetting, FindChangeSatinSetting, BevelAndEmbossSetting, FindChangeBevelAndEmbossSetting, InnerGlowSetting, FindChangeInnerGlowSetting, OuterGlowSetting, FindChangeOuterGlowSetting, InnerShadowSetting, FindChangeInnerShadowSetting, FeatherSetting, FindChangeFeatherSetting, DropShadowSetting, FindChangeDropShadowSetting, BlendingSetting, FindChangeBlendingSetting, FillTransparencySetting, StrokeTransparencySetting, TransparencySetting, TransparencyPreference, FlattenerPreference, GalleyPreference, GridPrintingPreference, CjkGridPreference, StoryGridDataInformation, LayoutGridDataInformation, GridDataInformation, CaptionMetadataVariablePreference, CustomTextVariablePreference, MatchParagraphStylePreference, MatchCharacterStylePreference, FileNameVariablePreference, DateVariablePreference, ChapterNumberVariablePreference, PageNumberVariablePreference, FootnoteOption, BaselineFrameGridOption, AnchoredObjectSetting, AnchoredObjectDefault, ExportForWebPreference, XMLPreference, XMLExportPreference, XMLImportPreference, InCopyExportOption, LinkingPreference, ChangeTransliteratePreference, ChangeObjectPreference, ChangeGlyphPreference, ChangeGrepPreference, ChangeTextPreference, FindTransliteratePreference, FindObjectPreference, FindGlyphPreference, FindGrepPreference, FindTextPreference, FindChangeTransliterateOption, FindChangeObjectOption, FindChangeGlyphOption, FindChangeGrepOption, FindChangeTextOption, ColorSetting, ScriptArg, ScriptPreference, PlaceGun, AdjustLayoutPreference, StrokeFillProxySetting, ImportedPageAttribute, EPSImportPreference, SmartGuidePreference, AutoCorrectPreference, SpellPreference, PolygonPreference, DictionaryPreference, FontLockingPreference, MojikumiUiPreference, ContourOption, TextWrapPreference, TextEditingPreference, FrameFittingOption, ObjectExportOption, PageItemDefault, EndnoteOption, TaggedPDFPreference, InteractivePDFExportPreference, PDFAttribute, PDFPlacePreference, PDFExportPreference, IMEPreference, GraphicLayerOption, ClippingPathSettings, ImageIOPreference, ImagePreference, ToolBox, EPSExportPreference, PrintBookletPrintPreference, PrintBookletOption, PrintPreference, ViewPreference, PasteboardPreference, MarginPreference, GuidePreference, GridPreference, DocumentPreference, TextDefault, TextPreference, TextFramePreference, StoryPreference, PathPoint, Path, GradientStop, AutoCorrectTable, UserDictionary, HyphenationException, Font, TransformationMatrix, PDFExportPreset, NestedStyle, TabStop, Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, Line, Word, Character, NestedGrepStyle or NestedLineStyle).
	 */
	readonly parent: any;

	/**
	 * If true, propagation of the event beyond the current target has been stopped.
	 */
	readonly propagationStopped: boolean;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The target of the event.
	 */
	readonly target: object;

	/**
	 * The time the event was initialized.
	 */
	readonly timeStamp: Date;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Event[];

	/**
	 * Cancels the default behavior of the event on its target.
	 */
	preventDefault(): void;

	/**
	 * Stops propagation of the event beyond the current target.
	 */
	stopPropagation(): void;

	/**
	 * Generates a string which, if executed, will return the Event.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of events.
 */
declare class Events {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Event with the specified index.
	 * @param index The index.
	 */
	[index: number]: Event;

	/**
	 * Returns any Event in the collection.
	 */
	anyItem(): Event;

	/**
	 * Displays the number of elements in the Event.
	 */
	count(): number;

	/**
	 * Returns every Event in the collection.
	 */
	everyItem(): Event[];

	/**
	 * Returns the first Event in the collection.
	 */
	firstItem(): Event;

	/**
	 * Returns the Event with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Event;

	/**
	 * Returns the Event with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Event;

	/**
	 * Returns the Events within the specified range.
	 * @param from The Event, index, or name at the beginning of the range.
	 * @param to The Event, index, or name at the end of the range.
	 */
	itemByRange(from: Event | number | string, to: Event | number | string): Event[];

	/**
	 * Returns the last Event in the collection.
	 */
	lastItem(): Event;

	/**
	 * Returns the middle Event in the collection.
	 */
	middleItem(): Event;

	/**
	 * Returns the Event whose index follows the specified Event in the collection.
	 * @param obj The Event whose index comes before the desired Event.
	 */
	nextItem(obj: Event): Event;

	/**
	 * Returns the Event with the index previous to the specified index.
	 * @param obj The index of the Event that follows the desired Event.
	 */
	previousItem(obj: Event): Event;

	/**
	 * Generates a string which, if executed, will return the Event.
	 */
	toSource(): string;

}

/**
 * An idle event.
 */
declare class IdleEvent extends Event {
	/**
	 * Dispatched at idle time for this IdleEvent. This event does not bubble. This event is not cancelable.
	 */
	static readonly ON_IDLE: string;

	/**
	 * Amount of time allocated to this task at the time the event was dispatched.
	 */
	readonly timeAllocated: number;

}

/**
 * A mutation event is dispatched for attribute changes.
 */
declare class MutationEvent extends Event {
	/**
	 * Dispatched when the value of a property changes on this MutationEvent. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_ATTRIBUTE_CHANGED: string;

	/**
	 * The name of the property that changed.
	 */
	readonly attributeName: string;

	/**
	 * The current value of the property that changed.
	 */
	readonly attributeValue: any;

}

/**
 * An attachable idle task.
 */
declare class IdleTask {
	/**
	 * Dispatched at idle time for this IdleTask. This event does not bubble. This event is not cancelable.
	 */
	static readonly ON_IDLE: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the IdleTask.
	 */
	readonly id: number;

	/**
	 * The index of the IdleTask within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the IdleTask.
	 */
	name: string;

	/**
	 * The parent of the IdleTask (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Amount of time to sleep (in milliseconds) before calling this task again. Setting this to zero will cause task to be deleted.
	 */
	sleep: number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): IdleTask[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the IdleTask.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the IdleTask.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * All attachable idle tasks.
 */
declare class IdleTasks {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the IdleTask with the specified index.
	 * @param index The index.
	 */
	[index: number]: IdleTask;

	/**
	 * Creates a new IdleTask.
	 * @param withProperties Initial values for properties of the new IdleTask
	 */
	add(withProperties: object): IdleTask;

	/**
	 * Returns any IdleTask in the collection.
	 */
	anyItem(): IdleTask;

	/**
	 * Displays the number of elements in the IdleTask.
	 */
	count(): number;

	/**
	 * Returns every IdleTask in the collection.
	 */
	everyItem(): IdleTask[];

	/**
	 * Returns the first IdleTask in the collection.
	 */
	firstItem(): IdleTask;

	/**
	 * Returns the IdleTask with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): IdleTask;

	/**
	 * Returns the IdleTask with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): IdleTask;

	/**
	 * Returns the IdleTask with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): IdleTask;

	/**
	 * Returns the IdleTasks within the specified range.
	 * @param from The IdleTask, index, or name at the beginning of the range.
	 * @param to The IdleTask, index, or name at the end of the range.
	 */
	itemByRange(from: IdleTask | number | string, to: IdleTask | number | string): IdleTask[];

	/**
	 * Returns the last IdleTask in the collection.
	 */
	lastItem(): IdleTask;

	/**
	 * Returns the middle IdleTask in the collection.
	 */
	middleItem(): IdleTask;

	/**
	 * Returns the IdleTask whose index follows the specified IdleTask in the collection.
	 * @param obj The IdleTask whose index comes before the desired IdleTask.
	 */
	nextItem(obj: IdleTask): IdleTask;

	/**
	 * Returns the IdleTask with the index previous to the specified index.
	 * @param obj The index of the IdleTask that follows the desired IdleTask.
	 */
	previousItem(obj: IdleTask): IdleTask;

	/**
	 * Generates a string which, if executed, will return the IdleTask.
	 */
	toSource(): string;

}

/**
 * Arguments to pass to a script.
 */
declare class ScriptArg extends Preference {
	/**
	 * Clears all script arguments.
	 */
	clear(): void;

	/**
	 * Gets the value of a script argument.
	 * @param name The name of the script argument.
	 */
	get(name: string): string;

	/**
	 * Gets the value of a script argument.
	 * @param name The name of the script argument.
	 */
	getValue(name: string): string;

	/**
	 * Verifies whether the script argument is defined.
	 * @param name The name of the script argument.
	 */
	isDefined(name: string): boolean;

	/**
	 * Restores all script arguments.
	 */
	restore(): void;

	/**
	 * Saves the script arguments.
	 */
	save(): void;

	/**
	 * Sets the value of a script argument.
	 * @param name The name of the script argument.
	 * @param value The value.
	 */
	set(name: string, value: string): void;

	/**
	 * Sets the value of a script argument.
	 * @param name The name of the script argument.
	 * @param value The value.
	 */
	setValue(name: string, value: string): void;

}

/**
 * The application.
 */
declare class Application {
	/**
	 * Dispatched after the Application becomes active. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_ACTIVATE: string;

	/**
	 * Dispatched after a Document is closed. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_CLOSE: string;

	/**
	 * Dispatched after the active context changes. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_CONTEXT_CHANGED: string;

	/**
	 * Dispatched when the Application is quitting. Since the quit has been committed, it can not be canceled. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_QUIT: string;

	/**
	 * Dispatched after an attribute on the active selection changes. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_SELECTION_ATTRIBUTE_CHANGED: string;

	/**
	 * Dispatched after the active selection changes. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_SELECTION_CHANGED: string;

	/**
	 * Dispatched before the Application becomes inactive. This event bubbles. This event is not cancelable.
	 */
	static readonly BEFORE_DEACTIVATE: string;

	/**
	 * Dispatched before a Document is created. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_NEW: string;

	/**
	 * Dispatched before a Document is opened. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_OPEN: string;

	/**
	 * Dispatched before the Application is quit. Allows the quit to be canceled. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_QUIT: string;

	/**
	 * The active book.
	 */
	activeBook: Book;

	/**
	 * The front-most document.
	 */
	activeDocument: Document;

	/**
	 * The current script running from the Scripts panel.
	 */
	readonly activeScript: File;

	/**
	 * The undo mode for the current script execution.
	 */
	readonly activeScriptUndoMode: UndoModes;

	/**
	 * The front-most window.
	 */
	activeWindow: Window | LayoutWindow | StoryWindow;

	/**
	 * Preferences for alignment and distribution.
	 */
	readonly alignDistributePreferences: AlignDistributePreference;

	/**
	 * All Cell styles
	 */
	readonly allCellStyles: CellStyle[];

	/**
	 * Lists all character styles (regardless of their group).
	 */
	readonly allCharacterStyles: CharacterStyle[];

	/**
	 * All object styles contained by the Application.
	 */
	readonly allObjectStyles: ObjectStyle[];

	/**
	 * Lists all paragraph styles (regardless of their group).
	 */
	readonly allParagraphStyles: ParagraphStyle[];

	/**
	 * The list of all object types (strings) a preflight rule can operate on.
	 */
	readonly allPreflightObjectTypes: string[];

	/**
	 * The list of all categories that have been declared by rules.
	 */
	readonly allPreflightRuleCategories: string[];

	/**
	 * The list of all known (declared) rule IDs.
	 */
	readonly allPreflightRuleIDs: string[];

	/**
	 * All Table styles
	 */
	readonly allTableStyles: TableStyle[];

	/**
	 * Anchored object default settings.
	 */
	readonly anchoredObjectDefaults: AnchoredObjectDefault;

	/**
	 * Anchored object settings.
	 */
	readonly anchoredObjectSettings: AnchoredObjectSetting;

	/**
	 * Auto-correct preferences.
	 */
	readonly autoCorrectPreferences: AutoCorrectPreference;

	/**
	 * A collection of auto-correct tables.
	 */
	readonly autoCorrectTables: AutoCorrectTables;

	/**
	 * A collection of background task objects.
	 */
	readonly backgroundTasks: BackgroundTasks;

	/**
	 * Baseline frame grid option settings.
	 */
	readonly baselineFrameGridOptions: BaselineFrameGridOption;

	/**
	 * A collection of books.
	 */
	readonly books: Books;

	/**
	 * Button preference settings.
	 */
	readonly buttonPreferences: ButtonPreference;

	/**
	 * A collection of cell style groups.
	 */
	readonly cellStyleGroups: CellStyleGroups;

	/**
	 * A collection of cell style mappings.
	 */
	readonly cellStyleMappings: CellStyleMappings;

	/**
	 * A collection of cell styles.
	 */
	readonly cellStyles: CellStyles;

	/**
	 * Change glyph preferences.
	 */
	changeGlyphPreferences: ChangeGlyphPreference | NothingEnum;

	/**
	 * Change grep preferences.
	 */
	changeGrepPreferences: ChangeGrepPreference | NothingEnum;

	/**
	 * Change object preferences.
	 */
	changeObjectPreferences: ChangeObjectPreference | NothingEnum;

	/**
	 * Change text preferences.
	 */
	changeTextPreferences: ChangeTextPreference | NothingEnum;

	/**
	 * Change transliterate preferences.
	 */
	changeTransliteratePreferences: ChangeTransliteratePreference | NothingEnum;

	/**
	 * A collection of char style mappings.
	 */
	readonly charStyleMappings: CharStyleMappings;

	/**
	 * A collection of character style groups.
	 */
	readonly characterStyleGroups: CharacterStyleGroups;

	/**
	 * A collection of character styles.
	 */
	readonly characterStyles: CharacterStyles;

	/**
	 * CJK grid preference settings.
	 */
	readonly cjkGridPreferences: CjkGridPreference;

	/**
	 * Clear overrides first before applying object style
	 */
	clearOverridesWhenApplyingStyle: boolean;

	/**
	 * Clipboard preference properties that define the way that the application interacts with the system clipboard.
	 */
	readonly clipboardPreferences: ClipboardPreference;

	/**
	 * A collection of color groups.
	 */
	readonly colorGroups: ColorGroups;

	/**
	 * Color setting properties that define color management defaults.
	 */
	readonly colorSettings: ColorSetting;

	/**
	 * A collection of colors.
	 */
	readonly colors: Colors;

	/**
	 * A collection of composite fonts.
	 */
	readonly compositeFonts: CompositeFonts;

	/**
	 * A collection of condition sets for conditional text.
	 */
	readonly conditionSets: ConditionSets;

	/**
	 * Conditional text preferences.
	 */
	readonly conditionalTextPreferences: ConditionalTextPreference;

	/**
	 * A collection of conditions for conditional text.
	 */
	readonly conditions: Conditions;

	/**
	 * The Content Placer. Used to get a reference to the content placer object.
	 */
	readonly contentPlacer: ContentPlacerObject;

	/**
	 * A collection of dashed stroke styles.
	 */
	readonly dashedStrokeStyles: DashedStrokeStyles;

	/**
	 * The data merge option properties that define the data merge.
	 */
	readonly dataMergeOptions: DataMergeOption;

	/**
	 * A collection of dialogs.
	 */
	readonly dialogs: Dialogs;

	/**
	 * User dictionary preference settings.
	 */
	readonly dictionaryPreferences: DictionaryPreference;

	/**
	 * Display performance settings.
	 */
	readonly displayPerformancePreferences: DisplayPerformancePreference;

	/**
	 * Display setting properties.
	 */
	readonly displaySettings: DisplaySettings;

	/**
	 * Document preference settings.
	 */
	readonly documentPreferences: DocumentPreference;

	/**
	 * A collection of document presets.
	 */
	readonly documentPresets: DocumentPresets;

	/**
	 * A collection of documents.
	 */
	readonly documents: Documents;

	/**
	 * A collection of dotted stroke styles.
	 */
	readonly dottedStrokeStyles: DottedStrokeStyles;

	/**
	 * Endnote option settings.
	 */
	readonly endnoteOptions: EndnoteOption;

	/**
	 * EPS export preferences.
	 */
	readonly epsExportPreferences: EPSExportPreference;

	/**
	 * EPS import preferences.
	 */
	readonly epsImportPreferences: EPSImportPreference;

	/**
	 * EPub export preview app preference settings.
	 */
	readonly epubViewingAppsPreferences: EPubExportPreviewAppPreference;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * Excel import preferences.
	 */
	readonly excelImportPreferences: ExcelImportPreference;

	/**
	 * The default export for web preferences.
	 */
	readonly exportForWebPreferences: ExportForWebPreference;

	/**
	 * The feature set.
	 */
	readonly featureSet: FeatureSetOptions;

	/**
	 * The full path to the file.
	 */
	readonly filePath: File;

	/**
	 * Find/change glyph options.
	 */
	findChangeGlyphOptions: FindChangeGlyphOption | NothingEnum;

	/**
	 * Find/change grep options.
	 */
	findChangeGrepOptions: FindChangeGrepOption | NothingEnum;

	/**
	 * Find/change object options.
	 */
	findChangeObjectOptions: FindChangeObjectOption | NothingEnum;

	/**
	 * Find/change text options.
	 */
	findChangeTextOptions: FindChangeTextOption | NothingEnum;

	/**
	 * Find/change transliterate options.
	 */
	findChangeTransliterateOptions: FindChangeTransliterateOption | NothingEnum;

	/**
	 * Find glyph preferences.
	 */
	findGlyphPreferences: FindGlyphPreference | NothingEnum;

	/**
	 * Find grep preferences.
	 */
	findGrepPreferences: FindGrepPreference | NothingEnum;

	/**
	 * Find object preferences.
	 */
	findObjectPreferences: FindObjectPreference | NothingEnum;

	/**
	 * Find text preferences.
	 */
	findTextPreferences: FindTextPreference | NothingEnum;

	/**
	 * Find transliterate preferences.
	 */
	findTransliteratePreferences: FindTransliteratePreference | NothingEnum;

	/**
	 * A collection of transparency flattener presets.
	 */
	readonly flattenerPresets: FlattenerPresets;

	/**
	 * Font locking preference settings.
	 */
	readonly fontLockingPreferences: FontLockingPreference;

	/**
	 * A collection of fonts.
	 */
	readonly fonts: Fonts;

	/**
	 * Footnote option settings.
	 */
	readonly footnoteOptions: FootnoteOption;

	/**
	 * The frame fitting option to apply to placed or pasted content. Can be applied to a frame, object style, or document or to the application.
	 */
	readonly frameFittingOptions: FrameFittingOption;

	/**
	 * The full path to the Application, including the name of the Application.
	 */
	readonly fullName: File;

	/**
	 * Galley preference settings.
	 */
	readonly galleyPreferences: GalleyPreference;

	/**
	 * General preference settings.
	 */
	readonly generalPreferences: GeneralPreference;

	/**
	 * GPU performance preferences.
	 */
	readonly gpuPerformancePreferences: GpuPerformancePreference;

	/**
	 * Grabber preference properties that define display performance quality during scrolling.
	 */
	readonly grabberPreferences: GrabberPreference;

	/**
	 * A collection of gradients.
	 */
	readonly gradients: Gradients;

	/**
	 * Grid preference settings.
	 */
	readonly gridPreferences: GridPreference;

	/**
	 * Grid printing preference and export settings.
	 */
	readonly gridPrintingPreferences: GridPrintingPreference;

	/**
	 * Guide preference settings.
	 */
	readonly guidePreferences: GuidePreference;

	/**
	 * Experimental: Connection manager property
	 */
	httpLinkConnectionManager: HttpLinkConnectionManagerObject;

	/**
	 * All attachable idle tasks.
	 */
	readonly idleTasks: IdleTasks;

	/**
	 * The image I/O preference properties that define preferences for importing images.
	 */
	readonly imageIOPreferences: ImageIOPreference;

	/**
	 * Image preferences.
	 */
	readonly imagePreferences: ImagePreference;

	/**
	 * IME preference settings.
	 */
	readonly imePreferences: IMEPreference;

	/**
	 * Placed InDesign page attributes.
	 */
	readonly importedPageAttributes: ImportedPageAttribute;

	/**
	 * Export options for InCopy INCX document format.
	 */
	readonly incopyExportOptions: InCopyExportOption;

	/**
	 * The index options properties that define how an index is formatted.
	 */
	readonly indexGenerationOptions: IndexOptions;

	/**
	 * A collection of indexing sort options.
	 */
	readonly indexingSortOptions: IndexingSortOptions;

	/**
	 * A collection of inks.
	 */
	readonly inks: Inks;

	/**
	 * Interactive PDF export preferences.
	 */
	readonly interactivePDFExportPreferences: InteractivePDFExportPreference;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * JPEG export preferences.
	 */
	readonly jpegExportPreferences: JPEGExportPreference;

	/**
	 * A collection of kinsoku tables.
	 */
	readonly kinsokuTables: KinsokuTables;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * A collection of languages with vendors.
	 */
	readonly languagesWithVendors: LanguagesWithVendors;

	/**
	 * Default properties specific to layout grids.
	 */
	readonly layoutGridData: LayoutGridDataInformation;

	/**
	 * A collection of layout windows.
	 */
	readonly layoutWindows: LayoutWindows;

	/**
	 * A collection of object libraries.
	 */
	readonly libraries: Libraries;

	/**
	 * Linked Page Item options
	 */
	readonly linkedPageItemOptions: LinkedPageItemOption;

	/**
	 * Linked story options
	 */
	readonly linkedStoryOptions: LinkedStoryOption;

	/**
	 * The links preference properties that define preferences for links.
	 */
	readonly linkingPreferences: LinkingPreference;

	/**
	 * Delay before mouse operations trigger live screen drawing of page items.
	 */
	liveScreenDrawing: LiveDrawingOptions;

	/**
	 * The locale of the application.
	 */
	readonly locale: Locale;

	/**
	 * Margin preference settings.
	 */
	readonly marginPreferences: MarginPreference;

	/**
	 * A collection of menu actions.
	 */
	readonly menuActions: MenuActions;

	/**
	 * A collection of menus.
	 */
	readonly menus: Menus;

	/**
	 * A collection of mixed ink groups.
	 */
	readonly mixedInkGroups: MixedInkGroups;

	/**
	 * A collection of mixed inks.
	 */
	readonly mixedInks: MixedInks;

	/**
	 * If true, a modal dialog or alert is active.
	 */
	readonly modalState: boolean;

	/**
	 * A collection of mojikumi tables.
	 */
	readonly mojikumiTables: MojikumiTables;

	/**
	 * Mojikumi user interface preference settings.
	 */
	readonly mojikumiUIPreferences: MojikumiUiPreference;

	/**
	 * A collection of Motion presets.
	 */
	readonly motionPresets: MotionPresets;

	/**
	 * The name of the Application.
	 */
	readonly name: string;

	/**
	 * A collection of named grids.
	 */
	readonly namedGrids: NamedGrids;

	/**
	 * Note preference settings.
	 */
	readonly notePreferences: NotePreference;

	/**
	 * A collection of numbered lists.
	 */
	readonly numberingLists: NumberingLists;

	/**
	 * A collection of object style groups.
	 */
	readonly objectStyleGroups: ObjectStyleGroups;

	/**
	 * A collection of object styles.
	 */
	readonly objectStyles: ObjectStyles;

	/**
	 * The default page item formatting for the Application.
	 */
	readonly pageItemDefaults: PageItemDefault;

	/**
	 * A collection of panels.
	 */
	readonly panels: Panels;

	/**
	 * A collection of para style mappings.
	 */
	readonly paraStyleMappings: ParaStyleMappings;

	/**
	 * A collection of paragraph style groups.
	 */
	readonly paragraphStyleGroups: ParagraphStyleGroups;

	/**
	 * A collection of paragraph styles.
	 */
	readonly paragraphStyles: ParagraphStyles;

	/**
	 * The parent of the Application (a Application).
	 */
	readonly parent: Application;

	/**
	 * Pasteboard preference settings.
	 */
	readonly pasteboardPreferences: PasteboardPreference;

	/**
	 * A collection of PDF export preferences.
	 */
	readonly pdfExportPreferences: PDFExportPreference;

	/**
	 * A collection of PDF export presets.
	 */
	readonly pdfExportPresets: PDFExportPresets;

	/**
	 * The PDF place preference properties that define how PDF files are placed in the current document.
	 */
	readonly pdfPlacePreferences: PDFPlacePreference;

	/**
	 * The available performance metrics.
	 */
	readonly performanceMetrics: number[];

	/**
	 * Lists the extensions of file types that can be placed.
	 */
	readonly placeableFileExtensions: string[];

	/**
	 * Lists the types of files that can be placed.
	 */
	readonly placeableFileTypes: string[];

	/**
	 * PNG export preferences.
	 */
	readonly pngExportPreferences: PNGExportPreference;

	/**
	 * Polygon preference properties to use to define default settings for creating a polygon.
	 */
	readonly polygonPreferences: PolygonPreference;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Preflight book option settings.
	 */
	readonly preflightBookOptions: PreflightBookOption;

	/**
	 * Preflight option settings.
	 */
	readonly preflightOptions: PreflightOption;

	/**
	 * A collection of preflight processes.
	 */
	readonly preflightProcesses: PreflightProcesses;

	/**
	 * A collection of preflight profiles.
	 */
	readonly preflightProfiles: PreflightProfiles;

	/**
	 * A collection of preflight rules.
	 */
	readonly preflightRules: PreflightRules;

	/**
	 * A collection of printer presets.
	 */
	readonly printerPresets: PrinterPresets;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The names of the items in the redo stack.
	 */
	readonly redoHistory: string[];

	/**
	 * The name of the action on the top of the redo stack.
	 */
	readonly redoName: string;

	/**
	 * Arguments to pass to a script.
	 */
	readonly scriptArgs: ScriptArg;

	/**
	 * A collection of script menu actions.
	 */
	readonly scriptMenuActions: ScriptMenuActions;

	/**
	 * Script preferences.
	 */
	readonly scriptPreferences: ScriptPreference;

	/**
	 * The selected object(s).
	 */
	selection: object[] | object | NothingEnum;

	/**
	 * The key object of the selection.
	 */
	selectionKeyObject: PageItem | NothingEnum;

	/**
	 * The user's serial number.
	 */
	readonly serialNumber: string;

	/**
	 * Smart Guide preference properties.
	 */
	readonly smartGuidePreferences: SmartGuidePreference;

	/**
	 * Spell-check preferences.
	 */
	readonly spellPreferences: SpellPreference;

	/**
	 * Default properties specific to frame grids.
	 */
	readonly storyGridData: StoryGridDataInformation;

	/**
	 * Story preference settings.
	 */
	readonly storyPreferences: StoryPreference;

	/**
	 * A collection of story windows.
	 */
	readonly storyWindows: StoryWindows;

	/**
	 * A collection of striped stroke styles.
	 */
	readonly stripedStrokeStyles: StripedStrokeStyles;

	/**
	 * Stroke/fill proxy settings.
	 */
	readonly strokeFillProxySettings: StrokeFillProxySetting;

	/**
	 * A collection of stroke styles.
	 */
	readonly strokeStyles: StrokeStyles;

	/**
	 * A collection of swatches.
	 */
	readonly swatches: Swatches;

	/**
	 * SWF export preferences.
	 */
	readonly swfExportPreferences: SWFExportPreference;

	/**
	 * A collection of table style groups.
	 */
	readonly tableStyleGroups: TableStyleGroups;

	/**
	 * A collection of table style mappings.
	 */
	readonly tableStyleMappings: TableStyleMappings;

	/**
	 * A collection of table styles.
	 */
	readonly tableStyles: TableStyles;

	/**
	 * Tagged PDF preferences.
	 */
	readonly taggedPDFPreferences: TaggedPDFPreference;

	/**
	 * Tagged text export preferences.
	 */
	readonly taggedTextExportPreferences: TaggedTextExportPreference;

	/**
	 * Tagged text import preferences.
	 */
	readonly taggedTextImportPreferences: TaggedTextImportPreference;

	/**
	 * Text default settings.
	 */
	readonly textDefaults: TextDefault;

	/**
	 * Text editing preference settings.
	 */
	readonly textEditingPreferences: TextEditingPreference;

	/**
	 * Text export preferences.
	 */
	readonly textExportPreferences: TextExportPreference;

	/**
	 * Text frame preference settings.
	 */
	readonly textFramePreferences: TextFramePreference;

	/**
	 * Text import preferences.
	 */
	readonly textImportPreferences: TextImportPreference;

	/**
	 * Text preference settings.
	 */
	readonly textPreferences: TextPreference;

	/**
	 * A collection of text variables.
	 */
	readonly textVariables: TextVariables;

	/**
	 * The text wrap preference properties that define the default formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;

	/**
	 * A collection of tints.
	 */
	readonly tints: Tints;

	/**
	 * The current tool box states
	 */
	readonly toolBoxTools: ToolBox;

	/**
	 * Track changes preference settings.
	 */
	readonly trackChangesPreferences: TrackChangesPreference;

	/**
	 * Transform preference properties that define default behaviors when transforming objects. Note: Transforming includes rotation, scaling, flipping, and shearing.
	 */
	readonly transformPreferences: TransformPreference;

	/**
	 * A collection of transformation matrices.
	 */
	readonly transformationMatrices: TransformationMatrices;

	/**
	 * Transparency preference settings.
	 */
	readonly transparencyPreferences: TransparencyPreference;

	/**
	 * A collection of trap presets.
	 */
	readonly trapPresets: TrapPresets;

	/**
	 * Preferences for showing contextual ui for alternates.
	 */
	readonly typeContextualUiPrefs: TypeContextualUiPreference;

	/**
	 * The names of the items in the undo stack.
	 */
	readonly undoHistory: string[];

	/**
	 * The name of the action on the top of the undo stack.
	 */
	readonly undoName: string;

	/**
	 * The swatches that are not being used.
	 */
	readonly unusedSwatches: Swatch[];

	/**
	 * The current user's adobe id
	 */
	readonly userAdobeId: string;

	/**
	 * The color assigned to the tracked changes and notes created by the user, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as an InCopy UI color.
	 */
	userColor: [number, number, number] | InCopyUIColors;

	/**
	 * A collection of user dictionaries.
	 */
	readonly userDictionaries: UserDictionaries;

	/**
	 * The current user's GUID
	 */
	readonly userGuid: string;

	/**
	 * The user associated with the tracked changes and notes.
	 */
	userName: string;

	/**
	 * The application version.
	 */
	readonly version: string;

	/**
	 * View preference settings.
	 */
	readonly viewPreferences: ViewPreference;

	/**
	 * If true, the Application is visible.
	 */
	readonly visible: boolean;

	/**
	 * Watermark preferences
	 */
	readonly watermarkPreferences: WatermarkPreference;

	/**
	 * A collection of windows.
	 */
	readonly windows: Windows;

	/**
	 * Word and RTF import preferences.
	 */
	readonly wordRTFImportPreferences: WordRTFImportPreference;

	/**
	 * XFL export preferences.
	 */
	readonly xflExportPreferences: XFLExportPreference;

	/**
	 * A collection of XML export maps.
	 */
	readonly xmlExportMaps: XMLExportMaps;

	/**
	 * XML export preference settings.
	 */
	readonly xmlExportPreferences: XMLExportPreference;

	/**
	 * A collection of XML import maps.
	 */
	readonly xmlImportMaps: XMLImportMaps;

	/**
	 * XML import preference settings.
	 */
	readonly xmlImportPreferences: XMLImportPreference;

	/**
	 * The XML preference settings.
	 */
	readonly xmlPreferences: XMLPreference;

	/**
	 * A collection of XML rule processors.
	 */
	readonly xmlRuleProcessors: XMLRuleProcessors;

	/**
	 * A collection of XML tags.
	 */
	readonly xmlTags: XMLTags;

	/**
	 * XML view preference settings.
	 */
	readonly xmlViewPreferences: XMLViewPreference;

	/**
	 * Makes the application the front-most or active window.
	 */
	activate(): void;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Applies the specified menu customization set. An empty string will reset all menus and colorization (Show Full Menus). No string will apply the default menu set.
	 * @param name The menu customization set.
	 */
	applyMenuCustomization(name: string): void;

	/**
	 * Applies the specified shortcut set file. No string will apply the default shortcut set.
	 * @param name The shortcut set.
	 */
	applyShortcutSet(name: string): void;

	/**
	 * Applies the specified workspace.
	 * @param name The workspace.
	 */
	applyWorkspace(name: string): void;

	/**
	 * Cancels all the background tasks.
	 */
	cancelAllTasks(): void;

	/**
	 * Cascades all document windows.
	 */
	cascadeWindows(): void;

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds objects that match the find what value and replace the objects with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeObject(reverseOrder: boolean): PageItem[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Removes the frame fittings options and resets it to the initial state.
	 */
	clearFrameFittingOptions(): void;

	/**
	 * Transforms color values
	 * @param colorValue source color value
	 * @param sourceColorSpace source color space
	 * @param destinationColorSpace destination color space
	 */
	colorTransform(colorValue: number[], sourceColorSpace: ColorSpace, destinationColorSpace: ColorSpace): number[];

	/**
	 * Copies the selection in the active document window to the clipboard.
	 */
	copy(): void;

	/**
	 * Create a mini-folio out of asset and overlay descriptions.Schema for the mini folio description:|| Key || Type || Required? || Description ||| contentstackid | string | yes | The explicit ID to be used for this stack || tocImage | file | no | The TOC image for the mini-folio || narrowdimension | int | no | Targetted export size, measured along narrow dimension || widedimension | int | no | Targetted export size, measured along wide dimension || smoothscrolling | @enum(SmoothScrollingOptions) | no | The smooth scrolling behavior for this stack (default is noSmoothScroll) || locationforgeneratedassets | file | no | If included, this is an existing directory where the generated assets should be created. || overlays | array | no | see the SDK Overlay Builder APIs || assets | array | yes | The assets for the mini - folio, described below. || assetDependencies | array | no | Files that are needed by the asset, that will be included in the package but not the manifest. || metadata | array | no | The metadata for the mini-folio described below. || showprogressbar | boolean | no | Either true or false to indicate whether we should show a progress bar (default is false) || targetviewerversion | string | no | If provided (in the form "major.minor.revision") a folio compatible with the viewer version is produced. If omitted, the latest folio format is produced. | CS5 |The following are fields in the array for "assets":|| Key || Type || Required? || Description ||| file | file | yes | The asset file || type | string | yes | The asset file type, either "web" for HTML or "image" for a raster || width | int | yes | The asset width || height | int | yes | The asset height || orientation | string | yes | The asset orientation, either "portrait" or "landscape" || thumbnail | file | no | A thumbnail of the asset to be used in browse mode || scrubber | file | no | A thumbnail of the asset to be used in scrubber mode |The following are fields in the array for "assetDependencies":|| Key || Type || Required? || Description ||| file | file | no | The dependent file || relativePath | string | no | The relative path to the file, for use in the package |The following are fields in the array for "metadata":|| Key || Type || Required? || Description ||| any string | string or boolean | no | any key/value where the key is a string, and the value is either a string or a boolean, such as those described in "export folio meta data" |
	 * @param miniFolioDescription A dictionary describing the custom mini folio to create. Can accept: Ordered array containing key:String, value:Boolean, Long Integer, Long Long Integer, String, File or Array of Any Types.
	 * @param destination The location to write the file.
	 */
	createCustomMiniFolio(miniFolioDescription: any[], destination: File): void;

	/**
	 * Creates a temporary copy of the file
	 * @param from The file to be copied
	 */
	createTemporaryCopy(from: File): string;

	/**
	 * Cuts the selection in the active document window and stores it in the clipboard.
	 */
	cut(): void;

	/**
	 * Deletes the specified find/change query.
	 * @param queryName The query to delete.
	 * @param searchMode The search mode.
	 */
	deleteFindChangeQuery(queryName: string, searchMode: SearchModes): void;

	/**
	 * Deletes unused XML markup tags.
	 */
	deleteUnusedTags(): void;

	/**
	 * Executes the script in the specified language as a single transaction.
	 * @param script The script to execute.
	 * @param language The language of the script to execute. If not specified, uses the language used to call this method.
	 * @param withArguments An array of arguments passed to the script.
	 * @param undoMode How to undo this script.
	 * @param undoName The name of the undo step for entire script undo mode.
	 */
	doScript(script: File | string | Function, language?: ScriptLanguage, withArguments?: any[], undoMode?: UndoModes, undoName?: string): any;

	/**
	 * Dumps memory allocations from all marks in the specified range.
	 * @param from The first mark in the range.
	 * @param to The last mark in the range.
	 */
	dumpBetweenMemoryMarks(from: number[], to: number[]): void;

	/**
	 * Dumps memory allocations from the specified mark.
	 * @param from The mark from which to dump memory.
	 */
	dumpFromMemoryMark(from: number[]): void;

	/**
	 * Export the specified documents to an article folio.Note: This method behaves identically to @method(exportMiniFolio), but differs in its return value. @method(exportMiniFolio) returns an array of warning strings whereas this method returns an XML structure.
	 * @param destination The location to write the file.
	 * @param portraitDocument The InDesign document for the stack's portrait orientation.
	 * @param landscapeDocument The InDesign document for the stack's landscape orientation.
	 * @param folioMetadata Optional meta data for the mini folio. Can accept: Ordered array containing key:String, value:String.
	 * @param miniFolioParams Options for exporting a mini folio. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	exportArticleFolio(destination: File, portraitDocument: Document, landscapeDocument: Document, folioMetadata: any[], miniFolioParams: any[]): string;

	/**
	 * Export the specified document to a DPS article.Note: This method behaves similarly to @method(exportMiniFolio), but differs in its parameters.
	 * @param destination The location to write the file.
	 * @param document The source InDesign document.
	 * @param dpsArticleParams Options for exporting a DPS article. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	exportDpsArticle(destination: File, document: Document, dpsArticleParams: any[]): string[];

	/**
	 * Export the selected documents to a directory.
	 * @param destination The directory to write the folio.
	 * @param miniFolioList The mini folio(es) to add to the folio.
	 * @param folioMetadata Meta data for the folio. Can accept: Ordered array containing key:String, value:String.
	 * @param exportFolioParams Additional options for export folios. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	exportFolioToDirectory(destination: File, miniFolioList: File | File[], folioMetadata: any[], exportFolioParams: any[]): void;

	/**
	 * Export the selected documents to a compressed folio file that contains non-compressed mini folios.
	 * @param destination The location to write the package.
	 * @param miniFolioList The mini folio(es) to add to the folio.
	 * @param folioMetadata Meta data for the folio. Can accept: Ordered array containing key:String, value:String.
	 * @param exportFolioParams Additional options for export folios. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	exportFolioToDirectoryPackage(destination: File, miniFolioList: File | File[], folioMetadata: any[], exportFolioParams: any[]): void;

	/**
	 * Export the selected documents to a compressed folio file that contains compressed mini folios.
	 * @param destination The location to write the package.
	 * @param miniFolioList The mini folio(es) to add to the folio.
	 * @param folioMetadata Meta data for the folio. Can accept: Ordered array containing key:String, value:String.
	 * @param exportFolioParams Additional options for export folios. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	exportFolioToPackage(destination: File, miniFolioList: File | File[], folioMetadata: any[], exportFolioParams: any[]): void;

	/**
	 * Export the specified documents to a mini-folio.
	 * @param destination The location to write the file.
	 * @param portraitDocument The InDesign document for the stack's portrait orientation.
	 * @param landscapeDocument The InDesign document for the stack's landscape orientation.
	 * @param folioMetadata Optional meta data for the mini folio. Can accept: Ordered array containing key:String, value:String.
	 * @param miniFolioParams Options for exporting a mini folio. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	exportMiniFolio(destination: File, portraitDocument: Document, landscapeDocument: Document, folioMetadata: any[], miniFolioParams: any[]): string[];

	/**
	 * Export the presets to a file.
	 * @param format The preset format.
	 * @param to The file to export to.
	 * @param versionComments The comments for this version.
	 * @param forceSave Forcibly save a version.
	 */
	exportPresets(format: ExportPresetFormat, to: File, versionComments: string, forceSave?: boolean): void;

	/**
	 * Exports selection as assets required for cloud library.
	 * @param to The path to the export file.
	 */
	exportSelectionForCloudLibrary(to: File): boolean;

	/**
	 * Exports stroke styles or presets.
	 * @param to The file to save to
	 * @param strokeStyleList The list of stroke styles to save
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	exportStrokeStyles(to: File, strokeStyleList: StrokeStyle[], versionComments: string, forceSave?: boolean): void;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[];

	/**
	 * Returns the locale-independent string(s) from the internal string localization database that correspond to the specified string (in the current locale).
	 * @param for_ The string to search for.
	 */
	findKeyStrings(for_: string): string[];

	/**
	 * Finds objects that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findObject(reverseOrder: boolean): PageItem[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Generate schema for IDML.
	 * @param to The folder path of the schema.
	 * @param packageFormat If true, generate schema for package format (multiple files). Default value is false.
	 */
	generateIDMLSchema(to: File, packageFormat: boolean): void;

	/**
	 * Get all overlays.
	 * @param portraitDocumentForCheckingOverlays The portrait document for checking overlays.
	 * @param landscapeDocumentForCheckingOverlays The landscape document for checking overlays.
	 * @param miniFolioParams Options for exporting a mini folio. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	getAllOverlays(portraitDocumentForCheckingOverlays: Document, landscapeDocumentForCheckingOverlays: Document, miniFolioParams: any[]): any[];

	/**
	 * Get a JSON string for the CCX Welcome dialog.
	 * @param jsondata mode description
	 */
	getCCXUserJSONData(jsondata: string): string;

	/**
	 * Get the current digital publishing article version number for the given parameter.
	 * @param digpubArticleVersion Version string(s) to retrieve.
	 */
	getDigpubArticleVersion(digpubArticleVersion: DigpubArticleVersion): string[];

	/**
	 * Get the current digital publishing version number for the given parameter.
	 * @param digpubVersion Version string(s) to retrieve.
	 */
	getDigpubVersion(digpubVersion: DigpubVersion): string[];

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Application[];

	/**
	 * Get the resolution strategy for style conflict, false if the user cancels
	 * @param charOrParaStyle Style type to look at.
	 */
	getStyleConflictResolutionStrategy(charOrParaStyle: StyleType): any;

	/**
	 * Get the list of article viewer versions the digital publishing plugin supports.
	 */
	getSupportedArticleViewerVersions(): string[];

	/**
	 * Get the list of viewer versions the digital publishing plugin supports.
	 */
	getSupportedViewerVersions(): string[];

	/**
	 * Gets the count which will be used in the name of the next untitled document.
	 */
	getUntitledCount(): number;

	/**
	 * Gets the decision from the user to add the content of text frame or the complete story in case of threaded text frame.
	 */
	getUserChoiceForCloudTextAddition(): any;

	/**
	 * Imports a process color swatch from a preloaded Adobe color book.
	 * @param name The process color to load.
	 */
	importAdobeSwatchbookProcessColor(name: string): Color;

	/**
	 * Imports a spot color swatch from an Adobe color book.
	 * @param name The spot color to load.
	 */
	importAdobeSwatchbookSpotColor(name: string): Color;

	/**
	 * Imports presets from the specified file.
	 * @param format The type of preset to import.
	 * @param from The file to import presets from.
	 */
	importFile(format: ExportPresetFormat, from: File): void;

	/**
	 * Imports the specified styles.
	 * @param format The types of styles to import.
	 * @param from The file containing the styles you want to import.
	 * @param globalStrategy The resolution strategy to employ for imported styles that have the same names as existing styles.
	 */
	importStyles(format: ImportFormat, from: File, globalStrategy?: GlobalClashResolutionStrategy): void;

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Invokes InDesign's Color Picker.
	 * @param space Color space RGB, CMYK or LAB
	 * @param colorValue Color values
	 */
	invokeColorPicker(space: ColorSpace, colorValue: number[]): string;

	/**
	 * Whether the app is in touch mode or not.
	 */
	isAppInTouchMode(): boolean;

	/**
	 * Whether user has opted-in to share usage data.
	 */
	isUserSharingAppUsageData(): boolean;

	/**
	 * Load conditions from the specified file.
	 * @param from The path to the file that contains the conditions.
	 * @param loadConditionSets If true, load the condition sets as well.
	 */
	loadConditions(from: File, loadConditionSets: boolean): void;

	/**
	 * Loads the specified find/change query.
	 * @param queryName The query to load.
	 * @param searchMode The search mode.
	 */
	loadFindChangeQuery(queryName: string, searchMode: SearchModes): void;

	/**
	 * Load motion preset from the specified file.
	 * @param from The Flash motion preset file.
	 */
	loadMotionPreset(from: File): MotionPreset;

	/**
	 * Load preflight profile from the specified file.
	 * @param from The InDesign preflight profile file or InDesign document.
	 */
	loadPreflightProfile(from: File): PreflightProfile;

	/**
	 * Load swatches from the specified file.
	 * @param from The swatch file or InDesign document.
	 */
	loadSwatches(from: File): void;

	/**
	 * Loads a set of XML markup tags from the specified file.
	 * @param from The path to the file that contains the tags.
	 */
	loadXMLTags(from: File): void;

	/**
	 * Gets the memory statistics from the server.
	 */
	memoryStatistics(): any[];

	/**
	 * Mount a Version Cue project.
	 * @param serverURL The URL of the Version Cue server containing the project
	 * @param projectName The name of the Version Cue project to mount
	 */
	mountProject(serverURL: string, projectName: string): void;

	/**
	 * Opens the specified document, book, or library.
	 * @param from The file path(s) to the document, book, or library.
	 * @param showingWindow If true, opens the document in a window. If false, the document is opened but is not displayed in a window.
	 * @param openOption How to open the document.
	 */
	open(from: File | File[], showingWindow?: boolean, openOption?: OpenOptions): any;

	/**
	 * Opens the cloud library asset for editing.
	 * @param jsondata JSON encoded information about the asset to be edited.
	 */
	openCloudAssetForEdit(jsondata: string): boolean;

	/**
	 * Open the panel associated with the action.
	 * @param id The ID.
	 */
	openPanel(id: number): void;

	/**
	 * Package a folder into a UCF file.
	 * @param sourceFolder The folder to be packaged into an IDML file. Does not validate structure of the folder pursuant to the IDML spec. Caller is responsible for making sure the files in the folder are correctly organized.
	 * @param ucfFile The destination UCF file. Will be overwritten if it already exists.
	 * @param mimeMediaType The MIME media type, default value identifies package as IDML.
	 */
	packageUCF(sourceFolder: File, ucfFile: File, mimeMediaType?: string): void;

	/**
	 * Pastes data from the clipboard into the active document window.
	 */
	paste(): void;

	/**
	 * Pastes data from the clipboard into the active document window at the same position that the data held in its original document.
	 */
	pasteInPlace(): void;

	/**
	 * Pastes data from the clipboard into the selected object in the active document window.
	 */
	pasteInto(): void;

	/**
	 * Pastes data (minus formatting) from the clipboard into the active document window.
	 */
	pasteWithoutFormatting(): void;

	/**
	 * Gets the current value of the specified performance metric.
	 * @param for_ The status to get from InDesign.
	 */
	performanceMetric(for_: number | PerformanceMetricOptions): any;

	/**
	 * Gets the long name of the specified performance metric.
	 * @param for_ The status to get from InDesign.
	 */
	performanceMetricLongName(for_: number | PerformanceMetricOptions): string;

	/**
	 * Gets the short name of the specified performance metric.
	 * @param for_ The status to get from InDesign.
	 */
	performanceMetricShortName(for_: number | PerformanceMetricOptions): string;

	/**
	 * Place one or more files following the behavior of the place menu item. This may load the place gun or replace the selected object, depending on current preferences.
	 * @param fileName One or more files to place.
	 * @param showingOptions Whether to display the import options dialog
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File | File[], showingOptions?: boolean, withProperties?: object): void;

	/**
	 * Prints the specified file(s).
	 * @param from One or more file paths.
	 * @param printDialog Whether to invoke the print dialog
	 * @param using Printer preset to use.
	 * @param withGrids Whether to print grids
	 */
	print(from: File | File[], printDialog: boolean, using: PrinterPresetTypes | PrinterPreset, withGrids?: boolean): void;

	/**
	 * Quits the application.
	 * @param saving The option to use for saving changes to open documents before quitting.
	 */
	quit(saving?: SaveOptions): void;

	/**
	 * Redoes the last action.
	 */
	redo(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Remove the file from most recently used files
	 * @param to The file to be removed
	 */
	removeFileFromRecentFiles(to: File): boolean;

	/**
	 * Saves the specified find/change query.
	 * @param queryName The query to save.
	 * @param searchMode The search mode.
	 */
	saveFindChangeQuery(queryName: string, searchMode: SearchModes): void;

	/**
	 * Saves the specified swatch(es) to a swatchbook file.
	 * @param to The swatchbook file to save to.
	 * @param swatchList The swatch(es) to save.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	saveSwatches(to: File, swatchList: Swatch[], versionComments: string, forceSave?: boolean): void;

	/**
	 * Saves a set of tags to an external file.
	 * @param to The full path to the file in which to save the tags.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	saveXMLTags(to: File, versionComments: string, forceSave?: boolean): void;

	/**
	 * Selects the specified object(s).
	 * @param selectableItems The objects to select.
	 * @param existingSelection The selection status of the Application in relation to previously selected objects.
	 */
	select(selectableItems: object | object[] | NothingEnum | SelectAll, existingSelection?: SelectionOptions): void;

	/**
	 * Sets the application's preferences.
	 * @param applicationPreferences The IDML defaults file or enumeration.
	 */
	setApplicationPreferences(applicationPreferences: File | LanguageAndRegion): void;

	/**
	 * Set cloud libraries info.
	 * @param librariesCollectionInfo JSON encoded information about cloud libraries collection
	 */
	setCloudLibraryCollection(librariesCollectionInfo: string): void;

	/**
	 * Sets the export options for generation of a cloud asset.
	 * @param maxwidth The maximum width of the thumbnail generated in pixels.
	 * @param maxheight The maximum height of the thumbnail generated in pixels.
	 */
	setCloudLibraryOptions(maxwidth: number, maxheight: number): void;

	/**
	 * Sets the count which will be used in the name of the next untitled document.
	 * @param untitledCount The count to be used in the name of the next untitled document. Only positive values are expected
	 */
	setUntitledCount(untitledCount: number): void;

	/**
	 * Tile all document windows
	 */
	tileWindows(): void;

	/**
	 * Generates a string which, if executed, will return the Application.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Toggles the visibility of the entire panel system.
	 */
	togglePanelSystemVisibility(): void;

	/**
	 * Translates a key string into localized form based on current application locale.
	 * @param for_ The key string to translate
	 */
	translateKeyString(for_: string): string;

	/**
	 * Undoes the last action.
	 */
	undo(): void;

	/**
	 * Unpackage a UCF file into a folder structure.
	 * @param ucfFile The UCF file to be unpackaged.
	 * @param destinationFolder The folder where you would like the UCF file unpackaged to. Will be created if it does not exist.
	 */
	unpackageUCF(ucfFile: File, destinationFolder: File): void;

	/**
	 * Forces a check for new fonts in the various Fonts folders.
	 */
	updateFonts(): void;

	/**
	 * Waits for all the background tasks to finish.
	 */
	waitForAllTasks(): TaskState[];

}

/**
 * background task
 */
declare class BackgroundTask {
	/**
	 * The alerts encountered while running this task object. Can return: Array of Array of 2 TaskAlertType enumerators or Strings.
	 */
	readonly alerts: any[];

	/**
	 * The document name on which this task operates.
	 */
	readonly documentName: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the BackgroundTask.
	 */
	readonly id: number;

	/**
	 * The index of the BackgroundTask within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the BackgroundTask.
	 */
	readonly name: string;

	/**
	 * The parent of the BackgroundTask (a Application).
	 */
	readonly parent: Application;

	/**
	 * Progress information for this task.
	 */
	readonly percentDone: number;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The current status of this task object.
	 */
	readonly status: TaskState;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Cancels the specified background task.
	 */
	cancelTask(): void;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): BackgroundTask[];

	/**
	 * Queries for a particular property in the task metadata.
	 * @param name The task property being queried
	 */
	queryProperty(name: string): any;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the BackgroundTask.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Waits for the task to finish.
	 */
	waitForTask(): TaskState;

}

/**
 * A collection of background task objects.
 */
declare class BackgroundTasks {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the BackgroundTask with the specified index.
	 * @param index The index.
	 */
	[index: number]: BackgroundTask;

	/**
	 * Returns any BackgroundTask in the collection.
	 */
	anyItem(): BackgroundTask;

	/**
	 * Displays the number of elements in the BackgroundTask.
	 */
	count(): number;

	/**
	 * Returns every BackgroundTask in the collection.
	 */
	everyItem(): BackgroundTask[];

	/**
	 * Returns the first BackgroundTask in the collection.
	 */
	firstItem(): BackgroundTask;

	/**
	 * Returns the BackgroundTask with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): BackgroundTask;

	/**
	 * Returns the BackgroundTask with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): BackgroundTask;

	/**
	 * Returns the BackgroundTask with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): BackgroundTask;

	/**
	 * Returns the BackgroundTasks within the specified range.
	 * @param from The BackgroundTask, index, or name at the beginning of the range.
	 * @param to The BackgroundTask, index, or name at the end of the range.
	 */
	itemByRange(from: BackgroundTask | number | string, to: BackgroundTask | number | string): BackgroundTask[];

	/**
	 * Returns the last BackgroundTask in the collection.
	 */
	lastItem(): BackgroundTask;

	/**
	 * Returns the middle BackgroundTask in the collection.
	 */
	middleItem(): BackgroundTask;

	/**
	 * Returns the BackgroundTask whose index follows the specified BackgroundTask in the collection.
	 * @param obj The BackgroundTask whose index comes before the desired BackgroundTask.
	 */
	nextItem(obj: BackgroundTask): BackgroundTask;

	/**
	 * Returns the BackgroundTask with the index previous to the specified index.
	 * @param obj The index of the BackgroundTask that follows the desired BackgroundTask.
	 */
	previousItem(obj: BackgroundTask): BackgroundTask;

	/**
	 * Generates a string which, if executed, will return the BackgroundTask.
	 */
	toSource(): string;

}

/**
 * A document.
 */
declare class Document {
	/**
	 * Dispatched after the Document becomes active. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_ACTIVATE: string;

	/**
	 * Dispatched after a Document is exported. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_EXPORT: string;

	/**
	 * Dispatched after importing a file into a Document. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_IMPORT: string;

	/**
	 * Dispatched after one or more links in the Document have been added, deleted, or modified. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_LINKS_CHANGED: string;

	/**
	 * Dispatched after a Document is created. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_NEW: string;

	/**
	 * Dispatched after a Document is opened. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_OPEN: string;

	/**
	 * Dispatched after a Document is printed. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_PRINT: string;

	/**
	 * Dispatched after a Document is reverted. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_REVERT: string;

	/**
	 * Dispatched after a Document is saved. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_SAVE: string;

	/**
	 * Dispatched after a Document is saved under a new name. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_SAVE_AS: string;

	/**
	 * Dispatched after a copy of a Document is saved. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_SAVE_A_COPY: string;

	/**
	 * Dispatched before a Document is closed. This event bubbles. This event is not cancelable.
	 */
	static readonly BEFORE_CLOSE: string;

	/**
	 * Dispatched before the Document becomes inactive. This event bubbles. This event is not cancelable.
	 */
	static readonly BEFORE_DEACTIVATE: string;

	/**
	 * Dispatched before a Document is exported. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_EXPORT: string;

	/**
	 * Dispatched before importing a file into a Document. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_IMPORT: string;

	/**
	 * Dispatched before a Document is printed. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_PRINT: string;

	/**
	 * Dispatched before a Document is reverted. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_REVERT: string;

	/**
	 * Dispatched before a Document is saved. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_SAVE: string;

	/**
	 * Dispatched before a Document is saved under a new name. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_SAVE_AS: string;

	/**
	 * Dispatched before a copy of a Document is saved. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_SAVE_A_COPY: string;

	/**
	 * Dispatched after a Document export is canceled or fails. This event bubbles. This event is not cancelable.
	 */
	static readonly FAILED_EXPORT: string;

	/**
	 * If true, uses LAB alternates for spot colors when available.
	 */
	accurateLABSpots: boolean;

	/**
	 * The active layer.
	 */
	activeLayer: Layer | string;

	/**
	 * The active preflight process for this document.
	 */
	readonly activeProcess: PreflightProcess;

	/**
	 * Adjust layout preference settings.
	 */
	readonly adjustLayoutPreferences: AdjustLayoutPreference;

	/**
	 * The rendering intent for colors that result from transparency interactions on the page after blending.
	 */
	afterBlendingIntent: RenderingIntent;

	/**
	 * All Cell styles
	 */
	readonly allCellStyles: CellStyle[];

	/**
	 * Lists all character styles (regardless of their group).
	 */
	readonly allCharacterStyles: CharacterStyle[];

	/**
	 * Lists all graphics contained by the Document.
	 */
	readonly allGraphics: Graphic[];

	/**
	 * All object styles contained by the Document.
	 */
	readonly allObjectStyles: ObjectStyle[];

	/**
	 * Lists all page items contained by the Document.
	 */
	readonly allPageItems: PageItem[];

	/**
	 * Lists all paragraph styles (regardless of their group).
	 */
	readonly allParagraphStyles: ParagraphStyle[];

	/**
	 * All Table styles
	 */
	readonly allTableStyles: TableStyle[];

	/**
	 * Anchored object default settings.
	 */
	readonly anchoredObjectDefaults: AnchoredObjectDefault;

	/**
	 * Anchored object settings.
	 */
	readonly anchoredObjectSettings: AnchoredObjectSetting;

	/**
	 * A collection of articles.
	 */
	readonly articles: Articles;

	/**
	 * A collection of assignments.
	 */
	readonly assignments: Assignments;

	/**
	 * The XML element associated with the Document.
	 */
	readonly associatedXMLElement: XMLItem;

	/**
	 * Baseline frame grid option settings.
	 */
	readonly baselineFrameGridOptions: BaselineFrameGridOption;

	/**
	 * A collection of bookmarks.
	 */
	readonly bookmarks: Bookmarks;

	/**
	 * Button preference settings.
	 */
	readonly buttonPreferences: ButtonPreference;

	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * A collection of cell style groups.
	 */
	readonly cellStyleGroups: CellStyleGroups;

	/**
	 * A collection of cell style mappings.
	 */
	readonly cellStyleMappings: CellStyleMappings;

	/**
	 * A collection of cell styles.
	 */
	readonly cellStyles: CellStyles;

	/**
	 * Chapter numbering preferences.
	 */
	readonly chapterNumberPreferences: ChapterNumberPreference;

	/**
	 * A collection of char style mappings.
	 */
	readonly charStyleMappings: CharStyleMappings;

	/**
	 * A collection of character style groups.
	 */
	readonly characterStyleGroups: CharacterStyleGroups;

	/**
	 * A collection of character styles.
	 */
	readonly characterStyles: CharacterStyles;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * CJK grid preference settings.
	 */
	readonly cjkGridPreferences: CjkGridPreference;

	/**
	 * The policy for handling colors in a CMYK color model, including reading and embedding color profiles, mismatches between embedded color profiles and the working space, and moving colors from one document to another.
	 */
	cmykPolicy: ColorSettingsPolicy;

	/**
	 * The current CMYK profile.
	 */
	cmykProfile: string;

	/**
	 * A list of valid CMYK profiles.
	 */
	readonly cmykProfileList: string[];

	/**
	 * A collection of color groups.
	 */
	readonly colorGroups: ColorGroups;

	/**
	 * A collection of colors.
	 */
	readonly colors: Colors;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * A collection of composite fonts.
	 */
	readonly compositeFonts: CompositeFonts;

	/**
	 * A collection of condition sets for conditional text.
	 */
	readonly conditionSets: ConditionSets;

	/**
	 * Conditional text preferences.
	 */
	readonly conditionalTextPreferences: ConditionalTextPreference;

	/**
	 * A collection of conditions for conditional text.
	 */
	readonly conditions: Conditions;

	/**
	 * If true, the Document was converted.
	 */
	readonly converted: boolean;

	/**
	 * A collection of cross reference formats.
	 */
	readonly crossReferenceFormats: CrossReferenceFormats;

	/**
	 * A collection of cross reference text sources.
	 */
	readonly crossReferenceSources: CrossReferenceSources;

	/**
	 * A collection of dashed stroke styles.
	 */
	readonly dashedStrokeStyles: DashedStrokeStyles;

	/**
	 * A collection of data merge image placeholders.
	 */
	readonly dataMergeImagePlaceholders: DataMergeImagePlaceholders;

	/**
	 * The data merge option properties that define the data merge.
	 */
	readonly dataMergeOptions: DataMergeOption;

	/**
	 * Data merge properties that define data merge fields and preferences.
	 */
	readonly dataMergeProperties: DataMerge;

	/**
	 * A collection of data merge QR code placeholders.
	 */
	readonly dataMergeQrcodePlaceholders: DataMergeQrcodePlaceholders;

	/**
	 * A collection of data merge text placeholders.
	 */
	readonly dataMergeTextPlaceholders: DataMergeTextPlaceholders;

	/**
	 * The rendering intent for bitmap images.
	 */
	defaultImageIntent: RenderingIntent;

	/**
	 * User dictionary preference settings.
	 */
	readonly dictionaryPreferences: DictionaryPreference;

	/**
	 * Document preference settings.
	 */
	readonly documentPreferences: DocumentPreference;

	/**
	 * A collection of dotted stroke styles.
	 */
	readonly dottedStrokeStyles: DottedStrokeStyles;

	/**
	 * A collection of DTDs.
	 */
	readonly dtds: DTDs;

	/**
	 * The Version Cue editing state of the file.
	 */
	readonly editingState: EditingState;

	/**
	 * Endnote option settings.
	 */
	readonly endnoteOptions: EndnoteOption;

	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * EPub export preference settings.
	 */
	readonly epubExportPreferences: EPubExportPreference;

	/**
	 * EPub fixed layout export preference settings.
	 */
	readonly epubFixedLayoutExportPreferences: EPubFixedLayoutExportPreference;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The default export for web preferences.
	 */
	readonly exportForWebPreferences: ExportForWebPreference;

	/**
	 * The full path to the file.
	 */
	readonly filePath: File;

	/**
	 * A collection of fonts.
	 */
	readonly fonts: Fonts;

	/**
	 * Footnote option settings.
	 */
	readonly footnoteOptions: FootnoteOption;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * The frame fitting option to apply to placed or pasted content. Can be applied to a frame, object style, or document or to the application.
	 */
	readonly frameFittingOptions: FrameFittingOption;

	/**
	 * The full path to the Document, including the name of the Document.
	 */
	readonly fullName: File;

	/**
	 * Galley preference settings.
	 */
	readonly galleyPreferences: GalleyPreference;

	/**
	 * A collection of gradients.
	 */
	readonly gradients: Gradients;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * Grid preference settings.
	 */
	readonly gridPreferences: GridPreference;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * Guide preference settings.
	 */
	readonly guidePreferences: GuidePreference;

	/**
	 * A collection of guides.
	 */
	readonly guides: Guides;

	/**
	 * HTML export preference settings.
	 */
	readonly htmlExportPreferences: HTMLExportPreference;

	/**
	 * HTML FXL export preference settings.
	 */
	readonly htmlFXLExportPreferences: HTMLFXLExportPreference;

	/**
	 * A collection of hyperlink external page destinations.
	 */
	readonly hyperlinkExternalPageDestinations: HyperlinkExternalPageDestinations;

	/**
	 * A collection of hyperlink page destinations.
	 */
	readonly hyperlinkPageDestinations: HyperlinkPageDestinations;

	/**
	 * A collection of hyperlink page item sources.
	 */
	readonly hyperlinkPageItemSources: HyperlinkPageItemSources;

	/**
	 * A collection of hyperlink text destinations.
	 */
	readonly hyperlinkTextDestinations: HyperlinkTextDestinations;

	/**
	 * A collection of hyperlink text sources.
	 */
	readonly hyperlinkTextSources: HyperlinkTextSources;

	/**
	 * A collection of hyperlink URL destinations.
	 */
	readonly hyperlinkURLDestinations: HyperlinkURLDestinations;

	/**
	 * A collection of hyperlinks.
	 */
	readonly hyperlinks: Hyperlinks;

	/**
	 * A collection of hyphenation exceptions lists.
	 */
	readonly hyphenationExceptions: HyphenationExceptions;

	/**
	 * The unique ID of the Document.
	 */
	readonly id: number;

	/**
	 * The index of the Document within its containing object.
	 */
	readonly index: number;

	/**
	 * The index options properties that define how an index is formatted.
	 */
	readonly indexGenerationOptions: IndexOptions;

	/**
	 * A collection of indexes.
	 */
	readonly indexes: Indexes;

	/**
	 * A collection of indexing sort options.
	 */
	readonly indexingSortOptions: IndexingSortOptions;

	/**
	 * A collection of inks.
	 */
	readonly inks: Inks;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A collection of kinsoku tables.
	 */
	readonly kinsokuTables: KinsokuTables;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * A collection of languages.
	 */
	readonly languages: Languages;

	/**
	 * A collection of layers.
	 */
	readonly layers: Layers;

	/**
	 * Default properties specific to layout grids.
	 */
	readonly layoutGridData: LayoutGridDataInformation;

	/**
	 * A collection of layout windows.
	 */
	readonly layoutWindows: LayoutWindows;

	/**
	 * Linked Page Item options
	 */
	readonly linkedPageItemOptions: LinkedPageItemOption;

	/**
	 * Linked story options
	 */
	readonly linkedStoryOptions: LinkedStoryOption;

	/**
	 * A collection of links.
	 */
	readonly links: Links;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * Margin preference settings.
	 */
	readonly marginPreferences: MarginPreference;

	/**
	 * A collection of master spreads.
	 */
	readonly masterSpreads: MasterSpreads;

	/**
	 * Metadata preference settings.
	 */
	readonly metadataPreferences: MetadataPreference;

	/**
	 * A collection of mixed ink groups.
	 */
	readonly mixedInkGroups: MixedInkGroups;

	/**
	 * A collection of mixed inks.
	 */
	readonly mixedInks: MixedInks;

	/**
	 * If true, the Document has been modified since it was last saved.
	 */
	readonly modified: boolean;

	/**
	 * A collection of mojikumi tables.
	 */
	readonly mojikumiTables: MojikumiTables;

	/**
	 * Mojikumi user interface preference settings.
	 */
	readonly mojikumiUIPreferences: MojikumiUiPreference;

	/**
	 * A collection of Motion presets.
	 */
	readonly motionPresets: MotionPresets;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * The name of the Document.
	 */
	name: string;

	/**
	 * A collection of named grids.
	 */
	readonly namedGrids: NamedGrids;

	/**
	 * A collection of numbered lists.
	 */
	readonly numberingLists: NumberingLists;

	/**
	 * A collection of object style groups.
	 */
	readonly objectStyleGroups: ObjectStyleGroups;

	/**
	 * A collection of object styles.
	 */
	readonly objectStyles: ObjectStyles;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The default page item formatting for the Document.
	 */
	readonly pageItemDefaults: PageItemDefault;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of pages.
	 */
	readonly pages: Pages;

	/**
	 * A collection of para style mappings.
	 */
	readonly paraStyleMappings: ParaStyleMappings;

	/**
	 * A collection of paragraph destinations.
	 */
	readonly paragraphDestinations: ParagraphDestinations;

	/**
	 * A collection of paragraph style groups.
	 */
	readonly paragraphStyleGroups: ParagraphStyleGroups;

	/**
	 * A collection of paragraph styles.
	 */
	readonly paragraphStyles: ParagraphStyles;

	/**
	 * The parent of the Document (a Application).
	 */
	readonly parent: Application;

	/**
	 * Pasteboard preference settings.
	 */
	readonly pasteboardPreferences: PasteboardPreference;

	/**
	 * A collection of PDF comment objects
	 */
	readonly pdfComments: PDFComments;

	/**
	 * The place gun.
	 */
	readonly placeGuns: PlaceGun;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Preflight option settings.
	 */
	readonly preflightOptions: PreflightOption;

	/**
	 * A collection of preflight profiles.
	 */
	readonly preflightProfiles: PreflightProfiles;

	/**
	 * Booklet printing options.
	 */
	readonly printBookletOptions: PrintBookletOption;

	/**
	 * Print booklet preferences.
	 */
	readonly printBookletPrintPreferences: PrintBookletPrintPreference;

	/**
	 * Print preference settings.
	 */
	readonly printPreferences: PrintPreference;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Publish export preference settings.
	 */
	readonly publishExportPreferences: PublishExportPreference;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * If true, the Document is read-only.
	 */
	readonly readOnly: boolean;

	/**
	 * If true, the Document was recovered.
	 */
	readonly recovered: boolean;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * The names of the items in the redo stack.
	 */
	readonly redoHistory: string[];

	/**
	 * The name of the action on the top of the redo stack.
	 */
	readonly redoName: string;

	/**
	 * The policy for handling colors in an RGB color model, including reading and embedding color profiles, handling mismatches between embedded color profiles and the working space, and moving colors from one document to another.
	 */
	rgbPolicy: ColorSettingsPolicy;

	/**
	 * The current RGB profile.
	 */
	rgbProfile: string;

	/**
	 * A list of valid RGB profiles.
	 */
	readonly rgbProfileList: string[];

	/**
	 * If true, the Document has been saved since it was created.
	 */
	readonly saved: boolean;

	/**
	 * A collection of sections.
	 */
	readonly sections: Sections;

	/**
	 * The selected page item(s).
	 */
	readonly selectedPageItems: object[] | object | NothingEnum;

	/**
	 * The selected object(s).
	 */
	selection: object[] | object | NothingEnum;

	/**
	 * The key object of the selection.
	 */
	selectionKeyObject: PageItem | NothingEnum;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * The rendering intent for all vector art (areas of solid color) in native objects.
	 */
	solidColorIntent: RenderingIntent;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of spreads.
	 */
	readonly spreads: Spreads;

	/**
	 * A collection of stories.
	 */
	readonly stories: Stories;

	/**
	 * Default properties specific to frame grids.
	 */
	readonly storyGridData: StoryGridDataInformation;

	/**
	 * Story preference settings.
	 */
	readonly storyPreferences: StoryPreference;

	/**
	 * A collection of story windows.
	 */
	readonly storyWindows: StoryWindows;

	/**
	 * A collection of striped stroke styles.
	 */
	readonly stripedStrokeStyles: StripedStrokeStyles;

	/**
	 * A collection of stroke styles.
	 */
	readonly strokeStyles: StrokeStyles;

	/**
	 * A collection of swatches.
	 */
	readonly swatches: Swatches;

	/**
	 * A collection of table style groups.
	 */
	readonly tableStyleGroups: TableStyleGroups;

	/**
	 * A collection of table style mappings.
	 */
	readonly tableStyleMappings: TableStyleMappings;

	/**
	 * A collection of table styles.
	 */
	readonly tableStyles: TableStyles;

	/**
	 * Tagged PDF preferences.
	 */
	readonly taggedPDFPreferences: TaggedPDFPreference;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * Text default settings.
	 */
	readonly textDefaults: TextDefault;

	/**
	 * Text frame preference settings.
	 */
	readonly textFramePreferences: TextFramePreference;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * Text preference settings.
	 */
	readonly textPreferences: TextPreference;

	/**
	 * A collection of text variables.
	 */
	readonly textVariables: TextVariables;

	/**
	 * The text wrap preference properties that define the default formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;

	/**
	 * A collection of tints.
	 */
	readonly tints: Tints;

	/**
	 * A collection of TOC styles.
	 */
	readonly tocStyles: TOCStyles;

	/**
	 * Transparency preference settings.
	 */
	readonly transparencyPreferences: TransparencyPreference;

	/**
	 * A collection of trap presets.
	 */
	readonly trapPresets: TrapPresets;

	/**
	 * The names of the items in the undo stack.
	 */
	readonly undoHistory: string[];

	/**
	 * The name of the action on the top of the undo stack.
	 */
	readonly undoName: string;

	/**
	 * The swatches that are not being used.
	 */
	readonly unusedSwatches: Swatch[];

	/**
	 * A collection of XML validation errors.
	 */
	readonly validationErrors: ValidationErrors;

	/**
	 * The Version Cue version state of the file.
	 */
	readonly versionState: VersionState;

	/**
	 * View preference settings.
	 */
	readonly viewPreferences: ViewPreference;

	/**
	 * If true, the Document is visible.
	 */
	readonly visible: boolean;

	/**
	 * Watermark preferences
	 */
	readonly watermarkPreferences: WatermarkPreference;

	/**
	 * A collection of windows.
	 */
	readonly windows: Windows;

	/**
	 * A collection of XML comments.
	 */
	readonly xmlComments: XMLComments;

	/**
	 * A collection of XML elements.
	 */
	readonly xmlElements: XMLElements;

	/**
	 * A collection of XML export maps.
	 */
	readonly xmlExportMaps: XMLExportMaps;

	/**
	 * XML export preference settings.
	 */
	readonly xmlExportPreferences: XMLExportPreference;

	/**
	 * A collection of XML import maps.
	 */
	readonly xmlImportMaps: XMLImportMaps;

	/**
	 * XML import preference settings.
	 */
	readonly xmlImportPreferences: XMLImportPreference;

	/**
	 * A collection of XML instructions.
	 */
	readonly xmlInstructions: XMLInstructions;

	/**
	 * A collection of XML items.
	 */
	readonly xmlItems: XMLItems;

	/**
	 * The XML preference settings.
	 */
	readonly xmlPreferences: XMLPreference;

	/**
	 * A collection of xml stories.
	 */
	readonly xmlStories: XmlStories;

	/**
	 * A collection of XML tags.
	 */
	readonly xmlTags: XMLTags;

	/**
	 * XML view preference settings.
	 */
	readonly xmlViewPreferences: XMLViewPreference;

	/**
	 * The ruler origin, specified as page coordinates in the format [x, y].
	 */
	zeroPoint: (number | string)[];

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Adjust the existing layout according to new page size, bleed and margin values. The first parameter is a plain object with key value pairs for properties affected. Permissible keys are width, height, bleedInside, bleedTop, bleedOutside, bleedBottom, leftMargin, topMargin, rightMargin, bottomMargin. The values can be specified as decimal numbers in units of Pt or as a string having a measurement value such as '1 in'. Not all properties need to be specified, only the values that need updation. Notice that when dealing with individual pages rather than the whole document, bleed changes has no effect. E.g. - app.activeDocument.adjustLayout({width:'600px', leftMargin: '1in'}), app.activeDocument.adjustLayout({rightMargin:'1in'}, app.activeDocument.spreads[0].pages), app.activeDocument.spreads[0].pages[0].adjustLayout({width:'400px', leftMargin: '10px'})
	 * @param adoptTo Change values - see functin definition for details
	 * @param affectedPages The collection of Page objects to affect . Has no effect if function is called from Page (Optional)
	 */
	adjustLayout(adoptTo: object, affectedPages: Page[]): void;

	/**
	 * Align page items.
	 * @param alignDistributeItems The page items to align or distribute.
	 * @param alignOption The type of alignment to apply.
	 * @param alignDistributeBounds The bounds within which to align or distribute the page items.
	 * @param reference The reference or key object to align to distribute relative to. Required when 'align distribute bounds' specifies 'key object'.
	 */
	align(alignDistributeItems: PageItem[], alignOption: AlignOptions, alignDistributeBounds: AlignDistributeBounds, reference: PageItem): void;

	/**
	 * Asynchronously exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param withGrids If true, exports the grids.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	asynchronousExportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, withGrids?: boolean, versionComments?: string, forceSave?: boolean): BackgroundTask;

	/**
	 * Change comoser to optyca
	 */
	changeComposer(): void;

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds objects that match the find what value and replace the objects with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeObject(reverseOrder: boolean): PageItem[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Check in to Version Cue.
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	checkIn(versionComments: string, forceSave?: boolean): void;

	/**
	 * Removes the frame fittings options and resets it to the initial state.
	 */
	clearFrameFittingOptions(): void;

	/**
	 * Close the Document
	 * @param saving Whether to save changes before closing the Document
	 * @param savingIn The file in which to save the Document
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	close(saving?: SaveOptions, savingIn?: File, versionComments?: string, forceSave?: boolean): void;

	/**
	 * Transforms color values
	 * @param colorValue source color value
	 * @param sourceColorSpace source color space
	 * @param destinationColorSpace destination color space
	 */
	colorTransform(colorValue: number[], sourceColorSpace: ColorSpace, destinationColorSpace: ColorSpace): number[];

	/**
	 * Creates an alternate layout for a given list of spreads.
	 * @param spreadItems The spreads to create an alternate layout for.
	 * @param name The name of the alternate layout. Note: This is used for the named layout for the new section for the duplicated spreads.
	 * @param width The width of the pages created.
	 * @param height The height of the pages created.
	 * @param createTextStyles Whether to create new text styles.
	 * @param linkTextStories Whether to create linked text for duplicated text stories.
	 * @param layoutRule What layout rule to set on the pages.
	 */
	createAlternateLayout(spreadItems: Spread[], name: string, width: number | string, height: number | string, createTextStyles: boolean, linkTextStories: boolean, layoutRule: LayoutRuleOptions): void;

	/**
	 * Create Email QR Code on the page item or document
	 * @param emailAddress QR code Email Address
	 * @param subject QR code Email Subject
	 * @param body QR code Email Body Message
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Document. Above parameters can also be passed as properties
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param urlLink QR code Hyperlink URL
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Document. Above parameters can also be passed as properties
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Create a missing font object.
	 * @param fontFamily The name of the font family
	 * @param fontStyleName The name of the font style.
	 * @param postscriptName The PostScript name of the font.
	 */
	createMissingFontObject(fontFamily: string, fontStyleName: string, postscriptName: string): Font;

	/**
	 * Create Plain Text QR Code on the page item
	 * @param plainText QR code Plain Text
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Document. Above parameters can also be passed as properties
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Creates a table of contents.
	 * @param using The TOC style to use to define the content, title, and format of the table of contents.
	 * @param replacing If true, replaces the existing TOC.
	 * @param fromBook The book whose documents to include in the TOC.
	 * @param placePoint The point at which to place the TOC story, specified as page coordinates in the format [x, y].
	 * @param includeOverset If true, includes overset text TOC entries in the TOC.
	 * @param destinationLayer The layer on which to place the TOC.
	 */
	createTOC(using: TOCStyle, replacing?: boolean, fromBook?: Book, placePoint?: (number | string)[], includeOverset?: boolean, destinationLayer?: Layer): Story[];

	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param cellNumber QR code Text Phone Number
	 * @param textMessage QR code Text Message
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Document. Above parameters can also be passed as properties
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Create Business Card QR Code on the page item or load on document's placegun
	 * @param firstName QR code Business Card First Name
	 * @param lastName QR code Business Card Last Name
	 * @param jobTitle QR code Business Card Title
	 * @param cellPhone QR code Business Card Cell Phone Number
	 * @param phone QR code Business Card Phone Number
	 * @param email QR code Business Card Email Address
	 * @param organisation QR code Business Card Organisation
	 * @param streetAddress QR code Business Card Street Address
	 * @param city QR code Business Card City
	 * @param adrState QR code Business Card State
	 * @param country QR code Business Card Country
	 * @param postalCode QR code Business Card Postal Code
	 * @param website QR code Business Card URL
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Document. Above parameters can also be passed as properties
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Deletes an alternate layout.
	 * @param name The name of the alternate layout to delete.
	 */
	deleteAlternateLayout(name: string): void;

	/**
	 * Deletes unused XML markup tags.
	 */
	deleteUnusedTags(): void;

	/**
	 * Distribute page items.
	 * @param alignDistributeItems The page items to align or distribute
	 * @param distributeOption The type of distribution to apply.
	 * @param alignDistributeBounds The bounds within which to align or distribute the page items.
	 * @param useDistributeMeasurement If true, distribute space between page items. When this property is true, the bounds setting is ignored.
	 * @param absoluteDistributeMeasurement The distance to use when distributing page items. Required when 'align distribute bounds' specifies 'key object'.
	 * @param reference The reference or key object to align to distribute relative to. Required when 'align distribute bounds' specifies 'key object'.
	 */
	distribute(alignDistributeItems: PageItem[], distributeOption: DistributeOptions, alignDistributeBounds: AlignDistributeBounds, useDistributeMeasurement: boolean, absoluteDistributeMeasurement: number | string, reference: PageItem): void;

	/**
	 * Embed this profile to the document.
	 * @param using The preflight profile to embed.
	 */
	embed(using: string | PreflightProfile): PreflightProfile;

	/**
	 * Exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param withGrids If true, exports the grids.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	exportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, withGrids?: boolean, versionComments?: string, forceSave?: boolean): void;

	/**
	 * Exports as assets required for cloud library.
	 * @param jsondata JSON encoded information about the export.
	 */
	exportForCloudLibrary(jsondata: string): boolean;

	/**
	 * Exports selected page items to snippet on the destination file path.
	 * @param to The path to the export file.
	 */
	exportPageItemsSelectionToSnippet(to: File): void;

	/**
	 * Exports input page item ids to snippet on the destination file path.
	 * @param to The path to the export file.
	 * @param pageItemIds The array of the page item ids.
	 */
	exportPageItemsToSnippet(to: File, pageItemIds: number[]): void;

	/**
	 * Exports stroke styles or presets.
	 * @param to The file to save to
	 * @param strokeStyleList The list of stroke styles to save
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	exportStrokeStyles(to: File, strokeStyleList: StrokeStyle[], versionComments: string, forceSave?: boolean): void;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds objects that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findObject(reverseOrder: boolean): PageItem[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[];

	/**
	 * This will return an array of structs containing information about the alternate layouts.
	 * @param resolveMaster Resolves layout policy if setting is "use master" - default is true.
	 */
	getAlternateLayoutsForFolio(resolveMaster: boolean): any[];

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Document[];

	/**
	 * Selected text direction
	 */
	getSelectedTextDirection(): TextDirection;

	/**
	 * Get the resolution strategy for style conflict, false if the user cancels
	 * @param charOrParaStyle Style type to look at.
	 */
	getStyleConflictResolutionStrategy(charOrParaStyle: StyleType): any;

	/**
	 * Imports a process color swatch from a preloaded Adobe color book.
	 * @param name The process color to load.
	 */
	importAdobeSwatchbookProcessColor(name: string): Color;

	/**
	 * Imports a spot color swatch from an Adobe color book.
	 * @param name The spot color to load.
	 */
	importAdobeSwatchbookSpotColor(name: string): Color;

	/**
	 * Imports a DTD to use for validation.
	 * @param from The path to the DTD file.
	 */
	importDtd(from: File): void;

	/**
	 * Imports the cross reference formats from specified file.
	 * @param from The file whose formats to import.
	 */
	importFormats(from: File): void;

	/**
	 * Import Commemnts from PDF
	 * @param from The PDF File from which you want to import comments.
	 * @param withProperties Initial values for properties of the new Document
	 */
	importPdfComments(from: File, withProperties: object): void;

	/**
	 * Imports the specified styles.
	 * @param format The types of styles to import.
	 * @param from The file containing the styles you want to import.
	 * @param globalStrategy The resolution strategy to employ for imported styles that have the same names as existing styles.
	 */
	importStyles(format: ImportFormat, from: File, globalStrategy?: GlobalClashResolutionStrategy): void;

	/**
	 * Imports the specified XML file into an InDesign document.
	 * @param from The XML file.
	 */
	importXML(from: File): void;

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Load conditions from the specified file.
	 * @param from The path to the file that contains the conditions.
	 * @param loadConditionSets If true, load the condition sets as well.
	 */
	loadConditions(from: File, loadConditionSets: boolean): void;

	/**
	 * Load masterpages from an InDesign file.
	 * @param from The InDesign file to load the masters from.
	 * @param globalStrategyForMasterPage the global clash resolution strategy for load master page
	 */
	loadMasters(from: File, globalStrategyForMasterPage?: GlobalClashResolutionStrategyForMasterPage): void;

	/**
	 * Load swatches from the specified file.
	 * @param from The swatch file or InDesign document.
	 */
	loadSwatches(from: File): void;

	/**
	 * Loads a set of XML markup tags from the specified file.
	 * @param from The path to the file that contains the tags.
	 */
	loadXMLTags(from: File): void;

	/**
	 * Auto tag the document based on the style to tag mappings
	 */
	mapStylesToXMLTags(): void;

	/**
	 * Auto style the document based on the tag to style mappings
	 */
	mapXMLTagsToStyles(): void;

	/**
	 * Packages the document.
	 * @param to The folder, alias, or path in which to place the packaged files.
	 * @param copyingFonts If true, copies fonts used in the document to the package folder.
	 * @param copyingLinkedGraphics If true, copies linked graphics files to the package folder.
	 * @param copyingProfiles If true, copies color profiles to the package folder.
	 * @param updatingGraphics If true, updates graphics links to the package folder.
	 * @param includingHiddenLayers If true, copies fonts and links from hidden layers to the package.
	 * @param ignorePreflightErrors If true, ignores preflight errors and proceeds with the packaging. If false, cancels the packaging when errors exist.
	 * @param creatingReport If true, creates a package report that includes printing instructions, print settings, lists of fonts, links and required inks, and other information.
	 * @param includeIdml If true, generates and includes IDML in the package folder.
	 * @param includePdf If true, generates and includes PDF in the package folder.
	 * @param pdfStyle If specified and PDF is to be included, use this style for PDF export if it is valid, otherwise use the last used PDF preset.
	 * @param useDocumentHyphenationExceptionsOnly If this option is selected, InDesign flags this document so that it does not reflow when someone else opens or edits it on a computer that has different hyphenation and dictionary settings.
	 * @param versionComments The comments for the version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	packageForPrint(to: File, copyingFonts: boolean, copyingLinkedGraphics: boolean, copyingProfiles: boolean, updatingGraphics: boolean, includingHiddenLayers: boolean, ignorePreflightErrors: boolean, creatingReport: boolean, includeIdml: boolean, includePdf: boolean, pdfStyle: string, useDocumentHyphenationExceptionsOnly: boolean, versionComments: string, forceSave?: boolean): boolean;

	/**
	 * Place one or more files following the behavior of the place menu item. This may load the place gun or replace the selected object, depending on current preferences.
	 * @param fileName One or more files to place.
	 * @param showingOptions Whether to display the import options dialog
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File | File[], showingOptions?: boolean, withProperties?: object): void;

	/**
	 * Deprecated: Use ContentPlacerObject load method. Original Description: Place following the behavior of the place and link story menu item. This will load the place gun.
	 * @param parentStory The story to place and link from.
	 * @param showingOptions Whether to display the link options dialog
	 */
	placeAndLink(parentStory: Story, showingOptions?: boolean): void;

	/**
	 * place a cloud asset on the document
	 * @param jsondata JSON data containing metadata about the cloud asset
	 */
	placeCloudAsset(jsondata: string): void;

	/**
	 * Prints the Document(s).
	 * @param printDialog Whether to invoke the print dialog
	 * @param using Printer preset to use.
	 * @param withGrids Whether to print grids
	 */
	print(printDialog: boolean, using: PrinterPresetTypes | PrinterPreset, withGrids?: boolean): void;

	/**
	 * Print the Booklet using current document and Booklet and Print settings in the document
	 * @param printBookletDialog Whether to invoke the print booklet dialog
	 * @param using Printer preset to use.
	 */
	printBooklet(printBookletDialog?: boolean, using?: PrinterPresetTypes | PrinterPreset): void;

	/**
	 * Recomposes the text in the Document.
	 */
	recompose(): void;

	/**
	 * Redoes the last action.
	 */
	redo(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Resets all the buttons to their Normal state.
	 */
	resetAllButtons(): void;

	/**
	 * Resets all the multi-state objects to their first state.
	 */
	resetAllMultiStateObjects(): void;

	/**
	 * Reverts the document to its state at the last save operation.
	 */
	revert(): boolean;

	/**
	 * Reverts to the version of the document in Version Cue.
	 * @param forceRevert Forcibly reverts to the project version.
	 */
	revertToProject(forceRevert?: boolean): void;

	/**
	 * Save the document
	 * @param to Where to save the document. If the document is already saved, a copy is saved at this path, the original file is closed the new copy is opened
	 * @param stationery Whether to save the file as stationery
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	save(to: File, stationery?: boolean, versionComments?: string, forceSave?: boolean): Document;

	/**
	 * Saves a copy of the document.
	 * @param to The file path for the copy. Note: Leaves the original document open and does not open the copy.
	 * @param stationery If true, saves the file as stationery (Mac OS) or as a template (Windows). Note: The file extension for stationery and templates is different than the extension for regular files.
	 */
	saveACopy(to: File, stationery?: boolean): void;

	/**
	 * Saves the specified swatch(es) to a swatchbook file.
	 * @param to The swatchbook file to save to.
	 * @param swatchList The swatch(es) to save.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	saveSwatches(to: File, swatchList: Swatch[], versionComments: string, forceSave?: boolean): void;

	/**
	 * Saves a set of tags to an external file.
	 * @param to The full path to the file in which to save the tags.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	saveXMLTags(to: File, versionComments: string, forceSave?: boolean): void;

	/**
	 * Selects the specified object(s).
	 * @param selectableItems The objects to select.
	 * @param existingSelection The selection status of the Document in relation to previously selected objects.
	 */
	select(selectableItems: object | object[] | NothingEnum | SelectAll, existingSelection?: SelectionOptions): void;

	/**
	 * Synchronizes the file with the Version Cue project.
	 * @param syncConflictResolution The conflict resolution method to use during synchronization.
	 * @param versionComments The comments that describe the version.
	 */
	synchronizeWithVersionCue(syncConflictResolution?: SyncConflictResolution, versionComments?: string): VersionCueSyncStatus;

	/**
	 * Generates a string which, if executed, will return the Document.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Undoes the last action.
	 */
	undo(): void;

	/**
	 * Updates cross references' text source content in the document.
	 */
	updateCrossReferences(): void;

}

/**
 * A collection of documents.
 */
declare class Documents {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Document with the specified index.
	 * @param index The index.
	 */
	[index: number]: Document;

	/**
	 * Creates a new document.
	 * @param showingWindow If true, displays the document.
	 * @param documentPreset The document preset to use.
	 * @param withProperties Initial values for properties of the new Document
	 */
	add(showingWindow?: boolean, documentPreset?: DocumentPreset, withProperties?: object): Document;

	/**
	 * Returns any Document in the collection.
	 */
	anyItem(): Document;

	/**
	 * Displays the number of elements in the Document.
	 */
	count(): number;

	/**
	 * Returns every Document in the collection.
	 */
	everyItem(): Document[];

	/**
	 * Returns the first Document in the collection.
	 */
	firstItem(): Document;

	/**
	 * Returns the Document with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Document;

	/**
	 * Returns the Document with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Document;

	/**
	 * Returns the Document with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Document;

	/**
	 * Returns the Documents within the specified range.
	 * @param from The Document, index, or name at the beginning of the range.
	 * @param to The Document, index, or name at the end of the range.
	 */
	itemByRange(from: Document | number | string, to: Document | number | string): Document[];

	/**
	 * Returns the last Document in the collection.
	 */
	lastItem(): Document;

	/**
	 * Returns the middle Document in the collection.
	 */
	middleItem(): Document;

	/**
	 * Returns the Document whose index follows the specified Document in the collection.
	 * @param obj The Document whose index comes before the desired Document.
	 */
	nextItem(obj: Document): Document;

	/**
	 * Returns the Document with the index previous to the specified index.
	 * @param obj The index of the Document that follows the desired Document.
	 */
	previousItem(obj: Document): Document;

	/**
	 * Generates a string which, if executed, will return the Document.
	 */
	toSource(): string;

}

/**
 * A window.
 */
declare class Window {
	/**
	 * Dispatched after the Window becomes active. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_ACTIVATE: string;

	/**
	 * Dispatched when the value of a property changes on this Window. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_ATTRIBUTE_CHANGED: string;

	/**
	 * Dispatched when a Window is closing. Since the close has been committed, it can no longer be canceled. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_CLOSE: string;

	/**
	 * Dispatched after a Window is opened. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_OPEN: string;

	/**
	 * Dispatched after an attribute on the active selection changes. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_SELECTION_ATTRIBUTE_CHANGED: string;

	/**
	 * Dispatched after the active selection changes. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_SELECTION_CHANGED: string;

	/**
	 * Dispatched before a Window is closed. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_CLOSE: string;

	/**
	 * Dispatched before the Window becomes inactive. This event bubbles. This event is not cancelable.
	 */
	static readonly BEFORE_DEACTIVATE: string;

	/**
	 * The bounds of the window (specified in pixels) in the form [top, left, bottom, right].
	 */
	bounds: number[];

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the Window within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the Window.
	 */
	readonly name: string;

	/**
	 * The parent of the Window (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The selected object(s).
	 */
	selection: object[] | object | NothingEnum;

	/**
	 * The key object of the selection.
	 */
	selectionKeyObject: PageItem | NothingEnum;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Brings the object to the front.
	 */
	bringToFront(): void;

	/**
	 * Closes the Window.
	 */
	close(): void;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Window[];

	/**
	 * Maximizes the window.
	 */
	maximize(): void;

	/**
	 * Minimizes the window.
	 */
	minimize(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Restores the window.
	 */
	restore(): void;

	/**
	 * Selects the specified object(s).
	 * @param selectableItems The objects to select.
	 * @param existingSelection The selection status of the Window in relation to previously selected objects.
	 */
	select(selectableItems: object | object[] | NothingEnum | SelectAll, existingSelection?: SelectionOptions): void;

	/**
	 * Generates a string which, if executed, will return the Window.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of windows.
 */
declare class Windows {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Window with the specified index.
	 * @param index The index.
	 */
	[index: number]: Window;

	/**
	 * Creates a new Window.
	 * @param withProperties Initial values for properties of the new Window
	 */
	add(withProperties: object): Window;

	/**
	 * Returns any Window in the collection.
	 */
	anyItem(): Window;

	/**
	 * Displays the number of elements in the Window.
	 */
	count(): number;

	/**
	 * Returns every Window in the collection.
	 */
	everyItem(): Window[];

	/**
	 * Returns the first Window in the collection.
	 */
	firstItem(): Window;

	/**
	 * Returns the Window with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Window;

	/**
	 * Returns the Window with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Window;

	/**
	 * Returns the Windows within the specified range.
	 * @param from The Window, index, or name at the beginning of the range.
	 * @param to The Window, index, or name at the end of the range.
	 */
	itemByRange(from: Window | number | string, to: Window | number | string): Window[];

	/**
	 * Returns the last Window in the collection.
	 */
	lastItem(): Window;

	/**
	 * Returns the middle Window in the collection.
	 */
	middleItem(): Window;

	/**
	 * Returns the Window whose index follows the specified Window in the collection.
	 * @param obj The Window whose index comes before the desired Window.
	 */
	nextItem(obj: Window): Window;

	/**
	 * Returns the Window with the index previous to the specified index.
	 * @param obj The index of the Window that follows the desired Window.
	 */
	previousItem(obj: Window): Window;

	/**
	 * Generates a string which, if executed, will return the Window.
	 */
	toSource(): string;

}

/**
 * A layout window.
 */
declare class LayoutWindow extends Window {
	/**
	 * The active layer.
	 */
	activeLayer: Layer | string;

	/**
	 * The front-most page.
	 */
	activePage: Page;

	/**
	 * The front-most spread.
	 */
	activeSpread: Spread | MasterSpread;

	/**
	 * If true, display a simulation of overprinting.
	 */
	overprintPreview: boolean;

	/**
	 * If true, leaves color values unchanged for CMYK objects without embedded profiles and native objects such as line art or type. Note: Converts images whose profiles differ from the profile of the simulated device. Valid only when proofing type is custom.
	 */
	preserveColorNumbers: boolean;

	/**
	 * The profile used for proofing colors.
	 */
	proofingProfile: string;

	/**
	 * The method of proofing colors.
	 */
	proofingType: ProofingType;

	/**
	 * The screen mode for layout view.
	 */
	screenMode: ScreenModeOptions;

	/**
	 * If true, simulates the dark gray produced by many printers in place of solid black, according to the proofing profile. Note: Valid only when proofing type is custom.
	 */
	simulateInkBlack: boolean;

	/**
	 * If true, simulates the dingy white of real paper, according to the proofing profile. Note: Valid only when proofing type is custom.
	 */
	simulatePaperWhite: boolean;

	/**
	 * The default anchor point around which to transform objects.
	 */
	transformReferencePoint: AnchorPoint | [number | string, number | string];

	/**
	 * The display performance preferences override for the view.
	 */
	viewDisplaySetting: ViewDisplaySettings;

	/**
	 * The size (as a percentage) to which to enlarge or reduce the view of the document. (Range: 5 to 4000)
	 */
	zoomPercentage: number;

	/**
	 * Magnifies or reduces the window to the specified display size.
	 * @param given The display size.
	 */
	zoom(given: ZoomOptions): void;

}

/**
 * A collection of layout windows.
 */
declare class LayoutWindows {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the LayoutWindow with the specified index.
	 * @param index The index.
	 */
	[index: number]: LayoutWindow;

	/**
	 * Returns any LayoutWindow in the collection.
	 */
	anyItem(): LayoutWindow;

	/**
	 * Displays the number of elements in the LayoutWindow.
	 */
	count(): number;

	/**
	 * Returns every LayoutWindow in the collection.
	 */
	everyItem(): LayoutWindow[];

	/**
	 * Returns the first LayoutWindow in the collection.
	 */
	firstItem(): LayoutWindow;

	/**
	 * Returns the LayoutWindow with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): LayoutWindow;

	/**
	 * Returns the LayoutWindow with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): LayoutWindow;

	/**
	 * Returns the LayoutWindows within the specified range.
	 * @param from The LayoutWindow, index, or name at the beginning of the range.
	 * @param to The LayoutWindow, index, or name at the end of the range.
	 */
	itemByRange(from: LayoutWindow | number | string, to: LayoutWindow | number | string): LayoutWindow[];

	/**
	 * Returns the last LayoutWindow in the collection.
	 */
	lastItem(): LayoutWindow;

	/**
	 * Returns the middle LayoutWindow in the collection.
	 */
	middleItem(): LayoutWindow;

	/**
	 * Returns the LayoutWindow whose index follows the specified LayoutWindow in the collection.
	 * @param obj The LayoutWindow whose index comes before the desired LayoutWindow.
	 */
	nextItem(obj: LayoutWindow): LayoutWindow;

	/**
	 * Returns the LayoutWindow with the index previous to the specified index.
	 * @param obj The index of the LayoutWindow that follows the desired LayoutWindow.
	 */
	previousItem(obj: LayoutWindow): LayoutWindow;

	/**
	 * Generates a string which, if executed, will return the LayoutWindow.
	 */
	toSource(): string;

}

/**
 * A story window.
 */
declare class StoryWindow extends Window {
}

/**
 * A collection of story windows.
 */
declare class StoryWindows {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the StoryWindow with the specified index.
	 * @param index The index.
	 */
	[index: number]: StoryWindow;

	/**
	 * Returns any StoryWindow in the collection.
	 */
	anyItem(): StoryWindow;

	/**
	 * Displays the number of elements in the StoryWindow.
	 */
	count(): number;

	/**
	 * Returns every StoryWindow in the collection.
	 */
	everyItem(): StoryWindow[];

	/**
	 * Returns the first StoryWindow in the collection.
	 */
	firstItem(): StoryWindow;

	/**
	 * Returns the StoryWindow with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): StoryWindow;

	/**
	 * Returns the StoryWindow with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): StoryWindow;

	/**
	 * Returns the StoryWindows within the specified range.
	 * @param from The StoryWindow, index, or name at the beginning of the range.
	 * @param to The StoryWindow, index, or name at the end of the range.
	 */
	itemByRange(from: StoryWindow | number | string, to: StoryWindow | number | string): StoryWindow[];

	/**
	 * Returns the last StoryWindow in the collection.
	 */
	lastItem(): StoryWindow;

	/**
	 * Returns the middle StoryWindow in the collection.
	 */
	middleItem(): StoryWindow;

	/**
	 * Returns the StoryWindow whose index follows the specified StoryWindow in the collection.
	 * @param obj The StoryWindow whose index comes before the desired StoryWindow.
	 */
	nextItem(obj: StoryWindow): StoryWindow;

	/**
	 * Returns the StoryWindow with the index previous to the specified index.
	 * @param obj The index of the StoryWindow that follows the desired StoryWindow.
	 */
	previousItem(obj: StoryWindow): StoryWindow;

	/**
	 * Generates a string which, if executed, will return the StoryWindow.
	 */
	toSource(): string;

}

/**
 * A document event.
 */
declare class DocumentEvent extends Event {
	/**
	 * Dispatched after a Document is reverted. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_REVERT: string;

	/**
	 * Dispatched after a Document is saved. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_SAVE: string;

	/**
	 * Dispatched after a Document is saved under a new name. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_SAVE_AS: string;

	/**
	 * Dispatched after a copy of a Document is saved. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_SAVE_A_COPY: string;

	/**
	 * Dispatched before a Document is created. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_NEW: string;

	/**
	 * Dispatched before a Document is opened. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_OPEN: string;

	/**
	 * Dispatched before a Document is reverted. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_REVERT: string;

	/**
	 * Dispatched before a Document is saved. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_SAVE: string;

	/**
	 * Dispatched before a Document is saved under a new name. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_SAVE_AS: string;

	/**
	 * Dispatched before a copy of a Document is saved. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_SAVE_A_COPY: string;

	/**
	 * The full path to the DocumentEvent, including the name of the DocumentEvent.
	 */
	readonly fullName: File;

	/**
	 * Controls the display of dialogs and alerts during script processing.
	 */
	userInteractionLevel: UserInteractionLevels;

}

/**
 * An import or export event.
 */
declare class ImportExportEvent extends Event {
	/**
	 * Dispatched after a ImportExportEvent is exported. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_EXPORT: string;

	/**
	 * Dispatched after importing a file into a ImportExportEvent. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_IMPORT: string;

	/**
	 * Dispatched before a ImportExportEvent is exported. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_EXPORT: string;

	/**
	 * Dispatched before importing a file into a ImportExportEvent. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_IMPORT: string;

	/**
	 * Dispatched after a ImportExportEvent export is canceled or fails. This event bubbles. This event is not cancelable.
	 */
	static readonly FAILED_EXPORT: string;

	/**
	 * The import/export file format.
	 */
	readonly format: string;

	/**
	 * The full path to the ImportExportEvent, including the name of the ImportExportEvent.
	 */
	readonly fullName: File;

	/**
	 * Controls the display of dialogs and alerts during script processing.
	 */
	userInteractionLevel: UserInteractionLevels;

}

/**
 * Represents the content placer object.
 */
declare class ContentPlacerObject extends Preference {
	/**
	 * Whether the Content Placer is currently loaded with content for placing.
	 */
	readonly loaded: boolean;

	/**
	 * Load the Content Placer with one or more objects.
	 * @param pageItems One or more page items to place or load
	 * @param linkPageItems Whether to link pageItems in content placer (if true it will override link stories value)
	 * @param linkStories Whether to link stories in content placer (only applicable for single story, pageItem links will also be created in case of more than one item)
	 * @param mapStyles Whether to map styles in content placer
	 * @param showingOptions Whether to display the link options dialog
	 */
	load(pageItems: PageItem[], linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): void;

}

/**
 * A book.
 */
declare class Book {
	/**
	 * If true, automatically converts the book content object during repagination and synchronization.
	 */
	automaticDocumentConversion: boolean;

	/**
	 * If true, automatically updates page numbers when pages in book content files are added, deleted, or rearranged.
	 */
	automaticPagination: boolean;

	/**
	 * A collection of book content objects.
	 */
	readonly bookContents: BookContents;

	/**
	 * EPub export preference settings.
	 */
	readonly epubExportPreferences: EPubExportPreference;

	/**
	 * EPub fixed layout export preference settings.
	 */
	readonly epubFixedLayoutExportPreferences: EPubFixedLayoutExportPreference;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The full path to the file.
	 */
	readonly filePath: File;

	/**
	 * The full path to the Book, including the name of the Book.
	 */
	readonly fullName: File;

	/**
	 * The index of the Book within its containing object.
	 */
	readonly index: number;

	/**
	 * If true, inserts a blank page as necessary to fill in page number gaps caused by the odd or even specification set in the repagination option.
	 */
	insertBlankPage: boolean;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * If true, merges identically named layers when exporting to PDF.
	 */
	mergeIdenticalLayers: boolean;

	/**
	 * If true, the Book has been modified since it was last saved.
	 */
	readonly modified: boolean;

	/**
	 * The name of the Book.
	 */
	readonly name: string;

	/**
	 * The parent of the Book (a Application).
	 */
	readonly parent: Application;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Preflight book option settings.
	 */
	readonly preflightBookOptions: PreflightBookOption;

	/**
	 * Print preference settings.
	 */
	readonly printPreferences: PrintPreference;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Page numbering options for book content objects within the book.
	 */
	repaginationOption: RepaginateOption;

	/**
	 * If true, the Book has been saved since it was created.
	 */
	readonly saved: boolean;

	/**
	 * How to match styles with same name while synchronizing a book.
	 */
	smartMatchStyleGroups: SmartMatchOptions;

	/**
	 * Current style source document.
	 */
	styleSourceDocument: Document | BookContent;

	/**
	 * If true, synchronize bullets and numbering.
	 */
	synchronizeBulletNumberingList: boolean;

	/**
	 * If true, synchronize cell styles.
	 */
	synchronizeCellStyle: boolean;

	/**
	 * If true, synchronize character styles.
	 */
	synchronizeCharacterStyle: boolean;

	/**
	 * If true, synchronize composite font.
	 */
	synchronizeCompositeFont: boolean;

	/**
	 * If true, synchronize conditional text.
	 */
	synchronizeConditionalText: boolean;

	/**
	 * If true, synchronize cross reference formats
	 */
	synchronizeCrossReferenceFormat: boolean;

	/**
	 * If true, synchronize kinsoku style.
	 */
	synchronizeKinsokuStyle: boolean;

	/**
	 * If true, synchronize master pages.
	 */
	synchronizeMasterPage: boolean;

	/**
	 * If true, synchronize mojikumi style.
	 */
	synchronizeMojikumiStyle: boolean;

	/**
	 * If true, synchronize named grid.
	 */
	synchronizeNamedGrid: boolean;

	/**
	 * If true, synchronize object styles.
	 */
	synchronizeObjectStyle: boolean;

	/**
	 * If true, synchronize paragraph styles.
	 */
	synchronizeParagraphStyle: boolean;

	/**
	 * If true, synchronize swatches.
	 */
	synchronizeSwatch: boolean;

	/**
	 * If true, synchronize table of content styles.
	 */
	synchronizeTableOfContentStyle: boolean;

	/**
	 * If true, synchronize table styles.
	 */
	synchronizeTableStyle: boolean;

	/**
	 * If true, synchronize text variables.
	 */
	synchronizeTextVariable: boolean;

	/**
	 * If true, synchronize trap styles.
	 */
	synchronizeTrapStyle: boolean;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Close the Book
	 * @param saving Whether to save changes before closing the Book
	 * @param savingIn The file in which to save the Book
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	close(saving?: SaveOptions, savingIn?: File, versionComments?: string, forceSave?: boolean): void;

	/**
	 * Exports the book to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The file to which to export the book.
	 * @param showingOptions Used to specify if the PDF Export Options Dialog needs to be shown or not
	 * @param using Used to specify the presets for the export which can be the object of the preset type, enumeration for existing presets or user defined presets, or a string naming the preset to be used, but in case Showing Options is true, the preset specified in the Export Dialog will over ride this parameter
	 * @param whichDocuments Used to specify a list of book content references, from the current book, where the list may contain duplicate entries and if the list is not specified then the entire book contents shall be exported
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	exportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, whichDocuments?: BookContent[], versionComments?: string, forceSave?: boolean): void;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Book[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Packages the document.
	 * @param to The folder, alias, or path in which to place the packaged files.
	 * @param copyingFonts If true, copies fonts used in the document to the package folder.
	 * @param copyingLinkedGraphics If true, copies linked graphics files to the package folder.
	 * @param copyingProfiles If true, copies color profiles to the package folder.
	 * @param updatingGraphics If true, updates graphics links to the package folder.
	 * @param includingHiddenLayers If true, copies fonts and links from hidden layers to the package.
	 * @param ignorePreflightErrors If true, ignores preflight errors and proceeds with the packaging. If false, cancels the packaging when errors exist.
	 * @param creatingReport If true, creates a package report that includes printing instructions, print settings, lists of fonts, links and required inks, and other information.
	 * @param includeIdml If true, generates and includes IDML in the package folder.
	 * @param includePdf If true, generates and includes PDF in the package folder.
	 * @param pdfStyle If specified and PDF is to be included, use this style for PDF export if it is valid, otherwise use the last used PDF preset.
	 * @param useDocumentHyphenationExceptionsOnly If this option is selected, InDesign flags this document so that it does not reflow when someone else opens or edits it on a computer that has different hyphenation and dictionary settings.
	 * @param versionComments The comments for the version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	packageForPrint(to: File, copyingFonts: boolean, copyingLinkedGraphics: boolean, copyingProfiles: boolean, updatingGraphics: boolean, includingHiddenLayers: boolean, ignorePreflightErrors: boolean, creatingReport: boolean, includeIdml: boolean, includePdf: boolean, pdfStyle: string, useDocumentHyphenationExceptionsOnly: boolean, versionComments: string, forceSave?: boolean): boolean;

	/**
	 * Preflight a book and optionally save the resulting report.
	 * @param to The preflight report to save to.
	 * @param autoOpen If true, automatically open the report after creation.
	 */
	preflight(to: File, autoOpen?: boolean): void;

	/**
	 * Prints the Book(s).
	 * @param printDialog Whether to invoke the print dialog
	 * @param using Printer preset to use.
	 * @param withGrids Whether to print grids
	 */
	print(printDialog: boolean, using: PrinterPresetTypes | PrinterPreset, withGrids?: boolean): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Repaginates the book.
	 */
	repaginate(): void;

	/**
	 * Saves the book.
	 * @param to The file path. Note: Required only if the book has not been previously saved. If the book has previously been saved, specifying a path saves a copy and closes the original book.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	save(to: File, versionComments: string, forceSave?: boolean): void;

	/**
	 * Synchronizes the entire book to the style source document.
	 */
	synchronize(): void;

	/**
	 * Generates a string which, if executed, will return the Book.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Updates the cross references in the entire book.
	 */
	updateAllCrossReferences(): void;

	/**
	 * Update all numbers (e.g. Page numbers, chapter numbers and paragraph numbers) throughout the book.
	 */
	updateAllNumbers(): void;

	/**
	 * Updates chapter numbers and paragraph numbers throughout the book.
	 */
	updateChapterAndParagraphNumbers(): void;

}

/**
 * A collection of books.
 */
declare class Books {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Book with the specified index.
	 * @param index The index.
	 */
	[index: number]: Book;

	/**
	 * Creates a new book.
	 * @param fullName The full path name of the new book file, including the book file extension '.indb'.
	 * @param withProperties Initial values for properties of the new Book
	 */
	add(fullName: File, withProperties: object): Book;

	/**
	 * Returns any Book in the collection.
	 */
	anyItem(): Book;

	/**
	 * Displays the number of elements in the Book.
	 */
	count(): number;

	/**
	 * Returns every Book in the collection.
	 */
	everyItem(): Book[];

	/**
	 * Returns the first Book in the collection.
	 */
	firstItem(): Book;

	/**
	 * Returns the Book with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Book;

	/**
	 * Returns the Book with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Book;

	/**
	 * Returns the Books within the specified range.
	 * @param from The Book, index, or name at the beginning of the range.
	 * @param to The Book, index, or name at the end of the range.
	 */
	itemByRange(from: Book | number | string, to: Book | number | string): Book[];

	/**
	 * Returns the last Book in the collection.
	 */
	lastItem(): Book;

	/**
	 * Returns the middle Book in the collection.
	 */
	middleItem(): Book;

	/**
	 * Returns the Book whose index follows the specified Book in the collection.
	 * @param obj The Book whose index comes before the desired Book.
	 */
	nextItem(obj: Book): Book;

	/**
	 * Returns the Book with the index previous to the specified index.
	 * @param obj The index of the Book that follows the desired Book.
	 */
	previousItem(obj: Book): Book;

	/**
	 * Generates a string which, if executed, will return the Book.
	 */
	toSource(): string;

}

/**
 * A document added to a book.
 */
declare class BookContent {
	/**
	 * The date and time the BookContent was created.
	 */
	readonly date: Date;

	/**
	 * The page range of the book content object within the book.
	 */
	readonly documentPageRange: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The full path to the file.
	 */
	readonly filePath: File;

	/**
	 * The full path to the BookContent, including the name of the BookContent.
	 */
	readonly fullName: File;

	/**
	 * The unique ID of the BookContent.
	 */
	readonly id: number;

	/**
	 * The index of the BookContent within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the BookContent.
	 */
	readonly name: string;

	/**
	 * The parent of the BookContent (a Book).
	 */
	readonly parent: Book;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The size of the BookContent file.
	 */
	readonly size: number;

	/**
	 * The status of the book content object file.
	 */
	readonly status: BookContentStatus;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): BookContent[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the book content object.
	 * @param to The location relative to the reference object or within the book.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to?: LocationOptions, reference?: BookContent): BookContent;

	/**
	 * Preflight a book content object and optionally save the resulting report.
	 * @param to The preflight report to save to.
	 * @param autoOpen If true, automatically open the report after creation.
	 */
	preflight(to: File, autoOpen?: boolean): void;

	/**
	 * Deletes the BookContent.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Replaces a book content object with a new file. Note: If the new file replaces the current style source document, the new file becomes the style source document.
	 * @param using The full path name of the new book content object.
	 */
	replace(using: File): BookContent;

	/**
	 * Matches the formatting of the book content object to the style source document.
	 */
	synchronize(): void;

	/**
	 * Generates a string which, if executed, will return the BookContent.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of book content objects.
 */
declare class BookContents {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the BookContent with the specified index.
	 * @param index The index.
	 */
	[index: number]: BookContent;

	/**
	 * Creates a new book content object.
	 * @param fullName The full path name of the new book content object.
	 * @param at The location of the book content object within the book.
	 * @param withProperties Initial values for properties of the new BookContent
	 */
	add(fullName: File, at?: number, withProperties?: object): BookContent;

	/**
	 * Returns any BookContent in the collection.
	 */
	anyItem(): BookContent;

	/**
	 * Displays the number of elements in the BookContent.
	 */
	count(): number;

	/**
	 * Returns every BookContent in the collection.
	 */
	everyItem(): BookContent[];

	/**
	 * Returns the first BookContent in the collection.
	 */
	firstItem(): BookContent;

	/**
	 * Returns the BookContent with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): BookContent;

	/**
	 * Returns the BookContent with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): BookContent;

	/**
	 * Returns the BookContent with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): BookContent;

	/**
	 * Returns the BookContents within the specified range.
	 * @param from The BookContent, index, or name at the beginning of the range.
	 * @param to The BookContent, index, or name at the end of the range.
	 */
	itemByRange(from: BookContent | number | string, to: BookContent | number | string): BookContent[];

	/**
	 * Returns the last BookContent in the collection.
	 */
	lastItem(): BookContent;

	/**
	 * Returns the middle BookContent in the collection.
	 */
	middleItem(): BookContent;

	/**
	 * Returns the BookContent whose index follows the specified BookContent in the collection.
	 * @param obj The BookContent whose index comes before the desired BookContent.
	 */
	nextItem(obj: BookContent): BookContent;

	/**
	 * Returns the BookContent with the index previous to the specified index.
	 * @param obj The index of the BookContent that follows the desired BookContent.
	 */
	previousItem(obj: BookContent): BookContent;

	/**
	 * Generates a string which, if executed, will return the BookContent.
	 */
	toSource(): string;

}

/**
 * An ink.
 */
declare class Ink {
	/**
	 * The ink object to map this ink to.
	 */
	aliasInkName: string;

	/**
	 * The angle of the ink. (Range: 0 to 360)
	 */
	angle: number;

	/**
	 * Converts spot inks to process inks.
	 */
	convertToProcess: boolean;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The frequency of the ink. (Range: 1 to 500)
	 */
	frequency: number;

	/**
	 * The unique ID of the Ink.
	 */
	readonly id: number;

	/**
	 * The index of the Ink within its containing object.
	 */
	readonly index: number;

	/**
	 * The trapping type of the ink.
	 */
	inkType: InkTypes;

	/**
	 * If true, the ink is a process ink.
	 */
	readonly isProcessInk: boolean;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the Ink.
	 */
	readonly name: string;

	/**
	 * The neutral density of the ink. (Range: 0.001 to 10.0)
	 */
	neutralDensity: number;

	/**
	 * The parent of the Ink (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * If true, prints the ink. Only valid when printing separations.
	 */
	printInk: boolean;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The solidity value of the ink. (Range: 0.0 to 1.0)
	 */
	readonly solidity: number;

	/**
	 * The place of the ink in the trapping sequence.
	 */
	trapOrder: number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Ink[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Ink.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of inks.
 */
declare class Inks {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Ink with the specified index.
	 * @param index The index.
	 */
	[index: number]: Ink;

	/**
	 * Returns any Ink in the collection.
	 */
	anyItem(): Ink;

	/**
	 * Displays the number of elements in the Ink.
	 */
	count(): number;

	/**
	 * Returns every Ink in the collection.
	 */
	everyItem(): Ink[];

	/**
	 * Returns the first Ink in the collection.
	 */
	firstItem(): Ink;

	/**
	 * Returns the Ink with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Ink;

	/**
	 * Returns the Ink with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Ink;

	/**
	 * Returns the Ink with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Ink;

	/**
	 * Returns the Inks within the specified range.
	 * @param from The Ink, index, or name at the beginning of the range.
	 * @param to The Ink, index, or name at the end of the range.
	 */
	itemByRange(from: Ink | number | string, to: Ink | number | string): Ink[];

	/**
	 * Returns the last Ink in the collection.
	 */
	lastItem(): Ink;

	/**
	 * Returns the middle Ink in the collection.
	 */
	middleItem(): Ink;

	/**
	 * Returns the Ink whose index follows the specified Ink in the collection.
	 * @param obj The Ink whose index comes before the desired Ink.
	 */
	nextItem(obj: Ink): Ink;

	/**
	 * Returns the Ink with the index previous to the specified index.
	 * @param obj The index of the Ink that follows the desired Ink.
	 */
	previousItem(obj: Ink): Ink;

	/**
	 * Generates a string which, if executed, will return the Ink.
	 */
	toSource(): string;

}

/**
 * A trap preset.
 */
declare class TrapPreset {
	/**
	 * The minimum amount (as a percentage) of black ink required before the black width setting is applied. (Range: 0 to 100)
	 */
	blackColorThreshold: number;

	/**
	 * The neutral density value at or above which an ink is considered black. (Range: .001 to 10)
	 */
	blackDensity: number;

	/**
	 * The black width. (Range depends on unit. For points: 0.0 to 8.0; picas: 0p0 to 0p8; inches: 0 to 0.1111; mm: 0 to 2.822; cm: 0 to .2822; ciceros: 0c0 to 0c7.507)
	 */
	blackWidth: number | string;

	/**
	 * The degree (as a percentage) to which components from abutting colors are used to reduce the trap color. (Range: 0 to 100) Note: 0% makes a trap whose neutral density is equal to the neutral density of the darker color.
	 */
	colorReduction: number;

	/**
	 * The default width for trapping all colors except those involving solid black. (Range depends on unit. For points: 0.0 to 8.0; picas: 0p0 to 0p8; inches: 0 to 0.1111; mm: 0 to 2.822; cm: 0 to .2822; ciceros: 0c0 to 0c7.507)
	 */
	defaultTrapWidth: number | string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the TrapPreset.
	 */
	readonly id: number;

	/**
	 * The trap placement between vector objects and bitmap images.
	 */
	imagePlacement: TrapImagePlacementTypes;

	/**
	 * If true, turns on trapping along the boundary of overlapping or abutting bitmap images.
	 */
	imagesToImages: boolean;

	/**
	 * The index of the TrapPreset within its containing object.
	 */
	readonly index: number;

	/**
	 * If true, turns on trapping among colors within individual bitmap images.
	 */
	internalImages: boolean;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the TrapPreset.
	 */
	name: string;

	/**
	 * If true, ensures that vector objects overlap bitmap images.
	 */
	objectsToImages: boolean;

	/**
	 * If true, ensures that one-bit images trap to abutting objects.
	 */
	oneBitImages: boolean;

	/**
	 * The parent of the TrapPreset (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The difference (as a percentage) between the neutral densities of abutting colors at which the trap is moved from the darker side of a color edge toward the centerline. (Range: 0 to 100)
	 */
	slidingTrapThreshold: number;

	/**
	 * The amount (as a percentage) that components of abutting colors must vary before a trap is created. (Range: 1 to 100)
	 */
	stepThreshold: number;

	/**
	 * The shape to use at the intersection of three-way traps.
	 */
	trapEnd: TrapEndTypes;

	/**
	 * The join type of the trap preset.
	 */
	trapJoin: EndJoin;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the TrapPreset.
	 */
	duplicate(): TrapPreset;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TrapPreset[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the trap preset.
	 * @param replacingWith The trap preset to apply in place of the deleted preset.
	 */
	remove(replacingWith: TrapPreset): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the TrapPreset.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of trap presets.
 */
declare class TrapPresets {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TrapPreset with the specified index.
	 * @param index The index.
	 */
	[index: number]: TrapPreset;

	/**
	 * Creates a new TrapPreset.
	 * @param withProperties Initial values for properties of the new TrapPreset
	 */
	add(withProperties: object): TrapPreset;

	/**
	 * Returns any TrapPreset in the collection.
	 */
	anyItem(): TrapPreset;

	/**
	 * Displays the number of elements in the TrapPreset.
	 */
	count(): number;

	/**
	 * Returns every TrapPreset in the collection.
	 */
	everyItem(): TrapPreset[];

	/**
	 * Returns the first TrapPreset in the collection.
	 */
	firstItem(): TrapPreset;

	/**
	 * Returns the TrapPreset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TrapPreset;

	/**
	 * Returns the TrapPreset with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TrapPreset;

	/**
	 * Returns the TrapPreset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TrapPreset;

	/**
	 * Returns the TrapPresets within the specified range.
	 * @param from The TrapPreset, index, or name at the beginning of the range.
	 * @param to The TrapPreset, index, or name at the end of the range.
	 */
	itemByRange(from: TrapPreset | number | string, to: TrapPreset | number | string): TrapPreset[];

	/**
	 * Returns the last TrapPreset in the collection.
	 */
	lastItem(): TrapPreset;

	/**
	 * Returns the middle TrapPreset in the collection.
	 */
	middleItem(): TrapPreset;

	/**
	 * Returns the TrapPreset whose index follows the specified TrapPreset in the collection.
	 * @param obj The TrapPreset whose index comes before the desired TrapPreset.
	 */
	nextItem(obj: TrapPreset): TrapPreset;

	/**
	 * Returns the TrapPreset with the index previous to the specified index.
	 * @param obj The index of the TrapPreset that follows the desired TrapPreset.
	 */
	previousItem(obj: TrapPreset): TrapPreset;

	/**
	 * Generates a string which, if executed, will return the TrapPreset.
	 */
	toSource(): string;

}

/**
 * A mixed ink swatch.
 */
declare class MixedInk extends Swatch {
	/**
	 * The mixed ink group that a mixed ink swatch is based on.
	 */
	readonly baseColor: MixedInkGroup;

	/**
	 * The component inks.
	 */
	readonly inkList: Ink[];

	/**
	 * The array of tint percentages for inks in the ink list. Note: Specify a value for each ink.
	 */
	inkPercentages: number[];

	/**
	 * The color model.
	 */
	model: ColorModel;

	/**
	 * The color space.
	 */
	space: ColorSpace;

}

/**
 * A collection of mixed inks.
 */
declare class MixedInks {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MixedInk with the specified index.
	 * @param index The index.
	 */
	[index: number]: MixedInk;

	/**
	 * Creates a new mixed ink swatch.
	 * @param inkList The inks to mix. Note: Must contain at least two process inks and one spot ink.
	 * @param inkPercentages The percent to use of each ink in the ink list. (Range: 0 to 100 for each ink)
	 * @param withProperties Initial values for properties of the new MixedInk
	 */
	add(inkList: Ink[] | MixedInkGroup, inkPercentages: number[], withProperties: object): MixedInk;

	/**
	 * Returns any MixedInk in the collection.
	 */
	anyItem(): MixedInk;

	/**
	 * Displays the number of elements in the MixedInk.
	 */
	count(): number;

	/**
	 * Returns every MixedInk in the collection.
	 */
	everyItem(): MixedInk[];

	/**
	 * Returns the first MixedInk in the collection.
	 */
	firstItem(): MixedInk;

	/**
	 * Returns the MixedInk with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MixedInk;

	/**
	 * Returns the MixedInk with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MixedInk;

	/**
	 * Returns the MixedInk with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MixedInk;

	/**
	 * Returns the MixedInks within the specified range.
	 * @param from The MixedInk, index, or name at the beginning of the range.
	 * @param to The MixedInk, index, or name at the end of the range.
	 */
	itemByRange(from: MixedInk | number | string, to: MixedInk | number | string): MixedInk[];

	/**
	 * Returns the last MixedInk in the collection.
	 */
	lastItem(): MixedInk;

	/**
	 * Returns the middle MixedInk in the collection.
	 */
	middleItem(): MixedInk;

	/**
	 * Returns the MixedInk whose index follows the specified MixedInk in the collection.
	 * @param obj The MixedInk whose index comes before the desired MixedInk.
	 */
	nextItem(obj: MixedInk): MixedInk;

	/**
	 * Returns the MixedInk with the index previous to the specified index.
	 * @param obj The index of the MixedInk that follows the desired MixedInk.
	 */
	previousItem(obj: MixedInk): MixedInk;

	/**
	 * Generates a string which, if executed, will return the MixedInk.
	 */
	toSource(): string;

}

/**
 * A mixed ink group.
 */
declare class MixedInkGroup extends Swatch {
	/**
	 * The component inks.
	 */
	readonly inkList: Ink[];

	/**
	 * The color model.
	 */
	model: ColorModel;

}

/**
 * A collection of mixed ink groups.
 */
declare class MixedInkGroups {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MixedInkGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: MixedInkGroup;

	/**
	 * Creates a new mixed ink group.
	 * @param inkList The inks to include in the mix.
	 * @param inkPercentages The percent of each ink in the ink list. (Range: 0 to 100 for each ink)
	 * @param repeatValues The number of repetitions for each ink in the ink list. (Range: 0 to 100 for each ink)
	 * @param incrementValues The increment percent per repetition for each ink. (Range: 0 to 100) Note: The cumulative ink percentage per ink cannot exceed 100.)
	 * @param withProperties Initial values for properties of the new MixedInkGroup
	 */
	add(inkList: Ink[], inkPercentages: number[], repeatValues: number[], incrementValues: number[], withProperties: object): MixedInkGroup;

	/**
	 * Returns any MixedInkGroup in the collection.
	 */
	anyItem(): MixedInkGroup;

	/**
	 * Displays the number of elements in the MixedInkGroup.
	 */
	count(): number;

	/**
	 * Returns every MixedInkGroup in the collection.
	 */
	everyItem(): MixedInkGroup[];

	/**
	 * Returns the first MixedInkGroup in the collection.
	 */
	firstItem(): MixedInkGroup;

	/**
	 * Returns the MixedInkGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MixedInkGroup;

	/**
	 * Returns the MixedInkGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MixedInkGroup;

	/**
	 * Returns the MixedInkGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MixedInkGroup;

	/**
	 * Returns the MixedInkGroups within the specified range.
	 * @param from The MixedInkGroup, index, or name at the beginning of the range.
	 * @param to The MixedInkGroup, index, or name at the end of the range.
	 */
	itemByRange(from: MixedInkGroup | number | string, to: MixedInkGroup | number | string): MixedInkGroup[];

	/**
	 * Returns the last MixedInkGroup in the collection.
	 */
	lastItem(): MixedInkGroup;

	/**
	 * Returns the middle MixedInkGroup in the collection.
	 */
	middleItem(): MixedInkGroup;

	/**
	 * Returns the MixedInkGroup whose index follows the specified MixedInkGroup in the collection.
	 * @param obj The MixedInkGroup whose index comes before the desired MixedInkGroup.
	 */
	nextItem(obj: MixedInkGroup): MixedInkGroup;

	/**
	 * Returns the MixedInkGroup with the index previous to the specified index.
	 * @param obj The index of the MixedInkGroup that follows the desired MixedInkGroup.
	 */
	previousItem(obj: MixedInkGroup): MixedInkGroup;

	/**
	 * Generates a string which, if executed, will return the MixedInkGroup.
	 */
	toSource(): string;

}

/**
 * A gradient.
 */
declare class Gradient extends Swatch {
	/**
	 * A collection of gradient stops.
	 */
	readonly gradientStops: GradientStops;

	/**
	 * The gradient type.
	 */
	type: GradientType;

}

/**
 * A collection of gradients.
 */
declare class Gradients {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Gradient with the specified index.
	 * @param index The index.
	 */
	[index: number]: Gradient;

	/**
	 * Creates a new Gradient.
	 * @param withProperties Initial values for properties of the new Gradient
	 */
	add(withProperties: object): Gradient;

	/**
	 * Returns any Gradient in the collection.
	 */
	anyItem(): Gradient;

	/**
	 * Displays the number of elements in the Gradient.
	 */
	count(): number;

	/**
	 * Returns every Gradient in the collection.
	 */
	everyItem(): Gradient[];

	/**
	 * Returns the first Gradient in the collection.
	 */
	firstItem(): Gradient;

	/**
	 * Returns the Gradient with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Gradient;

	/**
	 * Returns the Gradient with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Gradient;

	/**
	 * Returns the Gradient with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Gradient;

	/**
	 * Returns the Gradients within the specified range.
	 * @param from The Gradient, index, or name at the beginning of the range.
	 * @param to The Gradient, index, or name at the end of the range.
	 */
	itemByRange(from: Gradient | number | string, to: Gradient | number | string): Gradient[];

	/**
	 * Returns the last Gradient in the collection.
	 */
	lastItem(): Gradient;

	/**
	 * Returns the middle Gradient in the collection.
	 */
	middleItem(): Gradient;

	/**
	 * Returns the Gradient whose index follows the specified Gradient in the collection.
	 * @param obj The Gradient whose index comes before the desired Gradient.
	 */
	nextItem(obj: Gradient): Gradient;

	/**
	 * Returns the Gradient with the index previous to the specified index.
	 * @param obj The index of the Gradient that follows the desired Gradient.
	 */
	previousItem(obj: Gradient): Gradient;

	/**
	 * Generates a string which, if executed, will return the Gradient.
	 */
	toSource(): string;

}

/**
 * A gradient stop in a gradient.
 */
declare class GradientStop {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the GradientStop within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The starting location (as a percentage of the gradient length) of the gradient stop on the gradient. (Range: 0 to 100).
	 */
	location: number;

	/**
	 * The mid-point (as a percentage of the gradient length) of the gradient stop. (Range: 13 to 87)
	 */
	midpoint: number;

	/**
	 * The parent of the GradientStop (a Gradient).
	 */
	readonly parent: Gradient;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gradient stop.
	 */
	stopColor: MixedInk | Color;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): GradientStop[];

	/**
	 * Deletes the GradientStop.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the GradientStop.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of gradient stops.
 */
declare class GradientStops {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GradientStop with the specified index.
	 * @param index The index.
	 */
	[index: number]: GradientStop;

	/**
	 * Creates a new GradientStop.
	 * @param withProperties Initial values for properties of the new GradientStop
	 */
	add(withProperties: object): GradientStop;

	/**
	 * Returns any GradientStop in the collection.
	 */
	anyItem(): GradientStop;

	/**
	 * Displays the number of elements in the GradientStop.
	 */
	count(): number;

	/**
	 * Returns every GradientStop in the collection.
	 */
	everyItem(): GradientStop[];

	/**
	 * Returns the first GradientStop in the collection.
	 */
	firstItem(): GradientStop;

	/**
	 * Returns the GradientStop with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GradientStop;

	/**
	 * Returns the GradientStops within the specified range.
	 * @param from The GradientStop, index, or name at the beginning of the range.
	 * @param to The GradientStop, index, or name at the end of the range.
	 */
	itemByRange(from: GradientStop | number | string, to: GradientStop | number | string): GradientStop[];

	/**
	 * Returns the last GradientStop in the collection.
	 */
	lastItem(): GradientStop;

	/**
	 * Returns the middle GradientStop in the collection.
	 */
	middleItem(): GradientStop;

	/**
	 * Returns the GradientStop whose index follows the specified GradientStop in the collection.
	 * @param obj The GradientStop whose index comes before the desired GradientStop.
	 */
	nextItem(obj: GradientStop): GradientStop;

	/**
	 * Returns the GradientStop with the index previous to the specified index.
	 * @param obj The index of the GradientStop that follows the desired GradientStop.
	 */
	previousItem(obj: GradientStop): GradientStop;

	/**
	 * Generates a string which, if executed, will return the GradientStop.
	 */
	toSource(): string;

}

/**
 * A swatch (color, gradient, tint, or mixed ink).
 */
declare class Swatch {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the Swatch.
	 */
	readonly id: number;

	/**
	 * The index of the Swatch within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the Swatch.
	 */
	name: string;

	/**
	 * The parent of the Swatch (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * The color group that a swatch belongs to
	 */
	readonly parentColorGroup: ColorGroup;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the Swatch.
	 */
	duplicate(): Swatch;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Swatch[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Merges the specified swatches with the swatch.
	 * @param with_ The swatches to merge.
	 */
	merge(with_: Swatch[] | Swatch | string): Swatch;

	/**
	 * Deletes the swatch.
	 * @param replacingWith The swatch to apply in place of the deleted swatch.
	 */
	remove(replacingWith: Swatch): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Swatch.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of swatches.
 */
declare class Swatches {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Swatch with the specified index.
	 * @param index The index.
	 */
	[index: number]: Swatch;

	/**
	 * Returns any Swatch in the collection.
	 */
	anyItem(): Swatch;

	/**
	 * Displays the number of elements in the Swatch.
	 */
	count(): number;

	/**
	 * Returns every Swatch in the collection.
	 */
	everyItem(): Swatch[];

	/**
	 * Returns the first Swatch in the collection.
	 */
	firstItem(): Swatch;

	/**
	 * Returns the Swatch with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Swatch;

	/**
	 * Returns the Swatch with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Swatch;

	/**
	 * Returns the Swatch with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Swatch;

	/**
	 * Returns the Swatches within the specified range.
	 * @param from The Swatch, index, or name at the beginning of the range.
	 * @param to The Swatch, index, or name at the end of the range.
	 */
	itemByRange(from: Swatch | number | string, to: Swatch | number | string): Swatch[];

	/**
	 * Returns the last Swatch in the collection.
	 */
	lastItem(): Swatch;

	/**
	 * Returns the middle Swatch in the collection.
	 */
	middleItem(): Swatch;

	/**
	 * Returns the Swatch whose index follows the specified Swatch in the collection.
	 * @param obj The Swatch whose index comes before the desired Swatch.
	 */
	nextItem(obj: Swatch): Swatch;

	/**
	 * Returns the Swatch with the index previous to the specified index.
	 * @param obj The index of the Swatch that follows the desired Swatch.
	 */
	previousItem(obj: Swatch): Swatch;

	/**
	 * Generates a string which, if executed, will return the Swatch.
	 */
	toSource(): string;

}

/**
 * A color swatch.
 */
declare class Color extends Swatch {
	/**
	 * The ink values that create the color, specified as a percentage for each ink. Note: The number of values required and the range depends on the color space. For RGB, specify three values, with each value in the range 0 to 255; for CMYK, specify four values representing C, M, Y, and K, with each value in the range 0 to 100; for LAB, specify three values representing L (Range: 0 to 100), A (Range: -128 to 127), and B (Range: -128 to 127); for mixed ink, specify values for each ink in the ink list, with each value in the range 0 to 100.
	 */
	colorValue: number[];

	/**
	 * The color model.
	 */
	model: ColorModel;

	/**
	 * The color space.
	 */
	space: ColorSpace;

}

/**
 * A collection of colors.
 */
declare class Colors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Color with the specified index.
	 * @param index The index.
	 */
	[index: number]: Color;

	/**
	 * Creates a new Color.
	 * @param withProperties Initial values for properties of the new Color
	 */
	add(withProperties: object): Color;

	/**
	 * Returns any Color in the collection.
	 */
	anyItem(): Color;

	/**
	 * Displays the number of elements in the Color.
	 */
	count(): number;

	/**
	 * Returns every Color in the collection.
	 */
	everyItem(): Color[];

	/**
	 * Returns the first Color in the collection.
	 */
	firstItem(): Color;

	/**
	 * Returns the Color with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Color;

	/**
	 * Returns the Color with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Color;

	/**
	 * Returns the Color with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Color;

	/**
	 * Returns the Colors within the specified range.
	 * @param from The Color, index, or name at the beginning of the range.
	 * @param to The Color, index, or name at the end of the range.
	 */
	itemByRange(from: Color | number | string, to: Color | number | string): Color[];

	/**
	 * Returns the last Color in the collection.
	 */
	lastItem(): Color;

	/**
	 * Returns the middle Color in the collection.
	 */
	middleItem(): Color;

	/**
	 * Returns the Color whose index follows the specified Color in the collection.
	 * @param obj The Color whose index comes before the desired Color.
	 */
	nextItem(obj: Color): Color;

	/**
	 * Returns the Color with the index previous to the specified index.
	 * @param obj The index of the Color that follows the desired Color.
	 */
	previousItem(obj: Color): Color;

	/**
	 * Generates a string which, if executed, will return the Color.
	 */
	toSource(): string;

}

/**
 * A tint swatch.
 */
declare class Tint extends Color {
	/**
	 * The color that the tint is based on.
	 */
	readonly baseColor: Color;

	/**
	 * The percent of the base color. (Range: 0 to 100)
	 */
	tintValue: number;

}

/**
 * A collection of tints.
 */
declare class Tints {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Tint with the specified index.
	 * @param index The index.
	 */
	[index: number]: Tint;

	/**
	 * Creates a new tint swatch.
	 * @param baseColor The color that the tint is based upon.
	 * @param withProperties Initial values for properties of the new Tint
	 */
	add(baseColor: Color, withProperties: object): Tint;

	/**
	 * Returns any Tint in the collection.
	 */
	anyItem(): Tint;

	/**
	 * Displays the number of elements in the Tint.
	 */
	count(): number;

	/**
	 * Returns every Tint in the collection.
	 */
	everyItem(): Tint[];

	/**
	 * Returns the first Tint in the collection.
	 */
	firstItem(): Tint;

	/**
	 * Returns the Tint with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Tint;

	/**
	 * Returns the Tint with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Tint;

	/**
	 * Returns the Tint with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Tint;

	/**
	 * Returns the Tints within the specified range.
	 * @param from The Tint, index, or name at the beginning of the range.
	 * @param to The Tint, index, or name at the end of the range.
	 */
	itemByRange(from: Tint | number | string, to: Tint | number | string): Tint[];

	/**
	 * Returns the last Tint in the collection.
	 */
	lastItem(): Tint;

	/**
	 * Returns the middle Tint in the collection.
	 */
	middleItem(): Tint;

	/**
	 * Returns the Tint whose index follows the specified Tint in the collection.
	 * @param obj The Tint whose index comes before the desired Tint.
	 */
	nextItem(obj: Tint): Tint;

	/**
	 * Returns the Tint with the index previous to the specified index.
	 * @param obj The index of the Tint that follows the desired Tint.
	 */
	previousItem(obj: Tint): Tint;

	/**
	 * Generates a string which, if executed, will return the Tint.
	 */
	toSource(): string;

}

/**
 * A color group
 */
declare class ColorGroup {
	/**
	 * A collection of color group swatches.
	 */
	readonly colorGroupSwatches: ColorGroupSwatches;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the ColorGroup.
	 */
	readonly id: number;

	/**
	 * The index of the ColorGroup within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the ColorGroup.
	 */
	name: string;

	/**
	 * The parent of the ColorGroup (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the ColorGroup.
	 */
	duplicate(): ColorGroup;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ColorGroup[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the ColorGroup.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the ColorGroup.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Ungroups a color group
	 */
	ungroup(): void;

}

/**
 * A collection of color groups.
 */
declare class ColorGroups {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ColorGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: ColorGroup;

	/**
	 * Creates a new ColorGroup
	 * @param name The color group name
	 * @param swatchList The swatches to add in color group.
	 * @param withProperties Initial values for properties of the new ColorGroup
	 */
	add(name: string, swatchList: Swatch[], withProperties: object): ColorGroup;

	/**
	 * Returns any ColorGroup in the collection.
	 */
	anyItem(): ColorGroup;

	/**
	 * Displays the number of elements in the ColorGroup.
	 */
	count(): number;

	/**
	 * Returns every ColorGroup in the collection.
	 */
	everyItem(): ColorGroup[];

	/**
	 * Returns the first ColorGroup in the collection.
	 */
	firstItem(): ColorGroup;

	/**
	 * Returns the ColorGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ColorGroup;

	/**
	 * Returns the ColorGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ColorGroup;

	/**
	 * Returns the ColorGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ColorGroup;

	/**
	 * Returns the ColorGroups within the specified range.
	 * @param from The ColorGroup, index, or name at the beginning of the range.
	 * @param to The ColorGroup, index, or name at the end of the range.
	 */
	itemByRange(from: ColorGroup | number | string, to: ColorGroup | number | string): ColorGroup[];

	/**
	 * Returns the last ColorGroup in the collection.
	 */
	lastItem(): ColorGroup;

	/**
	 * Returns the middle ColorGroup in the collection.
	 */
	middleItem(): ColorGroup;

	/**
	 * Returns the ColorGroup whose index follows the specified ColorGroup in the collection.
	 * @param obj The ColorGroup whose index comes before the desired ColorGroup.
	 */
	nextItem(obj: ColorGroup): ColorGroup;

	/**
	 * Returns the ColorGroup with the index previous to the specified index.
	 * @param obj The index of the ColorGroup that follows the desired ColorGroup.
	 */
	previousItem(obj: ColorGroup): ColorGroup;

	/**
	 * Generates a string which, if executed, will return the ColorGroup.
	 */
	toSource(): string;

}

/**
 * A color group swatch.
 */
declare class ColorGroupSwatch {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the ColorGroupSwatch.
	 */
	readonly id: number;

	/**
	 * The index of the ColorGroupSwatch within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the ColorGroupSwatch (a ColorGroup).
	 */
	readonly parent: ColorGroup;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The underlying swatch item
	 */
	readonly swatchItemRef: Swatch;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ColorGroupSwatch[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the ColorGroupSwatch.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of color group swatches.
 */
declare class ColorGroupSwatches {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ColorGroupSwatch with the specified index.
	 * @param index The index.
	 */
	[index: number]: ColorGroupSwatch;

	/**
	 * Adds a color group swatch.
	 * @param swatchItemRef swatch to be added to color group
	 * @param withProperties Initial values for properties of the new ColorGroupSwatch
	 */
	add(swatchItemRef: Swatch, withProperties: object): ColorGroupSwatch;

	/**
	 * Returns any ColorGroupSwatch in the collection.
	 */
	anyItem(): ColorGroupSwatch;

	/**
	 * Displays the number of elements in the ColorGroupSwatch.
	 */
	count(): number;

	/**
	 * Returns every ColorGroupSwatch in the collection.
	 */
	everyItem(): ColorGroupSwatch[];

	/**
	 * Returns the first ColorGroupSwatch in the collection.
	 */
	firstItem(): ColorGroupSwatch;

	/**
	 * Returns the ColorGroupSwatch with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ColorGroupSwatch;

	/**
	 * Returns the ColorGroupSwatch with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ColorGroupSwatch;

	/**
	 * Returns the ColorGroupSwatches within the specified range.
	 * @param from The ColorGroupSwatch, index, or name at the beginning of the range.
	 * @param to The ColorGroupSwatch, index, or name at the end of the range.
	 */
	itemByRange(from: ColorGroupSwatch | number | string, to: ColorGroupSwatch | number | string): ColorGroupSwatch[];

	/**
	 * Returns the last ColorGroupSwatch in the collection.
	 */
	lastItem(): ColorGroupSwatch;

	/**
	 * Returns the middle ColorGroupSwatch in the collection.
	 */
	middleItem(): ColorGroupSwatch;

	/**
	 * Returns the ColorGroupSwatch whose index follows the specified ColorGroupSwatch in the collection.
	 * @param obj The ColorGroupSwatch whose index comes before the desired ColorGroupSwatch.
	 */
	nextItem(obj: ColorGroupSwatch): ColorGroupSwatch;

	/**
	 * Returns the ColorGroupSwatch with the index previous to the specified index.
	 * @param obj The index of the ColorGroupSwatch that follows the desired ColorGroupSwatch.
	 */
	previousItem(obj: ColorGroupSwatch): ColorGroupSwatch;

	/**
	 * Generates a string which, if executed, will return the ColorGroupSwatch.
	 */
	toSource(): string;

}

/**
 * An opacity gradient stop.
 */
declare class OpacityGradientStop {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the OpacityGradientStop within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The location of the opacity gradient stop, as a percentage of the OpacityGradientStop size. (Range: 0 to 100)
	 */
	location: number;

	/**
	 * The mid-point of the opacity gradient stop, as a percentage of the OpacityGradientStop size. (Range: 13 to 87)
	 */
	midpoint: number;

	/**
	 * The opacity of the opacity gradient stop (as a percentage). (Range: 0 to 100)
	 */
	opacity: number;

	/**
	 * The parent of the OpacityGradientStop (a GradientFeatherSetting or FindChangeGradientFeatherSetting).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): OpacityGradientStop[];

	/**
	 * Deletes the OpacityGradientStop.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the OpacityGradientStop.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of opacity gradient stops.
 */
declare class OpacityGradientStops {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the OpacityGradientStop with the specified index.
	 * @param index The index.
	 */
	[index: number]: OpacityGradientStop;

	/**
	 * Creates a new OpacityGradientStop.
	 * @param withProperties Initial values for properties of the new OpacityGradientStop
	 */
	add(withProperties: object): OpacityGradientStop;

	/**
	 * Returns any OpacityGradientStop in the collection.
	 */
	anyItem(): OpacityGradientStop;

	/**
	 * Displays the number of elements in the OpacityGradientStop.
	 */
	count(): number;

	/**
	 * Returns every OpacityGradientStop in the collection.
	 */
	everyItem(): OpacityGradientStop[];

	/**
	 * Returns the first OpacityGradientStop in the collection.
	 */
	firstItem(): OpacityGradientStop;

	/**
	 * Returns the OpacityGradientStop with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): OpacityGradientStop;

	/**
	 * Returns the OpacityGradientStops within the specified range.
	 * @param from The OpacityGradientStop, index, or name at the beginning of the range.
	 * @param to The OpacityGradientStop, index, or name at the end of the range.
	 */
	itemByRange(from: OpacityGradientStop | number | string, to: OpacityGradientStop | number | string): OpacityGradientStop[];

	/**
	 * Returns the last OpacityGradientStop in the collection.
	 */
	lastItem(): OpacityGradientStop;

	/**
	 * Returns the middle OpacityGradientStop in the collection.
	 */
	middleItem(): OpacityGradientStop;

	/**
	 * Returns the OpacityGradientStop whose index follows the specified OpacityGradientStop in the collection.
	 * @param obj The OpacityGradientStop whose index comes before the desired OpacityGradientStop.
	 */
	nextItem(obj: OpacityGradientStop): OpacityGradientStop;

	/**
	 * Returns the OpacityGradientStop with the index previous to the specified index.
	 * @param obj The index of the OpacityGradientStop that follows the desired OpacityGradientStop.
	 */
	previousItem(obj: OpacityGradientStop): OpacityGradientStop;

	/**
	 * Generates a string which, if executed, will return the OpacityGradientStop.
	 */
	toSource(): string;

}

/**
 * An object that can contain a data merge text field.
 */
declare class DataMergeTextPlaceholder {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The data merge field to insert in the placeholder. For information, see data merge text placeholder and data merge image placeholder.
	 */
	readonly field: DataMergeField;

	/**
	 * The index of the DataMergeTextPlaceholder within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * The parent of the DataMergeTextPlaceholder (a Document).
	 */
	readonly parent: Document;

	/**
	 * The story that contains the text.
	 */
	readonly parentStory: Story;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	readonly storyOffset: InsertionPoint;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DataMergeTextPlaceholder[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the DataMergeTextPlaceholder.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of data merge text placeholders.
 */
declare class DataMergeTextPlaceholders {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the DataMergeTextPlaceholder with the specified index.
	 * @param index The index.
	 */
	[index: number]: DataMergeTextPlaceholder;

	/**
	 * Creates a data merge text placeholder.
	 * @param parentStory The story in which to insert the placeholder.
	 * @param storyOffset The position within the story at which to insert the placeholder, specified as an offset number or an insertion point.
	 * @param field The field to insert.
	 * @param withProperties Initial values for properties of the new DataMergeTextPlaceholder
	 */
	add(parentStory: Story, storyOffset: InsertionPoint | number, field: DataMergeField, withProperties: object): DataMergeTextPlaceholder;

	/**
	 * Returns any DataMergeTextPlaceholder in the collection.
	 */
	anyItem(): DataMergeTextPlaceholder;

	/**
	 * Displays the number of elements in the DataMergeTextPlaceholder.
	 */
	count(): number;

	/**
	 * Returns every DataMergeTextPlaceholder in the collection.
	 */
	everyItem(): DataMergeTextPlaceholder[];

	/**
	 * Returns the first DataMergeTextPlaceholder in the collection.
	 */
	firstItem(): DataMergeTextPlaceholder;

	/**
	 * Returns the DataMergeTextPlaceholder with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DataMergeTextPlaceholder;

	/**
	 * Returns the DataMergeTextPlaceholders within the specified range.
	 * @param from The DataMergeTextPlaceholder, index, or name at the beginning of the range.
	 * @param to The DataMergeTextPlaceholder, index, or name at the end of the range.
	 */
	itemByRange(from: DataMergeTextPlaceholder | number | string, to: DataMergeTextPlaceholder | number | string): DataMergeTextPlaceholder[];

	/**
	 * Returns the last DataMergeTextPlaceholder in the collection.
	 */
	lastItem(): DataMergeTextPlaceholder;

	/**
	 * Returns the middle DataMergeTextPlaceholder in the collection.
	 */
	middleItem(): DataMergeTextPlaceholder;

	/**
	 * Returns the DataMergeTextPlaceholder whose index follows the specified DataMergeTextPlaceholder in the collection.
	 * @param obj The DataMergeTextPlaceholder whose index comes before the desired DataMergeTextPlaceholder.
	 */
	nextItem(obj: DataMergeTextPlaceholder): DataMergeTextPlaceholder;

	/**
	 * Returns the DataMergeTextPlaceholder with the index previous to the specified index.
	 * @param obj The index of the DataMergeTextPlaceholder that follows the desired DataMergeTextPlaceholder.
	 */
	previousItem(obj: DataMergeTextPlaceholder): DataMergeTextPlaceholder;

	/**
	 * Generates a string which, if executed, will return the DataMergeTextPlaceholder.
	 */
	toSource(): string;

}

/**
 * An object that can contain a date merge image field.
 */
declare class DataMergeImagePlaceholder {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The data merge field to insert in the placeholder. For information, see data merge text placeholder and data merge image placeholder.
	 */
	readonly field: DataMergeField;

	/**
	 * The index of the DataMergeImagePlaceholder within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the DataMergeImagePlaceholder (a Document).
	 */
	readonly parent: Document;

	/**
	 * The page item on which to place the placeholder.
	 */
	readonly placeholderPageItem: PageItem;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DataMergeImagePlaceholder[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the DataMergeImagePlaceholder.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of data merge image placeholders.
 */
declare class DataMergeImagePlaceholders {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the DataMergeImagePlaceholder with the specified index.
	 * @param index The index.
	 */
	[index: number]: DataMergeImagePlaceholder;

	/**
	 * Creates a data merge image placeholder.
	 * @param placeholder The page item on which to place the placeholder.
	 * @param field The data merge field to insert.
	 * @param withProperties Initial values for properties of the new DataMergeImagePlaceholder
	 */
	add(placeholder: PageItem, field: DataMergeField, withProperties: object): DataMergeImagePlaceholder;

	/**
	 * Returns any DataMergeImagePlaceholder in the collection.
	 */
	anyItem(): DataMergeImagePlaceholder;

	/**
	 * Displays the number of elements in the DataMergeImagePlaceholder.
	 */
	count(): number;

	/**
	 * Returns every DataMergeImagePlaceholder in the collection.
	 */
	everyItem(): DataMergeImagePlaceholder[];

	/**
	 * Returns the first DataMergeImagePlaceholder in the collection.
	 */
	firstItem(): DataMergeImagePlaceholder;

	/**
	 * Returns the DataMergeImagePlaceholder with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DataMergeImagePlaceholder;

	/**
	 * Returns the DataMergeImagePlaceholders within the specified range.
	 * @param from The DataMergeImagePlaceholder, index, or name at the beginning of the range.
	 * @param to The DataMergeImagePlaceholder, index, or name at the end of the range.
	 */
	itemByRange(from: DataMergeImagePlaceholder | number | string, to: DataMergeImagePlaceholder | number | string): DataMergeImagePlaceholder[];

	/**
	 * Returns the last DataMergeImagePlaceholder in the collection.
	 */
	lastItem(): DataMergeImagePlaceholder;

	/**
	 * Returns the middle DataMergeImagePlaceholder in the collection.
	 */
	middleItem(): DataMergeImagePlaceholder;

	/**
	 * Returns the DataMergeImagePlaceholder whose index follows the specified DataMergeImagePlaceholder in the collection.
	 * @param obj The DataMergeImagePlaceholder whose index comes before the desired DataMergeImagePlaceholder.
	 */
	nextItem(obj: DataMergeImagePlaceholder): DataMergeImagePlaceholder;

	/**
	 * Returns the DataMergeImagePlaceholder with the index previous to the specified index.
	 * @param obj The index of the DataMergeImagePlaceholder that follows the desired DataMergeImagePlaceholder.
	 */
	previousItem(obj: DataMergeImagePlaceholder): DataMergeImagePlaceholder;

	/**
	 * Generates a string which, if executed, will return the DataMergeImagePlaceholder.
	 */
	toSource(): string;

}

/**
 * A data merge field.
 */
declare class DataMergeField {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The name of the field.
	 */
	readonly fieldName: string;

	/**
	 * The source field type.
	 */
	readonly fieldType: SourceFieldType;

	/**
	 * The index of the DataMergeField within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the DataMergeField (a DataMerge).
	 */
	readonly parent: DataMerge;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DataMergeField[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the DataMergeField.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of data merge fields.
 */
declare class DataMergeFields {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the DataMergeField with the specified index.
	 * @param index The index.
	 */
	[index: number]: DataMergeField;

	/**
	 * Returns any DataMergeField in the collection.
	 */
	anyItem(): DataMergeField;

	/**
	 * Displays the number of elements in the DataMergeField.
	 */
	count(): number;

	/**
	 * Returns every DataMergeField in the collection.
	 */
	everyItem(): DataMergeField[];

	/**
	 * Returns the first DataMergeField in the collection.
	 */
	firstItem(): DataMergeField;

	/**
	 * Returns the DataMergeField with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DataMergeField;

	/**
	 * Returns the DataMergeFields within the specified range.
	 * @param from The DataMergeField, index, or name at the beginning of the range.
	 * @param to The DataMergeField, index, or name at the end of the range.
	 */
	itemByRange(from: DataMergeField | number | string, to: DataMergeField | number | string): DataMergeField[];

	/**
	 * Returns the last DataMergeField in the collection.
	 */
	lastItem(): DataMergeField;

	/**
	 * Returns the middle DataMergeField in the collection.
	 */
	middleItem(): DataMergeField;

	/**
	 * Returns the DataMergeField whose index follows the specified DataMergeField in the collection.
	 * @param obj The DataMergeField whose index comes before the desired DataMergeField.
	 */
	nextItem(obj: DataMergeField): DataMergeField;

	/**
	 * Returns the DataMergeField with the index previous to the specified index.
	 * @param obj The index of the DataMergeField that follows the desired DataMergeField.
	 */
	previousItem(obj: DataMergeField): DataMergeField;

	/**
	 * Generates a string which, if executed, will return the DataMergeField.
	 */
	toSource(): string;

}

/**
 * An object that can contain a date merge QR code field.
 */
declare class DataMergeQrcodePlaceholder {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The data merge field to insert in the placeholder. For information, see data merge text placeholder and data merge image placeholder.
	 */
	readonly field: DataMergeField;

	/**
	 * The index of the DataMergeQrcodePlaceholder within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the DataMergeQrcodePlaceholder (a Document).
	 */
	readonly parent: Document;

	/**
	 * The page item on which to place the placeholder.
	 */
	readonly placeholderPageItem: PageItem;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DataMergeQrcodePlaceholder[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the DataMergeQrcodePlaceholder.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of data merge QR code placeholders.
 */
declare class DataMergeQrcodePlaceholders {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the DataMergeQrcodePlaceholder with the specified index.
	 * @param index The index.
	 */
	[index: number]: DataMergeQrcodePlaceholder;

	/**
	 * Creates a data merge QR code placeholder.
	 * @param placeholder The page item on which to place the placeholder.
	 * @param field The data merge field to insert.
	 * @param withProperties Initial values for properties of the new DataMergeQrcodePlaceholder
	 */
	add(placeholder: PageItem, field: DataMergeField, withProperties: object): DataMergeQrcodePlaceholder;

	/**
	 * Returns any DataMergeQrcodePlaceholder in the collection.
	 */
	anyItem(): DataMergeQrcodePlaceholder;

	/**
	 * Displays the number of elements in the DataMergeQrcodePlaceholder.
	 */
	count(): number;

	/**
	 * Returns every DataMergeQrcodePlaceholder in the collection.
	 */
	everyItem(): DataMergeQrcodePlaceholder[];

	/**
	 * Returns the first DataMergeQrcodePlaceholder in the collection.
	 */
	firstItem(): DataMergeQrcodePlaceholder;

	/**
	 * Returns the DataMergeQrcodePlaceholder with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DataMergeQrcodePlaceholder;

	/**
	 * Returns the DataMergeQrcodePlaceholders within the specified range.
	 * @param from The DataMergeQrcodePlaceholder, index, or name at the beginning of the range.
	 * @param to The DataMergeQrcodePlaceholder, index, or name at the end of the range.
	 */
	itemByRange(from: DataMergeQrcodePlaceholder | number | string, to: DataMergeQrcodePlaceholder | number | string): DataMergeQrcodePlaceholder[];

	/**
	 * Returns the last DataMergeQrcodePlaceholder in the collection.
	 */
	lastItem(): DataMergeQrcodePlaceholder;

	/**
	 * Returns the middle DataMergeQrcodePlaceholder in the collection.
	 */
	middleItem(): DataMergeQrcodePlaceholder;

	/**
	 * Returns the DataMergeQrcodePlaceholder whose index follows the specified DataMergeQrcodePlaceholder in the collection.
	 * @param obj The DataMergeQrcodePlaceholder whose index comes before the desired DataMergeQrcodePlaceholder.
	 */
	nextItem(obj: DataMergeQrcodePlaceholder): DataMergeQrcodePlaceholder;

	/**
	 * Returns the DataMergeQrcodePlaceholder with the index previous to the specified index.
	 * @param obj The index of the DataMergeQrcodePlaceholder that follows the desired DataMergeQrcodePlaceholder.
	 */
	previousItem(obj: DataMergeQrcodePlaceholder): DataMergeQrcodePlaceholder;

	/**
	 * Generates a string which, if executed, will return the DataMergeQrcodePlaceholder.
	 */
	toSource(): string;

}

/**
 * Story type options.
 */
declare enum StoryTypes {
	/**
	 * The story is an endnote story
	 */
	ENDNOTE_STORY = 1701737332,

	/**
	 * The story is an index.
	 */
	INDEXING_STORY = 1768190836,

	/**
	 * The story is a regular text story.
	 */
	REGULAR_STORY = 1919382388,

	/**
	 * The story is a table of contents.
	 */
	TOC_STORY = 1953461108,

}

/**
 * Story direction options.
 */
declare enum StoryDirectionOptions {
	/**
	 * Left to right direction.
	 */
	LEFT_TO_RIGHT_DIRECTION = 1278366308,

	/**
	 * Right to left direction.
	 */
	RIGHT_TO_LEFT_DIRECTION = 1379028068,

	/**
	 * Unknown direction.
	 */
	UNKNOWN_DIRECTION = 1433299812,

}

/**
 * Style import options.
 */
declare enum ImportFormat {
	/**
	 * Imports cell styles.
	 */
	CELL_STYLES_FORMAT = 1698919284,

	/**
	 * Imports character styles.
	 */
	CHARACTER_STYLES_FORMAT = 1131565940,

	/**
	 * Imports named grids.
	 */
	NAMED_GRIDS_FORMAT = 1315394420,

	/**
	 * Imports object styles.
	 */
	OBJECT_STYLES_FORMAT = 1332368244,

	/**
	 * Imports paragraph styles.
	 */
	PARAGRAPH_STYLES_FORMAT = 1885885300,

	/**
	 * Imports stroke styles.
	 */
	STROKE_STYLES_FORMAT = 1817408620,

	/**
	 * Imports table and cell styles.
	 */
	TABLE_AND_CELL_STYLES_FORMAT = 1700021107,

	/**
	 * Imports table styles.
	 */
	TABLE_STYLES_FORMAT = 1700033396,

	/**
	 * Imports character and paragraph styles.
	 */
	TEXT_STYLES_FORMAT = 1668305780,

	/**
	 * Imports table of contents styles.
	 */
	TOC_STYLES_FORMAT = 1415795572,

}

/**
 * Delimiter options for marking the end of the application of the nested style.
 */
declare enum NestedStyleDelimiters {
	/**
	 * Uses the first character or characters other than zero-width markers as the nested style delimiter. Zero-width markers include anchors, index markers, XML tags, and so on.
	 */
	ANY_CHARACTER = 1380541539,

	/**
	 * Uses the first word or words in the paragraph as the nested style delimiter. The first word is considered all characters preceding the first space or white space character in the paragraph.
	 */
	ANY_WORD = 1380541559,

	/**
	 * Uses the first automatic page number as the nested style delimiter.
	 */
	AUTO_PAGE_NUMBER = 1396797550,

	/**
	 * Uses the first numeric character or characters as the nested style delimiter. Note: To specify the number of digits, see repetition.
	 */
	DIGITS = 1380541540,

	/**
	 * Uses the dropcap as the nested style delimiter.
	 */
	DROPCAP = 1380541507,

	/**
	 * Uses the first em space as the nested style delimiter.
	 */
	EM_SPACE = 1397058899,

	/**
	 * Uses the inserted end nested style here character as the nested style delimiter.
	 */
	END_NESTED_STYLE = 1396855379,

	/**
	 * Uses the first en space as the nested style delimiter.
	 */
	EN_SPACE = 1397059155,

	/**
	 * Uses the first forced line break as the nested style delimiter.
	 */
	FORCED_LINE_BREAK = 1397124194,

	/**
	 * Uses the first indent-to-here tab character as the nested style delimiter. Note: Does not use the first indent-to-here tab stop. If no actual indent-to-here tab character has been inserted in the paragraph, the nested style is applied through the end of the paragraph.
	 */
	INDENT_HERE_TAB = 1397319796,

	/**
	 * Uses the first inline graphic as the nested style delimiter.
	 */
	INLINE_GRAPHIC = 1380541545,

	/**
	 * Uses the first alpha character or characters as the nested style delimiter. Note: To specify the number of letters, see repetition.
	 */
	LETTERS = 1380541548,

	/**
	 * Uses the first nonbreaking space as the nested style delimiter.
	 */
	NONBREAKING_SPACE = 1397645907,

	/**
	 * Repeat
	 */
	REPEAT = 1380545132,

	/**
	 * Uses the first section name marker as the nested style delimiter.
	 */
	SECTION_MARKER = 1400073805,

	/**
	 * Uses the first sentence or sentences in the paragraph as the nested style delimiter. The first sentence is considered all text preceding the first period, question mark, or exclamation mark in the paragraph.
	 */
	SENTENCE = 1380541555,

	/**
	 * Uses the first tab character as the nested style delimiter. Note: Does not use the first tab stop. If no actual tab character has been inserted in the paragraph, the nested style is applied through the end of the paragraph.
	 */
	TABS = 1380541556,

}

/**
 * Options for specifying an object on which to base the width of the paragraph rule above.
 */
declare enum RuleWidth {
	/**
	 * Makes the rule the width of the column.
	 */
	COLUMN_WIDTH = 1265399652,

	/**
	 * Makes the paragraph rule above the width of the first line of text in the paragraph.
	 */
	TEXT_WIDTH = 1886681207,

}

/**
 * Text alignment options.
 */
declare enum Justification {
	/**
	 * Aligns text to the side opposite the binding spine of the page.
	 */
	AWAY_FROM_BINDING_SIDE = 1633772147,

	/**
	 * Center aligns the text.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Justifies text text and center aligns the last line in the paragraph.
	 */
	CENTER_JUSTIFIED = 1667920756,

	/**
	 * Justifies the text, including the last line in the paragraph.
	 */
	FULLY_JUSTIFIED = 1718971500,

	/**
	 * Left aligns the text.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Justifies the text and left aligns the last line in the paragraph.
	 */
	LEFT_JUSTIFIED = 1818915700,

	/**
	 * Right aligns the text.
	 */
	RIGHT_ALIGN = 1919379572,

	/**
	 * Justifies the text and right aligns the last line in the paragraph.
	 */
	RIGHT_JUSTIFIED = 1919578996,

	/**
	 * Aligns text to the binding spine of the page or spread.
	 */
	TO_BINDING_SIDE = 1630691955,

}

/**
 * Alignment options for lines that contain a single word.
 */
declare enum SingleWordJustification {
	/**
	 * Center aligns the word.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Fully justifies the word.
	 */
	FULLY_JUSTIFIED = 1718971500,

	/**
	 * Left aligns the word.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Right aligns the word.
	 */
	RIGHT_ALIGN = 1919379572,

}

/**
 * Column and page break options.
 */
declare enum StartParagraph {
	/**
	 * Starts in the next available space.
	 */
	ANYWHERE = 1851945579,

	/**
	 * Starts at the top of the next column.
	 */
	NEXT_COLUMN = 1667396203,

	/**
	 * Starts at the top of the next even-numbered page.
	 */
	NEXT_EVEN_PAGE = 1164993131,

	/**
	 * Starts at the top of the next text frame in the thread.
	 */
	NEXT_FRAME = 1313235563,

	/**
	 * Starts at the top of the next odd-numbered page.
	 */
	NEXT_ODD_PAGE = 1332765291,

	/**
	 * Starts at the top of the next page.
	 */
	NEXT_PAGE = 1885500011,

}

/**
 * Text frame type options.
 */
declare enum FrameTypes {
	/**
	 * A frame grid.
	 */
	FRAME_GRID_TYPE = 1179087984,

	/**
	 * A text frame.
	 */
	TEXT_FRAME_TYPE = 1417176692,

	/**
	 * The frame type is not known.
	 */
	UNKNOWN = 1433299822,

}

/**
 * Orientation options.
 */
declare enum HorizontalOrVertical {
	/**
	 * Horizontal orientation.
	 */
	HORIZONTAL = 1752134266,

	/**
	 * Vertical orientation.
	 */
	VERTICAL = 1986359924,

}

/**
 * Tab stop alignment options.
 */
declare enum TabStopAlignment {
	/**
	 * Center.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Aligns the specified character with the tab stop.
	 */
	CHARACTER_ALIGN = 1952604515,

	/**
	 * Left.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Right.
	 */
	RIGHT_ALIGN = 1919379572,

}

/**
 * Starting point options for the first baseline of text.
 */
declare enum FirstBaseline {
	/**
	 * The tallest character in the font falls below the top inset of the object.
	 */
	ASCENT_OFFSET = 1296135023,

	/**
	 * The tops of upper case letters touch the top inset of the object.
	 */
	CAP_HEIGHT = 1296255087,

	/**
	 * The text em box height is the distance between the baseline of the text and the top inset of the object.
	 */
	EMBOX_HEIGHT = 1296386159,

	/**
	 * Uses the value specified for minimum first baseline offset as the distance between the baseline of the text and the top inset of the object.
	 */
	FIXED_HEIGHT = 1313228911,

	/**
	 * The text leading value defines the distance between the baseline of the text and the top inset of the object.
	 */
	LEADING_OFFSET = 1296852079,

	/**
	 * The tops of lower case letters touch the top inset of the object.
	 */
	X_HEIGHT = 1299728495,

}

/**
 * Vertical alignment options for text.
 */
declare enum VerticalJustification {
	/**
	 * Text is aligned at the bottom of the object.
	 */
	BOTTOM_ALIGN = 1651471469,

	/**
	 * Text is center aligned vertically in the object.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Lines of text are evenly distributed vertically between the top and bottom of the object.
	 */
	JUSTIFY_ALIGN = 1785951334,

	/**
	 * Text is aligned at the top of the object.
	 */
	TOP_ALIGN = 1953460256,

}

/**
 * Leading type options.
 */
declare enum Leading {
	/**
	 * Apply auto leading.
	 */
	AUTO = 1635019116,

}

/**
 * Figure style options for OpenType fonts.
 */
declare enum OTFFigureStyle {
	/**
	 * Use the default figure style for the font.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Use proportional width lining figures.
	 */
	PROPORTIONAL_LINING = 1330932848,

	/**
	 * Use proportional width oldstyle figures.
	 */
	PROPORTIONAL_OLDSTYLE = 1330933619,

	/**
	 * Use monspaced lining figures.
	 */
	TABULAR_LINING = 1330931316,

	/**
	 * Use monospaced oldstyle figures.
	 */
	TABULAR_OLDSTYLE = 1330933620,

}

/**
 * Capitalization options.
 */
declare enum Capitalization {
	/**
	 * Use all uppercase letters.
	 */
	ALL_CAPS = 1634493296,

	/**
	 * Use OpenType small caps.
	 */
	CAP_TO_SMALL_CAP = 1664250723,

	/**
	 * Do not change the capitalization of the text.
	 */
	NORMAL = 1852797549,

	/**
	 * Use small caps for lowercase letters.
	 */
	SMALL_CAPS = 1936548720,

}

/**
 * Text position options.
 */
declare enum Position {
	/**
	 * Normal position
	 */
	NORMAL = 1852797549,

	/**
	 * For OpenType fonts, shrinks the text but keeps text on the main text baseline. Note: Valid only for numeric characters.
	 */
	OT_DENOMINATOR = 1884247140,

	/**
	 * For OpenType fonts, shrinks the text but keeps the top of the characters aligned with the top of the main text. Note: Valid only for numeric characters.
	 */
	OT_NUMERATOR = 1884247150,

	/**
	 * For OpenType fonts, uses--if available--lowered glyphs that are sized correctly relative to the surrounding characters.
	 */
	OT_SUBSCRIPT = 1884247138,

	/**
	 * For OpenType fonts, uses--if available--raised glyphs that are sized correctly relative to the surrounding characters.
	 */
	OT_SUPERSCRIPT = 1884247155,

	/**
	 * Subscripts the text.
	 */
	SUBSCRIPT = 1935831907,

	/**
	 * Superscripts the text.
	 */
	SUPERSCRIPT = 1936749411,

}

/**
 * Text frame content type options.
 */
declare enum TextFrameContents {
	/**
	 * Fills the text frame with placeholder text.
	 */
	PLACEHOLDER_TEXT = 1346925688,

	/**
	 * Fills the text frame with arabic placeholder text.
	 */
	PLACEHOLDER_TEXT_ARABIC = 1346925665,

	/**
	 * Fills the text frame with cyrillic placeholder text.
	 */
	PLACEHOLDER_TEXT_CYRILLIC = 1346925667,

	/**
	 * Fills the text frame with greek placeholder text.
	 */
	PLACEHOLDER_TEXT_GREEK = 1346925671,

	/**
	 * Fills the text frame with hebrew placeholder text.
	 */
	PLACEHOLDER_TEXT_HEBREW = 1346925672,

}

/**
 * Special character options.
 */
declare enum SpecialCharacters {
	/**
	 * Inserts an arabic comma.
	 */
	ARABIC_COMMA = 1396798051,

	/**
	 * Inserts an arabic kashida.
	 */
	ARABIC_KASHIDA = 1396798059,

	/**
	 * Inserts an arabic question mark.
	 */
	ARABIC_QUESTION_MARK = 1396797805,

	/**
	 * Inserts an arabic semicolon.
	 */
	ARABIC_SEMICOLON = 1396798307,

	/**
	 * Inserts an automatic page number.
	 */
	AUTO_PAGE_NUMBER = 1396797550,

	/**
	 * Inserts a bullet character.
	 */
	BULLET_CHARACTER = 1396862068,

	/**
	 * Inserts a column break.
	 */
	COLUMN_BREAK = 1396927554,

	/**
	 * Inserts a copyright symbol.
	 */
	COPYRIGHT_SYMBOL = 1396929140,

	/**
	 * Inserts a degree symbol.
	 */
	DEGREE_SYMBOL = 1396991858,

	/**
	 * Inserts a discretionary hyphen.
	 */
	DISCRETIONARY_HYPHEN = 1396983920,

	/**
	 * Inserts a discretionary line break.
	 */
	DISCRETIONARY_LINE_BREAK = 1397777484,

	/**
	 * Inserts a dotted circle.
	 */
	DOTTED_CIRCLE = 1399092323,

	/**
	 * Inserts a double left quote.
	 */
	DOUBLE_LEFT_QUOTE = 1396984945,

	/**
	 * Inserts a double right quote.
	 */
	DOUBLE_RIGHT_QUOTE = 1396986481,

	/**
	 * Inserts a double straight quote.
	 */
	DOUBLE_STRAIGHT_QUOTE = 1396986737,

	/**
	 * Inserts an ellipsis character.
	 */
	ELLIPSIS_CHARACTER = 1397518451,

	/**
	 * Inserts an em dash.
	 */
	EM_DASH = 1397058884,

	/**
	 * Inserts an em space.
	 */
	EM_SPACE = 1397058899,

	/**
	 * Inserts an end nested style here character.
	 */
	END_NESTED_STYLE = 1396855379,

	/**
	 * Inserts an en dash.
	 */
	EN_DASH = 1397059140,

	/**
	 * Inserts an en space.
	 */
	EN_SPACE = 1397059155,

	/**
	 * Inserts a break to the next even page.
	 */
	EVEN_PAGE_BREAK = 1397059650,

	/**
	 * Inserts a figure space.
	 */
	FIGURE_SPACE = 1397122899,

	/**
	 * Inserts a fixed-width nonbreaking space.
	 */
	FIXED_WIDTH_NONBREAKING_SPACE = 1399746146,

	/**
	 * Inserts a flush space.
	 */
	FLUSH_SPACE = 1397124179,

	/**
	 * Inserts a footnote symbol.
	 */
	FOOTNOTE_SYMBOL = 1399221837,

	/**
	 * Inserts a forced line break.
	 */
	FORCED_LINE_BREAK = 1397124194,

	/**
	 * Inserts a frame break.
	 */
	FRAME_BREAK = 1397125698,

	/**
	 * Inserts a hair space.
	 */
	HAIR_SPACE = 1397256787,

	/**
	 * Inserts a hebrew geresh.
	 */
	HEBREW_GERESH = 1397253989,

	/**
	 * Inserts a hebrew gershayim.
	 */
	HEBREW_GERSHAYIM = 1397254003,

	/**
	 * Inserts a hebrew maqaf.
	 */
	HEBREW_MAQAF = 1397252717,

	/**
	 * Inserts a hebrew sof pasuk.
	 */
	HEBREW_SOF_PASUK = 1397252723,

	/**
	 * Inserts an indent to here character.
	 */
	INDENT_HERE_TAB = 1397319796,

	/**
	 * Inserts a left to right embedding mark.
	 */
	LEFT_TO_RIGHT_EMBEDDING = 1399616101,

	/**
	 * Inserts a left to right mark.
	 */
	LEFT_TO_RIGHT_MARK = 1399616109,

	/**
	 * Inserts a left to right override mark.
	 */
	LEFT_TO_RIGHT_OVERRIDE = 1399616111,

	/**
	 * Inserts the next page number.
	 */
	NEXT_PAGE_NUMBER = 1397649518,

	/**
	 * Inserts a nonbreaking hyphen.
	 */
	NONBREAKING_HYPHEN = 1397645928,

	/**
	 * Inserts a nonbreaking space.
	 */
	NONBREAKING_SPACE = 1397645907,

	/**
	 * Inserts a break to the next odd page.
	 */
	ODD_PAGE_BREAK = 1397715010,

	/**
	 * Inserts a page break.
	 */
	PAGE_BREAK = 1397778242,

	/**
	 * Inserts a paragraph symbol.
	 */
	PARAGRAPH_SYMBOL = 1397776754,

	/**
	 * Inserts a pop directional formatting mark.
	 */
	POP_DIRECTIONAL_FORMATTING = 1399874662,

	/**
	 * Inserts the previous page number.
	 */
	PREVIOUS_PAGE_NUMBER = 1397780590,

	/**
	 * Inserts a punctuation space.
	 */
	PUNCTUATION_SPACE = 1397780051,

	/**
	 * Inserts a quarter-width space.
	 */
	QUARTER_SPACE = 1397847379,

	/**
	 * Inserts a registered trademark.
	 */
	REGISTERED_TRADEMARK = 1397904493,

	/**
	 * Inserts a right indent tab.
	 */
	RIGHT_INDENT_TAB = 1397909876,

	/**
	 * Inserts a right to left embedding mark.
	 */
	RIGHT_TO_LEFT_EMBEDDING = 1400007781,

	/**
	 * Inserts a right to left mark.
	 */
	RIGHT_TO_LEFT_MARK = 1400007789,

	/**
	 * Inserts a right to left override mark.
	 */
	RIGHT_TO_LEFT_OVERRIDE = 1400007791,

	/**
	 * Inserts a section marker.
	 */
	SECTION_MARKER = 1400073805,

	/**
	 * Inserts a section symbol.
	 */
	SECTION_SYMBOL = 1400073811,

	/**
	 * Inserts a single left quote.
	 */
	SINGLE_LEFT_QUOTE = 1397967985,

	/**
	 * Inserts a single right quote.
	 */
	SINGLE_RIGHT_QUOTE = 1397969521,

	/**
	 * Inserts a single straight quote.
	 */
	SINGLE_STRAIGHT_QUOTE = 1397969777,

	/**
	 * Inserts a sixth-width space.
	 */
	SIXTH_SPACE = 1397975379,

	/**
	 * Inserts the specified text variable.
	 */
	TEXT_VARIABLE = 1397781622,

	/**
	 * Inserts a thin space.
	 */
	THIN_SPACE = 1398042195,

	/**
	 * Inserts a third-width space.
	 */
	THIRD_SPACE = 1398040659,

	/**
	 * Inserts a trademark symbol.
	 */
	TRADEMARK_SYMBOL = 1398041963,

	/**
	 * Inserts a zero width joiner.
	 */
	ZERO_WIDTH_JOINER = 1400534890,

	/**
	 * Inserts a zero-width non-joiner.
	 */
	ZERO_WIDTH_NONJOINER = 1397780074,

}

/**
 * Text case options.
 */
declare enum ChangecaseMode {
	/**
	 * Makes all letters lowercase.
	 */
	LOWERCASE = 1667460195,

	/**
	 * Makes the first letter of each sentence uppercase.
	 */
	SENTENCECASE = 1667461987,

	/**
	 * Makes the first letter of each word uppercase.
	 */
	TITLECASE = 1667462243,

	/**
	 * Makes all letters uppercase.
	 */
	UPPERCASE = 1667462499,

}

/**
 * The location of the binding spine in a spread.
 */
declare enum BindingOptions {
	/**
	 * Uses the default binding side.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Moves the page to the left side of the spread's binding spine.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Moves the page to the right side of the spread's binding spine.
	 */
	RIGHT_ALIGN = 1919379572,

}

/**
 * Page orientation options.
 */
declare enum PageOrientation {
	/**
	 * Landscape.
	 */
	LANDSCAPE = 2003395685,

	/**
	 * Portrait.
	 */
	PORTRAIT = 1751738216,

}

/**
 * Zero point placement options.
 */
declare enum RulerOrigin {
	/**
	 * The top-left corner of each page is a new zero point on the horizontal ruler.
	 */
	PAGE_ORIGIN = 1380143215,

	/**
	 * The zero point is at the top-left corner of the left-most page and at the top of the binding spine. The horizontal ruler measures from the leftmost page to the binding edge, and from the binding spine through the right edge of the right-most page. Also locks the zero point and prevents manual overrides.
	 */
	SPINE_ORIGIN = 1380143984,

	/**
	 * The zero point is at the top-left corner of the spread and the ruler increments continuously across all pages of the spread.
	 */
	SPREAD_ORIGIN = 1380143983,

}

/**
 * The unit of measurement.
 */
declare enum MeasurementUnits {
	/**
	 * Agates
	 */
	AGATES = 2051106676,

	/**
	 * American points.
	 */
	AMERICAN_POINTS = 1514238068,

	/**
	 * Bai
	 */
	BAI = 2051170665,

	/**
	 * Centimeters.
	 */
	CENTIMETERS = 2053336435,

	/**
	 * Ciceros.
	 */
	CICEROS = 2053335395,

	/**
	 * Uses points as the unit of measurement and specifies the number of points between major tick marks on the specified ruler. For information, see horizontal custom points and vertical custom points.
	 */
	CUSTOM = 1131639917,

	/**
	 * Ha.
	 */
	HA = 1516790048,

	/**
	 * Inches.
	 */
	INCHES = 2053729891,

	/**
	 * Decimal inches.
	 */
	INCHES_DECIMAL = 2053729892,

	/**
	 * Millimeters.
	 */
	MILLIMETERS = 2053991795,

	/**
	 * Mils
	 */
	MILS = 2051893612,

	/**
	 * Picas.
	 */
	PICAS = 2054187363,

	/**
	 * Pixels.
	 */
	PIXELS = 2054187384,

	/**
	 * Points.
	 */
	POINTS = 2054188905,

	/**
	 * Q.
	 */
	Q = 2054255973,

	/**
	 * U
	 */
	U = 2051691808,

}

/**
 * The page binding placement.
 */
declare enum PageBindingOptions {
	/**
	 * Uses default page binding.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Pages are bound on the left.
	 */
	LEFT_TO_RIGHT = 1819570786,

	/**
	 * Pages are bound on the right.
	 */
	RIGHT_TO_LEFT = 1920232546,

}

/**
 * The zero point for the baseline grid offset.
 */
declare enum BaselineGridRelativeOption {
	/**
	 * The baseline grid offset zero point is at the top page margin.
	 */
	TOP_OF_MARGIN_OF_BASELINE_GRID_RELATIVE_OPTION = 1162766189,

	/**
	 * The baseline grid offset zero point is at the top of the page.
	 */
	TOP_OF_PAGE_OF_BASELINE_GRID_RELATIVE_OPTION = 1162766196,

}

/**
 * Binding spine placement options.
 */
declare enum PageSideOptions {
	/**
	 * The page is on the left side of the binding spine in the spread.
	 */
	LEFT_HAND = 1818653800,

	/**
	 * The page is on the right side of the binding spine in the spread.
	 */
	RIGHT_HAND = 1919382632,

	/**
	 * The page is a single-sided page.
	 */
	SINGLE_SIDED = 1970496888,

}

/**
 * Scaling options.
 */
declare enum WhenScalingOptions {
	/**
	 * Adjust the scaling percentage of the item's transform
	 */
	ADJUST_SCALING_PERCENTAGE = 1934587252,

	/**
	 * Apply scaling to the item's content
	 */
	APPLY_TO_CONTENT = 1934192243,

}

/**
 * Options for page color label.
 */
declare enum PageColorOptions {
	/**
	 * No color.
	 */
	NOTHING = 1851876449,

	/**
	 * Uses the color label of the page's master page.
	 */
	USE_MASTER_COLOR = 1346594413,

}

/**
 * Options for document intent.
 */
declare enum DocumentIntentOptions {
	/**
	 * Intended purpose of document is for publishing to mobiles.
	 */
	MOBILE_INTENT = 1768846445,

	/**
	 * Intended purpose of document is for print output.
	 */
	PRINT_INTENT = 1768846448,

	/**
	 * Intended purpose of document is for web output.
	 */
	WEB_INTENT = 1768846455,

}

/**
 * Options for setting the layout rule on a page.
 */
declare enum LayoutRuleOptions {
	/**
	 * Use guide slicing to resize objects on the page as it resizes.
	 */
	GUIDE_BASED = 1280329538,

	/**
	 * Reposition and resize objects on the page as it resizes.
	 */
	OBJECT_BASED = 1280331586,

	/**
	 * No layout rule on the page as it resizes.
	 */
	OFF = 1330005536,

	/**
	 * Use existing layout rule setting on the page. Used for creating alternate layouts.
	 */
	PRESERVE_EXISTING = 1280331890,

	/**
	 * Recenter objects on the page as it resizes.
	 */
	RECENTER = 1280332387,

	/**
	 * Scale objects on the page as it resizes.
	 */
	SCALE = 1280332643,

	/**
	 * Use layout rule from the page's applied master page.
	 */
	USE_MASTER = 1280333133,

}

/**
 * Modes that control which nearby snapshots, by size and shape, are blended into the new layout.
 */
declare enum SnapshotBlendingModes {
	/**
	 * Use up to three nearest snapshots even if a snapshot is in a different class that the new layout.
	 */
	FULL_SNAPSHOT_BLENDING = 1399735925,

	/**
	 * Turns off the influence of layout snapshots completely.
	 */
	IGNORE_LAYOUT_SNAPSHOTS = 1399736679,

	/**
	 * Use only layout snapshots within the same class as the new layout.
	 */
	LIMITED_SNAPSHOT_BLENDING = 1399737449,

	/**
	 * Use the layout snapshot nearest in size and shape to the new layout.
	 */
	USE_NEAREST_SNAPSHOT = 1399737957,

}

/**
 * Color space options for representing color in the exported EPS.
 */
declare enum EPSColorSpace {
	/**
	 * Creates a separable file by representing all color values using the gamut of CYMK process color inks.
	 */
	CMYK = 1129142603,

	/**
	 * Converts all color values to high-quality black-and-white images. Gray levels of the converted objects represent the luminosity of the original objects.
	 */
	GRAY = 1766290041,

	/**
	 * Uses PostScript color management (includes profiles).
	 */
	POSTSCRIPT_COLOR_MANAGEMENT = 1164208483,

	/**
	 * Represents all color values using the RGB color space. Best suited for documents that will be viewed on-screen.
	 */
	RGB = 1666336578,

	/**
	 * Leaves each image in its original color space.
	 */
	UNCHANGED_COLOR_SPACE = 1970161251,

}

/**
 * Preview image file format options.
 */
declare enum PreviewTypes {
	/**
	 * Does not save a preview image.
	 */
	NONE = 1852796517,

	/**
	 * Saves the preview in PICT format. Note: Valid only for Mac OS.
	 */
	PICT_PREVIEW = 1164996724,

	/**
	 * Saves the preview in TIFF format.
	 */
	TIFF_PREVIEW = 1164997734,

}

/**
 * Options for embedding fonts in the exported EPS.
 */
declare enum FontEmbedding {
	/**
	 * Embeds all fonts once per page.
	 */
	COMPLETE = 2003332197,

	/**
	 * Embeds only references to fonts.
	 */
	NONE = 1852796517,

	/**
	 * Embeds only the characters (glyphs) used in the document. Glyphs are downloaded once per page.
	 */
	SUBSET = 1768842098,

}

/**
 * Page scaling options.
 */
declare enum ScaleModes {
	/**
	 * Scales the page to fit the paper. Note: Valid only when tile is false.
	 */
	SCALE_TO_FIT = 1935897702,

	/**
	 * Scales the page width and height.
	 */
	SCALE_WIDTH_HEIGHT = 1935898745,

}

/**
 * Print layer options
 */
declare enum PrintLayerOptions {
	/**
	 * Prints all layers.
	 */
	ALL_LAYERS = 1634495564,

	/**
	 * Prints all visible layers.
	 */
	VISIBLE_LAYERS = 1986622284,

	/**
	 * Prints only layers that are both visible and printable.
	 */
	VISIBLE_PRINTABLE_LAYERS = 1987080780,

}

/**
 * The enumeration of tool box tools.
 */
declare enum UITools {
	/**
	 * The add anchor point tool
	 */
	ADD_ANCHOR_POINT = 1633767540,

	/**
	 * The convert direction point tool
	 */
	CONVERT_DIRECTION_POINT = 1667518580,

	/**
	 * The delete anchor point tool
	 */
	DELETE_ANCHOR_POINT = 1684099188,

	/**
	 * The direct selection tool
	 */
	DIRECT_SELECTION_TOOL = 1685277812,

	/**
	 * The ellipse frame tool
	 */
	ELLIPSE_FRAME_TOOL = 1701205100,

	/**
	 * The ellipse tool
	 */
	ELLIPSE_TOOL = 1701598316,

	/**
	 * The erase tool
	 */
	ERASE_TOOL = 1701991269,

	/**
	 * The eye dropper tool
	 */
	EYE_DROPPER_TOOL = 1701074028,

	/**
	 * The free transform tool
	 */
	FREE_TRANSFORM_TOOL = 1718899820,

	/**
	 * The gap tool
	 */
	GAP_TOOL = 1734430836,

	/**
	 * The gradient feather tool
	 */
	GRADIENT_FEATHER_TOOL = 1734759532,

	/**
	 * The gradient swatch tool
	 */
	GRADIENT_SWATCH_TOOL = 1735611500,

	/**
	 * The hand tool
	 */
	HAND_TOOL = 1751209068,

	/**
	 * The horizontal grid tool
	 */
	HORIZONTAL_GRID_TOOL = 1751602284,

	/**
	 * The line tool
	 */
	LINE_TOOL = 1819169900,

	/**
	 * The measure tool
	 */
	MEASURE_TOOL = 1835357292,

	/**
	 * The motion path tool
	 */
	MOTION_PATH_TOOL = 1836078188,

	/**
	 * No selection
	 */
	NONE = 1852796517,

	/**
	 * The note tool
	 */
	NOTE_TOOL = 1852789868,

	/**
	 * The page tool
	 */
	PAGE_TOOL = 1936741484,

	/**
	 * The pencil tool
	 */
	PENCIL_TOOL = 1886274412,

	/**
	 * The pen tool
	 */
	PEN_TOOL = 1885687412,

	/**
	 * The place cursor tool which gets set after an import via the Place command
	 */
	PLACE_CURSOR_TOOL = 1885557868,

	/**
	 * The polygon frame tool
	 */
	POLYGON_FRAME_TOOL = 1885754476,

	/**
	 * The polygon tool
	 */
	POLYGON_TOOL = 1886147692,

	/**
	 * The rectangle frame tool
	 */
	RECTANGLE_FRAME_TOOL = 1919308908,

	/**
	 * The rectangle tool
	 */
	RECTANGLE_TOOL = 1919243372,

	/**
	 * The rotate tool
	 */
	ROTATE_TOOL = 1919898732,

	/**
	 * The scale tool
	 */
	SCALE_TOOL = 1935889516,

	/**
	 * The scissors tool
	 */
	SCISSORS_TOOL = 1935891060,

	/**
	 * The selection tool
	 */
	SELECTION_TOOL = 1936018548,

	/**
	 * The shear tool
	 */
	SHEAR_TOOL = 1936217196,

	/**
	 * The smooth tool
	 */
	SMOOTH_TOOL = 1936544872,

	/**
	 * The table creation tool
	 */
	TABLE_TOOL = 1952601196,

	/**
	 * The type on a path tool
	 */
	TYPE_ON_PATH_TOOL = 1953452148,

	/**
	 * The type tool
	 */
	TYPE_TOOL = 1954107508,

	/**
	 * The vertical grid tool
	 */
	VERTICAL_GRID_TOOL = 1986483308,

	/**
	 * The vertical type on a path tool
	 */
	VERTICAL_TYPE_ON_PATH_TOOL = 1987334000,

	/**
	 * The vertical type tool
	 */
	VERTICAL_TYPE_TOOL = 1987335276,

	/**
	 * The zoom tool
	 */
	ZOOM_TOOL = 2053985388,

}

/**
 * Resolution options when loaded master pages have the same name as existing masterpages.
 */
declare enum GlobalClashResolutionStrategyForMasterPage {
	/**
	 * Overwrites the existing master page.
	 */
	LOAD_ALL_WITH_OVERWRITE = 1279350607,

	/**
	 * Renames the new master page.
	 */
	LOAD_ALL_WITH_RENAME = 1279350610,

}

/**
 * The type of clipping path to create.
 */
declare enum ClippingPathType {
	/**
	 * The clipping path is based on an alpha channel defined for the graphic in a graphics application.
	 */
	ALPHA_CHANNEL = 1634756707,

	/**
	 * The clipping path is based on pixel value threshold and tolerance.
	 */
	DETECT_EDGES = 1685349735,

	/**
	 * No clipping path applied.
	 */
	NONE = 1852796517,

	/**
	 * The clipping path is defined for the graphic in Photoshop.
	 */
	PHOTOSHOP_PATH = 1886613620,

	/**
	 * (Read-only) The clipping path has been manually edited.
	 */
	USER_MODIFIED_PATH = 1970106484,

}

/**
 * Link updating options.
 */
declare enum UpdateLinkOptions {
	/**
	 * Changes the visiblity settings to match the modified file.
	 */
	APPLICATION_SETTINGS = 1819243873,

	/**
	 * Ignores the modified settings and maintains those specified in the current document.
	 */
	KEEP_OVERRIDES = 1819241327,

	/**
	 * Unspecified update option.
	 */
	UNKNOWN = 1433299822,

}

/**
 * Icon size options.
 */
declare enum IconSizes {
	/**
	 * Extra large icon.
	 */
	EXTRA_LARGE_ICON = 1885695079,

	/**
	 * Extra small icon.
	 */
	EXTRA_SMALL_ICON = 1885696877,

	/**
	 * Jumbo icon.
	 */
	JUMBO_ICON = 1886943340,

	/**
	 * Large icon.
	 */
	LARGE_ICON = 1884058215,

	/**
	 * Medium icon.
	 */
	MEDIUM_ICON = 1886217572,

	/**
	 * Small icon.
	 */
	SMALL_ICON = 1886612844,

}

/**
 * Palette layout resizing options.
 */
declare enum PanelLayoutResize {
	/**
	 * Do not resize master pages panel area when resizing panel.
	 */
	MASTERS_FIXED = 1886416230,

	/**
	 * Do not resize document pages panel area when resizing panel.
	 */
	PAGES_FIXED = 1886414456,

	/**
	 * Resize panel areas proportionally.
	 */
	PROPORTIONAL_RESIZE = 1886417010,

}

/**
 * options for viewing pages in Pages Panel
 */
declare enum PageViewOptions {
	/**
	 * Pages arranged in vertical columns by alternate layout.
	 */
	BY_ALTERNATE_LAYOUT = 1987277931,

	/**
	 * Pages arranged in horizontal rows.
	 */
	HORIZONTALLY = 1752396907,

	/**
	 * Pages arranged in a vertical column.
	 */
	VERTICALLY = 1987211127,

}

/**
 * Options for specifying how to represent color information in the exported PDF.
 */
declare enum PDFColorSpace {
	/**
	 * Represents all color values using CYMK color space.
	 */
	CMYK = 1129142603,

	/**
	 * Converts all color values to high-quality black-and-white images. Gray levels of the converted objects represent the luminosity of the original objects.
	 */
	GRAY = 1766290041,

	/**
	 * Repurposes CMYK colors.
	 */
	REPURPOSE_CMYK = 1917013337,

	/**
	 * Repurposes RGB colors.
	 */
	REPURPOSE_RGB = 1917994818,

	/**
	 * Represents all color values using the RGB color space. Best suited for documents that will be viewed onscreen.
	 */
	RGB = 1666336578,

	/**
	 * Leaves each image in its original color space.
	 */
	UNCHANGED_COLOR_SPACE = 1970161251,

}

/**
 * The exported PDF document's Acrobat compatibility.
 */
declare enum AcrobatCompatibility {
	/**
	 * Makes the file compatible with Acrobat 4.0 and later.
	 */
	ACROBAT_4 = 1097020464,

	/**
	 * Makes the file compatible with Acrobat 5.0 and later.
	 */
	ACROBAT_5 = 1097020720,

	/**
	 * Makes the file compatible with Acrobat 6.0 and later.
	 */
	ACROBAT_6 = 1097020976,

	/**
	 * Makes the file compatible with Acrobat 7.0 or higher.
	 */
	ACROBAT_7 = 1097021232,

	/**
	 * Acrobat 8.0 compatibility.
	 */
	ACROBAT_8 = 1097021488,

}

/**
 * The ICC profiles to include in the PDF document.
 */
declare enum ICCProfiles {
	/**
	 * Includes all ICC profiles.
	 */
	INCLUDE_ALL = 1229144929,

	/**
	 * Does not include ICC profiles.
	 */
	INCLUDE_NONE = 1229144942,

	/**
	 * Includes RGB and tagged source CMYK profiles.
	 */
	INCLUDE_RGB_AND_TAGGED = 1229144946,

	/**
	 * Includes tagged source profiles.
	 */
	INCLUDE_TAGGED = 1229144948,

}

/**
 * The type of compression for bitmap images.
 */
declare enum BitmapCompression {
	/**
	 * The Automatic JPEG 2000 compression method.
	 */
	AUTOMATIC_JPEG_2000 = 1634365490,

	/**
	 * Uses JPEG compression and automatically determines the best quality type. Valid only when acrobat compatibility is acrobat 6 or higher.
	 */
	AUTO_COMPRESSION = 1631808880,

	/**
	 * Uses JPEG compression.
	 */
	JPEG = 1785751398,

	/**
	 * Uses JPEG 2000 compression. Valid only when acrobat compatibility is acrobat 6 or higher.
	 */
	JPEG_2000 = 1785751346,

	/**
	 * Uses no compression.
	 */
	NONE = 1852796517,

	/**
	 * Uses ZIP compression.
	 */
	ZIP = 2053730371,

}

/**
 * The amount and type of compression to use for bitmap images.
 */
declare enum CompressionQuality {
	/**
	 * Uses 8-bit compression. Valid only when bitmap compression is ZIP.
	 */
	EIGHT_BIT = 1701722210,

	/**
	 * Uses 4-bit compression. Valid only when bitmap compression is ZIP.
	 */
	FOUR_BIT = 1701721186,

	/**
	 * Uses high compression. Not valid when bitmap compression is ZIP.
	 */
	HIGH = 1701726313,

	/**
	 * Uses low compression. Not valid when bitmap compression is ZIP.
	 */
	LOW = 1701727351,

	/**
	 * Uses maximum compression. Not valid when bitmap compression is ZIP.
	 */
	MAXIMUM = 1701727608,

	/**
	 * Uses medium compression. Not valid when bitmap compression is ZIP.
	 */
	MEDIUM = 1701727588,

	/**
	 * Uses minimum compression. Not valid when bitmap compression is ZIP.
	 */
	MINIMUM = 1701727598,

}

/**
 * The amount and type of compression to apply to monochrome bitmap images.
 */
declare enum MonoBitmapCompression {
	/**
	 * Uses CCITT Group 3 compression.
	 */
	CCIT3 = 1128879155,

	/**
	 * Uses CCITT Group 4 compression.
	 */
	CCIT4 = 1128879156,

	/**
	 * Uses no compression.
	 */
	NONE = 1852796517,

	/**
	 * Uses Run Length compression.
	 */
	RUN_LENGTH = 1919839299,

	/**
	 * Uses ZIP compression.
	 */
	ZIP = 2053730371,

}

/**
 * PDF mark weight
 */
declare enum PDFMarkWeight {
	/**
	 * Printer mark line weight of 0.05 mm.
	 */
	P05MM = 808807789,

	/**
	 * Printer mark line weight of 0.07 mm.
	 */
	P07MM = 808938861,

	/**
	 * Printer mark line weight of 0.10 mm.
	 */
	P10MM = 825257325,

	/**
	 * Printer mark line weight of 0.125 points.
	 */
	P125PT = 825374064,

	/**
	 * Printer mark line weight of 0.15 mm.
	 */
	P15MM = 825585005,

	/**
	 * Printer mark line weight of 0.20 mm.
	 */
	P20MM = 842034541,

	/**
	 * Printer mark line weight of 0.25 points.
	 */
	P25PT = 842346608,

	/**
	 * Printer mark line weight of 0.30 mm.
	 */
	P30MM = 858811757,

	/**
	 * Printer mark line weight of 0.50 points.
	 */
	P50PT = 892350576,

}

/**
 * The resampling method.
 */
declare enum Sampling {
	/**
	 * Uses a weighted average to determine pixel color.
	 */
	BICUBIC_DOWNSAMPLE = 1650742125,

	/**
	 * Averages the pixels in a sample area and replaces the entire area with the average pixel color.
	 */
	DOWNSAMPLE = 1684951917,

	/**
	 * Uses no resampling.
	 */
	NONE = 1852796517,

	/**
	 * Chooses a pixel in the center of the sample area and replaces the entire area with that pixel color.
	 */
	SUBSAMPLE = 1935823725,

}

/**
 * The type of preset to import or export.
 */
declare enum ExportPresetFormat {
	/**
	 * Document presets.
	 */
	DOCUMENT_PRESETS_FORMAT = 1683190892,

	/**
	 * Flattener presets.
	 */
	FLATTENER_PRESETS_FORMAT = 1951626348,

	/**
	 * PDF export presets.
	 */
	PDF_EXPORT_PRESETS_FORMAT = 1716745324,

	/**
	 * Printer presets.
	 */
	PRINTER_PRESETS_FORMAT = 1918071916,

}

/**
 * The amount of the PDF document to place.
 */
declare enum PDFCrop {
	/**
	 * Places only the area defined by the PDF author as placeable artwork.
	 */
	CROP_ART = 1131573313,

	/**
	 * Places only the area that represents clipped content.
	 */
	CROP_BLEED = 1131573314,

	/**
	 * Places the page's bounding box using all layers.
	 */
	CROP_CONTENT_ALL_LAYERS = 1131561324,

	/**
	 * Places the page's bounding box using visible layers only.
	 */
	CROP_CONTENT_VISIBLE_LAYERS = 1131566703,

	/**
	 * Places the area that represents the physical paper size of the original PDF document.
	 */
	CROP_MEDIA = 1131573325,

	/**
	 * Places only the area displayed by Acrobat.
	 */
	CROP_PDF = 1131573328,

	/**
	 * Places only the area that represents the final trim size of the document.
	 */
	CROP_TRIM = 1131573332,

}

/**
 * The objects to compress in the PDF document.
 */
declare enum PDFCompressionType {
	/**
	 * Uses no compression.
	 */
	COMPRESS_NONE = 1131368047,

	/**
	 * Compress all objects.
	 */
	COMPRESS_OBJECTS = 1131368290,

	/**
	 * Compresses only objects related to PDF structure.
	 */
	COMPRESS_STRUCTURE = 1131369332,

}

/**
 * The color profile.
 */
declare enum PDFProfileSelector {
	/**
	 * Uses the document's CMYK profile.
	 */
	USE_DOCUMENT = 1967419235,

	/**
	 * Uses the monitor's color profile.
	 */
	USE_MONITOR_PROFILE = 1836008528,

	/**
	 * Uses no profile.
	 */
	USE_NO_PROFILE = 1851868240,

	/**
	 * Uses the working CMYK profile.
	 */
	WORKING = 1466921579,

}

/**
 * Options for specifying the PDF/X compliance standard.
 */
declare enum PDFXStandards {
	/**
	 * Does not check for compliance with a PDF/X standard.
	 */
	NONE = 1852796517,

	/**
	 * Checks for compliance with the PDF/X-1a:2001 standard.
	 */
	PDFX1A2001_STANDARD = 1396912481,

	/**
	 * Checks for compliance with the PDF/X-1a:2003 standard.
	 */
	PDFX1A2003_STANDARD = 1395745075,

	/**
	 * Checks for compliance with the PDF/X-3:2002 standard.
	 */
	PDFX32002_STANDARD = 1396922419,

	/**
	 * Checks for compliance with the PDF/X-3:2003 standard.
	 */
	PDFX32003_STANDARD = 1398289203,

	/**
	 * PDFX42010 standard is used.
	 */
	PDFX42010_STANDARD = 1398289496,

}

/**
 * Export layer options.
 */
declare enum ExportLayerOptions {
	/**
	 * Export all layers
	 */
	EXPORT_ALL_LAYERS = 1702388076,

	/**
	 * Export visible layers
	 */
	EXPORT_VISIBLE_LAYERS = 1702393452,

	/**
	 * Export visible and printable layers
	 */
	EXPORT_VISIBLE_PRINTABLE_LAYERS = 1702260844,

}

/**
 * PDF export magnification options.
 */
declare enum PdfMagnificationOptions {
	/**
	 * Uses the actual size.
	 */
	ACTUAL_SIZE = 2053206906,

	/**
	 * Uses default magnification.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Uses 50 percent magnification option.
	 */
	FIFTY_PERCENT = 2053531248,

	/**
	 * Uses the fit height magnification option.
	 */
	FIT_HEIGHT = 1212437352,

	/**
	 * Uses the fit page magnification option.
	 */
	FIT_PAGE = 2053534832,

	/**
	 * Uses the fit visible magnification option.
	 */
	FIT_VISIBLE = 1212437334,

	/**
	 * Uses the fit width magnification option.
	 */
	FIT_WIDTH = 1212437335,

	/**
	 * Uses 100 percent magnification option.
	 */
	ONE_HUNDRED_PERCENT = 2053533544,

	/**
	 * Uses 75 percent magnification option.
	 */
	SEVENTY_FIVE_PERCENT = 2053534566,

	/**
	 * Uses 25 percent magnification option.
	 */
	TWENTY_FIVE_PERCENT = 2053534822,

}

/**
 * PDF export page layout options.
 */
declare enum PageLayoutOptions {
	/**
	 * Uses default page layout.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Single page layout.
	 */
	SINGLE_PAGE = 1987736432,

	/**
	 * Single page continuous layout.
	 */
	SINGLE_PAGE_CONTINUOUS = 1884508259,

	/**
	 * Two up cover page page layout.
	 */
	TWO_UP_COVER_PAGE = 1884570448,

	/**
	 * Two up cover page continuous page layout.
	 */
	TWO_UP_COVER_PAGE_CONTINUOUS = 1884570467,

	/**
	 * Two up facing page layout.
	 */
	TWO_UP_FACING = 1884575046,

	/**
	 * Two up facing continuous page layout.
	 */
	TWO_UP_FACING_CONTINUOUS = 1884571235,

}

/**
 * PDF export raster resolution options.
 */
declare enum RasterResolutionOptions {
	/**
	 * 96 pixels per inch.
	 */
	NINETY_SIX_PPI = 1853059184,

	/**
	 * 144 pixels per inch.
	 */
	ONE_HUNDRED_FORTY_FOUR_PPI = 1868984432,

	/**
	 * 72 pixels per inch.
	 */
	SEVENTY_TWO_PPI = 1937010800,

}

/**
 * PDF raster compression options.
 */
declare enum PDFRasterCompressionOptions {
	/**
	 * Uses JPEG compression and automatically determines the best quality type.
	 */
	AUTOMATIC_COMPRESSION = 1936875875,

	/**
	 * Uses JPEG compression.
	 */
	JPEG_COMPRESSION = 1936878179,

	/**
	 * Uses the best quality type.
	 */
	LOSSLESS_COMPRESSION = 1936878691,

}

/**
 * PDF JPEG Quality options.
 */
declare enum PDFJPEGQualityOptions {
	/**
	 * Uses high JPEG compression.
	 */
	HIGH = 1701726313,

	/**
	 * Uses low JPEG compression.
	 */
	LOW = 1701727351,

	/**
	 * Uses maximum JPEG compression.
	 */
	MAXIMUM = 1701727608,

	/**
	 * Uses medium JPEG compression.
	 */
	MEDIUM = 1701727588,

	/**
	 * Uses minimum JPEG compression.
	 */
	MINIMUM = 1701727598,

}

/**
 * Options for how to draw interactive elements.
 */
declare enum InteractiveElementsOptions {
	/**
	 * Draw interactive elements appearance only.
	 */
	APPEARANCE_ONLY = 1097887823,

	/**
	 * Do not include interactive elements.
	 */
	DO_NOT_INCLUDE = 1145981283,

}

/**
 * Options for how to draw interactive elements.
 */
declare enum InteractivePDFInteractiveElementsOptions {
	/**
	 * Draw interactive elements appearance only.
	 */
	APPEARANCE_ONLY = 1097887823,

	/**
	 * Include all interactive elements.
	 */
	INCLUDE_ALL_MEDIA = 1231241580,

}

/**
 * Page transition to use as an override when exporting.
 */
declare enum PageTransitionOverrideOptions {
	/**
	 * The Blinds page transition.
	 */
	BLINDS_TRANSITION = 1886667372,

	/**
	 * The Blinds page transition.
	 */
	BOX_TRANSITION = 1886667384,

	/**
	 * The Comb page transition.
	 */
	COMB_TRANSITION = 1886667618,

	/**
	 * The Cover page transition.
	 */
	COVER_TRANSITION = 1886667638,

	/**
	 * The Dissolve page transition.
	 */
	DISSOLVE_TRANSITION = 1886667891,

	/**
	 * The Fade page transition.
	 */
	FADE_TRANSITION = 1886668388,

	/**
	 * Use the page transition from the document.
	 */
	FROM_DOCUMENT = 1718764655,

	/**
	 * No page transition applied.
	 */
	NONE = 1852796517,

	/**
	 * The Page Turn page transition (SWF only).
	 */
	PAGE_TURN_TRANSITION = 1886670932,

	/**
	 * The Push page transition.
	 */
	PUSH_TRANSITION = 1886670963,

	/**
	 * The Split page transition.
	 */
	SPLIT_TRANSITION = 1886671728,

	/**
	 * The Uncover page transition.
	 */
	UNCOVER_TRANSITION = 1886672227,

	/**
	 * The Wipe page transition.
	 */
	WIPE_TRANSITION = 1886672752,

	/**
	 * The Zoom In page transition.
	 */
	ZOOM_IN_TRANSITION = 1886673481,

	/**
	 * The Zoom Out page transition.
	 */
	ZOOM_OUT_TRANSITION = 1886673487,

}

/**
 * Tagged PDF structure order options
 */
declare enum TaggedPDFStructureOrderOptions {
	/**
	 * Use Articles order for the tagged PDF structure.
	 */
	USE_ARTICLES = 1348554610,

	/**
	 * Use XML structure and layout heuristic fallback for the tagged PDF structure.
	 */
	USE_XML_STRUCTURE = 1350062959,

}

/**
 * PDF export display title options.
 */
declare enum PdfDisplayTitleOptions {
	/**
	 * Uses document title.
	 */
	DISPLAY_DOCUMENT_TITLE = 1148413044,

	/**
	 * Uses file name.
	 */
	DISPLAY_FILE_NAME = 1148413550,

}

/**
 * Options for specifying basis of the top origin of the paragraph shading.
 */
declare enum ParagraphShadingTopOriginEnum {
	/**
	 * Makes the paragraph shading top origin based on ascent of the text in the paragraph.
	 */
	ASCENT_TOP_ORIGIN = 1886606433,

	/**
	 * Makes the paragraph shading top origin based on baseline of the text in the paragraph.
	 */
	BASELINE_TOP_ORIGIN = 1886606434,

	/**
	 * Makes the paragraph shading top origin based on em box center of the text in the paragraph.
	 */
	EM_BOX_TOP_CENTER = 1886606446,

	/**
	 * Makes the paragraph shading top origin based on em box of the text in the paragraph.
	 */
	EM_BOX_TOP_ORIGIN = 1886606445,

	/**
	 * Makes the paragraph shading top origin based on leading of the text in the paragraph.
	 */
	LEADING_TOP_ORIGIN = 1885492332,

}

/**
 * Options for specifying basis of the bottom origin of the paragraph shading.
 */
declare enum ParagraphShadingBottomOriginEnum {
	/**
	 * Makes the paragraph shading bottom origin based on baseline of the text in the paragraph.
	 */
	BASELINE_BOTTOM_ORIGIN = 1886601826,

	/**
	 * Makes the paragraph shading bottom origin based on descent of the text in the paragraph.
	 */
	DESCENT_BOTTOM_ORIGIN = 1886601828,

	/**
	 * Makes the paragraph shading bottom origin based on em box center of the text in the paragraph.
	 */
	EM_BOX_BOTTOM_CENTER = 1886601838,

	/**
	 * Makes the paragraph shading bottom origin based on em box of the text in the paragraph.
	 */
	EM_BOX_BOTTOM_ORIGIN = 1886601837,

}

/**
 * Options for restarting endnote numbering.
 */
declare enum EndnoteRestarting {
	/**
	 * Does not restart numbering; numbers endnotes sequentially throughout the document.
	 */
	CONTINUOUS = 1164210803,

	/**
	 * Restarts endnote numbering on each story.
	 */
	STORY_RESTART = 1165193843,

}

/**
 * Options for scope of endnote placement.
 */
declare enum EndnoteScope {
	/**
	 * Endnotes specific to each document.
	 */
	ENDNOTE_DOCUMENT_SCOPE = 1162765427,

	/**
	 * Endnotes specific to each story.
	 */
	STORY_SCOPE = 1162769267,

}

/**
 * Options for frame creation of endnotes.
 */
declare enum EndnoteFrameCreate {
	/**
	 * Endnotes are loaded in placegun to be placed anywhere in document.
	 */
	LOAD_ENDNOTE_PLACE_GUN = 1162768487,

	/**
	 * Endnotes created on a new page and frame which are automatically created.
	 */
	NEW_PAGE = 1162767984,

}

/**
 * Options for specifying basis of the width of the paragraph border.
 */
declare enum ParagraphBorderEnum {
	/**
	 * Makes the paragraph border based on width of the column.
	 */
	COLUMN_WIDTH = 1265399652,

	/**
	 * Makes the paragraph border based on width of lines of text in the paragraph.
	 */
	TEXT_WIDTH = 1886681207,

}

/**
 * Options for specifying basis of the top origin of the paragraph border.
 */
declare enum ParagraphBorderTopOriginEnum {
	/**
	 * Makes the paragraph border top origin based on ascent of the text in the paragraph.
	 */
	ASCENT_TOP_ORIGIN = 1886606433,

	/**
	 * Makes the paragraph border top origin based on baseline of the text in the paragraph.
	 */
	BASELINE_TOP_ORIGIN = 1886606434,

	/**
	 * Makes the paragraph border top origin based on em box center of the text in the paragraph.
	 */
	EM_BOX_TOP_CENTER = 1886606446,

	/**
	 * Makes the paragraph border top origin based on em box of the text in the paragraph.
	 */
	EM_BOX_TOP_ORIGIN = 1886606445,

	/**
	 * Makes the paragraph border top origin based on leading of the text in the paragraph.
	 */
	LEADING_TOP_ORIGIN = 1885492332,

}

/**
 * Options for specifying basis of the bottom origin of the paragraph border.
 */
declare enum ParagraphBorderBottomOriginEnum {
	/**
	 * Makes the paragraph border bottom origin based on baseline of the text in the paragraph.
	 */
	BASELINE_BOTTOM_ORIGIN = 1886601826,

	/**
	 * Makes the paragraph border bottom origin based on descent of the text in the paragraph.
	 */
	DESCENT_BOTTOM_ORIGIN = 1886601828,

	/**
	 * Makes the paragraph border bottom origin based on em box center of the text in the paragraph.
	 */
	EM_BOX_BOTTOM_CENTER = 1886601838,

	/**
	 * Makes the paragraph border bottom origin based on em box of the text in the paragraph.
	 */
	EM_BOX_BOTTOM_ORIGIN = 1886601837,

}

/**
 * Provider hyphenation styles. Currently only supported by the Duden hyphenation provider.
 */
declare enum HyphenationStyleEnum {
	/**
	 * Hyphenates at aesthetic hyphenation points.
	 */
	HYPH_AESTHETIC = 1684104563,

	/**
	 * Hyphenates at all possible hyphenation points.
	 */
	HYPH_ALL = 1684106348,

	/**
	 * Hyphenates at all but unaesthetic hyphenation points.
	 */
	HYPH_ALL_BUT_UNAESTHETIC = 1684103797,

	/**
	 * Hyphenates at preferred aesthetic hyphenation points.
	 */
	HYPH_PREFERRED_AESTHETIC = 1685086565,

}

/**
 * The space between paragraphs using same style.
 */
declare enum Spacing {
	/**
	 * Ignore space between paragraphs using same style.
	 */
	SETIGNORE = 1768386162,

}

/**
 * Options for indicating the type of shape to which to covert an object.
 */
declare enum ConvertShapeOptions {
	/**
	 * Converts the object to a rectangle with beveled corners.
	 */
	CONVERT_TO_BEVELED_RECTANGLE = 1129529938,

	/**
	 * Converts the object to a closed path.
	 */
	CONVERT_TO_CLOSED_PATH = 1129530224,

	/**
	 * Converts the object to a rectangle with inverse rounded corners.
	 */
	CONVERT_TO_INVERSE_ROUNDED_RECTANGLE = 1129531730,

	/**
	 * Converts the object to a line that connects the upper left and lower right corners of the object's bounding box.
	 */
	CONVERT_TO_LINE = 1129532489,

	/**
	 * Converts the object to an open path.
	 */
	CONVERT_TO_OPEN_PATH = 1129533296,

	/**
	 * Converts the object to an ellipse.
	 */
	CONVERT_TO_OVAL = 1129533270,

	/**
	 * Converts the object to a polygon.
	 */
	CONVERT_TO_POLYGON = 1129533519,

	/**
	 * Converts the object to a rectangle.
	 */
	CONVERT_TO_RECTANGLE = 1129534021,

	/**
	 * Converts the object to a rectangle with rounded corners.
	 */
	CONVERT_TO_ROUNDED_RECTANGLE = 1129534034,

	/**
	 * Converts the object to straight line. If the object is a square, circle, or its bounding box is wider than it is tall, the line is horizontal and connects the center points on the vertical sides of the bounding box. If the object's bounding box is taller than it is wide, the line connects the center points of the horizontal sides of the bounding box.
	 */
	CONVERT_TO_STRAIGHT_LINE = 1129534284,

	/**
	 * Converts the object to a triangle.
	 */
	CONVERT_TO_TRIANGLE = 1129534546,

}

/**
 * Coordinate space options.
 */
declare enum CoordinateSpaces {
	/**
	 * Inner coordinates
	 */
	INNER_COORDINATES = 2021222766,

	/**
	 * Page coordinates.
	 */
	PAGE_COORDINATES = 2021224551,

	/**
	 * Parent coordinates
	 */
	PARENT_COORDINATES = 2021224545,

	/**
	 * Pasteboard coordinates
	 */
	PASTEBOARD_COORDINATES = 2021224546,

	/**
	 * Spread coordinates.
	 */
	SPREAD_COORDINATES = 2021225328,

}

/**
 * Matrix content.
 */
declare enum MatrixContent {
	/**
	 * Rotation value
	 */
	ROTATION_VALUE = 1936746862,

	/**
	 * Scale values
	 */
	SCALE_VALUES = 1735552887,

	/**
	 * Shear value
	 */
	SHEAR_VALUE = 1936486004,

	/**
	 * Translation values
	 */
	TRANSLATION_VALUES = 1936484720,

}

/**
 * Bounding box limits.
 */
declare enum BoundingBoxLimits {
	/**
	 * Geometric path bounds
	 */
	GEOMETRIC_PATH_BOUNDS = 1768844080,

	/**
	 * Outer stroke bounds
	 */
	OUTER_STROKE_BOUNDS = 1768844081,

}

/**
 * Resize constraints.
 */
declare enum ResizeConstraints {
	/**
	 * Inverse proportions
	 */
	INVERSE_PROPORTIONS = 1231976016,

	/**
	 * Keep current proportions
	 */
	KEEP_CURRENT_PROPORTIONS = 1264939088,

	/**
	 * Keep current value
	 */
	KEEP_CURRENT_VALUE = 1264939094,

	/**
	 * Tall proportions
	 */
	TALL_PROPORTIONS = 1415670864,

	/**
	 * Wide proportions
	 */
	WIDE_PROPORTIONS = 1466524752,

}

/**
 * Resize methods.
 */
declare enum ResizeMethods {
	/**
	 * Add additional width and height to current values
	 */
	ADDING_CURRENT_DIMENSIONS_TO = 1215264592,

	/**
	 * Multiply current width and height by the given factors
	 */
	MULTIPLYING_CURRENT_DIMENSIONS_BY = 1215264589,

	/**
	 * Change width and height overriding current values
	 */
	REPLACING_CURRENT_DIMENSIONS_WITH = 1215264581,

	/**
	 * Change width to height ratio keeping the current area
	 */
	RESHAPING_AREA_TO_RATIO = 1215264577,

	/**
	 * Change width to height ratio keeping the current perimeter
	 */
	RESHAPING_BORDER_TO_RATIO = 1215264595,

}

/**
 * Options for fitting content in an empty frame.
 */
declare enum EmptyFrameFittingOptions {
	/**
	 * Resizes content to fit the frame. Note: Content that has different proportions than the frame appears stretched or squeezed.
	 */
	CONTENT_TO_FRAME = 1668575078,

	/**
	 * Resizes content to fill the frame while perserving the content's proportions. If the content and frame have different proportions, some of the content is obscured by the frame.
	 */
	FILL_PROPORTIONALLY = 1718185072,

	/**
	 * Does not use a fitting option.
	 */
	NONE = 1852796517,

	/**
	 * Resizes content to fit the frame while preserving content proportions. If the content and frame have different proportions, some empty space appears in the frame.
	 */
	PROPORTIONALLY = 1668247152,

}

/**
 * Corner options.
 */
declare enum CornerOptions {
	/**
	 * Beveled corner option.
	 */
	BEVEL_CORNER = 1667588726,

	/**
	 * Fancy corner option.
	 */
	FANCY_CORNER = 1667589742,

	/**
	 * Inset corner option.
	 */
	INSET_CORNER = 1667591795,

	/**
	 * Inverted rounded corner option.
	 */
	INVERSE_ROUNDED_CORNER = 1667591798,

	/**
	 * No corner option.
	 */
	NONE = 1852796517,

	/**
	 * Rounded corner option.
	 */
	ROUNDED_CORNER = 1667592804,

}

/**
 * Dimension constraints for the object-based layout rule
 */
declare enum DimensionsConstraints {
	/**
	 * The dimension remains fixed relative to the parent.
	 */
	FIXED_DIMENSION = 1145267817,

	/**
	 * The dimension can vary relative to the parent.
	 */
	FLEXIBLE_DIMENSION = 1145267820,

}

/**
 * The content type of an object.
 */
declare enum ContentType {
	/**
	 * The frame is a graphics frame.
	 */
	GRAPHIC_TYPE = 1735553140,

	/**
	 * The frame is a text frame.
	 */
	TEXT_TYPE = 1952412773,

	/**
	 * No content type assigned.
	 */
	UNASSIGNED = 1970168179,

}

/**
 * End cap types.
 */
declare enum EndCap {
	/**
	 * A squared end that stops at the path's endpoint.
	 */
	BUTT_END_CAP = 1650680176,

	/**
	 * A squared end that extends beyond the endpoint by half the stroke-width.
	 */
	PROJECTING_END_CAP = 1886020464,

	/**
	 * A semicircular end that extends beyond the endpoint by half the stroke-width.
	 */
	ROUND_END_CAP = 1919115632,

}

/**
 * End join types.
 */
declare enum EndJoin {
	/**
	 * Beveled end join.
	 */
	BEVEL_END_JOIN = 1651142510,

	/**
	 * Miter end join.
	 */
	MITER_END_JOIN = 1835691886,

	/**
	 * Rounded end join.
	 */
	ROUND_END_JOIN = 1919577966,

}

/**
 * The automatic adjustment to make to the pattern of a dashed or dotted stroke to cover corner points in a path.
 */
declare enum StrokeCornerAdjustment {
	/**
	 * Changes the length of dashes so that dashes always occur at path ends and corners; maintains set gap length. Note: Can cause dashes to be different lengths on shapes whose sides are of different lengths, such as rectangles.
	 */
	DASHES = 1162113896,

	/**
	 * Adjusts both dashes and gaps to cover corners and end points. Note: Causes dash and gap sizes to be consistent on all sides of the shape.
	 */
	DASHES_AND_GAPS = 1148405616,

	/**
	 * Changes the length of gaps so that dashes or dots always occur at ends and corners; maintains dash length or dot diameter. Note: Can cause gaps to be different lengths on shapes whose sides are of different lengths, such as rectangles.
	 */
	GAPS = 1164406899,

	/**
	 * No adjustment.
	 */
	NONE = 1852796517,

}

/**
 * The shape of one or both ends of an open path.
 */
declare enum ArrowHead {
	/**
	 * A solid arrow head whose pierced end bows sharply toward the point and whose point describes a 45-degree angle.
	 */
	BARBED_ARROW_HEAD = 1650553442,

	/**
	 * A vertical bar bisected by the stroke, which meets the stroke at a right angle and is the same weight as the stroke. The bar's length is 4.5 times the stroke width.
	 */
	BAR_ARROW_HEAD = 1651663208,

	/**
	 * A hollow circle whose outline is the same weight as the stroke. The circle's diameter is 5 times the stroke width.
	 */
	CIRCLE_ARROW_HEAD = 1668440424,

	/**
	 * A solid circle whose diameter is 5 times the stroke width.
	 */
	CIRCLE_SOLID_ARROW_HEAD = 1668505960,

	/**
	 * A solid arrow head whose pierced end concaves toward the point and whose point describes a 45-degree angle.
	 */
	CURVED_ARROW_HEAD = 1668702568,

	/**
	 * None.
	 */
	NONE = 1852796517,

	/**
	 * An arrow head formed by two slanting lines whose intersection forms a 45-degree angle and whose stroke weight is the same as the path's stroke.
	 */
	SIMPLE_ARROW_HEAD = 1936289136,

	/**
	 * An arrow head formed by two slanting lines whose intersection forms a 90-degree angle and whose stroke weight is the same as the path's stroke.
	 */
	SIMPLE_WIDE_ARROW_HEAD = 1937203560,

	/**
	 * A hollow square set perpendicular to the path, whose outline is the same weight as the stroke. The length of one side of the square is 5 times the stroke width.
	 */
	SQUARE_ARROW_HEAD = 1936810344,

	/**
	 * A solid square set perpendicular to the end of the path. The length of one side of the square is 5 times the stroke width.
	 */
	SQUARE_SOLID_ARROW_HEAD = 1936941416,

	/**
	 * A solid triangle arrow head whose point describes a 45-degree angle.
	 */
	TRIANGLE_ARROW_HEAD = 1953655150,

	/**
	 * A solid triangle arrow head whose point describes a 90-degree angle.
	 */
	TRIANGLE_WIDE_ARROW_HEAD = 1953980776,

}

/**
 * Display performance options.
 */
declare enum DisplaySettingOptions {
	/**
	 * Uses the container object's default display performance preferences setting. For information, see default display settings.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Slower performance; displays high-resolution graphics and high-quality transparencies and turns on anti-aliasing.
	 */
	HIGH_QUALITY = 1346922866,

	/**
	 * Best performance; grays out graphics and turns off transparency and anti-aliasing.
	 */
	OPTIMIZED = 1349480564,

	/**
	 * Moderate performance speed; displays proxy graphics and low-quality transparencies and turns on anti-aliasing.
	 */
	TYPICAL = 1349810544,

}

/**
 * Options for fitting content to a frame.
 */
declare enum FitOptions {
	/**
	 * Applies the current frame fitting options to the frame and content. Before using this, do confirm that the expected Frame Fitting Options are applied on the frame. For example, the act of placing an image in a frame set to 'Fit Content Proportionally' can change the crop settings in the Frame Fitting Options, which would then get applied for any subsequent image placement when this API is called.
	 */
	APPLY_FRAME_FITTING_OPTIONS = 1634100847,

	/**
	 * Centers content in the frame; preserves the frame size as well as content size and proportions. Note: If the content is larger than the frame, content around the edges is obscured.
	 */
	CENTER_CONTENT = 1667591779,

	/**
	 * Selects best crop region of the content for the frame based on Adobe Sensei. Note: Preserves frame size but might scale the content size.
	 */
	CONTENT_AWARE_FIT = 1667327593,

	/**
	 * Resizes content to fit the frame. Note: Content that is a different size than the frame appears stretched or squeezed.
	 */
	CONTENT_TO_FRAME = 1668575078,

	/**
	 * Resizes content to fill the frame while perserving the proportions of the content. If the content and frame have different proportions, some of the content is obscured by the bounding box of the frame.
	 */
	FILL_PROPORTIONALLY = 1718185072,

	/**
	 * Resizes the frame so it fits the content.
	 */
	FRAME_TO_CONTENT = 1718906723,

	/**
	 * Resizes content to fit the frame while preserving content proportions. If the content and frame have different proportions, some empty space appears in the frame.
	 */
	PROPORTIONALLY = 1668247152,

}

/**
 * Options for positioning the stroke relative to its path.
 */
declare enum StrokeAlignment {
	/**
	 * The stroke straddles the path.
	 */
	CENTER_ALIGNMENT = 1936998723,

	/**
	 * The stroke is inside the path.
	 */
	INSIDE_ALIGNMENT = 1936998729,

	/**
	 * The stroke is outside the path, like a picture frame.
	 */
	OUTSIDE_ALIGNMENT = 1936998735,

}

/**
 * Guide type options for ruler guides.
 */
declare enum GuideTypeOptions {
	/**
	 * Liquid guide.
	 */
	LIQUID = 1735617635,

	/**
	 * Ruler guide (default).
	 */
	RULER = 1735618160,

}

/**
 * The path on which to base the contour text wrap.
 */
declare enum ContourOptionsTypes {
	/**
	 * Sets the text wrap shape to the edges of the specified alpha channel. To specify the alpha channel, see contour path name.
	 */
	ALPHA_CHANNEL = 1634756707,

	/**
	 * Sets the text wrap shape to the object's bounding box.
	 */
	BOUNDING_BOX = 1701732962,

	/**
	 * Sets the text wrap shape to the edges of the image.
	 */
	DETECT_EDGES = 1685349735,

	/**
	 * Sets the text wrap shape to the wrapped object's graphics frame.
	 */
	GRAPHIC_FRAME = 1701734246,

	/**
	 * Sets the text wrap shape to the specified Photoshop path. To specify the Photoshop path, see contour path name.
	 */
	PHOTOSHOP_PATH = 1886613620,

	/**
	 * Sets the text wrap shape to the clipping path (if any) defined in Photoshop. Note: A path cannot be specified using this enumeration. To set the text wrap shape to a specific path, use the photoshop path contour options type enumeration value.
	 */
	SAME_AS_CLIPPING = 1935762288,

}

/**
 * Text wrap side options.
 */
declare enum TextWrapSideOptions {
	/**
	 * Both sides text wrap.
	 */
	BOTH_SIDES = 1953981043,

	/**
	 * Largest side text wrap.
	 */
	LARGEST_AREA = 1953975411,

	/**
	 * Left side text wrap.
	 */
	LEFT_SIDE = 1953983603,

	/**
	 * Right side text wrap.
	 */
	RIGHT_SIDE = 1953985139,

	/**
	 * Away from binding side text wrap.
	 */
	SIDE_AWAY_FROM_SPINE = 1953980787,

	/**
	 * Binding side text wrap.
	 */
	SIDE_TOWARDS_SPINE = 1953985651,

}

/**
 * Options for wrapping text around an object.
 */
declare enum TextWrapModes {
	/**
	 * Wraps text around the object's bounding box.
	 */
	BOUNDING_BOX_TEXT_WRAP = 1651729523,

	/**
	 * Wraps text around the object following the specified contour options.
	 */
	CONTOUR = 1835233134,

	/**
	 * Forces text to jump above or below the object, so that no text appears on the object's right or left.
	 */
	JUMP_OBJECT_TEXT_WRAP = 1650552420,

	/**
	 * Forces text to jump to the next available column.
	 */
	NEXT_COLUMN_TEXT_WRAP = 1853384306,

	/**
	 * No text wrap.
	 */
	NONE = 1852796517,

}

/**
 * Font status options.
 */
declare enum FontStatus {
	/**
	 * The font has been fauxed.
	 */
	FAUXED = 1718830689,

	/**
	 * The font is installed.
	 */
	INSTALLED = 1718831470,

	/**
	 * The font is not available.
	 */
	NOT_AVAILABLE = 1718832705,

	/**
	 * The font is a substitute.
	 */
	SUBSTITUTED = 1718834037,

	/**
	 * The font's status is unknown.
	 */
	UNKNOWN = 1433299822,

}

/**
 * Font type options.
 */
declare enum FontTypes {
	/**
	 * ATC.
	 */
	ATC = 1718894932,

	/**
	 * Bitmap.
	 */
	BITMAP = 1718895209,

	/**
	 * CID.
	 */
	CID = 1718895433,

	/**
	 * OCF.
	 */
	OCF = 1718898499,

	/**
	 * OpenType CFF.
	 */
	OPENTYPE_CFF = 1718898502,

	/**
	 * OpenType CID.
	 */
	OPENTYPE_CID = 1718898505,

	/**
	 * OpenType TT.
	 */
	OPENTYPE_TT = 1718898516,

	/**
	 * TrueType.
	 */
	TRUETYPE = 1718899796,

	/**
	 * Type 1.
	 */
	TYPE_1 = 1718899761,

	/**
	 * The font type is unknown.
	 */
	UNKNOWN = 1433299822,

}

/**
 * Supported OpenType feature options.
 */
declare enum OpenTypeFeature {
	/**
	 * Provides authentic small caps rather than scaled-down versions of the font's regular caps.
	 */
	ALL_SMALL_CAPS_FEATURE = 1664250691,

	/**
	 * Activates contextual ligatures and connecting alternates.
	 */
	CONTEXTUAL_ALTERNATES_FEATURE = 1330930497,

	/**
	 * Applies the default figure style of the current font to figure glyphs.
	 */
	DEFAULT_FIGURE_STYLE_FEATURE = 1330931268,

	/**
	 * In a series of two numbers separated by a slash that form a non-standard fraction, such as 4/13, reformats the second number as a denominator.
	 */
	DENOMINATOR_FEATURE = 1884247108,

	/**
	 * Allows the use of optional discretionary ligatures.
	 */
	DISCRETIONARY_LIGATURES_FEATURE = 1330930764,

	/**
	 * Reformats numbers separated by a slash, such as 1/2, as fractions. Note: In some fonts, the fractions feature reformats only standard fractions. For information on reformatting non-standard fractions such as 4/13, see denominator feature and numerator feature.
	 */
	FRACTIONS_FEATURE = 1330931282,

	/**
	 * Justification alternate
	 */
	JUSTIFICATION_ALTERNATE = 1330932309,

	/**
	 * Low.
	 */
	LOW = 1701727351,

	/**
	 * In a series of two numbers separated by a slash that form a non-standard fraction, such as 4/13, reformats the first number as a numerator.
	 */
	NUMERATOR_FEATURE = 1884247118,

	/**
	 * Superscripts the alpha characters in ordinal numbers.
	 */
	ORDINAL_FEATURE = 1330933586,

	/**
	 * Overlap swash
	 */
	OVERLAP_SWASH = 1330933590,

	/**
	 * Gives full-height figures varying widths.
	 */
	PROPORTIONAL_LINING_FEATURE = 1330932816,

	/**
	 * Gives varying-height figures varying widths.
	 */
	PROPORTIONAL_OLDSTYLE_FEATURE = 1330933587,

	/**
	 * Stretched alternate
	 */
	STRETCHED_ALTERNATE = 1330934610,

	/**
	 * Stylistic alternate
	 */
	STYLISTIC_ALTERNATE = 1330934612,

	/**
	 * Sizes lowered glyphs correctly relative to the surrounding characters.
	 */
	SUBSCRIPT_FEATURE = 1884247106,

	/**
	 * Sizes raised glyphs correctly relative to the surrounding characters.
	 */
	SUPERSCRIPT_FEATURE = 1884247123,

	/**
	 * Provides regular and contextual swashes, which may include alternate caps and end-of-word alternatives.
	 */
	SWASH_FEATURE = 1330934615,

	/**
	 * Gives full-height figures fixed, equal width.
	 */
	TABULAR_LINING_FEATURE = 1330931284,

	/**
	 * Gives varying-height figures fixed, equal widths.
	 */
	TABULAR_OLDSTYLE_FEATURE = 1330933588,

	/**
	 * Activates alternative characters used for uppercase titles.
	 */
	TITLING_FEATURE = 1330934857,

}

/**
 * Options for aligning small characters to the largest character in the line.
 */
declare enum CharacterAlignment {
	/**
	 * Aligns small characters in a line to the large character.
	 */
	ALIGN_BASELINE = 1247896172,

	/**
	 * Aligns small characters in horizontal text to the bottom of the em box of large characters. In vertical text, aligns characters to the left of the em box.
	 */
	ALIGN_EM_BOTTOM = 1247896173,

	/**
	 * Aligns small characters to the center of the em box of large characters.
	 */
	ALIGN_EM_CENTER = 1247896436,

	/**
	 * Aligns small characters in horizontal text to the top of the em box of large characters. In vertical text, aligns characters to the right of the em box.
	 */
	ALIGN_EM_TOP = 1247900784,

	/**
	 * Aligns small characters in horizontal text to the bottom of the ICF of large characters. In vertical text, aligns characters to the left of the ICF.
	 */
	ALIGN_ICF_BOTTOM = 1248420461,

	/**
	 * Aligns small characters in horizontal text to the top of the ICF of large characters. In vertical text, aligns characters to the right of the ICF.
	 */
	ALIGN_ICF_TOP = 1248425072,

}

/**
 * Glyph variant substitution options for standard glyphs.
 */
declare enum AlternateGlyphForms {
	/**
	 * Uses the expert variant.
	 */
	EXPERT_FORM = 1247897445,

	/**
	 * Uses the full-width variant.
	 */
	FULL_WIDTH_FORM = 1247897446,

	/**
	 * Uses the JIS04 variant.
	 */
	JIS04_FORM = 1247897396,

	/**
	 * Uses the JIS78 variant.
	 */
	JIS78_FORM = 1247897399,

	/**
	 * Uses the JIS83 variant.
	 */
	JIS83_FORM = 1247897400,

	/**
	 * Uses the JIS90 variant.
	 */
	JIS90_FORM = 1247897401,

	/**
	 * Uses the monospaced half-width variant.
	 */
	MONOSPACED_HALF_WIDTH_FORM = 1247897453,

	/**
	 * Uses the NLC variant.
	 */
	NLC_FORM = 1247897454,

	/**
	 * Does not use an alternate form.
	 */
	NONE = 1852796517,

	/**
	 * Substitutes proportional glyphs for half-width and full-width glyphs.
	 */
	PROPORTIONAL_WIDTH_FORM = 1247897456,

	/**
	 * Uses the quarter-width variant.
	 */
	QUARTER_WIDTH_FORM = 1247897457,

	/**
	 * Uses the third-width variant.
	 */
	THIRD_WIDTH_FORM = 1247897448,

	/**
	 * Uses the traditional variant.
	 */
	TRADITIONAL_FORM = 1247897460,

}

/**
 * Overprint options for kenten marks.
 */
declare enum AdornmentOverprint {
	/**
	 * Uses auto overprint.
	 */
	AUTO = 1635019116,

	/**
	 * Turns off overprint.
	 */
	OVERPRINT_OFF = 1701736294,

	/**
	 * Turns on overprint.
	 */
	OVERPRINT_ON = 1701736302,

}

/**
 * Style options for kenten characters.
 */
declare enum KentenCharacter {
	/**
	 * Uses a custom kenten style.
	 */
	CUSTOM = 1131639917,

	/**
	 * Uses the kenten black circle.
	 */
	KENTEN_BLACK_CIRCLE = 1248551523,

	/**
	 * Uses the kenten black triangle.
	 */
	KENTEN_BLACK_TRIANGLE = 1248551540,

	/**
	 * Uses the kenten bullseye.
	 */
	KENTEN_BULLSEYE = 1248551525,

	/**
	 * Uses the kenten fisheye.
	 */
	KENTEN_FISHEYE = 1248552549,

	/**
	 * Uses the kenten sesame dot.
	 */
	KENTEN_SESAME_DOT = 1248551795,

	/**
	 * Uses the kenten small black circle.
	 */
	KENTEN_SMALL_BLACK_CIRCLE = 1248555875,

	/**
	 * Uses the kenten small white circle.
	 */
	KENTEN_SMALL_WHITE_CIRCLE = 1248555895,

	/**
	 * Uses the kenten white circle.
	 */
	KENTEN_WHITE_CIRCLE = 1248556899,

	/**
	 * Uses the kenten white sesame dot.
	 */
	KENTEN_WHITE_SESAME_DOT = 1248551799,

	/**
	 * Uses the kenten white triangle.
	 */
	KENTEN_WHITE_TRIANGLE = 1248556916,

	/**
	 * Does not use kenten.
	 */
	NONE = 1852796517,

}

/**
 * Options for specifying the kenten or ruby position relative to the parent character.
 */
declare enum RubyKentenPosition {
	/**
	 * Places kenten or ruby to the right and above the parent character.
	 */
	ABOVE_RIGHT = 1248551282,

	/**
	 * Places kenten or ruby to the left and below the parent character.
	 */
	BELOW_LEFT = 1248551532,

}

/**
 * Kenten character set options.
 */
declare enum KentenCharacterSet {
	/**
	 * Character input.
	 */
	CHARACTER_INPUT = 1248028777,

	/**
	 * JIS.
	 */
	JIS = 1246382419,

	/**
	 * Kuten.
	 */
	KUTEN = 1248556404,

	/**
	 * Shift JIS.
	 */
	SHIFT_JIS = 1249077875,

	/**
	 * Unicode.
	 */
	UNICODE = 1249209961,

}

/**
 * Ruby type options.
 */
declare enum RubyTypes {
	/**
	 * Provides ruby for a group of characters.
	 */
	GROUP_RUBY = 1249011570,

	/**
	 * Provides ruby for each individual character in the group.
	 */
	PER_CHARACTER_RUBY = 1249013859,

}

/**
 * Ruby alignment options.
 */
declare enum RubyAlignments {
	/**
	 * Ruby 1 aki.
	 */
	RUBY_1_AKI = 1248997729,

	/**
	 * Centers ruby relative to the parent text.
	 */
	RUBY_CENTER = 1249010548,

	/**
	 * Ruby equal aki.
	 */
	RUBY_EQUAL_AKI = 1249011041,

	/**
	 * Justifies ruby across the parent text.
	 */
	RUBY_FULL_JUSTIFY = 1249011306,

	/**
	 * Ruby JIS.
	 */
	RUBY_JIS = 1249012339,

	/**
	 * Aligns ruby with the left-most character in the parent text.
	 */
	RUBY_LEFT = 1249012838,

	/**
	 * Aligns ruby with the right-most character in the parent text.
	 */
	RUBY_RIGHT = 1249014388,

}

/**
 * Options for ruby spacing relative to the parent text.
 */
declare enum RubyParentSpacing {
	/**
	 * Ruby parent 121 aki.
	 */
	RUBY_PARENT_121_AKI = 1248997682,

	/**
	 * Ruby parent both sides.
	 */
	RUBY_PARENT_BOTH_SIDES = 1249010291,

	/**
	 * Applies the parent text aki to the ruby characters.
	 */
	RUBY_PARENT_EQUAL_AKI = 1249014113,

	/**
	 * Justifies ruby characters to both edges of the parent text.
	 */
	RUBY_PARENT_FULL_JUSTIFY = 1249014634,

	/**
	 * Does not base ruby spacing on parent text.
	 */
	RUBY_PARENT_NO_ADJUSTMENT = 1249013345,

}

/**
 * Ruby overhang options.
 */
declare enum RubyOverhang {
	/**
	 * Does not allow ruby overhang.
	 */
	NONE = 1852796517,

	/**
	 * Ruby is overhang one-half the size of one chararacter.
	 */
	RUBY_OVERHANG_HALF_CHAR = 1249011811,

	/**
	 * Ruby overhang is one-half ruby.
	 */
	RUBY_OVERHANG_HALF_RUBY = 1249013554,

	/**
	 * There is no ruby overhang size limit.
	 */
	RUBY_OVERHANG_NO_LIMIT = 1249013621,

	/**
	 * Ruby overhang is the size of one character.
	 */
	RUBY_OVERHANG_ONE_CHAR = 1249013603,

	/**
	 * Ruby overhang is one ruby.
	 */
	RUBY_OVERHANG_ONE_RUBY = 1249013553,

}

/**
 * Warichu text alignment options.
 */
declare enum WarichuAlignment {
	/**
	 * Automatically aligns warichu characters.
	 */
	AUTO = 1635019116,

	/**
	 * Aligns warichu in the center of the text frame.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Justifies warichu lines and center aligns the last line.
	 */
	CENTER_JUSTIFIED = 1667920756,

	/**
	 * Justifies warichu lines and makes all lines of equal length.
	 */
	FULLY_JUSTIFIED = 1718971500,

	/**
	 * Aligns warichu on the left side of the text frame.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Justifies warichu lines and left aligns the last line.
	 */
	LEFT_JUSTIFIED = 1818915700,

	/**
	 * Warichu on the rigt side of the text frame.
	 */
	RIGHT_ALIGN = 1919379572,

	/**
	 * Justifies warichu lines and right aligns the last line.
	 */
	RIGHT_JUSTIFIED = 1919578996,

}

/**
 * Kinsoku processing options.
 */
declare enum KinsokuType {
	/**
	 * The kinsoku prioritize adjustment amount.
	 */
	KINSOKU_PRIORITIZE_ADJUSTMENT_AMOUNT = 1248553313,

	/**
	 * Attempts to move characters to the previous line; if the push-in is not possible, pushes characters to the next line.
	 */
	KINSOKU_PUSH_IN_FIRST = 1248553318,

	/**
	 * Attempts to move characters to the next line; if the push-out is not possible, pushes characters to the previous line.
	 */
	KINSOKU_PUSH_OUT_FIRST = 1248554854,

	/**
	 * Always moves characters to the next line. Does not attempt a push-in.
	 */
	KINSOKU_PUSH_OUT_ONLY = 1248554863,

}

/**
 * Hanging punctuation options when a kinsoku set is in effect.
 */
declare enum KinsokuHangTypes {
	/**
	 * Enables hanging punctuation but forces hanging punctuation outside the text frame and does not allow the punctuation to be placed on the text frame.
	 */
	KINSOKU_HANG_FORCE = 1248553062,

	/**
	 * Enables hanging punctuation and allows punctuation marks to be placed on or outside the text frame but allows burasagari characters to hang as little as possible. Note: Differs for justified and nonjustified text. For information on justification, see line alignment.
	 */
	KINSOKU_HANG_REGULAR = 1248553074,

	/**
	 * Disables hanging punctuation.
	 */
	NONE = 1852796517,

}

/**
 * Leading model options.
 */
declare enum LeadingModel {
	/**
	 * Measures the space between lines from the aki above.
	 */
	LEADING_MODEL_AKI_ABOVE = 1248616801,

	/**
	 * Measures the space between lines from the aki below.
	 */
	LEADING_MODEL_AKI_BELOW = 1248616802,

	/**
	 * Measures the space between the character center points.
	 */
	LEADING_MODEL_CENTER = 1248619875,

	/**
	 * Center down leading model.
	 */
	LEADING_MODEL_CENTER_DOWN = 1248617316,

	/**
	 * Measures the space between type baselines.
	 */
	LEADING_MODEL_ROMAN = 1248619858,

}

/**
 * Predefined kinsoku set options.
 */
declare enum KinsokuSet {
	/**
	 * Uses the hard or maximum kinsoku set, which includes all Japanese characters that should not begin or end a line.
	 */
	HARD_KINSOKU = 1248357235,

	/**
	 * Uses the Korean kinsoku set.
	 */
	KOREAN_KINSOKU = 1263692659,

	/**
	 * Does not use a kinsoku set.
	 */
	NOTHING = 1851876449,

	/**
	 * Uses the simplified Chinese kinsoku set.
	 */
	SIMPLIFIED_CHINESE_KINSOKU = 1396927347,

	/**
	 * Uses the soft or weak kinsoku set, which omits from the hard kinsoku set long vowel symbols and small hiragana and katakana characters.
	 */
	SOFT_KINSOKU = 1249078131,

	/**
	 * Uses the traditional Chinese kinsoku set.
	 */
	TRADITIONAL_CHINESE_KINSOKU = 1413704563,

}

/**
 * Mojikumi table options.
 */
declare enum MojikumiTableDefaults {
	/**
	 * Uses full-width spacing for all characters.
	 */
	LINE_END_ALL_ONE_EM_ENUM = 1246572848,

	/**
	 * Uses half-width spacing for all characters.
	 */
	LINE_END_ALL_ONE_HALF_EM_ENUM = 1246572593,

	/**
	 * Uses full-width spacing for punctuation.
	 */
	LINE_END_PERIOD_ONE_EM_ENUM = 1246572852,

	/**
	 * Uses line end uke no float.
	 */
	LINE_END_UKE_NO_FLOAT_ENUM = 1246572849,

	/**
	 * Turns off mojikumi.
	 */
	NOTHING = 1851876449,

	/**
	 * Indents lines one full space and uses no float for all characters.
	 */
	ONE_EM_INDENT_LINE_END_ALL_NO_FLOAT_ENUM = 1246572598,

	/**
	 * Indents lines one full space and uses full-width spacing for all characters.
	 */
	ONE_EM_INDENT_LINE_END_ALL_ONE_EM_ENUM = 1246572597,

	/**
	 * Indents lines one full space and uses half-width spacing for all characters.
	 */
	ONE_EM_INDENT_LINE_END_ALL_ONE_HALF_EM_ENUM = 1246572601,

	/**
	 * Indents lines one full space and uses full-width spacing for punctuation and for the last character in the line.
	 */
	ONE_EM_INDENT_LINE_END_PERIOD_ONE_EM_ENUM = 1246572851,

	/**
	 * Indents lines one full space and uses line end uke no float.
	 */
	ONE_EM_INDENT_LINE_END_UKE_NO_FLOAT_ENUM = 1246572599,

	/**
	 * Indents lines one space and uses line end uke one half space.
	 */
	ONE_EM_INDENT_LINE_END_UKE_ONE_HALF_EM_ENUM = 1246572594,

	/**
	 * Uses full-witdh spacing for all characters except the last character in the line, which uses either full- or half-width spacing.
	 */
	ONE_OR_ONE_HALF_EM_INDENT_LINE_END_ALL_ONE_EM_ENUM = 1246572596,

	/**
	 * Indents lines one or one-half space and uses full-width spacing for punctuation and for the last character in the line.
	 */
	ONE_OR_ONE_HALF_EM_INDENT_LINE_END_PERIOD_ONE_EM_ENUM = 1246572850,

	/**
	 * Indents lines one half space or one full space and uses line end uke no float.
	 */
	ONE_OR_ONE_HALF_EM_INDENT_LINE_END_UKE_NO_FLOAT_ENUM = 1246572600,

	/**
	 * Indents lines one full or half space and uses line end uke one half space.
	 */
	ONE_OR_ONE_HALF_EM_INDENT_LINE_END_UKE_ONE_HALF_EM_ENUM = 1246572595,

	/**
	 * Uses mojikumi tsume and aki optimized for Simplified Chinese punctuation glyphs.
	 */
	SIMP_CHINESE_DEFAULT = 1246572854,

	/**
	 * Uses mojikumi tsume and aki optimized for Traditional Chinese centered punctuation glyphs.
	 */
	TRAD_CHINESE_DEFAULT = 1246572853,

}

/**
 * Alignment options for frame grids or baseline grids.
 */
declare enum GridAlignment {
	/**
	 * Aligns the text baseline to the grid.
	 */
	ALIGN_BASELINE = 1247896172,

	/**
	 * Aligns the bottom of the em box to the grid.
	 */
	ALIGN_EM_BOTTOM = 1247896173,

	/**
	 * Aligns the center of the em box to the grid.
	 */
	ALIGN_EM_CENTER = 1247896436,

	/**
	 * Aligns the top of the em box to the grid.
	 */
	ALIGN_EM_TOP = 1247900784,

	/**
	 * Aligns the bottom of the ICF box to the grid.
	 */
	ALIGN_ICF_BOTTOM = 1248420461,

	/**
	 * Aligns the top of the ICF box to the grid.
	 */
	ALIGN_ICF_TOP = 1248425072,

	/**
	 * Lines are not aligned to the grid.
	 */
	NONE = 1852796517,

}

/**
 * Options for aligning kenten characters relative to the parent characters.
 */
declare enum KentenAlignment {
	/**
	 * Aligns kenten with the center of parent charactrers.
	 */
	ALIGN_KENTEN_CENTER = 1248554595,

	/**
	 * Aligns kenten with the left of parent characters.
	 */
	ALIGN_KENTEN_LEFT = 1248554604,

}

/**
 * Hyphenation exceptions list options for composing text.
 */
declare enum ComposeUsing {
	/**
	 * Uses the lists stored in both the document and the user dictionary.
	 */
	BOTH = 1651471464,

	/**
	 * Uses the list stored in the document.
	 */
	USE_DOCUMENT = 1967419235,

	/**
	 * Uses the list stored in the external user dictionary.
	 */
	USE_USER_DICTIONARY = 1433629284,

}

/**
 * Page number style options.
 */
declare enum PageNumberStyle {
	/**
	 * Uses Arabic numerals.
	 */
	ARABIC = 1298231906,

	/**
	 * Uses Arabic Abjad
	 */
	ARABIC_ABJAD = 1296130410,

	/**
	 * Uses Arabic Alif Ba Tah
	 */
	ARABIC_ALIF_BA_TAH = 1296130420,

	/**
	 * Uses Arabic numerals and formats all page numbers as three digits.
	 */
	DOUBLE_LEADING_ZEROS = 1296329850,

	/**
	 * Full-width Arabic.
	 */
	FULL_WIDTH_ARABIC = 1296455521,

	/**
	 * Uses Hebrew Biblical
	 */
	HEBREW_BIBLICAL = 1296589410,

	/**
	 * Uses Hebrew Non Standard
	 */
	HEBREW_NON_STANDARD = 1296589422,

	/**
	 * Uses Kanji.
	 */
	KANJI = 1296788073,

	/**
	 * Uses lowercase letters.
	 */
	LOWER_LETTERS = 1296855660,

	/**
	 * Uses lowercase Roman numerals.
	 */
	LOWER_ROMAN = 1297247596,

	/**
	 * Uses Arabic numerals and formats all page numbers as two digits.
	 */
	SINGLE_LEADING_ZEROS = 1297312890,

	/**
	 * Uses Arabic numerals and formats all page numbers as four digits.
	 */
	TRIPLE_LEADING_ZEROS = 1297378426,

	/**
	 * Uses uppercase letters.
	 */
	UPPER_LETTERS = 1296855669,

	/**
	 * Uses uppercase Roman numerals.
	 */
	UPPER_ROMAN = 1297247605,

}

/**
 * Gradient type options.
 */
declare enum GradientType {
	/**
	 * A linear gradient.
	 */
	LINEAR = 1635282023,

	/**
	 * A radial gradient.
	 */
	RADIAL = 1918985319,

}

/**
 * Options for joining two path points.
 */
declare enum JoinOptions {
	/**
	 * Combine two end points and replace with an single averaged point.
	 */
	COMBINE = 1668113006,

	/**
	 * Connect two end points (default).
	 */
	CONNECT = 1668178804,

}

/**
 * Path type options.
 */
declare enum PathType {
	/**
	 * The path is a closed path.
	 */
	CLOSED_PATH = 1668051812,

	/**
	 * The path is an open path.
	 */
	OPEN_PATH = 1869639280,

}

/**
 * The path point type.
 */
declare enum PointType {
	/**
	 * The point is a corner point, it has either one direction line, or two independent direction lines.
	 */
	CORNER = 1668443762,

	/**
	 * The point is a plain point, it has no direction lines.
	 */
	PLAIN = 1886151022,

	/**
	 * The point is a smooth point, it has two direction lines which are parallel.
	 */
	SMOOTH = 1936553064,

	/**
	 * A special type of smooth point with two direction lines of equal length.
	 */
	SYMMETRICAL = 1937337709,

}

/**
 * Options for creating preview images.
 */
declare enum CreateProxy {
	/**
	 * Always creates preview images.
	 */
	ALWAYS = 1699307895,

	/**
	 * Creates preview images as needed.
	 */
	AS_NEEDED = 1699311204,

}

/**
 * The cropping option of an imported InDesign page.
 */
declare enum ImportedPageCropOptions {
	/**
	 * Places the page's bleed area.
	 */
	CROP_BLEED = 1131573314,

	/**
	 * Places the page's bounding box.
	 */
	CROP_CONTENT = 1131573315,

	/**
	 * Places the page's slug area.
	 */
	CROP_SLUG = 1131565932,

}

/**
 * Options for the active stroke/fill proxy.
 */
declare enum StrokeFillProxyOptions {
	/**
	 * Fill proxy is active.
	 */
	FILL = 1181314156,

	/**
	 * Stroke proxy is active.
	 */
	STROKE = 1400140395,

}

/**
 * Options for the target of the active stroke/fill proxy.
 */
declare enum StrokeFillTargetOptions {
	/**
	 * Formatting affects the container.
	 */
	FORMATTING_AFFECTS_CONTAINER = 1181696323,

	/**
	 * Formatting affects the text.
	 */
	FORMATTING_AFFECTS_TEXT = 1181696340,

}

/**
 * Options for rotating the contents of the place gun
 */
declare enum RotationDirection {
	/**
	 * Rotate the list backward (i.e., move backmost item to front)
	 */
	BACKWARD = 1113680759,

	/**
	 * Rotate the list forward (i.e., move the front item to end)
	 */
	FORWARD = 1181708919,

}

/**
 * Options for specifying location relative to the reference object or within the containing object.
 */
declare enum LocationOptions {
	/**
	 * Places the object after the reference object.
	 */
	AFTER = 1634104421,

	/**
	 * Places the object at the beginning of the containing object.
	 */
	AT_BEGINNING = 1650945639,

	/**
	 * Places the object at the end of the containing object.
	 */
	AT_END = 1701733408,

	/**
	 * Places the object before the reference object.
	 */
	BEFORE = 1650812527,

	/**
	 * No location specified.
	 */
	UNKNOWN = 1433299822,

}

/**
 * Standard UI colors.
 */
declare enum UIColors {
	/**
	 * Black.
	 */
	BLACK = 1765960811,

	/**
	 * Blue.
	 */
	BLUE = 1765960821,

	/**
	 * Brick red.
	 */
	BRICK_RED = 1765962340,

	/**
	 * Brown.
	 */
	BROWN = 1765962350,

	/**
	 * Burgundy.
	 */
	BURGUNDY = 1765962343,

	/**
	 * Charcoal.
	 */
	CHARCOAL = 1766025324,

	/**
	 * Cute teal.
	 */
	CUTE_TEAL = 1766028396,

	/**
	 * Cyan.
	 */
	CYAN = 1766029678,

	/**
	 * Dark blue.
	 */
	DARK_BLUE = 1766089324,

	/**
	 * Dark green.
	 */
	DARK_GREEN = 1766090610,

	/**
	 * Fiesta.
	 */
	FIESTA = 1766222181,

	/**
	 * Gold.
	 */
	GOLD = 1766288484,

	/**
	 * Grass green.
	 */
	GRASS_GREEN = 1766287218,

	/**
	 * Gray.
	 */
	GRAY = 1766290041,

	/**
	 * Green.
	 */
	GREEN = 1766290030,

	/**
	 * Grid blue.
	 */
	GRID_BLUE = 1766285932,

	/**
	 * Grid green.
	 */
	GRID_GREEN = 1766286439,

	/**
	 * Grid orange.
	 */
	GRID_ORANGE = 1766289266,

	/**
	 * Lavender.
	 */
	LAVENDER = 1766618734,

	/**
	 * Light blue.
	 */
	LIGHT_BLUE = 1766613612,

	/**
	 * Light gray.
	 */
	LIGHT_GRAY = 1766614898,

	/**
	 * Light olive.
	 */
	LIGHT_OLIVE = 1766616940,

	/**
	 * Lipstick.
	 */
	LIPSTICK = 1766615408,

	/**
	 * Magenta.
	 */
	MAGENTA = 1766680430,

	/**
	 * Ochre.
	 */
	OCHRE = 1766810482,

	/**
	 * Olive green.
	 */
	OLIVE_GREEN = 1766812790,

	/**
	 * Orange.
	 */
	ORANGE = 1766814318,

	/**
	 * Peach.
	 */
	PEACH = 1766876008,

	/**
	 * Pink.
	 */
	PINK = 1766878827,

	/**
	 * Purple.
	 */
	PURPLE = 1766879856,

	/**
	 * Red.
	 */
	RED = 1767007588,

	/**
	 * Sulphur.
	 */
	SULPHUR = 1767077228,

	/**
	 * Tan.
	 */
	TAN = 1767137646,

	/**
	 * Teal.
	 */
	TEAL = 1767138668,

	/**
	 * Violet.
	 */
	VIOLET = 1767271540,

	/**
	 * White.
	 */
	WHITE = 1767336052,

	/**
	 * Yellow.
	 */
	YELLOW = 1767468151,

}

/**
 * Nothing.
 */
declare enum NothingEnum {
	/**
	 * Nothing
	 */
	NOTHING = 1851876449,

}

/**
 * The default value.
 */
declare enum AutoEnum {
	/**
	 * Uses the default value defined automatically for the object based on a parent or other type of object.
	 */
	AUTO_VALUE = 1635087471,

}

/**
 * Phase options for event propagation.
 */
declare enum EventPhases {
	/**
	 * The at-target phase of propagation.
	 */
	AT_TARGET = 1701724500,

	/**
	 * The bubbling phase of propagation.
	 */
	BUBBLING_PHASE = 1701724789,

	/**
	 * The propagation is complete.
	 */
	DONE = 1701725252,

	/**
	 * Not yet propagating.
	 */
	NOT_DISPATCHING = 1701727812,

}

/**
 * Export format options.
 */
declare enum ExportFormat {
	/**
	 * Exports to EPS format.
	 */
	EPS_TYPE = 1952400720,

	/**
	 * Exports to EPub format.
	 */
	EPUB = 1701868898,

	/**
	 * Exports to fixed layout EPub format.
	 */
	FIXED_LAYOUT_EPUB = 1701865080,

	/**
	 * Exports to XHTML format.
	 */
	HTML = 1213484364,

	/**
	 * Exports to XHTML FXL format.
	 */
	HTMLFXL = 1213490808,

	/**
	 * Exports to InCopy markup (ICML) format.
	 */
	INCOPY_MARKUP = 1768123756,

	/**
	 * Exports to InDesign markup (IDML) format.
	 */
	INDESIGN_MARKUP = 1768189292,

	/**
	 * Exports to InDesign snippet (IDMS) format.
	 */
	INDESIGN_SNIPPET = 1936617588,

	/**
	 * Exports to Interactive PDF format.
	 */
	INTERACTIVE_PDF = 1952409936,

	/**
	 * Exports to JPEG format.
	 */
	JPG = 1246775072,

	/**
	 * Exports to packaged XFL format.
	 */
	PACKAGED_XFL = 1702389356,

	/**
	 * Exports to PDF format.
	 */
	PDF_TYPE = 1952403524,

	/**
	 * Exports to PNG format.
	 */
	PNG_FORMAT = 1699761735,

	/**
	 * Exports to rich text format (RTF).
	 */
	RTF = 1381254688,

	/**
	 * Exports to SWF format.
	 */
	SWF = 1702066022,

	/**
	 * Exports to a tagged text file with a TXT extension.
	 */
	TAGGED_TEXT = 1416066168,

	/**
	 * Exports to text (TXT) format.
	 */
	TEXT_TYPE = 1952412773,

	/**
	 * Exports the document's tagged content to XML.
	 */
	XML = 1481460768,

}

/**
 * The color profile policy for placed vector files (PDF or EPS).
 */
declare enum PlacedVectorProfilePolicy {
	/**
	 * Honors all profiles and output intent.
	 */
	HONOR_ALL_PROFILES = 1148217441,

	/**
	 * Ignores all profiles and output intent.
	 */
	IGNORE_ALL = 1148217697,

	/**
	 * Ignores output intent; honors calibrated spaces.
	 */
	IGNORE_OUTPUT_INTENT = 1148217711,

}

/**
 * The policy for handling mismatched CMYK configurations.
 */
declare enum ColorSettingsPolicy {
	/**
	 * Turns off color management for documents whose profiles do not match the working space. For imported colors, numeric values override color appearance.
	 */
	COLOR_POLICY_OFF = 1129344870,

	/**
	 * Preserves raw color numbers and ignores embedded color profiles.
	 */
	COMBINATION_OF_PRESERVE_AND_SAFE_CMYK = 1129345124,

	/**
	 * Converts newly opened documents to the current working space. For imported colors, color appearance overrides numeric values.
	 */
	CONVERT_TO_WORKING_SPACE = 1129346931,

	/**
	 * Preserves embedded color profiles in newly opened documents.
	 */
	PRESERVE_EMBEDDED_PROFILES = 1129345136,

}

/**
 * The default rendering intent.
 */
declare enum DefaultRenderingIntent {
	/**
	 * Aims to maintain color accuracy at the expense of color relationshps and is suitable for proofing to simulate the output of a particular device. Note: Leaves colors that fall inside the destination gamut unchanged and clips out-of-gamut colors.
	 */
	ABSOLUTE_COLORIMETRIC = 1380540771,

	/**
	 * Aims to preserve the visual relationship between colors so they are perceived as natural to the human eye, even though the color values themselves may change.
	 */
	PERCEPTUAL = 1380544611,

	/**
	 * Compares the extreme highlight of the source color space to that of the destination color space and shifts all colors accordingly. Out-of-gamut colors are shifted to the closest reproducible color in the destination color space. Note: Preserves more of the original colors in an image than perceptual rendering intent does.
	 */
	RELATIVE_COLORIMETRIC = 1380545123,

	/**
	 * Tries to produce vivid colors in an image at the expense of color accuracy.
	 */
	SATURATION = 1380545377,

}

/**
 * Options for proofing colors.
 */
declare enum ProofingType {
	/**
	 * Allows creation of a custom proofing setup for a specific output condition.
	 */
	CUSTOM = 1131639917,

	/**
	 * Creates a soft proof of colors using the document's CMYK profile.
	 */
	DOCUMENT_CMYK = 1347708003,

	/**
	 * Turns off soft proof display.
	 */
	PROOF_OFF = 1347710822,

	/**
	 * Creates a soft proof of colors using the current CMYK working space.
	 */
	WORKING_CMYK = 1347712867,

}

/**
 * Change conditions modes.
 */
declare enum ChangeConditionsModes {
	/**
	 * Change adds to applied conditions.
	 */
	ADD_TO = 1633969202,

	/**
	 * Change replaces applied conditions.
	 */
	REPLACE_WITH = 1919250519,

}

/**
 * Search mode options.
 */
declare enum SearchModes {
	/**
	 * Glyph search.
	 */
	GLYPH_SEARCH = 1181183091,

	/**
	 * Grep search.
	 */
	GREP_SEARCH = 1181184627,

	/**
	 * Object search.
	 */
	OBJECT_SEARCH = 1181704819,

	/**
	 * Text search.
	 */
	TEXT_SEARCH = 1182038131,

	/**
	 * Transliterate search.
	 */
	TRANSLITERATE_SEARCH = 1182036595,

}

/**
 * Object type options.
 */
declare enum ObjectTypes {
	/**
	 * All frame types.
	 */
	ALL_FRAMES_TYPE = 1178682995,

	/**
	 * Graphics frame.
	 */
	GRAPHIC_FRAMES_TYPE = 1179076211,

	/**
	 * Text frame.
	 */
	TEXT_FRAMES_TYPE = 1179928178,

	/**
	 * Unassigned frame.
	 */
	UNASSIGNED_FRAMES_TYPE = 1179993715,

}

/**
 * Find/change transliterate character type options.
 */
declare enum FindChangeTransliterateCharacterTypes {
	/**
	 * Arabic Indic(hindi) digits.
	 */
	ARABIC_INDIC_DIGITS = 1095328873,

	/**
	 * Farsi digits.
	 */
	FARSI_DIGITS = 1684629089,

	/**
	 * Full-width hiragana.
	 */
	FULL_WIDTH_HIRAGANA = 1179023176,

	/**
	 * Full-width katakana.
	 */
	FULL_WIDTH_KATAKANA = 1179023179,

	/**
	 * Full-width Roman symbols.
	 */
	FULL_WIDTH_ROMAN_SYMBOLS = 1179023186,

	/**
	 * Half-width katakana.
	 */
	HALF_WIDTH_KATAKANA = 1179154251,

	/**
	 * Half-width Roman symbols.
	 */
	HALF_WIDTH_ROMAN_SYMBOLS = 1179154258,

	/**
	 * Western Arabic digits (0, 1, 2, 3, ...).
	 */
	WESTERN_ARABIC_DIGITS = 1463903337,

}

/**
 * Library panel views
 */
declare enum LibraryPanelViews {
	/**
	 * Large thumbnail view
	 */
	LARGE_THUMBNAIL_VIEW = 1699501142,

	/**
	 * List view
	 */
	LIST_VIEW = 1699501673,

	/**
	 * Thumbnail view
	 */
	THUMBNAIL_VIEW = 1700030550,

}

/**
 * Sort order options
 */
declare enum SortAssets {
	/**
	 * Sort by name
	 */
	BY_NAME = 1699955278,

	/**
	 * Sort newest first
	 */
	BY_NEWEST = 1699955310,

	/**
	 * Sort oldest first
	 */
	BY_OLDEST = 1699955279,

	/**
	 * Sort by type
	 */
	BY_TYPE = 1699955284,

}

/**
 * Link status options.
 */
declare enum LinkStatus {
	/**
	 * The file is embedded in the document.
	 */
	LINK_EMBEDDED = 1282237028,

	/**
	 * The url link is inaccessible.
	 */
	LINK_INACCESSIBLE = 1818848865,

	/**
	 * The linked file has been moved, renamed, or deleted.
	 */
	LINK_MISSING = 1819109747,

	/**
	 * A more recent version of the file exists on the disk.
	 */
	LINK_OUT_OF_DATE = 1819242340,

	/**
	 * The link is a normal link.
	 */
	NORMAL = 1852797549,

}

/**
 * The rendition type of the link resource.
 */
declare enum LinkResourceRenditionType {
	/**
	 * The link resource has original rendition.
	 */
	ACTUAL = 1282372201,

	/**
	 * The link resource has FPO rendition.
	 */
	FPO = 1281781871,

}

/**
 * Asset type options.
 */
declare enum AssetType {
	/**
	 * The asset is cataloged as an EPS asset.
	 */
	EPS_TYPE = 1952400720,

	/**
	 * The asset is cataloged as a geometric page item asset.
	 */
	GEOMETRY_TYPE = 1952409445,

	/**
	 * The asset is cataloged as an image asset.
	 */
	IMAGE_TYPE = 1952409965,

	/**
	 * InDesign file asset
	 */
	INDESIGN_FILE_TYPE = 1952409956,

	/**
	 * The asset is cataloged as a page asset.
	 */
	PAGE_TYPE = 1952411745,

	/**
	 * The asset is cataloged as a PDF asset.
	 */
	PDF_TYPE = 1952403524,

	/**
	 * Structure asset
	 */
	STRUCTURE_TYPE = 1952412532,

	/**
	 * The asset is cataloged as a text asset.
	 */
	TEXT_TYPE = 1952412773,

}

/**
 * Change type options.
 */
declare enum ChangeTypes {
	/**
	 * Deleted text.
	 */
	DELETED_TEXT = 1799644524,

	/**
	 * Added text.
	 */
	INSERTED_TEXT = 1799974515,

	/**
	 * Moved text.
	 */
	MOVED_TEXT = 1800236918,

}

/**
 * Options for the alignment and appearance of type on a path.
 */
declare enum TextPathEffects {
	/**
	 * The center of each character's baseline is on the path while each vertical edge is in line with the path's center point.
	 */
	GRAVITY_PATH_EFFECT = 1601201767,

	/**
	 * The center of each character's baseline is parallel to the path's tangent. This is the default effect.
	 */
	RAINBOW_PATH_EFFECT = 1601201778,

	/**
	 * The text characters' horizontal edges are perfectly horizontal regardless of the path shape.
	 */
	RIBBON_PATH_EFFECT = 1601201715,

	/**
	 * The text characters' vertical edges are perfectly vertical regardless of the path shape.
	 */
	SKEW_PATH_EFFECT = 1601201779,

	/**
	 * The left edge of each character's baseline is on the path and no characters are rotated.
	 */
	STAIR_STEP_PATH_EFFECT = 1601205107,

}

/**
 * The text alignment relative to the path.
 */
declare enum TextTypeAlignments {
	/**
	 * The top-edge or right-edge baseline of the em box is aligned to the path.
	 */
	ABOVE_RIGHT_EM_BOX_TEXT_ALIGNMENT = 1952543333,

	/**
	 * The ideographic character face box top-edge or right-edge baseline is aligned to the path.
	 */
	ABOVE_RIGHT_ICF_BOX_TEXT_ALIGNMENT = 1952543337,

	/**
	 * Aligns the ascender to the path (not the path's stroke).
	 */
	ASCENDER_TEXT_ALIGNMENT = 1952538995,

	/**
	 * The text baseline is aligned to the path (not the path's stroke).
	 */
	BASELINE_TEXT_ALIGNMENT = 1952539244,

	/**
	 * The bottom-edge or left-edge baseline of the em box is aligned to the path.
	 */
	BELOW_LEFT_EM_BOX_TEXT_ALIGNMENT = 1952607333,

	/**
	 * The ideographic character face box bottom-edge or left-edge baseline is aligned to the path.
	 */
	BELOW_LEFT_ICF_BOX_TEXT_ALIGNMENT = 1952607337,

	/**
	 * Aligns the midpoint between the ascender and the descender to the path (not the path's stroke).
	 */
	CENTER_TEXT_ALIGNMENT = 1952539508,

	/**
	 * Aligns descender to the path (not the path's stroke).
	 */
	DESCENDER_TEXT_ALIGNMENT = 1952539763,

}

/**
 * Options for aligning text to the path's stroke.
 */
declare enum PathTypeAlignments {
	/**
	 * The text is aligned to the bottom of the path stroke.
	 */
	BOTTOM_PATH_ALIGNMENT = 1885430367,

	/**
	 * The text is aligned to the center of the path stroke.
	 */
	CENTER_PATH_ALIGNMENT = 1885430623,

	/**
	 * The text is aligned to the top of the path stroke.
	 */
	TOP_PATH_ALIGNMENT = 1885434975,

}

/**
 * Options for flipping or unflipping text relative to the path.
 */
declare enum FlipValues {
	/**
	 * Flips the text across the path.
	 */
	FLIPPED = 2036755568,

	/**
	 * No flip effect applied.
	 */
	NOT_FLIPPED = 1852206192,

	/**
	 * Undefined flip effect.
	 */
	UNDEFINED_FLIP_VALUE = 1969646704,

}

/**
 * Location options for XML elements.
 */
declare enum XMLElementLocation {
	/**
	 * Locates the element at the end of the containing object.
	 */
	ELEMENT_END = 1483042404,

	/**
	 * Locates the element at the beginning of the containing object.
	 */
	ELEMENT_START = 1482844014,

}

/**
 * Options for specifying position relative to the reference XML element or withing the XML element.
 */
declare enum XMLElementPosition {
	/**
	 * Specifies the position after the XML element.
	 */
	AFTER_ELEMENT = 1482778228,

	/**
	 * Specifies the position before the XML element.
	 */
	BEFORE_ELEMENT = 1482843494,

	/**
	 * Specifies the position at the end of the XML element.
	 */
	ELEMENT_END = 1483042404,

	/**
	 * Specifies the position at the beginning of the XML element.
	 */
	ELEMENT_START = 1482844014,

}

/**
 * Options for incorporating imported XML content.
 */
declare enum XMLImportStyles {
	/**
	 * Appends the imported content.
	 */
	APPEND_IMPORT = 1481466217,

	/**
	 * Merges the imported content.
	 */
	MERGE_IMPORT = 1481469289,

}

/**
 * File encoding options for exported XML content.
 */
declare enum XMLFileEncoding {
	/**
	 * Shift-JIS encoding.
	 */
	SHIFT_JIS = 1249077875,

	/**
	 * UTF-16 encoding.
	 */
	UTF16 = 1937125686,

	/**
	 * UTF-8 encoding.
	 */
	UTF8 = 1937134904,

}

/**
 * File format options for converted images.
 */
declare enum ImageConversion {
	/**
	 * Uses the best format based on the image.
	 */
	AUTOMATIC = 1768059764,

	/**
	 * Uses GIF format for all images.
	 */
	GIF = 1734960742,

	/**
	 * Uses JPEG format for all images.
	 */
	JPEG = 1785751398,

	/**
	 * Uses PNG format for all images.
	 */
	PNG = 1397059687,

}

/**
 * Color palette options for GIF conversion.
 */
declare enum GIFOptionsPalette {
	/**
	 * Uses the adaptive (no dither) palette.
	 */
	ADAPTIVE_PALETTE = 1886151024,

	/**
	 * Uses the Macintosh palette.
	 */
	MACINTOSH_PALETTE = 1886154096,

	/**
	 * Uses the Web palette.
	 */
	WEB_PALETTE = 1886156656,

	/**
	 * Uses the Windows palette.
	 */
	WINDOWS_PALETTE = 1886156644,

}

/**
 * Quality options for converted JPEG images.
 */
declare enum JPEGOptionsQuality {
	/**
	 * High quality.
	 */
	HIGH = 1701726313,

	/**
	 * Low quality.
	 */
	LOW = 1701727351,

	/**
	 * Maximum quality.
	 */
	MAXIMUM = 1701727608,

	/**
	 * Medium quality.
	 */
	MEDIUM = 1701727588,

}

/**
 * Formatting options for converted JPEG images.
 */
declare enum JPEGOptionsFormat {
	/**
	 * Uses baseline encoding to download the image in one pass.
	 */
	BASELINE_ENCODING = 1785751394,

	/**
	 * Uses progressive encoding to download the image in a series of passes, with the first pass at low resolution and each successive pass adding resolution to the image.
	 */
	PROGRESSIVE_ENCODING = 1785751408,

}

/**
 * Export options for untagged tables in tagged stories.
 */
declare enum XMLExportUntaggedTablesFormat {
	/**
	 * Exports untagged tables as CALS XML.
	 */
	CALS = 1484022643,

	/**
	 * Does not export untagged tables.
	 */
	NONE = 1852796517,

}

/**
 * File used for XML transformation.
 */
declare enum XMLTransformFile {
	/**
	 * Use stylesheet specified in XML
	 */
	STYLESHEET_IN_XML = 1483961208,

}

/**
 * Options for specifying the position of the anchored object relative to the its anchor.
 */
declare enum AnchorPosition {
	/**
	 * Place the anchored object above the line of text that contains the object.
	 */
	ABOVE_LINE = 1095716961,

	/**
	 * Custom anchor position.
	 */
	ANCHORED = 1097814113,

	/**
	 * Align the anchored object with the baseline of the line that contains the object.
	 */
	INLINE_POSITION = 1095716969,

}

/**
 * The horizontal alignment of an anchored object. Not valid when anchored position is inline.
 */
declare enum HorizontalAlignment {
	/**
	 * Place the anchored object at the center of the reference.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Place the anchored object to the left of the reference.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Place the anchored object to the right of the reference.
	 */
	RIGHT_ALIGN = 1919379572,

	/**
	 * Place the anchored object relative to the text alignment.
	 */
	TEXT_ALIGN = 1954046316,

}

/**
 * The vertical alignment of an anchored object.
 */
declare enum VerticalAlignment {
	/**
	 * Place the anchored object at the bottom of the vertical reference point.
	 */
	BOTTOM_ALIGN = 1651471469,

	/**
	 * Place the anchored object at the vertical center of the vertical reference point.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Place the anchored object at the top of the vertical reference point.
	 */
	TOP_ALIGN = 1953460256,

}

/**
 * The horizontal alignment point of an anchored object.
 */
declare enum AnchoredRelativeTo {
	/**
	 * Align the anchored object to the anchor.
	 */
	ANCHOR_LOCATION = 1095786862,

	/**
	 * Align the anchored object to the edge of the text or table column.
	 */
	COLUMN_EDGE = 1095787375,

	/**
	 * Align the anchored object to the edge of the page.
	 */
	PAGE_EDGE = 1095790695,

	/**
	 * Align the anchored object to the page margin.
	 */
	PAGE_MARGINS = 1095789927,

	/**
	 * Align the anchored object to the edge of the text frame.
	 */
	TEXT_FRAME = 1954051174,

}

/**
 * Options for balancing line endings in the text.
 */
declare enum BalanceLinesStyle {
	/**
	 * Balances lines equally.
	 */
	FULLY_BALANCED = 1114391921,

	/**
	 * Does not balance lines.
	 */
	NO_BALANCING = 1114394470,

	/**
	 * Prefers longer last lines.
	 */
	PYRAMID_SHAPE = 1114394745,

	/**
	 * Prefers shorter last lines.
	 */
	VEE_SHAPE = 1114396261,

}

/**
 * The vertical alignment point of an anchored object.
 */
declare enum VerticallyRelativeTo {
	/**
	 * Align the anchored object to the top of capital letters.
	 */
	CAPHEIGHT = 1096185955,

	/**
	 * Align the anchored object to the edge of the text or table column.
	 */
	COLUMN_EDGE = 1095787375,

	/**
	 * Align the anchored object to the bottom of the embox.
	 */
	EMBOX_BOTTOM = 1096183106,

	/**
	 * Align the anchored object to the middle of the embox.
	 */
	EMBOX_MIDDLE = 1096183117,

	/**
	 * Align the anchored object to the top of the embox.
	 */
	EMBOX_TOP = 1096181101,

	/**
	 * Align the anchored object to the top of the tallest letters in the text.
	 */
	LINE_ASCENT = 1096180083,

	/**
	 * Align the anchored object to the baseline of the line of text.
	 */
	LINE_BASELINE = 1096180321,

	/**
	 * Align the anchored object to the top of lower case letters with no ascent, such as x.
	 */
	LINE_XHEIGHT = 1096185960,

	/**
	 * Align the anchored object to the edge of the page.
	 */
	PAGE_EDGE = 1095790695,

	/**
	 * Align the anchored object to the page margin.
	 */
	PAGE_MARGINS = 1095789927,

	/**
	 * Align the anchored object to the edge of the text frame.
	 */
	TEXT_FRAME = 1954051174,

	/**
	 * Align the anchored object to the top of the text leading.
	 */
	TOP_OF_LEADING = 1096180332,

}

/**
 * OpenType positional form options.
 */
declare enum PositionalForms {
	/**
	 * Calculated forms.
	 */
	CALCULATE = 1634756205,

	/**
	 * Final form.
	 */
	FINAL = 1718185569,

	/**
	 * Initial form.
	 */
	INITIAL = 1768843636,

	/**
	 * Isolated form.
	 */
	ISOLATED = 1769172844,

	/**
	 * Medial form.
	 */
	MEDIAL = 1835361385,

	/**
	 * None.
	 */
	NONE = 1852796517,

}

/**
 * Stroke alignment options.
 */
declare enum TextStrokeAlign {
	/**
	 * The stroke straddles the path.
	 */
	CENTER_ALIGNMENT = 1936998723,

	/**
	 * The stroke is outside the path, like a picture frame.
	 */
	OUTSIDE_ALIGNMENT = 1936998735,

}

/**
 * End join types.
 */
declare enum OutlineJoin {
	/**
	 * Beveled end join.
	 */
	BEVEL_END_JOIN = 1651142510,

	/**
	 * Miter end join.
	 */
	MITER_END_JOIN = 1835691886,

	/**
	 * Rounded end join.
	 */
	ROUND_END_JOIN = 1919577966,

}

/**
 * The starting point used to calculate the baseline frame grid offset.
 */
declare enum BaselineFrameGridRelativeOption {
	/**
	 * Offsets the grid from the top of the text frame.
	 */
	TOP_OF_FRAME = 1163161446,

	/**
	 * Offsets the grid from the top inset of the text frame.
	 */
	TOP_OF_INSET = 1163161449,

	/**
	 * Offsets the grid from the top margin of the page.
	 */
	TOP_OF_MARGIN = 1163161453,

	/**
	 * Offsets the grid from the top of the page.
	 */
	TOP_OF_PAGE = 1163161458,

}

/**
 * Options for specifying the amount of vertical space between the top of the footnote container and the first line of footnote text.
 */
declare enum FootnoteFirstBaseline {
	/**
	 * The tallest character in the font falls below the top of the footnote container.
	 */
	ASCENT_OFFSET = 1296135023,

	/**
	 * The tops of upper case letters touch the top of the footnote container.
	 */
	CAP_HEIGHT = 1296255087,

	/**
	 * The em box height of the text defines the distance between the baseline of the text and the top of the footnote container.
	 */
	EMBOX_HEIGHT = 1296386159,

	/**
	 * The footnote minimum first baseline offset value defines the distance between the baseline of the text and the top of the footnote container.
	 */
	FIXED_HEIGHT = 1313228911,

	/**
	 * The leading value of the text defines the distance between the baseline of the text and the top of the footnote container.
	 */
	LEADING_OFFSET = 1296852079,

	/**
	 * The tops of lower case letters without ascents, such as x, touch the top of the footnote container.
	 */
	X_HEIGHT = 1299728495,

}

/**
 * Options for restarting footnote numbering.
 */
declare enum FootnoteRestarting {
	/**
	 * Does not restart numbering; numbers footnotes sequentially throughout the document.
	 */
	DONT_RESTART = 1180988019,

	/**
	 * Restarts footnote numbering on each page.
	 */
	PAGE_RESTART = 1181774451,

	/**
	 * Restarts footnote numbering in each section.
	 */
	SECTION_RESTART = 1181053555,

	/**
	 * Restarts footnote numbering on each spread.
	 */
	SPREAD_RESTART = 1181971059,

}

/**
 * Footnote prefix or suffix placement options.
 */
declare enum FootnotePrefixSuffix {
	/**
	 * Does not use a prefix or suffix.
	 */
	NO_PREFIX_SUFFIX = 1181774702,

	/**
	 * Places the prefix and/or suffix on both the the footnote reference number in the main text and the footnote marker number in the footnote text.
	 */
	PREFIX_SUFFIX_BOTH = 1181774690,

	/**
	 * Places the prefix and/or suffix on the footnote marker number in the footnote text.
	 */
	PREFIX_SUFFIX_MARKER = 1181774708,

	/**
	 * Places the prefix and/or suffix on the footnote reference number in the main text.
	 */
	PREFIX_SUFFIX_REFERENCE = 1181774706,

}

/**
 * Footnote numbering style options.
 */
declare enum FootnoteNumberingStyle {
	/**
	 * Uses Arabic numerals.
	 */
	ARABIC = 1298231906,

	/**
	 * Uses Arabic Abjad
	 */
	ARABIC_ABJAD = 1296130410,

	/**
	 * Uses Arabic Alif Ba Tah
	 */
	ARABIC_ALIF_BA_TAH = 1296130420,

	/**
	 * Asterisks.
	 */
	ASTERISKS = 1298232180,

	/**
	 * Double leading zeros.
	 */
	DOUBLE_LEADING_ZEROS = 1296329850,

	/**
	 * Full-width Arabic.
	 */
	FULL_WIDTH_ARABIC = 1296455521,

	/**
	 * Uses Hebrew Biblical
	 */
	HEBREW_BIBLICAL = 1296589410,

	/**
	 * Uses Hebrew Non Standard
	 */
	HEBREW_NON_STANDARD = 1296589422,

	/**
	 * Kanji.
	 */
	KANJI = 1296788073,

	/**
	 * Uses lowercase letters.
	 */
	LOWER_LETTERS = 1296855660,

	/**
	 * Uses lowercase Roman numerals.
	 */
	LOWER_ROMAN = 1297247596,

	/**
	 * Single leading zeros.
	 */
	SINGLE_LEADING_ZEROS = 1297312890,

	/**
	 * Uses symbols.
	 */
	SYMBOLS = 1181971321,

	/**
	 * Uses uppercase letters.
	 */
	UPPER_LETTERS = 1296855669,

	/**
	 * Uses uppercase Roman numerals.
	 */
	UPPER_ROMAN = 1297247605,

}

/**
 * Options for positioning footnote reference numbers relative to characters the main text.
 */
declare enum FootnoteMarkerPositioning {
	/**
	 * Uses the position defined in the character style applied to footnote reference numbers. For information, see footnote marker style.
	 */
	NORMAL_MARKER = 1181576816,

	/**
	 * Gives the marker ruby style positioning.
	 */
	RUBY_MARKER = 1181577840,

	/**
	 * Subscripts footnote reference numbers.
	 */
	SUBSCRIPT_MARKER = 1181578096,

	/**
	 * Superscripts footnote reference numbers.
	 */
	SUPERSCRIPT_MARKER = 1181569904,

}

/**
 * Override clearing options.
 */
declare enum OverrideType {
	/**
	 * Clears all types of override.
	 */
	ALL = 1634495520,

	/**
	 * Clears only character style overrides.
	 */
	CHARACTER_ONLY = 1667789423,

	/**
	 * Clears only paragraph style overrides.
	 */
	PARAGRAPH_ONLY = 1885434479,

}

/**
 * The resolution strategy to employ for imported styles that have the same names as existing styles.
 */
declare enum GlobalClashResolutionStrategy {
	/**
	 * Does not import styles whose names clash with existing items.
	 */
	DO_NOT_LOAD_THE_STYLE = 1147495276,

	/**
	 * Overwrites existing styles whose names clash with imported items.
	 */
	LOAD_ALL_WITH_OVERWRITE = 1279350607,

	/**
	 * Renames imported styles whose names clash with existing items to preserve existing items.
	 */
	LOAD_ALL_WITH_RENAME = 1279350610,

}

/**
 * Text orientation options.
 */
declare enum StoryHorizontalOrVertical {
	/**
	 * Orients the text horizontally.
	 */
	HORIZONTAL = 1752134266,

	/**
	 * The text direction is unknown.
	 */
	UNKNOWN = 1433299822,

	/**
	 * Orients the text vertically.
	 */
	VERTICAL = 1986359924,

}

/**
 * Options for auto page insertion in response to overset text.
 */
declare enum AddPageOptions {
	/**
	 * Insert pages at end of document.
	 */
	END_OF_DOCUMENT = 1634037604,

	/**
	 * Insert pages at end of section.
	 */
	END_OF_SECTION = 1634037624,

	/**
	 * Insert pages at end of story.
	 */
	END_OF_STORY = 1634037619,

}

/**
 * Text variable types.
 */
declare enum VariableTypes {
	/**
	 * Chapter number variable.
	 */
	CHAPTER_NUMBER_TYPE = 1668183152,

	/**
	 * Creation date variable.
	 */
	CREATION_DATE_TYPE = 1414947684,

	/**
	 * Custom text variable.
	 */
	CUSTOM_TEXT_TYPE = 1414947700,

	/**
	 * File name variable.
	 */
	FILE_NAME_TYPE = 1414948462,

	/**
	 * Last page number variable.
	 */
	LAST_PAGE_NUMBER_TYPE = 1414952048,

	/**
	 * Live Caption variable.
	 */
	LIVE_CAPTION_TYPE = 1414947693,

	/**
	 * Running header (character style) variable.
	 */
	MATCH_CHARACTER_STYLE_TYPE = 1414947667,

	/**
	 * Running header (paragraph style) variable.
	 */
	MATCH_PARAGRAPH_STYLE_TYPE = 1414950995,

	/**
	 * Modification date variable.
	 */
	MODIFICATION_DATE_TYPE = 1414950244,

	/**
	 * Output date variable.
	 */
	OUTPUT_DATE_TYPE = 1414950756,

	/**
	 * Private cross reference chapter number variable.
	 */
	XREF_CHAPTER_NUMBER_TYPE = 1414947694,

	/**
	 * Private cross reference page number variable.
	 */
	XREF_PAGE_NUMBER_TYPE = 1414953074,

}

/**
 * Scopes for page number variable.
 */
declare enum VariableScopes {
	/**
	 * The scope is limited to the current document.
	 */
	DOCUMENT_SCOPE = 1129538671,

	/**
	 * The scope is limited to the current section.
	 */
	SECTION_SCOPE = 1129542501,

}

/**
 * Number variable numbering styles.
 */
declare enum VariableNumberingStyles {
	/**
	 * Arabic numerals.
	 */
	ARABIC = 1298231906,

	/**
	 * Current
	 */
	CURRENT = 1298363762,

	/**
	 * Double leading zeros.
	 */
	DOUBLE_LEADING_ZEROS = 1296329850,

	/**
	 * Full-width Arabic numerals.
	 */
	FULL_WIDTH_ARABIC = 1296455521,

	/**
	 * Kanji.
	 */
	KANJI = 1296788073,

	/**
	 * Lowercase letters.
	 */
	LOWER_LETTERS = 1296855660,

	/**
	 * Lowercase Roman numerals.
	 */
	LOWER_ROMAN = 1297247596,

	/**
	 * Single leading zero.
	 */
	SINGLE_LEADING_ZEROS = 1297312890,

	/**
	 * Uppercase letters.
	 */
	UPPER_LETTERS = 1296855669,

	/**
	 * Uppercase Roman numerals.
	 */
	UPPER_ROMAN = 1297247605,

}

/**
 * Search strategy options.
 */
declare enum SearchStrategies {
	/**
	 * Searches forward from the start of the current page.
	 */
	FIRST_ON_PAGE = 1396794992,

	/**
	 * Search backward from the end of the current page.
	 */
	LAST_ON_PAGE = 1396796528,

}

/**
 * Change case options.
 */
declare enum ChangeCaseOptions {
	/**
	 * Converts all letters to lowercase.
	 */
	LOWERCASE = 1667460195,

	/**
	 * No conversion.
	 */
	NONE = 1852796517,

	/**
	 * Converts the first letter of the first word of each sentence to uppercase.
	 */
	SENTENCECASE = 1667461987,

	/**
	 * Converts the first letter of each word to uppercase.
	 */
	TITLECASE = 1667462243,

	/**
	 * Converts all letters to uppercase.
	 */
	UPPERCASE = 1667462499,

}

/**
 * Auto sizing type options for text.
 */
declare enum AutoSizingTypeEnum {
	/**
	 * Text frame will be resized in both(height and width) dimensions.
	 */
	HEIGHT_AND_WIDTH = 1752069993,

	/**
	 * Text frame will be resized in both(height and width) dimensions proportionally.
	 */
	HEIGHT_AND_WIDTH_PROPORTIONALLY = 1752070000,

	/**
	 * Text frame will be resized in height dimension only.
	 */
	HEIGHT_ONLY = 1751476583,

	/**
	 * Text frame auto-sizing is off.
	 */
	OFF = 1330005536,

	/**
	 * Text frame will be resized in width dimension only.
	 */
	WIDTH_ONLY = 2003395700,

}

/**
 * Auto sizing reference points for text.
 */
declare enum AutoSizingReferenceEnum {
	/**
	 * Center point on the botom edge of bounding box
	 */
	BOTTOM_CENTER_POINT = 1651467109,

	/**
	 * Bottom left point of bounding box
	 */
	BOTTOM_LEFT_POINT = 1651469413,

	/**
	 * Bottom right point of bounding box
	 */
	BOTTOM_RIGHT_POINT = 1651470953,

	/**
	 * Center point of bounding box
	 */
	CENTER_POINT = 1668183154,

	/**
	 * Center point on the left edge of bounding box
	 */
	LEFT_CENTER_POINT = 1818583909,

	/**
	 * Center point on the right edge of bounding box
	 */
	RIGHT_CENTER_POINT = 1919509349,

	/**
	 * Center point on the top edge of bounding box
	 */
	TOP_CENTER_POINT = 1953456997,

	/**
	 * Top left point of bounding box
	 */
	TOP_LEFT_POINT = 1953459301,

	/**
	 * Top right point of bounding box
	 */
	TOP_RIGHT_POINT = 1953460841,

}

/**
 * Type of Paragraph span.
 */
declare enum SpanColumnTypeOptions {
	/**
	 * Paragraph is a single column
	 */
	SINGLE_COLUMN = 1163092844,

	/**
	 * Paragraph spans the columns
	 */
	SPAN_COLUMNS = 1936745326,

	/**
	 * Paragraph splits the columns
	 */
	SPLIT_COLUMNS = 1937007470,

}

/**
 * Span Column Count Options.
 */
declare enum SpanColumnCountOptions {
	/**
	 * Paragraph spans all columns
	 */
	ALL = 1634495520,

}

/**
 * Options for specifying basis of the width of the paragraph shading.
 */
declare enum ParagraphShadingWidthEnum {
	/**
	 * Makes the paragraph shading based on width of the column.
	 */
	COLUMN_WIDTH = 1265399652,

	/**
	 * Makes the paragraph shading based on width of lines of text in the paragraph.
	 */
	TEXT_WIDTH = 1886681207,

}

/**
 * Line justification options.
 */
declare enum LineAlignment {
	/**
	 * Center aligns the text.
	 */
	CENTER_LINE_ALIGN = 1818321774,

	/**
	 * Justifies horizontal text on both the right and left and center aligns the last line or justifies vertical text on both the top and bottom and center aligns the last line.
	 */
	CENTER_LINE_JUSTIFY = 1818455658,

	/**
	 * Justifies horizontal text on both the right and left or justifies vertical text on both the top and bottom and gives all lines a uniform length.
	 */
	FULL_LINE_JUSTIFY = 1818651754,

	/**
	 * Left aligns horizontal text or top aligns vertical text.
	 */
	LEFT_OR_TOP_LINE_ALIGN = 1818324084,

	/**
	 * Justifies horizontal text on both the right and left and left aligns the last line or justifies vertical text on both the top and bottom and top aligns the last line.
	 */
	LEFT_OR_TOP_LINE_JUSTIFY = 1819047018,

	/**
	 * Right aligns horizontal text or bottom aligns vertical text.
	 */
	RIGHT_OR_BOTTOM_LINE_ALIGN = 1818325602,

	/**
	 * Justifies horizontal text on both the right and left and right aligns the last line or justifies vertical text on both the top and bottom and bottom aligns the last line.
	 */
	RIGHT_OR_BOTTOM_LINE_JUSTIFY = 1819435626,

}

/**
 * Grid view options.
 */
declare enum GridViewSettings {
	/**
	 * Align view.
	 */
	ALIGN_VIEW_ENUM = 1783062902,

	/**
	 * Grid and ZN view.
	 */
	GRID_AND_ZN_VIEW_ENUM = 1783064442,

	/**
	 * Grid view.
	 */
	GRID_VIEW_ENUM = 1783064438,

	/**
	 * ZN view.
	 */
	ZN_VIEW_ENUM = 1783069302,

}

/**
 * Character count location options.
 */
declare enum CharacterCountLocation {
	/**
	 * Displays the character count at the bottom of the frame.
	 */
	BOTTOM_ALIGN = 1651471469,

	/**
	 * Displays the character count on the left side of the frame.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Hides the character count.
	 */
	NONE = 1852796517,

	/**
	 * Displays the character count on the right side of the frame.
	 */
	RIGHT_ALIGN = 1919379572,

	/**
	 * Displays the character count at the top of the frame.
	 */
	TOP_ALIGN = 1953460256,

}

/**
 * InCopy UI colors.
 */
declare enum InCopyUIColors {
	/**
	 * Amber.
	 */
	AMBER = 1765895522,

	/**
	 * Aqua.
	 */
	AQUA = 1765896545,

	/**
	 * Black.
	 */
	BLACK = 1765960811,

	/**
	 * Blue.
	 */
	BLUE = 1765960821,

	/**
	 * Blueberry.
	 */
	BLUEBERRY = 1765960802,

	/**
	 * Brick red.
	 */
	BRICK_RED = 1765962340,

	/**
	 * Brown.
	 */
	BROWN = 1765962350,

	/**
	 * Burgundy.
	 */
	BURGUNDY = 1765962343,

	/**
	 * Canary.
	 */
	CANARY = 1766026873,

	/**
	 * Carnation.
	 */
	CARNATION = 1766023538,

	/**
	 * Charcoal.
	 */
	CHARCOAL = 1766025324,

	/**
	 * Cirrus.
	 */
	CIRRUS = 1766025586,

	/**
	 * Cornstarch.
	 */
	CORNSTARCH = 1766027886,

	/**
	 * Cute teal.
	 */
	CUTE_TEAL = 1766028396,

	/**
	 * Cyan.
	 */
	CYAN = 1766029678,

	/**
	 * Dark blue.
	 */
	DARK_BLUE = 1766089324,

	/**
	 * Dark green.
	 */
	DARK_GREEN = 1766090610,

	/**
	 * Eggplant.
	 */
	EGGPLANT = 1766156135,

	/**
	 * Electrolyte.
	 */
	ELECTROLYTE = 1766157411,

	/**
	 * Ether.
	 */
	ETHER = 1766159464,

	/**
	 * Fiesta.
	 */
	FIESTA = 1766222181,

	/**
	 * Forest.
	 */
	FOREST = 1766224756,

	/**
	 * Fuchsia.
	 */
	FUCHSIA = 1766225267,

	/**
	 * Gold.
	 */
	GOLD = 1766288484,

	/**
	 * Grape.
	 */
	GRAPE = 1766290032,

	/**
	 * Graphite.
	 */
	GRAPHITE = 1766289512,

	/**
	 * Grass green.
	 */
	GRASS_GREEN = 1766287218,

	/**
	 * Gray.
	 */
	GRAY = 1766290041,

	/**
	 * Green.
	 */
	GREEN = 1766290030,

	/**
	 * Grid blue.
	 */
	GRID_BLUE = 1766285932,

	/**
	 * Grid green.
	 */
	GRID_GREEN = 1766286439,

	/**
	 * Grid orange.
	 */
	GRID_ORANGE = 1766289266,

	/**
	 * Gunmetal.
	 */
	GUNMETAL = 1766290798,

	/**
	 * Iris.
	 */
	IRIS = 1766421107,

	/**
	 * Jade.
	 */
	JADE = 1766482276,

	/**
	 * Lavender.
	 */
	LAVENDER = 1766618734,

	/**
	 * Lemon.
	 */
	LEMON = 1766616430,

	/**
	 * Lichen.
	 */
	LICHEN = 1766615395,

	/**
	 * Light blue.
	 */
	LIGHT_BLUE = 1766613612,

	/**
	 * Light gray.
	 */
	LIGHT_GRAY = 1766614898,

	/**
	 * Light olive.
	 */
	LIGHT_OLIVE = 1766616940,

	/**
	 * Lime.
	 */
	LIME = 1766615405,

	/**
	 * Lipstick.
	 */
	LIPSTICK = 1766615408,

	/**
	 * Magenta.
	 */
	MAGENTA = 1766680430,

	/**
	 * Midnight.
	 */
	MIDNIGHT = 1766680932,

	/**
	 * Mocha.
	 */
	MOCHA = 1766682467,

	/**
	 * Mustard.
	 */
	MUSTARD = 1766684019,

	/**
	 * Ochre.
	 */
	OCHRE = 1766810482,

	/**
	 * Olive green.
	 */
	OLIVE_GREEN = 1766812790,

	/**
	 * Orange.
	 */
	ORANGE = 1766814318,

	/**
	 * Peach.
	 */
	PEACH = 1766876008,

	/**
	 * Pink.
	 */
	PINK = 1766878827,

	/**
	 * Powder.
	 */
	POWDER = 1766879095,

	/**
	 * Purple.
	 */
	PURPLE = 1766879856,

	/**
	 * Red.
	 */
	RED = 1767007588,

	/**
	 * Slate.
	 */
	SLATE = 1767074932,

	/**
	 * Smoke.
	 */
	SMOKE = 1767075179,

	/**
	 * Sulphur.
	 */
	SULPHUR = 1767077228,

	/**
	 * Tan.
	 */
	TAN = 1767137646,

	/**
	 * Teal.
	 */
	TEAL = 1767138668,

	/**
	 * Ultramarine.
	 */
	ULTRAMARINE = 1767205997,

	/**
	 * Violet.
	 */
	VIOLET = 1767271540,

	/**
	 * Wheat.
	 */
	WHEAT = 1767336037,

	/**
	 * White.
	 */
	WHITE = 1767336052,

	/**
	 * Yellow.
	 */
	YELLOW = 1767468151,

}

/**
 * Cursor types.
 */
declare enum CursorTypes {
	/**
	 * Uses a barbell cursor.
	 */
	BARBELL_CURSOR = 1698841196,

	/**
	 * Uses a block cursor.
	 */
	BLOCK_CURSOR = 1698851951,

	/**
	 * Uses a standard cursor.
	 */
	STANDARD_CURSOR = 1699968100,

	/**
	 * Uses a thick cursor.
	 */
	THICK_CURSOR = 1700029291,

}

/**
 * The anti-aliasing type.
 */
declare enum AntiAliasType {
	/**
	 * Color anti-aliasing.
	 */
	COLOR_ANTIALIASING = 1665418322,

	/**
	 * Gray anti-aliasing.
	 */
	GRAY_ANTIALIASING = 1732527186,

	/**
	 * Thicker anti-aliasing.
	 */
	THICKER_ANTIALIASING = 1950444659,

}

/**
 * Line spacing type.
 */
declare enum LineSpacingType {
	/**
	 * Double space
	 */
	DOUBLE_SPACE = 1682068336,

	/**
	 * One and half space
	 */
	ONE_AND_HALF_SPACE = 1866549363,

	/**
	 * Single space
	 */
	SINGLE_SPACE = 1936282480,

	/**
	 * Triple space
	 */
	TRIPLE_SPACE = 1951552368,

}

/**
 * Page numbering options for book content objects within the book.
 */
declare enum RepaginateOption {
	/**
	 * Starts page numbers for each book content object at the next even-numbered page after the last page of the previous book content object.
	 */
	NEXT_EVEN_PAGE = 1164993131,

	/**
	 * Starts page numbers for each book content object at the next odd-numbered page after the last page of the previous book content object.
	 */
	NEXT_ODD_PAGE = 1332765291,

	/**
	 * Continues page numbers sequentially from the previous book content object.
	 */
	NEXT_PAGE = 1885500011,

}

/**
 * Book content file status options.
 */
declare enum BookContentStatus {
	/**
	 * The book content object is being used by someone else and is therefore locked.
	 */
	DOCUMENT_IN_USE = 1148150601,

	/**
	 * The book content object is open.
	 */
	DOCUMENT_IS_OPEN = 1148150607,

	/**
	 * The book content object has been modified after repagination.
	 */
	DOCUMENT_OUT_OF_DATE = 1148150596,

	/**
	 * The book content object is missing because it has been moved, renamed, or deleted.
	 */
	MISSING_DOCUMENT = 1148150605,

	/**
	 * The book content object is not open and is unchanged.
	 */
	NORMAL = 1852797549,

}

/**
 * Options for matching names when synchronizing styles in a book.
 */
declare enum SmartMatchOptions {
	/**
	 * Match only the style name while finding styles in target.
	 */
	MATCH_STYLE_NAME = 1936552814,

	/**
	 * Match the full path of style while finding styles in target.
	 */
	MATCH_STYLE_PATH = 1936549488,

}

/**
 * Specify the type of cell, either text or graphic.
 */
declare enum CellTypeEnum {
	/**
	 * Graphic or Page item cell.
	 */
	GRAPHIC_TYPE_CELL = 1701728329,

	/**
	 * Text cell.
	 */
	TEXT_TYPE_CELL = 1701730388,

}

/**
 * The row type.
 */
declare enum RowTypes {
	/**
	 * Makes the row a body row.
	 */
	BODY_ROW = 1161982583,

	/**
	 * Makes the row a footer row. Note: When setting row type as footer row, the row must be either the bottom row in the table or adjacent to an existing footer row.
	 */
	FOOTER_ROW = 1162244727,

	/**
	 * Makes the row a header row. Note: When setting row type as header row, the row must be either the top row in the table or adjacent to an existing header row.
	 */
	HEADER_ROW = 1162375799,

	/**
	 * (Read-only) The column's rows are of multiple types.
	 */
	MIXED_STATE = 1162703479,

}

/**
 * Placement options for header or footer rows.
 */
declare enum HeaderFooterBreakTypes {
	/**
	 * Places headers or footers in each text column.
	 */
	IN_ALL_TEXT_COLUMNS = 1231115363,

	/**
	 * Places one instance of headers or footers per page.
	 */
	ONCE_PER_PAGE = 1332760673,

	/**
	 * Repeats headers or footers in each text frame.
	 */
	ONCE_PER_TEXT_FRAME = 1332761702,

}

/**
 * Pattern options for alternating fills.
 */
declare enum AlternatingFillsTypes {
	/**
	 * Alternates column fills.
	 */
	ALTERNATING_COLUMNS = 1097614188,

	/**
	 * Alternates row fills.
	 */
	ALTERNATING_ROWS = 1097618039,

	/**
	 * No alternating pattern.
	 */
	NO_ALTERNATING_PATTERN = 1097617007,

}

/**
 * Options for displaying row and column strokes at corners.
 */
declare enum StrokeOrderTypes {
	/**
	 * Places row strokes in front of column strokes when row and column strokes are different colors; joins striped strokes and connects crossing points.
	 */
	BEST_JOINS = 1935828330,

	/**
	 * Places column strokes in front of row strokes.
	 */
	COLUMN_ON_TOP = 1935896436,

	/**
	 * Places row strokes in front when row and column strokes are different colors; joins striped strokes only at points where strokes cross in a T-shape.
	 */
	INDESIGN_2_COMPATIBILITY = 1936286819,

	/**
	 * Places row strokes in front of column strokes.
	 */
	ROW_ON_TOP = 1936879476,

}

/**
 * Values to specify the order table cells will display in story and galley views.
 */
declare enum DisplayOrderOptions {
	/**
	 * Order by columns.
	 */
	ORDER_BY_COLUMNS = 1652114254,

	/**
	 * Order by rows.
	 */
	ORDER_BY_ROWS = 1652118103,

}

/**
 * Rasterization options.
 */
declare enum FlattenerLevel {
	/**
	 * Keeps as much artwork as possible vector data.
	 */
	HIGH = 1701726313,

	/**
	 * Rasterizes all artwork.
	 */
	LOW = 1701727351,

	/**
	 * Rasterizes a medium amount of artwork.
	 */
	MEDIUM = 1701727588,

	/**
	 * Rasterizes more than a medium amount of artwork.
	 */
	MEDIUM_HIGH = 1718373704,

	/**
	 * Rasterizes almost all artwork.
	 */
	MEDIUM_LOW = 1718373708,

}

/**
 * Transparency blending space options.
 */
declare enum BlendingSpace {
	/**
	 * Uses the CMYK profile.
	 */
	CMYK = 1129142603,

	/**
	 * Defaults to the current color profile.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Uses the RGB color profile.
	 */
	RGB = 1666336578,

}

/**
 * Blend mode options.
 */
declare enum BlendMode {
	/**
	 * Creates a color with the luminance of the base color and the hue and saturation of the blend color. Note: Preserves gray levels and is useful for coloring monochrome images or tinting color images. Creates the inverse effect of the luminosity blend mode.
	 */
	COLOR = 1668246642,

	/**
	 * Darkens the base color to reflect the blend color. Note: Blending with white produces no change.
	 */
	COLOR_BURN = 2020625768,

	/**
	 * Brightens the base color to reflect the blend color. Note: Blending with pure black produces no change.
	 */
	COLOR_DODGE = 2020625767,

	/**
	 * Selects the darker of the base or blend colors as the resulting color; replaces areas lighter than the blend color but does not change areas darker than the blend color.
	 */
	DARKEN = 2020625769,

	/**
	 * Subtracts either the blend color from the base color or vice versa, depending on which has the greater brightness value. Note: Blending with white inverts the base color values; blending with black produces no change.
	 */
	DIFFERENCE = 2020625771,

	/**
	 * Creates an effect similar to--but lower in contrast than--the difference blend mode. Note: Blending with white inverts the base color values; blending with black produces no change
	 */
	EXCLUSION = 2020625772,

	/**
	 * For blend colors lighter than 50% gray, lightens the artwork as if it were screened; for blend colors darker than 50% gray, darkens the artwork as if it were multiplied. Note: Painting with pure black or white results in pure black or white.
	 */
	HARD_LIGHT = 2020625766,

	/**
	 * Creates a color with the luminance and saturation of the base color and the hue of the blend color.
	 */
	HUE = 2020625773,

	/**
	 * Selects the lighter of the base or blend colors as the resulting color; replaces areas darker than the blend color but does not change areas lighter than the blend color
	 */
	LIGHTEN = 2020625770,

	/**
	 * Creates a color with the hue and saturation of the base color and the luminance of the blend color. Note: Creates the inverse effect of the color blend mode.
	 */
	LUMINOSITY = 2020625776,

	/**
	 * Multiplies the base color by the blend color, resulting in a darker color. Note: Multiplying with black produces black; multiplying with white leaves the color unchanged.
	 */
	MULTIPLY = 2020625762,

	/**
	 * Colors the object with the blend color, without interaction with the base color.
	 */
	NORMAL = 1852797549,

	/**
	 * Multiplies or screens the colors, depending on the base color; patterns or colors overlay the existing artwork, preserving base color highlights and shadows while mixing in the blend color to reflect the lightness or darkness of the original color.
	 */
	OVERLAY = 2020625764,

	/**
	 * Creates a color with the luminance and hue of the base color and the saturation of the blend color. Note: Does not change areas with no saturation (0% gray).
	 */
	SATURATION = 1380545377,

	/**
	 * Multiplies the inverse of the blend and base colors, resulting in a lighter color. Note: Screening with white produces white; screening with black leaves the color unchanged.
	 */
	SCREEN = 2020625763,

	/**
	 * For blend colors lighter than 50% gray, lightens the artwork as if it were dodged; for blend colors darker than 50% gray, darkens the artwork as if it were burned. Note: Painting with pure black or white produces a distinctly darker or lighter area, but does not result in pure black or white.
	 */
	SOFT_LIGHT = 2020625765,

}

/**
 * Shadow mode options.
 */
declare enum ShadowMode {
	/**
	 * Uses a standard blurred drop shadow.
	 */
	DROP = 2020623440,

	/**
	 * Does not use a shadow.
	 */
	NONE = 1852796517,

}

/**
 * On/off options for feathering.
 */
declare enum FeatherMode {
	/**
	 * Does not use feathering.
	 */
	NONE = 1852796517,

	/**
	 * Uses standard feathering.
	 */
	STANDARD = 2020623970,

}

/**
 * Corner type options.
 */
declare enum FeatherCornerType {
	/**
	 * The edges of the object fade from opaque to transparent.
	 */
	DIFFUSION = 2020623203,

	/**
	 * The corners are rounded by the feather radius.
	 */
	ROUNDED = 2020623202,

	/**
	 * The gradient exactly follows the outer edge of the object, including sharp corners.
	 */
	SHARP = 2020623201,

}

/**
 * Flattener level override options.
 */
declare enum SpreadFlattenerLevel {
	/**
	 * Uses the specified custom flattening level.
	 */
	CUSTOM = 1131639917,

	/**
	 * Uses the default level.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Turns off flattening.
	 */
	NONE = 1852796517,

}

/**
 * Glow technique options.
 */
declare enum GlowTechnique {
	/**
	 * Precise.
	 */
	PRECISE = 2020618338,

	/**
	 * Softer.
	 */
	SOFTER = 2020618337,

}

/**
 * Inner glow source options.
 */
declare enum InnerGlowSource {
	/**
	 * The glow radiates from the object's center.
	 */
	CENTER_SOURCED = 2020618593,

	/**
	 * The glow radiates from the edge of the object.
	 */
	EDGE_SOURCED = 2020618594,

}

/**
 * Bevel and emboss style options.
 */
declare enum BevelAndEmbossStyle {
	/**
	 * An emboss effect is applied to the object.
	 */
	EMBOSS = 2020618851,

	/**
	 * The inside edges of the object are beveled.
	 */
	INNER_BEVEL = 2020618850,

	/**
	 * The outside edges of the object are beveled.
	 */
	OUTER_BEVEL = 2020618849,

	/**
	 * An emboss effect is applied to the edges of the object.
	 */
	PILLOW_EMBOSS = 2020618852,

}

/**
 * Bevel and emboss technique options.
 */
declare enum BevelAndEmbossTechnique {
	/**
	 * Emboss and bevel contours are chiseled and have hard corners.
	 */
	CHISEL_HARD = 2020619106,

	/**
	 * Emboss or bevel contours chiseled but softened somewhat.
	 */
	CHISEL_SOFT = 2020619107,

	/**
	 * Emboss and bevel contours are smooth.
	 */
	SMOOTH_CONTOUR = 2020619105,

}

/**
 * Bevel and emboss direction options.
 */
declare enum BevelAndEmbossDirection {
	/**
	 * The effect appears depressed.
	 */
	DOWN = 1181971556,

	/**
	 * The effect appears raised.
	 */
	UP = 1181971566,

}

/**
 * Follow-shape options for directional feathering.
 */
declare enum FollowShapeModeOptions {
	/**
	 * Feathers all edges that face the specified angle.
	 */
	ALL_EDGES = 1701721442,

	/**
	 * Feathers only the leading edge facing the specified angle.
	 */
	LEADING_EDGE = 1701721441,

	/**
	 * Disables shape following and uses the rectangular bounds of the object.
	 */
	NONE = 1852796517,

}

/**
 * Page number position options.
 */
declare enum PageNumberPosition {
	/**
	 * Places page numbers after entry text.
	 */
	AFTER_ENTRY = 1634100590,

	/**
	 * Places page numbers before entry text.
	 */
	BEFORE_ENTRY = 1650877806,

	/**
	 * Turns off page numbers.
	 */
	NONE = 1852796517,

}

/**
 * Numbered paragraphs options.
 */
declare enum NumberedParagraphsOptions {
	/**
	 * Excludes paragraph numbers.
	 */
	EXCLUDE_NUMBERS = 1952804469,

	/**
	 * Includes the full paragraph text.
	 */
	INCLUDE_FULL_PARAGRAPH = 1953064560,

	/**
	 * Includes only the paragraph number.
	 */
	INCLUDE_NUMBERS_ONLY = 1953066607,

}

/**
 * Enum for status of the comment
 */
declare enum CommentStatusEnum {
	/**
	 * Status is open
	 */
	OPEN_STATUS = 1634955120,

	/**
	 * Status is resolved
	 */
	RESOLVED_STATUS = 1634955877,

}

/**
 * Enum for type of the comment
 */
declare enum CommentTypeEnum {
	/**
	 * Type is arrow
	 */
	ARROW_TYPE = 1635017074,

	/**
	 * Type is cloud
	 */
	CLOUD_TYPE = 1635017572,

	/**
	 * Type is connected lines
	 */
	CONNECTED_LINES_TYPE = 1635017582,

	/**
	 * Type is freeform drawing
	 */
	FREEFORM_DRAWING_TYPE = 1635018340,

	/**
	 * Type is highlight text
	 */
	HIGHLIGHT_TEXT_TYPE = 1635018860,

	/**
	 * Type is insert text
	 */
	INSERT_TEXT_TYPE = 1635019124,

	/**
	 * Type is invalid comment type
	 */
	INVALID_COMMENT_TYPE = 1635019118,

	/**
	 * Type is line segment
	 */
	LINE_SEGMENT_TYPE = 1635019891,

	/**
	 * Type is oval
	 */
	OVAL_TYPE = 1635020662,

	/**
	 * Type is polygon
	 */
	POLYGON_TYPE = 1635020908,

	/**
	 * Type is rectangle
	 */
	RECTANGLE_TYPE = 1635021420,

	/**
	 * Type is replace text
	 */
	REPLACE_TEXT_TYPE = 1635021428,

	/**
	 * Type is squiggly text
	 */
	SQUIGGLY_TEXT_TYPE = 1635021681,

	/**
	 * Type is stamp
	 */
	STAMP_TYPE = 1635021680,

	/**
	 * Type is sticky note
	 */
	STICKY_NOTE_TYPE = 1635021678,

	/**
	 * Type is strikethrough text
	 */
	STRIKETHROUGH_TEXT_TYPE = 1635021682,

	/**
	 * Type is text box
	 */
	TEXT_BOX_TYPE = 1635021922,

	/**
	 * Type is text callout
	 */
	TEXT_CALLOUT_TYPE = 1635021923,

	/**
	 * Type is text typewriter
	 */
	TEXT_TYPEWRITER_TYPE = 1635021940,

	/**
	 * Type is underline text
	 */
	UNDERLINE_TEXT_TYPE = 1635022188,

}

/**
 * Character set options for importing text files.
 */
declare enum TextImportCharacterSet {
	/**
	 * The ANSI character set.
	 */
	ANSI = 1095652169,

	/**
	 * The Arabic ASMO character set.
	 */
	ARABIC_ASMO = 1415672685,

	/**
	 * The Arabic ASMO transparent character set.
	 */
	ARABIC_ASMO_TRANSPARENT = 1415672692,

	/**
	 * The Central European (ISO) character set.
	 */
	CENTRALEUROPEAN_ISO = 1416184645,

	/**
	 * The Chinese Big 5 character set.
	 */
	CHINESE_BIG_5 = 1415799349,

	/**
	 * The Cyrillic (CP855) character set.
	 */
	CYRILLIC_CP855 = 1415788597,

	/**
	 * The Cyrillic (ISO) character set.
	 */
	CYRILLIC_ISO = 1416184697,

	/**
	 * The Cyrillic (KOI8R) character set.
	 */
	CYRILLIC_KOI8R = 1416312946,

	/**
	 * The Cyrillic (KOI8U) character set.
	 */
	CYRILLIC_KOI8U = 1416312949,

	/**
	 * The DOS Latin 2 character set.
	 */
	DOS_LATIN_2 = 1415867442,

	/**
	 * The GB18030 character set.
	 */
	GB18030 = 1416061491,

	/**
	 * The GB2312 character set.
	 */
	GB2312 = 1416061535,

	/**
	 * The Greek (ISO) character set.
	 */
	GREEK_ISO = 1416185707,

	/**
	 * The KSC5601 character set.
	 */
	KSC5601 = 1414230883,

	/**
	 * The Macintosh Arabic character set.
	 */
	MACINTOSH_ARABIC = 1416446322,

	/**
	 * The Macintosh CE (Cantral European) character set.
	 */
	MACINTOSH_CE = 1416446789,

	/**
	 * The Macintosh Croatian character set.
	 */
	MACINTOSH_CROATIAN = 1416446834,

	/**
	 * The Macintosh Cyrillic character set.
	 */
	MACINTOSH_CYRILLIC = 1416446841,

	/**
	 * The Macintosh Greek character set.
	 */
	MACINTOSH_GREEK = 1416447858,

	/**
	 * The Macintosh Greek (Shared caps) character set.
	 */
	MACINTOSH_GREEK_SHARED_CAPS = 1416447794,

	/**
	 * The Macintosh Hebrew character set.
	 */
	MACINTOSH_HEBREW = 1416448098,

	/**
	 * The Macintosh Icelandic character set.
	 */
	MACINTOSH_ICELANDIC = 1416448355,

	/**
	 * The Macintosh Roman character set.
	 */
	MACINTOSH_ROMAN = 1416450669,

	/**
	 * The Macintosh Romanian character set.
	 */
	MACINTOSH_ROMANIAN = 1416450671,

	/**
	 * The Macintosh Turkish character set.
	 */
	MACINTOSH_TURKISH = 1416451186,

	/**
	 * The Recommend:Shift_JIS 83pv character set.
	 */
	RECOMMENDSHIFTJIS83PV = 1412969328,

	/**
	 * The Shift_JIS 90ms character set.
	 */
	SHIFTJIS90MS = 1413034093,

	/**
	 * The Shift_JIS 90pv character set.
	 */
	SHIFTJIS90PV = 1413034096,

	/**
	 * The Turkish (ISO) character set.
	 */
	TURKISH_ISO = 1416189045,

	/**
	 * The Unicode UTF16 character set.
	 */
	UTF16 = 1937125686,

	/**
	 * The Unicode UTF8 character set.
	 */
	UTF8 = 1937134904,

	/**
	 * The Windows Arabic character set.
	 */
	WINDOWS_ARABIC = 1417101682,

	/**
	 * Tthe Windows Baltic character set.
	 */
	WINDOWS_BALTIC = 1417101940,

	/**
	 * The Windows CE (Central European) character set.
	 */
	WINDOWS_CE = 1417102149,

	/**
	 * The Windows Cyrillic character set.
	 */
	WINDOWS_CYRILLIC = 1417102201,

	/**
	 * The Windows EE (Eastern European) character set.
	 */
	WINDOWS_EE = 1417102661,

	/**
	 * The Windows Greek character set.
	 */
	WINDOWS_GREEK = 1417103218,

	/**
	 * The Windows Hebrew character set.
	 */
	WINDOWS_HEBREW = 1417103458,

	/**
	 * The Windows Turkish character set.
	 */
	WINDOWS_TURKISH = 1417106549,

}

/**
 * Import platform options.
 */
declare enum ImportPlatform {
	/**
	 * Macintosh.
	 */
	MACINTOSH = 1296130931,

	/**
	 * Windows.
	 */
	PC = 1466852474,

}

/**
 * Options for converting manual page breaks.
 */
declare enum ConvertPageBreaks {
	/**
	 * Converts manual page breaks to column breaks.
	 */
	COLUMN_BREAK = 1396927554,

	/**
	 * Does not preserve page breaks; allows text to flow.
	 */
	NONE = 1852796517,

	/**
	 * Preserves page breaks.
	 */
	PAGE_BREAK = 1397778242,

}

/**
 * Character set options exporting tagged text files.
 */
declare enum TagTextExportCharacterSet {
	/**
	 * ANSI.
	 */
	ANSI = 1095652169,

	/**
	 * ASCII.
	 */
	ASCII = 1095975753,

	/**
	 * The Central European (ISO) character set.
	 */
	CENTRALEUROPEAN_ISO = 1416184645,

	/**
	 * Chinese Big 5
	 */
	CHINESE_BIG_5 = 1415799349,

	/**
	 * The Cyrillic (ISO) character set.
	 */
	CYRILLIC_ISO = 1416184697,

	/**
	 * Uses GB18030 encoding.
	 */
	GB18030 = 1416061491,

	/**
	 * The Greek (ISO) character set.
	 */
	GREEK_ISO = 1416185707,

	/**
	 * Uses KSC5601 encoding.
	 */
	KSC5601 = 1414230883,

	/**
	 * Shift_JIS.
	 */
	SHIFT_JIS = 1249077875,

	/**
	 * Unicode.
	 */
	UNICODE = 1249209961,

	/**
	 * The Windows Arabic character set.
	 */
	WINDOWS_ARABIC = 1417101682,

	/**
	 * The Windows Hebrew character set.
	 */
	WINDOWS_HEBREW = 1417103458,

}

/**
 * Tag form options.
 */
declare enum TagTextForm {
	/**
	 * Abbreviates tags; creates smaller text files.
	 */
	ABBREVIATED = 1414816098,

	/**
	 * Displays tags in long form; creates larger text files.
	 */
	VERBOSE = 1414821474,

}

/**
 * Options for resolving style conflicts when importing tagged text.
 */
declare enum StyleConflict {
	/**
	 * Uses the publication style.
	 */
	PUBLICATION_DEFINITION = 1414819940,

	/**
	 * Uses the tag file style.
	 */
	TAG_FILE_DEFINITION = 1413903460,

}

/**
 * Character set options for exported text files.
 */
declare enum TextExportCharacterSet {
	/**
	 * The default character set for the platform.
	 */
	DEFAULT_PLATFORM = 1415865972,

	/**
	 * The Unicode UTF16 character set.
	 */
	UTF16 = 1937125686,

	/**
	 * The Unicode UTF8 character set.
	 */
	UTF8 = 1937134904,

}

/**
 * Options for converting tables.
 */
declare enum ConvertTablesOptions {
	/**
	 * Convert tables to unformatted, tab-delimited text.
	 */
	UNFORMATTED_TABBED_TEXT = 1398101076,

	/**
	 * Converts tables to basic, unformatted tables.
	 */
	UNFORMATTED_TABLE = 1396921684,

}

/**
 * Formatting options for imported spreadsheets.
 */
declare enum TableFormattingOptions {
	/**
	 * Use formatting from the original spreadsheet.
	 */
	EXCEL_FORMATTED_TABLE = 2020361812,

	/**
	 * Converts the spreadsheet to a table that is formatted only on initial import but not on update.
	 */
	EXCEL_FORMAT_ONLY_ONCE = 2017873748,

	/**
	 * Convert the spreadsheet to unformatted, tab-delimited text.
	 */
	EXCEL_UNFORMATTED_TABBED_TEXT = 2018858068,

	/**
	 * Convert the spreadsheet to an unformatted table.
	 */
	EXCEL_UNFORMATTED_TABLE = 2020365652,

}

/**
 * Alignment options.
 */
declare enum AlignmentStyleOptions {
	/**
	 * Center aligns cells.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Left aligns cells.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Right aligns cells.
	 */
	RIGHT_ALIGN = 1919379572,

	/**
	 * Preserves the spreadsheet's alignment.
	 */
	SPREADSHEET = 1936749171,

}

/**
 * Options for resolving clashes that result from matching style names.
 */
declare enum ResolveStyleClash {
	/**
	 * Automatically renames the new style.
	 */
	RESOLVE_CLASH_AUTO_RENAME = 2001879873,

	/**
	 * Uses the existing style.
	 */
	RESOLVE_CLASH_USE_EXISTING = 2001879877,

	/**
	 * Uses the new style.
	 */
	RESOLVE_CLASH_USE_NEW = 2001879886,

}

/**
 * The container type.
 */
declare enum ContainerType {
	/**
	 * The container contains alternative values of which only one can be used.
	 */
	ALT = 1298424180,

	/**
	 * The container contains unordered items.
	 */
	BAG = 1298424423,

	/**
	 * The container contains ordered or sequential items.
	 */
	SEQ = 1298428785,

}

/**
 * The copyright status of the document.
 */
declare enum CopyrightStatus {
	/**
	 * The document is in the public domain.
	 */
	NO = 1852776480,

	/**
	 * The copyright status is unknown.
	 */
	UNKNOWN = 1433299822,

	/**
	 * The document is copyrighted.
	 */
	YES = 2036691744,

}

/**
 * Index entry capitalization options.
 */
declare enum IndexCapitalizationOptions {
	/**
	 * Capitalizes all index entries. Note: Capitalizes only topics created before the capitalization statement appears in the script.
	 */
	ALL_ENTRIES = 1097624645,

	/**
	 * Capitalizes all level 1 entries. Note: Capitalizes only topics created before the capitalization statement appears in the script.
	 */
	ALL_LEVEL_1_ENTRIES = 1095517556,

	/**
	 * Capitalizes the specified topic and its nested topics. Valid only as parameter of the topic capitalize method; cannot be used as a parameter of the index capitalize method. Note: Must occur after the selected topic and its nested subtopics are created.
	 */
	INCLUDE_SUBENTRIES = 1767072325,

	/**
	 * Capitalizes the specified topic but does not capitalize its nested topics. Valid only as parameter of the topic capitalize method; cannot be used as a parameter of the index capitalize method. Note: Must occur after the specified topic and its nested topics are created.
	 */
	SELECTED_ENTRY = 1398042725,

}

/**
 * Options for formatting level 2 and lower index topics.
 */
declare enum IndexFormat {
	/**
	 * Places nested topics on the line below and indented from the parent topic.
	 */
	NESTED_FORMAT = 1316243814,

	/**
	 * Places nested topics on the same line as their parent topic, separated by the specified separator.
	 */
	RUNIN_FORMAT = 1382631782,

}

/**
 * Instructional text options for cross reference.
 */
declare enum CrossReferenceType {
	/**
	 * Inserts the specified string in front of the referenced topic.
	 */
	CUSTOM_CROSS_REFERENCE = 1131639875,

	/**
	 * Inserts the specified following topic separator and the specified string after the referenced topic. If no following topic separator is specified, inserts a space.
	 */
	CUSTOM_CROSS_REFERENCE_AFTER = 1131639905,

	/**
	 * Inserts the specified string and the specified before cross reference separator in front of the referenced topic. If no before cross reference separator is specified, inserts a space.
	 */
	CUSTOM_CROSS_REFERENCE_BEFORE = 1131639906,

	/**
	 * Inserts 'See' in front of the referenced topic.
	 */
	SEE = 1701729125,

	/**
	 * Inserts 'See also' in front of the referenced topic.
	 */
	SEE_ALSO = 1399144812,

	/**
	 * Inserts 'See also herein' in front of the referenced topic.
	 */
	SEE_ALSO_HEREIN = 1398884466,

	/**
	 * Inserts 'See herein' in front of the referenced topic.
	 */
	SEE_HEREIN = 1397256814,

	/**
	 * Inserts 'See also' in front of the referenced topic if the topic has an associated page reference; inserts 'See' if the topic does not have a page reference.
	 */
	SEE_OR_ALSO_BRACKET = 1399800172,

}

/**
 * Options for index page references.
 */
declare enum PageReferenceType {
	/**
	 * The page on which the index entry is located.
	 */
	CURRENT_PAGE = 1668444263,

	/**
	 * The range of pages from the page containing the inedex entry to the nth page after that page (where n is the number of pages to include).
	 */
	FOR_NEXT_N_PAGES = 1718513767,

	/**
	 * The range of pages from the page containing the index entry to the page containing the nth full paragraph from the paragraph containing the index entry (where n is the number of paragraphs to include).
	 */
	FOR_NEXT_N_PARAGRAPHS = 1718513778,

	/**
	 * Turns off page numbers for the index topic.
	 */
	SUPPRESS_PAGE_NUMBERS = 1852863079,

	/**
	 * The last page in the document.
	 */
	TO_END_OF_DOCUMENT = 1701799011,

	/**
	 * The last page in the numbered section containing the index entry.
	 */
	TO_END_OF_SECTION = 1701802851,

	/**
	 * The last page in the story containing the index entry.
	 */
	TO_END_OF_STORY = 1701802868,

	/**
	 * The range of pages from the page containing the index entry to the page containing the next paragraph style change.
	 */
	TO_NEXT_STYLE_CHANGE = 1953395555,

	/**
	 * The range of pages from the page containing the index entry to the page that contains the next occurrance of the specified paragraph style. If no paragraph style is specified, the paragraph style of the index entry paragraph is used.
	 */
	TO_NEXT_USE_OF_STYLE = 1953396083,

}

/**
 * Indexing sort option header types
 */
declare enum HeaderTypes {
	/**
	 * Basic Latin
	 */
	BASIC_LATIN = 1213481548,

	/**
	 * Belarusian
	 */
	BELARUSIAN = 1213481573,

	/**
	 * Bulgarian
	 */
	BULGARIAN = 1213481589,

	/**
	 * Chinese Pinyin
	 */
	CHINESE_PINYIN = 1213481808,

	/**
	 * Chinese Stroke Count
	 */
	CHINESE_STROKE_COUNT = 1213481811,

	/**
	 * Croatian
	 */
	CROATIAN = 1213481842,

	/**
	 * Czech
	 */
	CZECH = 1213481850,

	/**
	 * Danish/Norwegian
	 */
	DANISH_NORWEGIAN = 1213482062,

	/**
	 * Estonian
	 */
	ESTONIAN = 1213482355,

	/**
	 * Finnish/Swedish
	 */
	FINNISH_SWEDISH = 1213485894,

	/**
	 * Hiragana: A, I, U, E, O...
	 */
	HIRAGANA_ALL = 1213483073,

	/**
	 * Hiragana: A, Ka, Sa, Ta, Na...
	 */
	HIRAGANA_CONSONANTS_ONLY = 1213483075,

	/**
	 * Hungarian
	 */
	HUNGARIAN = 1213483125,

	/**
	 * Katakana: A, I, U, E, O...
	 */
	KATAKANA_ALL = 1213483841,

	/**
	 * Katakana: A, Ka, Sa, Ta, Na...
	 */
	KATAKANA_CONSONANTS_ONLY = 1213483843,

	/**
	 * Korean Consonant
	 */
	KOREAN_CONSONANT = 1213483887,

	/**
	 * Korean Consonant Plus Vowel
	 */
	KOREAN_CONSONANT_PLUS_VOWEL = 1213483862,

	/**
	 * Latvian
	 */
	LATVIAN = 1213484129,

	/**
	 * Lithuanian
	 */
	LITHUANIAN = 1213484137,

	/**
	 * Polish
	 */
	POLISH = 1213485167,

	/**
	 * Romanian
	 */
	ROMANIAN = 1213485679,

	/**
	 * Russian
	 */
	RUSSIAN = 1213485685,

	/**
	 * Slovak
	 */
	SLOVAK = 1213485931,

	/**
	 * Slovenian
	 */
	SLOVENIAN = 1213485934,

	/**
	 * Spanish
	 */
	SPANISH = 1213485936,

	/**
	 * Turkish
	 */
	TURKISH = 1213486197,

	/**
	 * Ukrainian
	 */
	UKRAINIAN = 1213486443,

}

/**
 * Options for specifying how tranparencies are displayed.
 */
declare enum TagTransparency {
	/**
	 * Uses the default setting. For information, see display performance preferences.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Displays higher-resolution (144 dpi) drop shadows and feathers, CMYK mattes, and spread isolation.
	 */
	HIGH_QUALITY = 1346922866,

	/**
	 * Displays basic transparency (opacity and blend modes) and shows transparency effects such as drop shadow and feathering in a low-resolution approximation. Note: Does not isolate page content from the background. Objects with blend modes other than Normal might appear different in other applications and output.
	 */
	LOW_QUALITY = 1481666146,

	/**
	 * Displays drop shadows and feathering in low resolution.
	 */
	MEDIUM_QUALITY = 1481663597,

	/**
	 * Turns off the on-screen display of transparency. Note: Does not turn off transparency when printing or exporting the file.
	 */
	OFF = 1330005536,

}

/**
 * The display method for vector images.
 */
declare enum TagVector {
	/**
	 * Uses the default setting. For information, see display performance preferences.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Grays out the image.
	 */
	GRAY_OUT = 1917284985,

	/**
	 * Displays a high-resolution version of the image.
	 */
	HIGH_RESOLUTION = 1917348177,

	/**
	 * Displays a low-resolution proxy version of the image.
	 */
	PROXY = 1917874808,

}

/**
 * The display method for raster images.
 */
declare enum TagRaster {
	/**
	 * Uses the default setting. For information, see display performance preferences.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Grays out raster images.
	 */
	GRAY_OUT = 1917284985,

	/**
	 * Displays a high-resolution version of the image.
	 */
	HIGH_RESOLUTION = 1917348177,

	/**
	 * Displays a low-resolution proxy image appropriate for identifying and positioning an image.
	 */
	PROXY = 1917874808,

}

/**
 * Options for highlighting the hyperlink when selected.
 */
declare enum HyperlinkAppearanceHighlight {
	/**
	 * Highlights the hyperlink border inset.
	 */
	INSET = 1853056372,

	/**
	 * Highlights the hyperlink fill color.
	 */
	INVERT = 1853256308,

	/**
	 * Does not highlight the hyperlink.
	 */
	NONE = 1852796517,

	/**
	 * Highlights the hyperlink border.
	 */
	OUTLINE = 1869900910,

}

/**
 * Hyperlink border weight options.
 */
declare enum HyperlinkAppearanceWidth {
	/**
	 * Uses a medium border.
	 */
	MEDIUM = 1701727588,

	/**
	 * Uses a thick border.
	 */
	THICK = 1952999787,

	/**
	 * Uses a thin border.
	 */
	THIN = 1952999790,

}

/**
 * Hyperlink border style options.
 */
declare enum HyperlinkAppearanceStyle {
	/**
	 * Uses a dashed stroke.
	 */
	DASHED = 1684108136,

	/**
	 * Uses a solid stroke.
	 */
	SOLID = 1936682084,

}

/**
 * Hyperlink destination page display options.
 */
declare enum HyperlinkDestinationPageSetting {
	/**
	 * Fits the destination page to the window height; may obscure the right side the page. Note: The magnification changes automatically when the window is resized vertically.
	 */
	FIT_HEIGHT = 1212437352,

	/**
	 * Displays the visible portion of the destination page as the destination.
	 */
	FIT_VIEW = 1212437366,

	/**
	 * Fits the the text area of the destination page to the window width; obscures page margins and may obscure the lower portion of the page. Note: The magnification changes automatically when the window is resized horizontally.
	 */
	FIT_VISIBLE = 1212437334,

	/**
	 * Fits the destination page to the width of the window; may obscure the lower portion of the page. Note: The magnification changes automatically when the window is resized horizontally.
	 */
	FIT_WIDTH = 1212437335,

	/**
	 * Fits the entire destination page in the document window. Note: The magnification changes automatically when the window is resized.
	 */
	FIT_WINDOW = 1212437367,

	/**
	 * Fits the destination page within the specified rectangle. For information on specifying the rectangle size and position, see the entry for view bounds.
	 */
	FIXED = 1212437350,

	/**
	 * The destination page is displayed at the same zoom percent as the previously displayed page. Note: The magnification changes automatically when the window is resized.
	 */
	INHERIT_ZOOM = 1212437370,

}

/**
 * Cross reference building block types.
 */
declare enum BuildingBlockTypes {
	/**
	 * Bookmark name building block type.
	 */
	BOOKMARK_NAME_BUILDING_BLOCK = 1650614894,

	/**
	 * Chapter number building block type.
	 */
	CHAPTER_NUMBER_BUILDING_BLOCK = 1650615150,

	/**
	 * Custom string building block type.
	 */
	CUSTOM_STRING_BUILDING_BLOCK = 1650615155,

	/**
	 * File name building block type.
	 */
	FILE_NAME_BUILDING_BLOCK = 1650615918,

	/**
	 * Full paragraph building block type.
	 */
	FULL_PARAGRAPH_BUILDING_BLOCK = 1650615920,

	/**
	 * Page number building block type.
	 */
	PAGE_NUMBER_BUILDING_BLOCK = 1650618478,

	/**
	 * Paragraph number building block type.
	 */
	PARAGRAPH_NUMBER_BUILDING_BLOCK = 1651533678,

	/**
	 * Paragraph text building block type.
	 */
	PARAGRAPH_TEXT_BUILDING_BLOCK = 1650618484,

}

/**
 * Sort order for hyperlink ranges.
 */
declare enum RangeSortOrder {
	/**
	 * Sort the ranges in ascending order.
	 */
	ASCENDING_SORT = 1634952307,

	/**
	 * Sort the ranges in descending order.
	 */
	DESCENDING_SORT = 1685287796,

	/**
	 * Do not sort the ranges.
	 */
	NO_SORT = 1852797812,

}

/**
 * The flag indicating whether the rule is disabled, set for error, warning, or just informational.
 */
declare enum PreflightRuleFlag {
	/**
	 * Treat as error if rule check failed.
	 */
	RETURN_AS_ERROR = 1699890546,

	/**
	 * Treat as information only if rule check failed.
	 */
	RETURN_AS_INFORMATIONAL = 1699893865,

	/**
	 * Treat as warning if rule check failed.
	 */
	RETURN_AS_WARNING = 1699893879,

	/**
	 * Rule is currently disabled.
	 */
	RULE_IS_DISABLED = 1699890274,

}

/**
 * The type of data for this data object.
 */
declare enum RuleDataType {
	/**
	 * The data type is a boolean.
	 */
	BOOLEAN_DATA_TYPE = 1920221804,

	/**
	 * The data type is an int32.
	 */
	INTEGER_DATA_TYPE = 1920223598,

	/**
	 * The data type is a list.
	 */
	LIST_DATA_TYPE = 1920224372,

	/**
	 * The data type is an object.
	 */
	OBJECT_DATA_TYPE = 1920225122,

	/**
	 * The data type is a real.
	 */
	REAL_DATA_TYPE = 1920225900,

	/**
	 * The data type is an int16.
	 */
	SHORT_INTEGER_DATA_TYPE = 1920226153,

	/**
	 * The data type is a string.
	 */
	STRING_DATA_TYPE = 1920226162,

}

/**
 * Preflight scope options.
 */
declare enum PreflightScopeOptions {
	/**
	 * Include all documents in the book preflight.
	 */
	PREFLIGHT_ALL_DOCUMENTS = 1885552964,

	/**
	 * Include all pages in the preflight.
	 */
	PREFLIGHT_ALL_PAGES = 1885552976,

	/**
	 * Include only selected document for book preflight.
	 */
	PREFLIGHT_SELECTED_DOCUMENTS = 1885557572,

}

/**
 * Preflight layer options.
 */
declare enum PreflightLayerOptions {
	/**
	 * Preflight all layers
	 */
	PREFLIGHT_ALL_LAYERS = 1886142796,

	/**
	 * Preflight visible layers
	 */
	PREFLIGHT_VISIBLE_LAYERS = 1886148172,

	/**
	 * Preflight visible and printable layers
	 */
	PREFLIGHT_VISIBLE_PRINTABLE_LAYERS = 1886148176,

}

/**
 * Preflight Profile options.
 */
declare enum PreflightProfileOptions {
	/**
	 * Preflight using the embedded profile.
	 */
	USE_EMBEDDED_PROFILE = 1885619533,

	/**
	 * Preflight using working profile.
	 */
	USE_WORKING_PROFILE = 1885622342,

}

/**
 * PNG page export range options.
 */
declare enum PNGExportRangeEnum {
	/**
	 * Exports all pages.
	 */
	EXPORT_ALL = 1785742657,

	/**
	 * Exports the page range specified in the page string property.
	 */
	EXPORT_RANGE = 1785742674,

}

/**
 * Quality options for exported PNG images.
 */
declare enum PNGQualityEnum {
	/**
	 * High quality.
	 */
	HIGH = 1701726313,

	/**
	 * Low quality.
	 */
	LOW = 1701727351,

	/**
	 * Maximum quality.
	 */
	MAXIMUM = 1701727608,

	/**
	 * Medium quality.
	 */
	MEDIUM = 1701727588,

}

/**
 * Color space options for representing color in the exported PNG.
 */
declare enum PNGColorSpaceEnum {
	/**
	 * Converts all color values to high-quality black-and-white images. Gray levels of the converted objects represent the luminosity of the original objects.
	 */
	GRAY = 1766290041,

	/**
	 * Represents all color values using the RGB color space. Best suited for documents that will be viewed on-screen.
	 */
	RGB = 1666336578,

}

/**
 * Options for specifying the events (user actions) that change a button's state.
 */
declare enum StateTypes {
	/**
	 * The mouse pointer is clicked on the button's area.
	 */
	DOWN = 1181971556,

	/**
	 * Down off state.
	 */
	DOWN_OFF = 1181967462,

	/**
	 * Down on state.
	 */
	DOWN_ON = 1181967471,

	/**
	 * The mouse pointer moves into the button's area.
	 */
	ROLLOVER = 1181971574,

	/**
	 * Rollover off state.
	 */
	ROLLOVER_OFF = 1181972070,

	/**
	 * Rollover on state.
	 */
	ROLLOVER_ON = 1181972079,

	/**
	 * The default appearance, used when there is no user activity on the button's area.
	 */
	UP = 1181971566,

	/**
	 * Up off state.
	 */
	UP_OFF = 1181970022,

	/**
	 * Up on state.
	 */
	UP_ON = 1181970031,

}

/**
 * Options for specifying the position of a movie's display window.
 */
declare enum FloatingWindowPosition {
	/**
	 * Positions the window in the center of the screen.
	 */
	CENTER = 1298359662,

	/**
	 * Positions the window on the left side of the screen midway between the top and bottom.
	 */
	CENTER_LEFT = 1298361446,

	/**
	 * Positions the window on the right side of the screen midway between the top and bottom.
	 */
	CENTER_RIGHT = 1298362996,

	/**
	 * Positions the window in the lower left corner of the screen.
	 */
	LOWER_LEFT = 1298951270,

	/**
	 * Positions the window at the bottom of the screen midway between the left and right edges.
	 */
	LOWER_MIDDLE = 1298951524,

	/**
	 * Positions the window in the lower right corner of the screen.
	 */
	LOWER_RIGHT = 1298952820,

	/**
	 * Positions the window in the upper left corner of the screen.
	 */
	UPPER_LEFT = 1668183118,

	/**
	 * Positions the window at the top of the screen midway between the left and right edges.
	 */
	UPPER_MIDDLE = 1299541348,

	/**
	 * Positions the window in the upper right corner of the screen.
	 */
	UPPER_RIGHT = 1299542644,

}

/**
 * The size of the movie's floating window. Valid only when floating window is true.
 */
declare enum FloatingWindowSize {
	/**
	 * The floating window is the movie's original display size.
	 */
	FULL = 1298560364,

	/**
	 * The floating window fills the entire screen.
	 */
	MAX = 1299014008,

	/**
	 * The floating window is one fifth the length and height of the movie's original display size.
	 */
	ONE_FIFTH = 1298557286,

	/**
	 * The floating window is one fourth the length and height of the movie's original display size.
	 */
	ONE_FOURTH = 1298558834,

	/**
	 * The floating window is one half the length and height of the movie's original display size.
	 */
	ONE_HALF = 1298686316,

	/**
	 * The floating window is quadruple the length and height of the movie's original display size.
	 */
	QUADRUPLE = 1299281272,

	/**
	 * The floating window is triple the length and height of the movie's original display size.
	 */
	TRIPLE = 1299477112,

	/**
	 * The floating window is twice the length and height of the movie's original display size.
	 */
	TWICE = 1299476344,

}

/**
 * The type of graphic for the movie poster.
 */
declare enum MoviePosterTypes {
	/**
	 * Uses an image from the movie file.
	 */
	FROM_MOVIE = 1298558310,

	/**
	 * None.
	 */
	NONE = 1852796517,

	/**
	 * (Read-only) Indicates whether the movie poster is not the standard, generic image.
	 */
	PROXY_IMAGE = 1299216505,

	/**
	 * Uses the generic movie poster image file.
	 */
	STANDARD = 2020623970,

}

/**
 * Playback options.
 */
declare enum MoviePlayOperations {
	/**
	 * Pauses playback.
	 */
	PAUSE = 1885435251,

	/**
	 * Starts playback.
	 */
	PLAY = 1886151033,

	/**
	 * Starts playback from the specified navigation point.
	 */
	PLAY_FROM_NAVIGATION_POINT = 1886154358,

	/**
	 * Resumes playback.
	 */
	RESUME = 1919251317,

	/**
	 * Stops playback.
	 */
	STOP = 1937010544,

	/**
	 * Stops all playback (SWF only).
	 */
	STOP_ALL = 1937010785,

}

/**
 * Sound poster graphics options.
 */
declare enum SoundPosterTypes {
	/**
	 * No sound poster.
	 */
	NONE = 1852796517,

	/**
	 * Proxy image sound poster.
	 */
	PROXY_IMAGE = 1299216505,

	/**
	 * Generic sound poster.
	 */
	STANDARD = 2020623970,

}

/**
 * Behavior trigger event options.
 */
declare enum BehaviorEvents {
	/**
	 * Triggers the behavior when the mouse button is clicked (without being released).
	 */
	MOUSE_DOWN = 1835296118,

	/**
	 * Triggers the behavior when the mouse pointer enters the area defined by the bounding box of the object.
	 */
	MOUSE_ENTER = 1835361654,

	/**
	 * Triggers the behavior when the mouse pointer exits the area defined by the bounding box of the object.
	 */
	MOUSE_EXIT = 1836606838,

	/**
	 * Triggers the behavior when the mouse is released after a click.
	 */
	MOUSE_UP = 1836410230,

	/**
	 * Triggers the behavior when the focus moves to a different interactive object.
	 */
	ON_BLUR = 1868719478,

	/**
	 * Triggers the behavior when the object receives focus, either through a mouse action or by pressing the Tab key.
	 */
	ON_FOCUS = 1868981622,

}

/**
 * Zoom options for the goto destination page.
 */
declare enum GoToZoomOptions {
	/**
	 * Displays the page at 100% magnification.
	 */
	ACTUAL_SIZE = 2053206906,

	/**
	 * Fits the text area of the page to the window width; obscures page margins and may obscure the lower portion of the page.
	 */
	FIT_VISIBLE = 1212437334,

	/**
	 * Fits the page to the width of the window; may obscure the lower portion of the page.
	 */
	FIT_WIDTH = 1212437335,

	/**
	 * Fits the page in the display window.
	 */
	FIT_WINDOW = 1212437367,

	/**
	 * Inherits the zoom setting from the previously displayed page.
	 */
	INHERIT_ZOOM = 1212437370,

}

/**
 * Playback options.
 */
declare enum PlayOperations {
	/**
	 * Pauses playback.
	 */
	PAUSE = 1885435251,

	/**
	 * Starts playback.
	 */
	PLAY = 1886151033,

	/**
	 * Resumes playback.
	 */
	RESUME = 1919251317,

	/**
	 * Stops playback.
	 */
	STOP = 1937010544,

	/**
	 * Stops all playback (SWF only).
	 */
	STOP_ALL = 1937010785,

}

/**
 * Playback options.
 */
declare enum AnimationPlayOperations {
	/**
	 * Pauses playback.
	 */
	PAUSE = 1885435251,

	/**
	 * Starts playback.
	 */
	PLAY = 1886151033,

	/**
	 * Resumes playback.
	 */
	RESUME = 1919251317,

	/**
	 * Reverses playback.
	 */
	REVERSE_PLAYBACK = 1919252069,

	/**
	 * Stops playback.
	 */
	STOP = 1937010544,

	/**
	 * Stops all playback.
	 */
	STOP_ALL = 1937010785,

}

/**
 * View zoom style options.
 */
declare enum ViewZoomStyle {
	/**
	 * Displays the page at 100% magnification.
	 */
	ACTUAL_SIZE = 2053206906,

	/**
	 * Fits the entire page in the window.
	 */
	FIT_PAGE = 2053534832,

	/**
	 * Fits the the text area of the page to the window width; obscures page margins and may obscure the lower portion of the page.
	 */
	FIT_VISIBLE = 1212437334,

	/**
	 * Fits the page to the width of the window; may obscure the lower portion of the page.
	 */
	FIT_WIDTH = 1212437335,

	/**
	 * Fills the screen with the page; hides the toolbar, command bar, menu bar, and window controls.
	 */
	FULL_SCREEN = 1987733107,

	/**
	 * Arranges the pages in a continuous vertical column that is one page wide.
	 */
	ONE_COLUMN = 1987735395,

	/**
	 * Displays one page in the document pane at a time.
	 */
	SINGLE_PAGE = 1987736432,

	/**
	 * Arranges the pages side by side in a continuous vertical column that is two pages wide.
	 */
	TWO_COLUMN = 1987736675,

	/**
	 * Magnifies the view to the next preset percentage.
	 */
	ZOOM_IN = 2053990766,

	/**
	 * Reduces the view to the previous preset percentage.
	 */
	ZOOM_OUT = 2054124916,

}

/**
 * The version state of the file in Version Cue.
 */
declare enum VersionState {
	/**
	 * The version has modifications that make it newer than the project.
	 */
	LOCAL_NEWER = 1986221644,

	/**
	 * The version is identical to the project.
	 */
	LOCAL_PROJECT_MATCH = 1986221645,

	/**
	 * No resource and no local file.
	 */
	NO_RESOURCE = 1986221646,

	/**
	 * The project has a newer file.
	 */
	PROJECT_FILE_NEWER = 1986221648,

	/**
	 * The version contains local edits but the project file is newer.
	 */
	VERSION_CONFLICT = 1986221635,

	/**
	 * The version is not known.
	 */
	VERSION_UNKNOWN = 1986221653,

}

/**
 * The editing state of the file in Version Cue.
 */
declare enum EditingState {
	/**
	 * The file was modified locally or remotely while it was locked and therefore two versions exist.
	 */
	EDITING_CONFLICT = 1986217283,

	/**
	 * The file has been modified locally and not locked.
	 */
	EDITING_LOCALLY = 1986217292,

	/**
	 * The file has been locked locally and may be modified.
	 */
	EDITING_LOCALLY_LOCKED = 1986217291,

	/**
	 * The file is not currently in use and is not locked.
	 */
	EDITING_NOWHERE = 1986217294,

	/**
	 * Lock held but not usable.
	 */
	EDITING_REMOTELY = 1986217298,

	/**
	 * The editing status is not known.
	 */
	EDITING_UNKNOWN = 1986217301,

}

/**
 * The synchronization status of the file in Version Cue.
 */
declare enum VersionCueSyncStatus {
	/**
	 * The project version of the file was downloaded to the local workspace.
	 */
	FILE_DOWNLOADED = 1986220868,

	/**
	 * The synchronization resulted in no change because the local and project versions were identical.
	 */
	FILE_NO_CHANGE = 1986220878,

	/**
	 * The file was not synchronized.
	 */
	FILE_SKIPPED = 1986220875,

	/**
	 * The file was unlocked locally.
	 */
	FILE_UNLOCKED = 1986220876,

	/**
	 * The local version of the file was uploaded to the project.
	 */
	FILE_UPLOADED = 1986220885,

}

/**
 * The type of conflict resolution to employ during Version Cue synchronization.
 */
declare enum SyncConflictResolution {
	/**
	 * Asks the user how to resolve conflicts.
	 */
	ASK_ABOUT_CONFLICTS = 1986216769,

	/**
	 * Uses the local version.
	 */
	PREFER_LOCAL = 1986216780,

	/**
	 * Uses the project version.
	 */
	PREFER_PROJECT = 1986216784,

	/**
	 * Skips conflicting files.
	 */
	SKIP_CONFLICTS = 1986216787,

}

/**
 * Used to specify a language and region.
 */
declare enum LanguageAndRegion {
	/**
	 * Albania: Albanian
	 */
	ALBANIA_ALBANIAN = 1936802124,

	/**
	 * Belarus: Belarusian
	 */
	BELARUS_BELARUSIAN = 1650803289,

	/**
	 * Brazil: Portuguese
	 */
	BRAZIL_PORTUGUESE = 1886667346,

	/**
	 * Bulgaria: Bulgarian
	 */
	BULGARIA_BULGARIAN = 1650934343,

	/**
	 * Croatia: Croatian
	 */
	CROATIA_CROATIAN = 1752320082,

	/**
	 * Czech Republic: Czech
	 */
	CZECH_REPUBLIC_CZECH = 1668498266,

	/**
	 * Denmark: Danish
	 */
	DENMARK_DANISH = 1684096075,

	/**
	 * Estonia: Estonian
	 */
	ESTONIA_ESTONIAN = 1702118725,

	/**
	 * Finland: Finnish
	 */
	FINLAND_FINNISH = 1718175305,

	/**
	 * France: French
	 */
	FRANCE_FRENCH = 1718765138,

	/**
	 * Germany: German
	 */
	GERMANY_GERMAN = 1684358213,

	/**
	 * Greece: Greek
	 */
	GREECE_GREEK = 1701594962,

	/**
	 * Hungary: Hungarian
	 */
	HUNGARY_HUNGARIAN = 1752516693,

	/**
	 * India: Tamil
	 */
	INDIA_TAMIL = 1952532814,

	/**
	 * Indic
	 */
	INDIC = 1768842345,

	/**
	 * Israel: Hebrew
	 */
	ISRAEL_HEBREW = 1751468364,

	/**
	 * Italy: Italian
	 */
	ITALY_ITALIAN = 1769228628,

	/**
	 * Japan: Japanese
	 */
	JAPAN_JAPANESE = 1784760912,

	/**
	 * Latvia: Latvian
	 */
	LATVIA_LATVIAN = 1819692118,

	/**
	 * Lituania: Lithuanian
	 */
	LITUANIA_LITHUANIAN = 1819561044,

	/**
	 * Netherlands: Dutch
	 */
	NETHERLANDS_DUTCH = 1852591692,

	/**
	 * Norway: Norwegian
	 */
	NORWAY_NORWEGIAN = 1851936335,

	/**
	 * Poland: Polish
	 */
	POLAND_POLISH = 1886146636,

	/**
	 * Republic Of Korea: Korean
	 */
	REPUBLIC_OF_KOREA_KOREAN = 1802455890,

	/**
	 * Romania: Romanian
	 */
	ROMANIA_ROMANIAN = 1919898191,

	/**
	 * Russian Federation: Russian
	 */
	RUSSIAN_FEDERATION_RUSSIAN = 1920291413,

	/**
	 * Simplified Chinese
	 */
	SIMPLIFIED_CHINESE = 2053653326,

	/**
	 * Slovakia: Slovak
	 */
	SLOVAKIA_SLOVAK = 1936479051,

	/**
	 * Slovenia: Slovenian
	 */
	SLOVENIA_SLOVENIAN = 1936479049,

	/**
	 * Spain: Spanish
	 */
	SPAIN_SPANISH = 1702053203,

	/**
	 * Standard Arabic
	 */
	STANDARD_ARABIC = 1634877765,

	/**
	 * Sweden: Swedish
	 */
	SWEDEN_SWEDISH = 1937134422,

	/**
	 * Thailand: Thai
	 */
	THAILAND_THAI = 1952994376,

	/**
	 * Traditional Chinese
	 */
	TRADITIONAL_CHINESE = 2053657687,

	/**
	 * Turkey: Turkish
	 */
	TURKEY_TURKISH = 1953649746,

	/**
	 * Ukraine: Ukrainian
	 */
	UKRAINE_UKRAINIAN = 1969968449,

	/**
	 * United Kingdom: English
	 */
	UNITED_KINGDOM_ENGLISH = 1701726018,

	/**
	 * United States: English
	 */
	UNITED_STATES_ENGLISH = 1701729619,

	/**
	 * Vietnam: Vietnamese
	 */
	VIETNAM_VIETNAMESE = 1986614862,

}

/**
 * User interaction level options.
 */
declare enum UserInteractionLevels {
	/**
	 * Displays alerts but not dialogs.
	 */
	INTERACT_WITH_ALERTS = 1699311170,

	/**
	 * The script displays all dialogs and alerts.
	 */
	INTERACT_WITH_ALL = 1699311169,

	/**
	 * The script does not display any dialogs or alerts.
	 */
	NEVER_INTERACT = 1699640946,

}

/**
 * The locale.
 */
declare enum Locale {
	/**
	 * Arabic
	 */
	ARABIC_LOCALE = 1279476082,

	/**
	 * Czech
	 */
	CZECH_LOCALE = 1279476602,

	/**
	 * Danish.
	 */
	DANISH_LOCALE = 1279476846,

	/**
	 * English.
	 */
	ENGLISH_LOCALE = 1279477102,

	/**
	 * Finnish.
	 */
	FINNISH_LOCALE = 1279477358,

	/**
	 * French.
	 */
	FRENCH_LOCALE = 1279477362,

	/**
	 * German.
	 */
	GERMAN_LOCALE = 1279477613,

	/**
	 * Greek
	 */
	GREEK_LOCALE = 1279477618,

	/**
	 * Hebrew
	 */
	HEBREW_LOCALE = 1279477858,

	/**
	 * Hungarian
	 */
	HUNGARIAN_LOCALE = 1279477877,

	/**
	 * International English.
	 */
	INTERNATIONAL_ENGLISH_LOCALE = 1279477097,

	/**
	 * Italian.
	 */
	ITALIAN_LOCALE = 1279478132,

	/**
	 * Japanese.
	 */
	JAPANESE_LOCALE = 1279478384,

	/**
	 * en_KoreanLocale
	 */
	KOREAN_LOCALE = 1279478639,

	/**
	 * Polish
	 */
	POLISH_LOCALE = 1279479916,

	/**
	 * Portuguese.
	 */
	PORTUGUESE_LOCALE = 1279479911,

	/**
	 * Romanian
	 */
	ROMANIAN_LOCALE = 1279480431,

	/**
	 * Russian
	 */
	RUSSIAN_LOCALE = 1279480437,

	/**
	 * simplified chinese
	 */
	SIMPLIFIED_CHINESE_LOCALE = 1279476590,

	/**
	 * Spanish.
	 */
	SPANISH_LOCALE = 1279480688,

	/**
	 * Swedish.
	 */
	SWEDISH_LOCALE = 1279480695,

	/**
	 * traditional chinese
	 */
	TRADITIONAL_CHINESE_LOCALE = 1279480951,

	/**
	 * Turkish
	 */
	TURKISH_LOCALE = 1279480946,

	/**
	 * Ukrainian
	 */
	UKRAINIAN_LOCALE = 1279481195,

}

/**
 * The language of the script to execute.
 */
declare enum ScriptLanguage {
	/**
	 * The AppleScript language.
	 */
	APPLESCRIPT_LANGUAGE = 1095978087,

	/**
	 * The JavaScript language.
	 */
	JAVASCRIPT = 1246973031,

	/**
	 * Language not specified.
	 */
	UNKNOWN = 1433299822,

}

/**
 * Options for specifying a feature set.
 */
declare enum FeatureSetOptions {
	/**
	 * Uses the Japanese feature set and defaults.
	 */
	JAPANESE = 1247899758,

	/**
	 * Uses the R2L feature set
	 */
	RIGHTTOLEFT = 1381265228,

	/**
	 * Uses the Roman feature set and defaults.
	 */
	ROMAN = 1383034222,

}

/**
 * Undo options for executing a script.
 */
declare enum UndoModes {
	/**
	 * Automatically undo the entire script as part of the previous step.
	 */
	AUTO_UNDO = 1699963221,

	/**
	 * Undo the entire script as a single step.
	 */
	ENTIRE_SCRIPT = 1699963733,

	/**
	 * Fast undo the entire script as a single step.
	 */
	FAST_ENTIRE_SCRIPT = 1699964501,

	/**
	 * Undo each script request as a separate step.
	 */
	SCRIPT_REQUEST = 1699967573,

}

/**
 * Used to specify how to open a document.
 */
declare enum OpenOptions {
	/**
	 * Default based on the file type or extension.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Open a copy of the document.
	 */
	OPEN_COPY = 1332757360,

	/**
	 * Open the document itself.
	 */
	OPEN_ORIGINAL = 1332760434,

}

/**
 * The state of a task.
 */
declare enum TaskState {
	/**
	 * Task was cancelled (either before it ran or during execution
	 */
	CANCELLED = 1700029292,

	/**
	 * Task was signalled to cancel but did not stop yet
	 */
	CANCELLING = 1700029281,

	/**
	 * Task completed execution (successfully or with errors)
	 */
	COMPLETED = 1700029296,

	/**
	 * Task was queued and is waiting to be scheduled for execution
	 */
	QUEUED = 1699837285,

	/**
	 * Task is running
	 */
	RUNNING = 1700033141,

	/**
	 * Task is waiting
	 */
	WAITING = 1700225396,

}

/**
 * The type of a task alert.
 */
declare enum TaskAlertType {
	/**
	 * error message
	 */
	TASK_ERROR = 1699040627,

	/**
	 * Information message
	 */
	TASK_INFORMATION = 1699302771,

	/**
	 * Warning message
	 */
	TASK_WARNING = 1700220275,

}

/**
 * Options for saving a document before closing or quitting.
 */
declare enum SaveOptions {
	/**
	 * Displays a prompts asking whether to save changes.
	 */
	ASK = 1634954016,

	/**
	 * Does not save changes.
	 */
	NO = 1852776480,

	/**
	 * Saves changes.
	 */
	YES = 2036691744,

}

/**
 * Display size options.
 */
declare enum ZoomOptions {
	/**
	 * Zooms to 100%.
	 */
	ACTUAL_SIZE = 2053206906,

	/**
	 * Centers the active page in the window.
	 */
	FIT_PAGE = 2053534832,

	/**
	 * Centers the active spread in the window.
	 */
	FIT_SPREAD = 2053534835,

	/**
	 * Fits the entire pasteboard in the window.
	 */
	SHOW_PASTEBOARD = 2054385762,

	/**
	 * Magnifies the view to the next preset percentage.
	 */
	ZOOM_IN = 2053990766,

	/**
	 * Reduces the view to the next preset percentage.
	 */
	ZOOM_OUT = 2054124916,

}

/**
 * Options for display performance settings, which influence the speed and quality with which an object draws and redraws.
 */
declare enum ViewDisplaySettings {
	/**
	 * Slower performance; displays high-resolution graphics and high-quality transparencies and turns on anti-aliasing.
	 */
	HIGH_QUALITY = 1346922866,

	/**
	 * Best performance; grays out graphics and turns off transparency and anti-aliasing.
	 */
	OPTIMIZED = 1349480564,

	/**
	 * Moderate performance speed; displays proxy graphics and low-quality transparencies and turns on anti-aliasing.
	 */
	TYPICAL = 1349810544,

}

/**
 * The reference point on the object's bounding box that does not move during transformation operations. Note: Transformations include rotation, scaling, flipping, and shearing.
 */
declare enum AnchorPoint {
	/**
	 * The center point on the bottom of the bounding box.
	 */
	BOTTOM_CENTER_ANCHOR = 1095656035,

	/**
	 * The bottom left corner.
	 */
	BOTTOM_LEFT_ANCHOR = 1095656044,

	/**
	 * The bottom right corner.
	 */
	BOTTOM_RIGHT_ANCHOR = 1095656050,

	/**
	 * The center point in the bounding box.
	 */
	CENTER_ANCHOR = 1095656308,

	/**
	 * The center point on the left side of the bounding box.
	 */
	LEFT_CENTER_ANCHOR = 1095658595,

	/**
	 * The center point on the right side of the bounding box.
	 */
	RIGHT_CENTER_ANCHOR = 1095660131,

	/**
	 * The center point on the top of the bounding box.
	 */
	TOP_CENTER_ANCHOR = 1095660643,

	/**
	 * The top left corner.
	 */
	TOP_LEFT_ANCHOR = 1095660652,

	/**
	 * The top right corner.
	 */
	TOP_RIGHT_ANCHOR = 1095660658,

}

/**
 * Color model options.
 */
declare enum ColorModel {
	/**
	 * Mixed ink color.
	 */
	MIXEDINKMODEL = 1768844664,

	/**
	 * Process color.
	 */
	PROCESS = 1886548851,

	/**
	 * Registration color.
	 */
	REGISTRATION = 1919248243,

	/**
	 * Spot color.
	 */
	SPOT = 1936748404,

}

/**
 * Color space options.
 */
declare enum ColorSpace {
	/**
	 * CMYK.
	 */
	CMYK = 1129142603,

	/**
	 * LAB.
	 */
	LAB = 1665941826,

	/**
	 * Mixed ink.
	 */
	MIXEDINK = 1666009432,

	/**
	 * RGB.
	 */
	RGB = 1666336578,

}

/**
 * Screen mode options.
 */
declare enum ScreenModeOptions {
	/**
	 * Preview mode with editing turned off. Mouse clicks and arrow keys will move to previous or next spread.
	 */
	PRESENTATION_PREVIEW = 1936552046,

	/**
	 * Normal view; displays guides and frame edges.
	 */
	PREVIEW_OFF = 1936552047,

	/**
	 * Preview mode including the bleed area.
	 */
	PREVIEW_TO_BLEED = 1936552034,

	/**
	 * Preview mode; displays the document as it will be printed (hides guides and frame edges).
	 */
	PREVIEW_TO_PAGE = 1936552048,

	/**
	 * Preview mode including the slug area.
	 */
	PREVIEW_TO_SLUG = 1936552051,

}

/**
 * Watermark vertical position enum type.
 */
declare enum WatermarkVerticalPositionEnum {
	/**
	 * Place watermark vertical bottom.
	 */
	WATERMARK_V_BOTTOM = 1884704866,

	/**
	 * Place watermark vertical center.
	 */
	WATERMARK_V_CENTER = 1884704867,

	/**
	 * Place watermark vertical top.
	 */
	WATERMARK_V_TOP = 1884704884,

}

/**
 * Watermark horizontal position enum type.
 */
declare enum WatermarkHorizontalPositionEnum {
	/**
	 * Place watermark horizontal center.
	 */
	WATERMARK_H_CENTER = 1883787363,

	/**
	 * Place watermark horizontal left.
	 */
	WATERMARK_H_LEFT = 1883787372,

	/**
	 * Place watermark horizontal right.
	 */
	WATERMARK_H_RIGHT = 1883787378,

}

/**
 * Options for page numbering.
 */
declare enum PageNumberingOptions {
	/**
	 * Numbers all pages in the document sequentially.
	 */
	ABSOLUTE = 1096971116,

	/**
	 * Numbers pages according to page numbering specifications of the section.
	 */
	SECTION = 1935897710,

}

/**
 * Tool tip behavior options.
 */
declare enum ToolTipOptions {
	/**
	 * Displays tool tips more quickly than normal.
	 */
	FAST = 1180791668,

	/**
	 * Turns off tool tips.
	 */
	NONE = 1852796517,

	/**
	 * Displays tool tips.
	 */
	NORMAL = 1852797549,

}

/**
 * Options for selection status in relation to previously selected objects.
 */
declare enum SelectionOptions {
	/**
	 * Adds the object to the existing selection; if no object was previously selected, makes the object the only selected object.
	 */
	ADD_TO = 1633969202,

	/**
	 * Deselects the object.
	 */
	REMOVE_FROM = 1919249734,

	/**
	 * Selects the object and deselects any previously selected objects.
	 */
	REPLACE_WITH = 1919250519,

	/**
	 * Sets the key object. At least 2 objects must be selected, and the key object specified must be one of them.
	 */
	SET_KEY = 1936028779,

}

/**
 * Selection options.
 */
declare enum SelectAll {
	/**
	 * Selects all.
	 */
	ALL = 1634495520,

}

/**
 * Preview size options.
 */
declare enum PreviewSizeOptions {
	/**
	 * Extra large preview (1024 x 1024).
	 */
	EXTRA_LARGE = 1162629234,

	/**
	 * Large preview (512 x 512).
	 */
	LARGE = 1281446002,

	/**
	 * Medium preview (256 x 256).
	 */
	MEDIUM = 1701727588,

	/**
	 * Small preview (128 x 128).
	 */
	SMALL = 1399672946,

}

/**
 * Options for Tools panel.
 */
declare enum ToolsPanelOptions {
	/**
	 * Double column
	 */
	DOUBLE_COLUMN = 1162109804,

	/**
	 * Single column
	 */
	SINGLE_COLUMN = 1163092844,

	/**
	 * Single row
	 */
	SINGLE_ROW = 1163096695,

}

/**
 * Live drawing options for when user mouse actions trigger live screen drawing of page items.
 */
declare enum LiveDrawingOptions {
	/**
	 * Use live screen drawing during mouse operations after a delay if user pauses before the mouse moves.
	 */
	DELAYED = 1347765349,

	/**
	 * Use live screen drawing during mouse operations.
	 */
	IMMEDIATELY = 1347766637,

	/**
	 * Never use live screen drawing during mouse operations, use sprite mode.
	 */
	NEVER = 1347767926,

}

/**
 * Options for preview pages.
 */
declare enum PreviewPagesOptions {
	/**
	 * All pages.
	 */
	ALL_PAGES = 1886547553,

	/**
	 * First ten pages.
	 */
	FIRST_10_PAGES = 1180192871,

	/**
	 * First two pages.
	 */
	FIRST_2_PAGES = 1177702503,

	/**
	 * First five pages.
	 */
	FIRST_5_PAGES = 1177899111,

	/**
	 * First page.
	 */
	FIRST_PAGE = 1700947536,

}

/**
 * The alignment for static text.
 */
declare enum StaticAlignmentOptions {
	/**
	 * Center align the text.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Left align the text.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Right align the text.
	 */
	RIGHT_ALIGN = 1919379572,

}

/**
 * Rendering intent options.
 */
declare enum RenderingIntent {
	/**
	 * Maintains color accuracy at the expense of preserving relationships between colors; most suitable for previewing how paper color affects printed colors.
	 */
	ABSOLUTE_COLORIMETRIC = 1380540771,

	/**
	 * Preserves the visual relationship between colors at the expense of actual color values; most suitable for photographic images with high percentages of out-of-gamut colors.
	 */
	PERCEPTUAL = 1380544611,

	/**
	 * Compares the extreme highlight of the source color space to that of the desination color space and shifts all colors accordingly; out-of-gamut colors are shifted to the closest reproducible color in the destination color space.
	 */
	RELATIVE_COLORIMETRIC = 1380545123,

	/**
	 * Produces vivid colors at the expense of color accuracy; most suitable for business graphics such as graphs or charts.
	 */
	SATURATION = 1380545377,

	/**
	 * Uses the current color settings.
	 */
	USE_COLOR_SETTINGS = 1380541299,

}

/**
 * Stroke weight options for printer marks.
 */
declare enum MarkLineWeight {
	/**
	 * 05 mm.
	 */
	P05MM = 808807789,

	/**
	 * 07 mm.
	 */
	P07MM = 808938861,

	/**
	 * 10 mm.
	 */
	P10MM = 825257325,

	/**
	 * 125 pt.
	 */
	P125PT = 825374064,

	/**
	 * 15 mm.
	 */
	P15MM = 825585005,

	/**
	 * 20 mm.
	 */
	P20MM = 842034541,

	/**
	 * 25 pt.
	 */
	P25PT = 842346608,

	/**
	 * 30 mm.
	 */
	P30MM = 858811757,

	/**
	 * 50 pt.
	 */
	P50PT = 892350576,

}

/**
 * Options for printer marks formats.
 */
declare enum MarkTypes {
	/**
	 * Uses the default format.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Uses J marks without a circle.
	 */
	J_MARK_WITHOUT_CIRCLE = 1785556579,

	/**
	 * Uses J marks with a circle.
	 */
	J_MARK_WITH_CIRCLE = 1785558883,

}

/**
 * Color output mode options for composites.
 */
declare enum ColorOutputModes {
	/**
	 * Sends full-color versions of the specified pages to the printer. Note: Available only for PostScript printers.
	 */
	COMPOSITE_CMYK = 1668105035,

	/**
	 * Sends grayscale versions of the specified pages to the printer.
	 */
	COMPOSITE_GRAY = 1668116583,

	/**
	 * Sends a full-color version of the specified pages to the printer, preserving all color values in the original document. Note: Cannot simulate overprint when using this option.
	 */
	COMPOSITE_LEAVE_UNCHANGED = 1668107349,

	/**
	 * Sends full-color versions of the specified pages to the printer.
	 */
	COMPOSITE_RGB = 1668108866,

	/**
	 * Allows the printer to create color separations. Note: Valid only with a PostScript raster image processing (RIP) device.
	 */
	INRIP_SEPARATIONS = 1919512691,

	/**
	 * Sends PostScript information for each of the required separations to the printer. Note: Available only for PostScript printers.
	 */
	SEPARATIONS = 1936027745,

}

/**
 * Format options for image data.
 */
declare enum DataFormat {
	/**
	 * Uses ASCII format.
	 */
	ASCII = 1095975753,

	/**
	 * Uses binary format.
	 */
	BINARY = 1114534521,

}

/**
 * Flip direction options.
 */
declare enum Flip {
	/**
	 * Horizontal and vertical flip (same as rotate 180)
	 */
	BOTH = 1651471464,

	/**
	 * Flips the printed image horizontally.
	 */
	HORIZONTAL = 1752134266,

	/**
	 * Flips the printed image horizontally and vertically (same as rotate 180).
	 */
	HORIZONTAL_AND_VERTICAL = 1215977068,

	/**
	 * The printed image is not flipped.
	 */
	NONE = 1852796517,

	/**
	 * Flips the printed image vertically.
	 */
	VERTICAL = 1986359924,

}

/**
 * Options for downloading fonts to the printer.
 */
declare enum FontDownloading {
	/**
	 * Downloads all fonts once per page.
	 */
	COMPLETE = 2003332197,

	/**
	 * Downloads only references to fonts. Note: Use when fonts reside in the printer.
	 */
	NONE = 1852796517,

	/**
	 * Downloads only the characters (glyphs) used in the document. Glyphs are downloaded once per page.
	 */
	SUBSET = 1768842098,

	/**
	 * Downloads only the characters (glyphs) used in the document. Glyphs are downloaded once per page. Note: Use when the number of glyphs exceeds 350.
	 */
	SUBSET_LARGE = 1818325607,

}

/**
 * Options for positioning the page on the paper or film.
 */
declare enum PagePositions {
	/**
	 * Centers the page horizontally and vertically.
	 */
	CENTERED = 1668183106,

	/**
	 * Centers the page horizontally.
	 */
	CENTER_HORIZONTALLY = 1668183112,

	/**
	 * Centers the page vertically.
	 */
	CENTER_VERTICALLY = 1668183126,

	/**
	 * Places the page in the upper left corner.
	 */
	UPPER_LEFT = 1668183118,

}

/**
 * Printer PostScript level options.
 */
declare enum PostScriptLevels {
	/**
	 * Level 2 PostScript.
	 */
	LEVEL_2 = 1347636274,

	/**
	 * Level 3 PostScript.
	 */
	LEVEL_3 = 1347636275,

}

/**
 * Page orientation options.
 */
declare enum PrintPageOrientation {
	/**
	 * Landscape.
	 */
	LANDSCAPE = 2003395685,

	/**
	 * Portrait.
	 */
	PORTRAIT = 1751738216,

	/**
	 * Reverse landscape.
	 */
	REVERSE_LANDSCAPE = 1869771372,

	/**
	 * Reverse portrait.
	 */
	REVERSE_PORTRAIT = 1869771376,

}

/**
 * Options for sending image data to the printer or file.
 */
declare enum ImageDataTypes {
	/**
	 * Sends full-resolution data.
	 */
	ALL_IMAGE_DATA = 1853058416,

	/**
	 * Prints graphics frames with crossbars in place of graphics.
	 */
	NONE = 1852796517,

	/**
	 * Sends just enough data to print graphics at the best possible resolution for the output device.
	 */
	OPTIMIZED_SUBSAMPLING = 1869640563,

	/**
	 * Sends screen-resolution versions (72 dpi) of placed bitmap images.
	 */
	PROXY_IMAGE_DATA = 1819243130,

}

/**
 * Options for printing page sequences.
 */
declare enum Sequences {
	/**
	 * Prints all pages.
	 */
	ALL = 1634495520,

	/**
	 * Prints only even-numbered pages.
	 */
	EVEN = 1702258030,

	/**
	 * Prints only odd-numbered pages.
	 */
	ODD = 1868850208,

}

/**
 * Color-management system source options.
 */
declare enum SourceSpaces {
	/**
	 * Uses the color space of the proof.
	 */
	PROOF_SPACE = 1886548848,

	/**
	 * Uses the color space of the document.
	 */
	USE_DOCUMENT = 1967419235,

}

/**
 * Options for the number of thumbnails per page.
 */
declare enum ThumbsPerPage {
	/**
	 * Fits one row on the page; the row contains two thumbnails.
	 */
	K1X2 = 1949399090,

	/**
	 * Fits two rows of two.
	 */
	K2X2 = 1949464626,

	/**
	 * Fits three rows of three.
	 */
	K3X3 = 1949530163,

	/**
	 * Fits four rows of four.
	 */
	K4X4 = 1949595700,

	/**
	 * Fits five rows of five.
	 */
	K5X5 = 1949661237,

	/**
	 * Fits six rows of six.
	 */
	K6X6 = 1949726774,

	/**
	 * Fits seven rows of seven.
	 */
	K7X7 = 1949792311,

}

/**
 * Tiling type options.
 */
declare enum TilingTypes {
	/**
	 * Automatically calculates the number of tiles required, including the overlap. For information, see tiling overlap.
	 */
	AUTO = 1635019116,

	/**
	 * Increases the amount of overlap as necessary so that the right sides of the right-most tiles are aligned at the right edge of the document page, and the bottom sides of the bottom-most tiles are aligned at the bottom edge of the document page. For information, see tiling overlap.
	 */
	AUTO_JUSTIFIED = 1634366324,

	/**
	 * Prints a single tile whose upper left corner is at the zero point of the rulers.
	 */
	MANUAL = 1835955308,

}

/**
 * Trapping options.
 */
declare enum Trapping {
	/**
	 * Adobe in-RIP.
	 */
	ADOBE_INRIP = 1919512660,

	/**
	 * Application built-in.
	 */
	APPLICATION_BUILTIN = 1114199152,

	/**
	 * No trapping.
	 */
	OFF = 1330005536,

}

/**
 * Ink trapping type options.
 */
declare enum InkTypes {
	/**
	 * Uses traditional process inks and most spot inks.
	 */
	NORMAL = 1852797549,

	/**
	 * Uses heavy, nontransparent inks to prevent trapping of underlying colors but allow for trapping along the edges of the ink. Best for metallic inks.
	 */
	OPAQUE = 1769230192,

	/**
	 * Uses heavy, nontransparent inks to prevent trapping of underlying colors but allow for trapping along the edges of the ink. Best for inks that have undesirable interactions with other inks.
	 */
	OPAQUE_IGNORE = 1769228647,

	/**
	 * Uses clear inks to ensure that underlying items trap. Best for varnishes and dieline inks.
	 */
	TRANSPARENT = 1769231474,

}

/**
 * Printer preset options.
 */
declare enum PrinterPresetTypes {
	/**
	 * A custom printer preset.
	 */
	CUSTOM = 1131639917,

	/**
	 * The default printer preset.
	 */
	DEFAULT_VALUE = 1147563124,

}

/**
 * The color-rendering dictionary (CRD) to use.
 */
declare enum ColorRenderingDictionary {
	/**
	 * Uses the default CRD.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Uses the document's CRD.
	 */
	USE_DOCUMENT = 1967419235,

	/**
	 * Uses the working CRD.
	 */
	WORKING = 1466921579,

}

/**
 * Page range options.
 */
declare enum PageRange {
	/**
	 * Print or export all pages in the document.
	 */
	ALL_PAGES = 1886547553,

	/**
	 * Export selected items in the document.
	 */
	SELECTED_ITEMS = 1886547571,

}

/**
 * Paper size options.
 */
declare enum PaperSize {
	/**
	 * Automatic
	 */
	AUTO = 1635019116,

}

/**
 * PPD options.
 */
declare enum PPDValues {
	/**
	 * Device-independent.
	 */
	DEVICE_INDEPENDENT = 1684367716,

}

/**
 * Color profile options.
 */
declare enum Profile {
	/**
	 * No CMS profile is used.
	 */
	NO_CMS = 1970499183,

	/**
	 * Uses the PostScript CMS profile.
	 */
	POSTSCRIPT_CMS = 1970303843,

	/**
	 * Uses the document profile.
	 */
	USE_DOCUMENT = 1967419235,

	/**
	 * Uses the working profile.
	 */
	WORKING = 1466921579,

}

/**
 * Options for ink screening for composite gray output in PostScript or PDF format.
 */
declare enum Screeening {
	/**
	 * Uses custom screening settings for ink angle and frequency. For information, see composite angle and composite frequency.
	 */
	CUSTOM = 1131639917,

	/**
	 * Uses the default screening settings.
	 */
	DEFAULT_VALUE = 1147563124,

}

/**
 * Paper size optons.
 */
declare enum PaperSizes {
	/**
	 * Allows definition of a custom paper size. Note: Not all printers allow custom paper sizes.
	 */
	CUSTOM = 1131639917,

	/**
	 * Allows the printer driver to define the paper size.
	 */
	DEFINED_BY_DRIVER = 1347634290,

}

/**
 * Printer options.
 */
declare enum Printer {
	/**
	 * Prints to a PostScript file.
	 */
	POSTSCRIPT_FILE = 1886611052,

}

/**
 * Options for trap placement between vector objects and bitmap images.
 */
declare enum TrapImagePlacementTypes {
	/**
	 * Creates a trap that straddles the edge between vector objects and bitmap images.
	 */
	CENTER_EDGES = 1953522542,

	/**
	 * Causes vector objects to overlap abutting images.
	 */
	CHOKE = 1953522536,

	/**
	 * Causes bitmap images to overlap the abutting objects.
	 */
	IMAGES_OVER_SPREAD = 1953526640,

	/**
	 * Applies the same trapping rules as used elsewhere in the document. Note: When used to trap an object to a photograph, can result in noticeably uneven edges as the trap moves from one side of the edge to another.
	 */
	IMAGE_NEUTRAL_DENSITY = 1953525348,

}

/**
 * Shape options for the intersection of three-way traps.
 */
declare enum TrapEndTypes {
	/**
	 * Shapes the end of the trap to keep it away from the intersecting object.
	 */
	MITER_TRAP_ENDS = 1953525093,

	/**
	 * Reshapes the trap generated by the lightest neutral density object so that it wraps around the point where the three objects intersect.
	 */
	OVERLAP_TRAP_ENDS = 1953525612,

}

/**
 * Options for exporting image data to the EPS document.
 */
declare enum EPSImageData {
	/**
	 * Exports high-resolution data. Note: Use when the file will be printed on a high-resolution output device.
	 */
	ALL_IMAGE_DATA = 1853058416,

	/**
	 * Exports only screen-resolution versions (72 dpi) of placed bitmap images. Note: Use in conjunction with OPI image replacement or if the resulting file will be viewed on-screen.
	 */
	PROXY_IMAGE_DATA = 1819243130,

}

/**
 * Booklet type options.
 */
declare enum BookletTypeOptions {
	/**
	 * Four up consecutive imposition.
	 */
	FOUR_UP_CONSECUTIVE = 1110721363,

	/**
	 * Three up consecutive imposition.
	 */
	THREE_UP_CONSECUTIVE = 1110655827,

	/**
	 * Two up consecutive imposition.
	 */
	TWO_UP_CONSECUTIVE = 1110590291,

	/**
	 * Two up perfect bound imposition.
	 */
	TWO_UP_PERFECT_BOUND = 1110593602,

	/**
	 * Two up saddle stitch imposition.
	 */
	TWO_UP_SADDLE_STITCH = 1110594387,

}

/**
 * Signature size options.
 */
declare enum SignatureSizeOptions {
	/**
	 * Signature size 12.
	 */
	SIGNATURE_SIZE_12 = 1112748338,

	/**
	 * Signature size 16.
	 */
	SIGNATURE_SIZE_16 = 1112748342,

	/**
	 * Signature size 32.
	 */
	SIGNATURE_SIZE_32 = 1112748850,

	/**
	 * Signature size 4.
	 */
	SIGNATURE_SIZE_4 = 1112748084,

	/**
	 * Signature size 8.
	 */
	SIGNATURE_SIZE_8 = 1112748088,

}

/**
 * Document print ui options
 */
declare enum DocumentPrintUiOptions {
	/**
	 * Do not show file save dialog during printing.
	 */
	SUPPRESS_FILE_SAVE_DIALOG = 1936089444,

	/**
	 * Do not show print dialog.
	 */
	SUPPRESS_PRINT_DIALOG = 1936745575,

	/**
	 * Do not show progress bar during printing.
	 */
	SUPPRESS_PRINT_PROGRESS = 1936748659,

	/**
	 * Do not show warning dialog during printing.
	 */
	SUPPRESS_PRINT_WARNINGS = 1936750450,

}

/**
 * Note background color options.
 */
declare enum NoteBackgrounds {
	/**
	 * Uses the galley background color.
	 */
	GALLEY_BACKGROUND_COLOR = 1699168839,

	/**
	 * Uses the note color.
	 */
	USE_NOTE_COLOR = 1700020807,

}

/**
 * Note color options.
 */
declare enum NoteColorChoices {
	/**
	 * Uses the note color.
	 */
	USE_NOTE_PREF_COLOR = 1700089923,

	/**
	 * Uses the color assigned to the user.
	 */
	USE_USER_COLOR = 1700091203,

}

/**
 * Marking options for changed text.
 */
declare enum ChangeMarkings {
	/**
	 * Does not mark changed text.
	 */
	NONE = 1852796517,

	/**
	 * Outlines changed text.
	 */
	OUTLINE = 1869900910,

	/**
	 * Uses a strikethrough to mark changed text.
	 */
	STRIKETHROUGH = 1699968114,

	/**
	 * Underlines changed text.
	 */
	UNDERLINE_SINGLE = 1700097636,

}

/**
 * Change bar location options.
 */
declare enum ChangebarLocations {
	/**
	 * Change bars are in the left margin.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Change bars are in the right margin.
	 */
	RIGHT_ALIGN = 1919379572,

}

/**
 * Changed text color options.
 */
declare enum ChangeTextColorChoices {
	/**
	 * The text color for changed text is the same as the text color defined in track changes preferences. For information, see text color for added text, text color for deleted text, or text color for moved text.
	 */
	CHANGE_USES_CHANGE_PREF_COLOR = 1700098147,

	/**
	 * The text color for changed text is the same as the galley text color.
	 */
	CHANGE_USES_GALLEY_TEXT_COLOR = 1700095843,

}

/**
 * Background color options for changed text.
 */
declare enum ChangeBackgroundColorChoices {
	/**
	 * The background color for changed text is the same as the track changes preferences background color. For information, see background color for added text, background color for deleted text, or background color for moved text.
	 */
	CHANGE_BACKGROUND_USES_CHANGE_PREF_COLOR = 1700098146,

	/**
	 * The background color for changed text is the same as the galley background color.
	 */
	CHANGE_BACKGROUND_USES_GALLEY_BACKGROUND_COLOR = 1700095842,

	/**
	 * The background color for changed text is the same as the color assigned to the current user.
	 */
	CHANGE_BACKGROUND_USES_USER_COLOR = 1700099426,

}

/**
 * Lock state options.
 */
declare enum LockStateValues {
	/**
	 * The story has been checked in.
	 */
	CHECKED_IN_STORY = 1112695657,

	/**
	 * The story has been checked out.
	 */
	CHECKED_OUT_STORY = 1112695663,

	/**
	 * The story is embedded.
	 */
	EMBEDDED_STORY = 1112696173,

	/**
	 * The story is locked.
	 */
	LOCKED_STORY = 1112697963,

	/**
	 * The story file is missing.
	 */
	MISSING_LOCK_STATE = 1112698227,

	/**
	 * The stories have a mixed lock state.
	 */
	MIXED_LOCK_STATE = 1112698232,

	/**
	 * No lock state.
	 */
	NONE = 1852796517,

	/**
	 * The story is unmanaged.
	 */
	UNMANAGED_STORY = 1112700269,

}

/**
 * Color space options for representing color in the exported JPEG.
 */
declare enum JpegColorSpaceEnum {
	/**
	 * Represents all color values using the CMYK color space.
	 */
	CMYK = 1129142603,

	/**
	 * Converts all color values to high-quality black-and-white images. Gray levels of the converted objects represent the luminosity of the original objects.
	 */
	GRAY = 1766290041,

	/**
	 * Represents all color values using the RGB color space. Best suited for documents that will be viewed on-screen.
	 */
	RGB = 1666336578,

}

/**
 * Page export options.
 */
declare enum ExportRangeOrAllPages {
	/**
	 * Exports all pages.
	 */
	EXPORT_ALL = 1785742657,

	/**
	 * Exports the page range specified in the page string property.
	 */
	EXPORT_RANGE = 1785742674,

}

/**
 * The records to merge.
 */
declare enum RecordSelection {
	/**
	 * Merges all records.
	 */
	ALL_RECORDS = 1684881778,

	/**
	 * Merges the specified record.
	 */
	ONE_RECORD = 1684885362,

	/**
	 * Merges all records in the specified range.
	 */
	RANGE = 1684886130,

}

/**
 * The order in which to arrange records in the target document.
 */
declare enum ArrangeBy {
	/**
	 * Arranges records by column.
	 */
	COLUMNS_FIRST = 1684882278,

	/**
	 * Arranges records by row.
	 */
	ROWS_FIRST = 1684886118,

}

/**
 * The number of records per page.
 */
declare enum RecordsPerPage {
	/**
	 * Places as many records as fit on a page.
	 */
	MULTIPLE_RECORD = 1684884850,

	/**
	 * Places each record on a new page.
	 */
	SINGLE_RECORD = 1684886386,

}

/**
 * Options for fitting content to a frame.
 */
declare enum Fitting {
	/**
	 * Selects best crop region of the content for the frame based on Adobe Sensei. Note: Preserves frame size but might scale the content size. If this fitting is set, centerImage property is turned-off.
	 */
	CONTENT_AWARE_FITTING = 1684882241,

	/**
	 * Resizes content to fill the frame while preserving content proportions. If the content and frame have different proportions, some content is obscured by the bounding box of the frame.
	 */
	FILL_PROPORTIONAL = 1684883056,

	/**
	 * Resizes content to fit the frame. Note: Content that is a different size than the frame appears stretched or squeezed.
	 */
	FIT_CONTENT_TO_FRAME = 1684883043,

	/**
	 * Resizes the frame to fit the content.
	 */
	FIT_FRAME_TO_CONTENT = 1684883046,

	/**
	 * Preserves the original sizes of the frame and the content. Note: Content that is larger than the frame is obscured around the edges.
	 */
	PRESERVE_SIZES = 1684885619,

	/**
	 * Resizes content to fit the frame while preserving content proportions. If the content and frame have different proportions, some empty space occurs in the frame.
	 */
	PROPORTIONAL = 1684885618,

}

/**
 * Data type options for data merge fields.
 */
declare enum SourceFieldType {
	/**
	 * The field can fill a data merge image placeholder.
	 */
	IMAGE_FIELD = 1684883814,

	/**
	 * The field can fill a data merge QR code placeholder.
	 */
	QRCODE_FIELD = 1684885862,

	/**
	 * The field can fill a data merge text placeholder.
	 */
	TEXT_FIELD = 1684886630,

}

/**
 * List type options.
 */
declare enum ListType {
	/**
	 * Bullet list.
	 */
	BULLET_LIST = 1280598644,

	/**
	 * No list.
	 */
	NO_LIST = 1280601711,

	/**
	 * Numbered list.
	 */
	NUMBERED_LIST = 1280601709,

}

/**
 * Bullet character type.
 */
declare enum BulletCharacterType {
	/**
	 * Glyph with font.
	 */
	GLYPH_WITH_FONT = 1111713638,

	/**
	 * Unicode only.
	 */
	UNICODE_ONLY = 1111717231,

	/**
	 * Unicode with font.
	 */
	UNICODE_WITH_FONT = 1111717222,

}

/**
 * Numbering style
 */
declare enum NumberingStyle {
	/**
	 * Arabic
	 */
	ARABIC = 1298231906,

	/**
	 * Uses Arabic Abjad
	 */
	ARABIC_ABJAD = 1296130410,

	/**
	 * Uses Arabic Alif Ba Tah
	 */
	ARABIC_ALIF_BA_TAH = 1296130420,

	/**
	 * Add double leading zeros.
	 */
	DOUBLE_LEADING_ZEROS = 1296329850,

	/**
	 * Do not add characters.
	 */
	FORMAT_NONE = 1701733998,

	/**
	 * Uses Hebrew Biblical
	 */
	HEBREW_BIBLICAL = 1296589410,

	/**
	 * Uses Hebrew Non Standard
	 */
	HEBREW_NON_STANDARD = 1296589422,

	/**
	 * Kanji
	 */
	KANJI = 1296788073,

	/**
	 * Katakana (a, i, u, e, o...).
	 */
	KATAKANA_MODERN = 1265920877,

	/**
	 * Katakana (i, ro, ha, ni...).
	 */
	KATAKANA_TRADITIONAL = 1265920884,

	/**
	 * Lower letters
	 */
	LOWER_LETTERS = 1296855660,

	/**
	 * Lower roman
	 */
	LOWER_ROMAN = 1297247596,

	/**
	 * Add single leading zeros.
	 */
	SINGLE_LEADING_ZEROS = 1297312890,

	/**
	 * Add triple leading zeros.
	 */
	TRIPLE_LEADING_ZEROS = 1297378426,

	/**
	 * Upper letters
	 */
	UPPER_LETTERS = 1296855669,

	/**
	 * Upper roman
	 */
	UPPER_ROMAN = 1297247605,

}

/**
 * Restart numbering options.
 */
declare enum RestartPolicy {
	/**
	 * Restart numbering after a specific numbering level.
	 */
	AFTER_SPECIFIC_LEVEL = 1701737324,

	/**
	 * Restart numbering after any previous (higher) numbering level.
	 */
	ANY_PREVIOUS_LEVEL = 1701732720,

	/**
	 * Restart numbering after any of a range of numbering levels.
	 */
	RANGE_OF_LEVELS = 1701737068,

}

/**
 * List alignment options.
 */
declare enum ListAlignment {
	/**
	 * Align center.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Align left.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Align right.
	 */
	RIGHT_ALIGN = 1919379572,

}

/**
 * Chapter number sources.
 */
declare enum ChapterNumberSources {
	/**
	 * Continue chapter number from previous document.
	 */
	CONTINUE_FROM_PREVIOUS_DOCUMENT = 1668178800,

	/**
	 * Chapter number same as previous document.
	 */
	SAME_AS_PREVIOUS_DOCUMENT = 1668182896,

	/**
	 * User-defined chapter number.
	 */
	USER_DEFINED = 1668183396,

}

/**
 * Custom Layout Type Options.
 */
declare enum CustomLayoutTypeEnum {
	/**
	 * Alignment And Spacing.
	 */
	ALIGNMENT_AND_SPACING = 1097618288,

	/**
	 * Float Left.
	 */
	FLOAT_LEFT = 1181502565,

	/**
	 * Float Right.
	 */
	FLOAT_RIGHT = 1181504105,

}

/**
 * Export options for assignment files.
 */
declare enum AssignmentExportOptions {
	/**
	 * Exports only spreads with assigned frames.
	 */
	ASSIGNED_SPREADS = 1098073459,

	/**
	 * Exports frames but does not export content.
	 */
	EMPTY_FRAMES = 1098073446,

	/**
	 * Exports the entire document.
	 */
	EVERYTHING = 1098073441,

}

/**
 * The status of the assigment.
 */
declare enum AssignmentStatus {
	/**
	 * The assignment file is missing.
	 */
	ASSIGNMENT_FILE_MISSING = 1095126387,

	/**
	 * The assignment has been modified and needs to be updated.
	 */
	ASSIGNMENT_OUT_OF_DATE = 1095724868,

	/**
	 * The assignment has not been modified.
	 */
	ASSIGNMENT_UP_TO_DATE = 1096119364,

}

/**
 * The display performance settings to use while scrolling.
 */
declare enum PanningTypes {
	/**
	 * While scrolling, greeks newly revealed images until the mouse is released; medium quality display with medium performance speed.
	 */
	GREEK_IMAGES = 1699111248,

	/**
	 * While scrolling, greeks newly revealed images and text until the mouse is released; highest quality display with the slowest performance.
	 */
	GREEK_IMAGES_AND_TEXT = 1699639120,

	/**
	 * While scrolling, does not greek images or text; lowest quality display with the fastest performance.
	 */
	NO_GREEKING = 1699116368,

}

/**
 * Options for aligning or distributing objects.
 */
declare enum AlignDistributeBounds {
	/**
	 * Align or distribute to the bounds of the objects.
	 */
	ITEM_BOUNDS = 1416587604,

	/**
	 * Align or distribute to a key object.
	 */
	KEY_OBJECT = 1699439993,

	/**
	 * Align or distribute to the margins of the page.
	 */
	MARGIN_BOUNDS = 1416588609,

	/**
	 * Align or distribute to the bounds of the page.
	 */
	PAGE_BOUNDS = 1416589377,

	/**
	 * Align or distribute to the bounds of the spread.
	 */
	SPREAD_BOUNDS = 1416590160,

}

/**
 * Options for aligning objects.
 */
declare enum AlignOptions {
	/**
	 * Align the bottom edges of the objects.
	 */
	BOTTOM_EDGES = 1114916196,

	/**
	 * Align the horizontal centers of the objects.
	 */
	HORIZONTAL_CENTERS = 1215257187,

	/**
	 * Align the left edges of the objects.
	 */
	LEFT_EDGES = 1281770852,

	/**
	 * Align the right edges of the objects.
	 */
	RIGHT_EDGES = 1383351652,

	/**
	 * Align the top edges of the objects.
	 */
	TOP_EDGES = 1416643940,

	/**
	 * Align the vertical centers of the objects.
	 */
	VERTICAL_CENTERS = 1449481315,

}

/**
 * Options for distributing objects.
 */
declare enum DistributeOptions {
	/**
	 * Distribute based on the bottom edges of the objects.
	 */
	BOTTOM_EDGES = 1114916196,

	/**
	 * Distribute based on the horizontal centers of the objects.
	 */
	HORIZONTAL_CENTERS = 1215257187,

	/**
	 * Distribute based on the horizontal spacing of the objects.
	 */
	HORIZONTAL_SPACE = 1215257203,

	/**
	 * Distribute based on the left edges of the objects.
	 */
	LEFT_EDGES = 1281770852,

	/**
	 * Distribute based on the right edges of the objects.
	 */
	RIGHT_EDGES = 1383351652,

	/**
	 * Distribute based on the top edges of the objects.
	 */
	TOP_EDGES = 1416643940,

	/**
	 * Distribute based on the vertical centers of the objects.
	 */
	VERTICAL_CENTERS = 1449481315,

	/**
	 * Distribute based on the vertical spacing of the objects.
	 */
	VERTICAL_SPACE = 1449489523,

}

/**
 * The source type of alternate or actual text
 */
declare enum SourceType {
	/**
	 * Custom Text
	 */
	SOURCE_CUSTOM = 1934902125,

	/**
	 * XML Structure
	 */
	SOURCE_XML_STRUCTURE = 1934907507,

	/**
	 * XMP Description
	 */
	SOURCE_XMP_DESCRIPTION = 1934907492,

	/**
	 * XMP Headline
	 */
	SOURCE_XMP_HEADLINE = 1934907496,

	/**
	 * User specified XMP metadata property
	 */
	SOURCE_XMP_OTHER = 1934907503,

	/**
	 * XMP Title
	 */
	SOURCE_XMP_TITLE = 1934907508,

}

/**
 * The tag type of page item
 */
declare enum TagType {
	/**
	 * Tag as artifact
	 */
	TAG_ARTIFACT = 1952924006,

	/**
	 * Tag as Story or Figure based on object type
	 */
	TAG_BASED_ON_OBJECT = 1952924271,

	/**
	 * Determine the tag from XML structure, or fallback to standard tag
	 */
	TAG_FROM_STRUCTURE = 1952928613,

}

/**
 * File format options for converted images
 */
declare enum ImageFormat {
	/**
	 * Uses GIF format for selected object.
	 */
	GIF = 1734960742,

	/**
	 * Uses JPEG format for selected object.
	 */
	JPEG = 1785751398,

	/**
	 * Uses PNG format, for selected object.
	 */
	PNG = 1397059687,

}

/**
 * Image size option for a converted object
 */
declare enum ImageSizeOption {
	/**
	 * Image size to be used is absolute.
	 */
	SIZE_FIXED = 1182295162,

	/**
	 * Image size to be used is relative to the text flow.
	 */
	SIZE_RELATIVE_TO_TEXT_FLOW = 1383486566,

}

/**
 * Image resolution for converted object
 */
declare enum ImageResolution {
	/**
	 * 150 pixels per inch
	 */
	PPI_150 = 1920151654,

	/**
	 * 300 pixels per inch
	 */
	PPI_300 = 1920160872,

	/**
	 * 72 pixels per inch
	 */
	PPI_72 = 1920160628,

	/**
	 * 96 pixels per inch
	 */
	PPI_96 = 1920159347,

}

/**
 * Type of Image alignment for objects
 */
declare enum ImageAlignmentType {
	/**
	 * image will be aligned center
	 */
	ALIGN_CENTER = 1097614194,

	/**
	 * image will be aligned left
	 */
	ALIGN_LEFT = 1097616486,

	/**
	 * image will be aligned right
	 */
	ALIGN_RIGHT = 1097618036,

}

/**
 * Image Page Break Options.
 */
declare enum ImagePageBreakType {
	/**
	 * Page break after image.
	 */
	PAGE_BREAK_AFTER = 1114792294,

	/**
	 * Page break before image.
	 */
	PAGE_BREAK_BEFORE = 1114792550,

	/**
	 * Page break before and after image.
	 */
	PAGE_BREAK_BEFORE_AND_AFTER = 1114792545,

}

/**
 * size type options.
 */
declare enum SizeTypeEnum {
	/**
	 * Default size.
	 */
	DEFAULT_SIZE = 1147491177,

	/**
	 * Fixed size.
	 */
	FIXED_SIZE = 1181317203,

	/**
	 * None size.
	 */
	NONE_SIZE = 1315925587,

	/**
	 * Relative to text flow.
	 */
	RELATIVE_TO_TEXT_FLOW = 1383289940,

	/**
	 * Relative to text size.
	 */
	RELATIVE_TO_TEXT_SIZE = 1383486579,

	/**
	 * Use custom height.
	 */
	USE_CUSTOM_HEIGHT = 1430472805,

	/**
	 * Use custom width.
	 */
	USE_CUSTOM_WIDTH = 1430476649,

}

/**
 * Preserve Appearance from Layout Options
 */
declare enum PreserveAppearanceFromLayoutEnum {
	/**
	 * Export preferences will be honoured
	 */
	PRESERVE_APPEARANCE_DEFAULT = 1349665893,

	/**
	 * Container & content both will be rasterized, if can be
	 */
	PRESERVE_APPEARANCE_RASTERIZE_CONTAINER = 1349669490,

	/**
	 * Content will be rasterized, if can be
	 */
	PRESERVE_APPEARANCE_RASTERIZE_CONTENT = 1349669492,

	/**
	 * Exiting image will be used
	 */
	PRESERVE_APPEARANCE_USE_EXISTING_IMAGE = 1349670245,

}

/**
 * Arrowhead alignment types.
 */
declare enum ArrowHeadAlignmentEnum {
	/**
	 * The arrowhead is inside the path, path geometry changes to accomodate arrow heads.
	 */
	INSIDE_PATH = 1634230633,

	/**
	 * The arrowhead is outside the path i.e. path geometry remains same.
	 */
	OUTSIDE_PATH = 1634230639,

}

/**
 * Options for specifying the reference position for X and Y attributes of style. If set none, it will disable the attribute.
 */
declare enum TransformPositionReference {
	/**
	 * Corresponding edge of the page. Left edge for X attribute, Top edge for Y attribute.
	 */
	PAGE_EDGE_REFERENCE = 1348945255,

	/**
	 * Corresponding page margin of the page.Left margin for X attribute, Top margin for Y attribute.
	 */
	PAGE_MARGIN_REFERENCE = 1883721063,

}

/**
 * Dimension attribute which you want to control.
 */
declare enum DimensionAttributes {
	/**
	 * Both height and width of dimension.
	 */
	BOTH_HEIGHT_WIDTH_ATTRIBUTE = 1700227170,

	/**
	 * Height attribute of dimension.
	 */
	HEIGHT_ATTRIBUTE = 1699247183,

	/**
	 * Width attribute of dimension.
	 */
	WIDTH_ATTRIBUTE = 1700226127,

}

/**
 * Position attribute which you want to control.
 */
declare enum PositionAttributes {
	/**
	 * Both X and Y of position.
	 */
	BOTH_X_Y_ATTRIBUTE = 1698855001,

	/**
	 * X attribute of position.
	 */
	X_ATTRIBUTE = 1700282735,

	/**
	 * Y attribute of position.
	 */
	Y_ATTRIBUTE = 1700348271,

}

/**
 * Performance metric options.
 */
declare enum PerformanceMetricOptions {
	/**
	 * AGMXShowTime
	 */
	AGMXSHOWTIME = 1095191924,

	/**
	 * Number of attachable events that have been dispatched.
	 */
	ATTACHABLE_EVENT_COUNT = 1095058292,

	/**
	 * Number of attached scripts that have been executed.
	 */
	ATTACHED_SCRIPTS_COUNT = 1095975796,

	/**
	 * BIB Allocations
	 */
	BIB_ALLOCATIONS = 1112097345,

	/**
	 * BIB Allocations peak
	 */
	BIB_ALLOCATIONS_PEAK = 1111576683,

	/**
	 * BIB cache
	 */
	BIB_CACHE = 1112097379,

	/**
	 * BIB cache peak
	 */
	BIB_CACHE_PEAK = 1111707755,

	/**
	 * change manager update call count
	 */
	CHANGE_MANAGER_UPDATE_CALL_COUNT = 1129137012,

	/**
	 * change manager update call time
	 */
	CHANGE_MANAGER_UPDATE_CALL_TIME = 1129141357,

	/**
	 * The core allocation count.
	 */
	CORE_ALLOCATION_COUNT = 1128361059,

	/**
	 * The core memory size.
	 */
	CORE_MEMORY_SIZE = 1129539962,

	/**
	 * The CPU time.
	 */
	CPU_TIME = 1668314484,

	/**
	 * The current memory mark.
	 */
	CURRENT_MEMORY_MARK = 1296921195,

	/**
	 * database file bytes read
	 */
	DATABASE_FILE_BYTES_READ = 1145197156,

	/**
	 * database file bytes written
	 */
	DATABASE_FILE_BYTES_WRITTEN = 1145198450,

	/**
	 * database file page reads
	 */
	DATABASE_FILE_PAGE_READS = 1145194098,

	/**
	 * database file read time
	 */
	DATABASE_FILE_READ_TIME = 1145197172,

	/**
	 * database file write time
	 */
	DATABASE_FILE_WRITE_TIME = 1145198452,

	/**
	 * database instantiate count
	 */
	DATABASE_INSTANTIATE_COUNT = 1145194862,

	/**
	 * database new UID count
	 */
	DATABASE_NEW_UID_COUNT = 1145197929,

	/**
	 * Total amount of time spent dispatching attachable events.
	 */
	DISPATCH_EVENT_TIME = 1145394285,

	/**
	 * draw manager draw time
	 */
	DRAW_MANAGER_DRAW_TIME = 1145918573,

	/**
	 * draw manager number of interrupts
	 */
	DRAW_MANAGER_NUMBER_OF_INTERRUPTS = 1145915758,

	/**
	 * drop shadow file read bytes
	 */
	DROP_SHADOW_FILE_READ_BYTES = 1145459298,

	/**
	 * drop shadow file read time
	 */
	DROP_SHADOW_FILE_READ_TIME = 1145459316,

	/**
	 * drop shadow file write bytes
	 */
	DROP_SHADOW_FILE_WRITE_BYTES = 1145460578,

	/**
	 * drop shadow file write time
	 */
	DROP_SHADOW_FILE_WRITE_TIME = 1145460596,

	/**
	 * drop shadow memory read bytes
	 */
	DROP_SHADOW_MEMORY_READ_BYTES = 1146311266,

	/**
	 * drop shadow memory read time
	 */
	DROP_SHADOW_MEMORY_READ_TIME = 1146311284,

	/**
	 * drop shadow memory write bytes
	 */
	DROP_SHADOW_MEMORY_WRITE_BYTES = 1146312546,

	/**
	 * drop shadow memory write time
	 */
	DROP_SHADOW_MEMORY_WRITE_TIME = 1146312564,

	/**
	 * galley composition count
	 */
	GALLEY_COMPOSITION_COUNT = 1195590516,

	/**
	 * galley composition time
	 */
	GALLEY_COMPOSITION_TIME = 1195594861,

	/**
	 * The GDI object count.
	 */
	GDI_OBJECT_COUNT = 1195657582,

	/**
	 * The handle count.
	 */
	HANDLE_COUNT = 1212378740,

	/**
	 * heap allocations
	 */
	HEAP_ALLOCATIONS = 1212247148,

	/**
	 * heap allocations peak
	 */
	HEAP_ALLOCATIONS_PEAK = 1212239979,

	/**
	 * image cache allocations
	 */
	IMAGE_CACHE_ALLOCATIONS = 1231897409,

	/**
	 * image cache allocations peak
	 */
	IMAGE_CACHE_ALLOCATIONS_PEAK = 1229144427,

	/**
	 * image cache file bytes read
	 */
	IMAGE_CACHE_FILE_BYTES_READ = 1231901284,

	/**
	 * image cache file bytes written
	 */
	IMAGE_CACHE_FILE_BYTES_WRITTEN = 1231902578,

	/**
	 * image cache file read time
	 */
	IMAGE_CACHE_FILE_READ_TIME = 1229148772,

	/**
	 * image cache file write time
	 */
	IMAGE_CACHE_FILE_WRITE_TIME = 1229150066,

	/**
	 * instance cache purge count
	 */
	INSTANCE_CACHE_PURGE_COUNT = 1229148259,

	/**
	 * layout composition count
	 */
	LAYOUT_COMPOSITION_COUNT = 1279476596,

	/**
	 * layout composition time
	 */
	LAYOUT_COMPOSITION_TIME = 1279480941,

	/**
	 * memory purge count
	 */
	MEMORY_PURGE_COUNT = 1297105780,

	/**
	 * memory purge time
	 */
	MEMORY_PURGE_TIME = 1297110125,

	/**
	 * minisave count
	 */
	MINISAVE_COUNT = 1297302388,

	/**
	 * new snapshot time
	 */
	NEW_SNAPSHOT_TIME = 1397651284,

	/**
	 * The number of threads.
	 */
	NUMBER_OF_THREADS = 1853122674,

	/**
	 * The overall system CPU.
	 */
	OVERALL_SYSTEM_CPU = 1399025781,

	/**
	 * The overall user CPU.
	 */
	OVERALL_USER_CPU = 1432580213,

	/**
	 * PDF allocactions
	 */
	PDF_ALLOCACTIONS = 1346651713,

	/**
	 * PDF allocactions peak
	 */
	PDF_ALLOCACTIONS_PEAK = 1346650475,

	/**
	 * process IO bytes read
	 */
	PROCESS_IO_BYTES_READ = 1229935204,

	/**
	 * process IO bytes written
	 */
	PROCESS_IO_BYTES_WRITTEN = 1229936498,

	/**
	 * The resident memory size.
	 */
	RESIDENT_MEMORY_SIZE = 1381198202,

	/**
	 * snapshot count
	 */
	SNAPSHOT_COUNT = 1397965684,

	/**
	 * snapshot read write byte count
	 */
	SNAPSHOT_READ_WRITE_BYTE_COUNT = 1397905251,

	/**
	 * snapshot read write time
	 */
	SNAPSHOT_READ_WRITE_TIME = 1397905268,

	/**
	 * The virtual memory size.
	 */
	VIRTUAL_MEMORY_SIZE = 1448307066,

	/**
	 * VXferAlloc
	 */
	VXFERALLOC = 1448633921,

	/**
	 * VXferAllocPeak
	 */
	VXFERALLOCPEAK = 1448624491,

	/**
	 * VXferBytesRead
	 */
	VXFERBYTESREAD = 1448633938,

	/**
	 * VXferBytesWritten
	 */
	VXFERBYTESWRITTEN = 1448633943,

	/**
	 * VXferFileBytesRead
	 */
	VXFERFILEBYTESREAD = 1447445106,

	/**
	 * VXFerFileBytesWritten
	 */
	VXFERFILEBYTESWRITTEN = 1447445111,

	/**
	 * VXferReadTime
	 */
	VXFERREADTIME = 1448628852,

	/**
	 * VXferWriteTime
	 */
	VXFERWRITETIME = 1448630132,

	/**
	 * XMP filter time
	 */
	XMP_FILTER_TIME = 1481461876,

}

/**
 * SWF export background options.
 */
declare enum SWFBackgroundOptions {
	/**
	 * Paper color background.
	 */
	PAPER_COLOR = 1935831139,

	/**
	 * Transparent background.
	 */
	TRANSPARENT_SWF_BACKGROUND = 1935828852,

}

/**
 * XFL rasterize format options.
 */
declare enum XFLRasterizeFormatOptions {
	/**
	 * Uses the best format based on the image when rasterizes.
	 */
	AUTOMATIC = 1768059764,

	/**
	 * Uses GIF format when rasterizes.
	 */
	GIF = 1734960742,

	/**
	 * Uses JPEG format when rasterizes.
	 */
	JPEG = 1785751398,

	/**
	 * Uses PNG format when rasterizes.
	 */
	PNG = 1397059687,

}

/**
 * The ease option.
 */
declare enum AnimationEaseOptions {
	/**
	 * cutom read only ease type.
	 */
	CUSTOM_EASE = 2051363407,

	/**
	 * simple ease in.
	 */
	EASE_IN = 2051371849,

	/**
	 * simple ease in and out.
	 */
	EASE_IN_OUT = 2051361103,

	/**
	 * simple ease out.
	 */
	EASE_OUT = 2051371855,

	/**
	 * no easing.
	 */
	NO_EASE = 2051960645,

}

/**
 * The event that triggers a list of dynamic target objects to play.
 */
declare enum DynamicTriggerEvents {
	/**
	 * target is triggered on a button or self click.
	 */
	ON_CLICK = 1953317740,

	/**
	 * target is triggered on clicking on the page.
	 */
	ON_PAGE_CLICK = 1953321027,

	/**
	 * target is triggered on loading of the page.
	 */
	ON_PAGE_LOAD = 1953321036,

	/**
	 * target is triggered on a button release.
	 */
	ON_RELEASE = 1953321580,

	/**
	 * target is triggered on a button rolloff.
	 */
	ON_ROLLOFF = 1953321574,

	/**
	 * target is triggered on a button or self rollover.
	 */
	ON_ROLLOVER = 1953321590,

	/**
	 * target is triggered on self click.
	 */
	ON_SELF_CLICK = 1951613804,

	/**
	 * target is triggered on self rollover.
	 */
	ON_SELF_ROLLOVER = 1951617638,

	/**
	 * target is triggered on loading of the state in a multi-state object.
	 */
	ON_STATE_LOAD = 1953321804,

}

/**
 * The page transition type options.
 */
declare enum PageTransitionTypeOptions {
	/**
	 * The Blinds page transition.
	 */
	BLINDS_TRANSITION = 1886667372,

	/**
	 * The Blinds page transition.
	 */
	BOX_TRANSITION = 1886667384,

	/**
	 * The Comb page transition.
	 */
	COMB_TRANSITION = 1886667618,

	/**
	 * The Cover page transition.
	 */
	COVER_TRANSITION = 1886667638,

	/**
	 * The Dissolve page transition.
	 */
	DISSOLVE_TRANSITION = 1886667891,

	/**
	 * The Fade page transition.
	 */
	FADE_TRANSITION = 1886668388,

	/**
	 * No page transition applied.
	 */
	NONE = 1852796517,

	/**
	 * The Page Turn page transition.
	 */
	PAGE_TURN_TRANSITION = 1886670932,

	/**
	 * The Push page transition.
	 */
	PUSH_TRANSITION = 1886670963,

	/**
	 * The Split page transition.
	 */
	SPLIT_TRANSITION = 1886671728,

	/**
	 * The Uncover page transition.
	 */
	UNCOVER_TRANSITION = 1886672227,

	/**
	 * The Wipe page transition.
	 */
	WIPE_TRANSITION = 1886672752,

	/**
	 * The Zoom In page transition.
	 */
	ZOOM_IN_TRANSITION = 1886673481,

	/**
	 * The Zoom Out page transition.
	 */
	ZOOM_OUT_TRANSITION = 1886673487,

}

/**
 * The page transition direction options.
 */
declare enum PageTransitionDirectionOptions {
	/**
	 * The top to bottom direction.
	 */
	DOWN = 1181971556,

	/**
	 * The horizontal direction.
	 */
	HORIZONTAL = 1752134266,

	/**
	 * The horizontal inward direction.
	 */
	HORIZONTAL_IN = 1886668873,

	/**
	 * The horizontal outward direction.
	 */
	HORIZONTAL_OUT = 1886668879,

	/**
	 * The inward direction.
	 */
	IN = 1768824864,

	/**
	 * The down and left direction.
	 */
	LEFT_DOWN = 1886669892,

	/**
	 * The left to right direction.
	 */
	LEFT_TO_RIGHT = 1819570786,

	/**
	 * The up and left direction.
	 */
	LEFT_UP = 1886669909,

	/**
	 * Direction does not apply.
	 */
	NOT_APPLICABLE = 1886670401,

	/**
	 * The outward direction.
	 */
	OUT = 1886670708,

	/**
	 * The down and right direction.
	 */
	RIGHT_DOWN = 1886671428,

	/**
	 * The right to left direction.
	 */
	RIGHT_TO_LEFT = 1920232546,

	/**
	 * The up and right direction.
	 */
	RIGHT_UP = 1886671445,

	/**
	 * The bottom to top direction.
	 */
	UP = 1181971566,

	/**
	 * The vertical direction.
	 */
	VERTICAL = 1986359924,

	/**
	 * The vertical inward direction.
	 */
	VERTICAL_IN = 1886672457,

	/**
	 * The vertical outward direction.
	 */
	VERTICAL_OUT = 1886672463,

}

/**
 * SWF raster compression options.
 */
declare enum RasterCompressionOptions {
	/**
	 * Uses JPEG compression and automatically determines the best quality type.
	 */
	AUTOMATIC_COMPRESSION = 1936875875,

	/**
	 * Uses JPEG compression.
	 */
	JPEG_COMPRESSION = 1936878179,

	/**
	 * Uses the best quality type.
	 */
	LOSSLESS_COMPRESSION = 1936878691,

}

/**
 * Dynamic documents JPEG Quality options.
 */
declare enum DynamicDocumentsJPEGQualityOptions {
	/**
	 * Uses high JPEG compression.
	 */
	HIGH = 1701726313,

	/**
	 * Uses low JPEG compression.
	 */
	LOW = 1701727351,

	/**
	 * Uses maximum JPEG compression.
	 */
	MAXIMUM = 1701727608,

	/**
	 * Uses medium JPEG compression.
	 */
	MEDIUM = 1701727588,

	/**
	 * Uses minimum JPEG compression.
	 */
	MINIMUM = 1701727598,

}

/**
 * Dynamic documents text export policy.
 */
declare enum DynamicDocumentsTextExportPolicy {
	/**
	 * Text is exported as live text.
	 */
	LIVE = 1952804972,

	/**
	 * Text is to be rasterized.
	 */
	RASTERIZE = 1952804978,

	/**
	 * Text is exported as Text Layout Framework text.
	 */
	TLF = 1952804980,

	/**
	 * Text is to be vectorized.
	 */
	VECTORIZE = 1952804982,

}

/**
 * Fit method settings.
 */
declare enum FitMethodSettings {
	/**
	 * Fit to given scale percentage.
	 */
	FIT_GIVEN_SCALE_PERCENTAGE = 1684304739,

	/**
	 * Fit to given width and height.
	 */
	FIT_GIVEN_WIDTH_AND_HEIGHT = 1684305768,

	/**
	 * Fit to predefined settings.
	 */
	FIT_PREDEFINED_SETTINGS = 1684301427,

}

/**
 * Options for fitting to dimension.
 */
declare enum FitDimension {
	/**
	 * Fit to 1024x768 dimension.
	 */
	FIT1024X768 = 1718906726,

	/**
	 * Fit to 1240x620 dimension.
	 */
	FIT1240X620 = 1718908023,

	/**
	 * Fit to 1280x800 dimension.
	 */
	FIT1280X800 = 1718906725,

	/**
	 * Fit to 600x300 dimension.
	 */
	FIT600X300 = 1718907764,

	/**
	 * Fit to 640x480 dimension.
	 */
	FIT640X480 = 1718907753,

	/**
	 * Fit to 760x420 dimension.
	 */
	FIT760X420 = 1718907750,

	/**
	 * Fit to 800x600 dimension.
	 */
	FIT800X600 = 1718904179,

	/**
	 * Fit to 984x588 dimension.
	 */
	FIT984X588 = 1718906470,

}

/**
 * The page transition duration options.
 */
declare enum PageTransitionDurationOptions {
	/**
	 * Fast duration.
	 */
	FAST = 1180791668,

	/**
	 * Medium duration.
	 */
	MEDIUM = 1701727588,

	/**
	 * Slow duration.
	 */
	SLOW = 1886671692,

}

/**
 * SWF curve quality values.
 */
declare enum SWFCurveQualityValue {
	/**
	 * High curve quality.
	 */
	HIGH = 1701726313,

	/**
	 * Low curve quality.
	 */
	LOW = 1701727351,

	/**
	 * Maximum curve quality.
	 */
	MAXIMUM = 1701727608,

	/**
	 * Medium curve quality.
	 */
	MEDIUM = 1701727588,

	/**
	 * Minimum curve quality.
	 */
	MINIMUM = 1701727598,

}

/**
 * Dynamic media handling options.
 */
declare enum DynamicMediaHandlingOptions {
	/**
	 * Draw interactive elements appearance only.
	 */
	APPEARANCE_ONLY = 1097887823,

	/**
	 * Include all interactive elements.
	 */
	INCLUDE_ALL_MEDIA = 1231241580,

}

/**
 * The animation design options.
 */
declare enum DesignOptions {
	/**
	 * Uses the current object's properties as the starting appearance of the animation at runtime.
	 */
	FROM_CURRENT_APPEARANCE = 1634551405,

	/**
	 * Uses the current object's properties as the end appearance of the animation at runtime.
	 */
	TO_CURRENT_APPEARANCE = 1634554991,

	/**
	 * Uses the current object's properties as the starting appearance, and current position as the end location of the animation at runtime.
	 */
	TO_CURRENT_LOCATION = 1634553702,

}

/**
 * Options for the condition indicator method.
 */
declare enum ConditionIndicatorMethod {
	/**
	 * Highlights conditional text.
	 */
	USE_HIGHLIGHT = 1699244391,

	/**
	 * Underlines conditional text.
	 */
	USE_UNDERLINE = 1700097644,

}

/**
 * Options for the condition underline indicator appearance.
 */
declare enum ConditionUnderlineIndicatorAppearance {
	/**
	 * Dashed underline.
	 */
	DASHED = 1684108136,

	/**
	 * Solid underline.
	 */
	SOLID = 1936682084,

	/**
	 * Wavy underline.
	 */
	WAVY = 1937208953,

}

/**
 * Condition indicator mode options.
 */
declare enum ConditionIndicatorMode {
	/**
	 * Conditions indicators hide.
	 */
	HIDE_INDICATORS = 1698908520,

	/**
	 * Conditions indicators show and print.
	 */
	SHOW_AND_PRINT_INDICATORS = 1698908528,

	/**
	 * Condition indicators show only.
	 */
	SHOW_INDICATORS = 1698908531,

}

/**
 * Style Type
 */
declare enum StyleType {
	/**
	 * Character Style
	 */
	CHARACTER_STYLE_TYPE = 1665684340,

	/**
	 * Paragraph Style
	 */
	PARAGRAPH_STYLE_TYPE = 1883730548,

}

/**
 * Text Directions.
 */
declare enum TextDirection {
	/**
	 * Horizontal Text Direction
	 */
	HORIZONTAL_TYPE = 1702126696,

	/**
	 * Mixed Text Direction
	 */
	MIXED_TYPE = 1702126701,

	/**
	 * Unknown Text Direction
	 */
	UNKNOWN_TYPE = 1702126709,

	/**
	 * Vertical Text Direction
	 */
	VERTICAL_TYPE = 1702126710,

}

/**
 * Text to consider in case of threaded text frames.
 */
declare enum ThreadedTextFrameTextOptions {
	/**
	 * Text for the complete story
	 */
	TEXT_FOR_COMPLETE_STORY = 1698911092,

	/**
	 * Text within current text frame
	 */
	TEXT_WITHIN_TEXTFRAME = 1700021844,

}

/**
 * The smooth scrolling option.
 */
declare enum SmoothScrollingOptions {
	/**
	 * horizontal smooth scrolling.
	 */
	HORIZONTAL = 1752134266,

	/**
	 * no smooth scrolling.
	 */
	NO_SMOOTH_SCROLL = 1699959662,

	/**
	 * vertical smooth scrolling.
	 */
	VERTICAL = 1986359924,

	/**
	 * vertical and horizontal smooth scrolling.
	 */
	VERTICAL_AND_HORIZONTAL = 1699959650,

}

/**
 * The folio orientation option.
 */
declare enum FolioOrientationOptions {
	/**
	 * automatic - determine orientation based on the orientation of the mini folios.
	 */
	AUTO = 1635019116,

	/**
	 * landscape orientation only.
	 */
	LANDSCAPE = 2003395685,

	/**
	 * portrait orientation only.
	 */
	PORTRAIT = 1751738216,

	/**
	 * both portrait and landscape orientations.
	 */
	PORTRAIT_AND_LANDSCAPE = 1699303266,

}

/**
 * The folio binding direction option.
 */
declare enum FolioBindingDirectionOptions {
	/**
	 * left-edge binding.
	 */
	LEFT = 1835102828,

	/**
	 * right-edge binding.
	 */
	RIGHT = 1835102834,

}

/**
 * The versions that are available.
 */
declare enum DigpubVersion {
	/**
	 * plugin, folio and plist versions in that order.
	 */
	ALL = 1634495520,

	/**
	 * folio version.
	 */
	FOLIO = 1685087862,

	/**
	 * plist version.
	 */
	PLIST = 1685090422,

	/**
	 * plugin version.
	 */
	PLUGIN = 1685090412,

}

/**
 * The device types that are attached.
 */
declare enum AttachedDevices {
	/**
	 * all devices, Android followed by iOS.
	 */
	ALL = 1634495520,

	/**
	 * Android devices.
	 */
	ANDROID = 1685086564,

	/**
	 * iOS devices.
	 */
	IOS = 1684631411,

}

/**
 * The version of the plugin and article that are available.
 */
declare enum DigpubArticleVersion {
	/**
	 * plugin and article versions in that order.
	 */
	ALL = 1634495520,

	/**
	 * article version.
	 */
	ARTICLE = 1685078390,

	/**
	 * plugin version.
	 */
	PLUGIN = 1685090412,

}

/**
 * Choices for export order of epub and html.
 */
declare enum ExportOrder {
	/**
	 * based on article defined in article panel.
	 */
	ARTICLE_PANEL_ORDER = 1700946288,

	/**
	 * based on document layout.
	 */
	LAYOUT_ORDER = 1700949113,

	/**
	 * based on XML structure.
	 */
	XML_STRUCTURE_ORDER = 1700952179,

}

/**
 * EPub export option for cover image.
 */
declare enum EpubCover {
	/**
	 * Use external image as cover image.
	 */
	EXTERNAL_IMAGE = 1700952169,

	/**
	 * Rasterize first page as cover image.
	 */
	FIRST_PAGE = 1700947536,

	/**
	 * no cover image.
	 */
	NONE = 1852796517,

}

/**
 * Options for export unorder list.
 */
declare enum BulletListExportOption {
	/**
	 * convert to text.
	 */
	AS_TEXT = 1700946804,

	/**
	 * map to html unordered list.
	 */
	UNORDERED_LIST = 1700949333,

}

/**
 * Options for export order list.
 */
declare enum NumberedListExportOption {
	/**
	 * convert to text.
	 */
	AS_TEXT = 1700946804,

	/**
	 * map to html ordered list.
	 */
	ORDERED_LIST = 1700949359,

}

/**
 * EPub export option for epub version.
 */
declare enum EpubVersion {
	/**
	 * EPUB 2.0.1.
	 */
	EPUB2 = 1702257970,

	/**
	 * EPUB 3.0.
	 */
	EPUB3 = 1702257971,

}

/**
 * Choices for export image.
 */
declare enum ImageExportOption {
	/**
	 * link to server.
	 */
	LINK_TO_SERVER = 1700949107,

	/**
	 * optimized image.
	 */
	OPTIMIZED_IMAGE = 1700949872,

	/**
	 * original image.
	 */
	ORIGINAL_IMAGE = 1700949874,

}

/**
 * Choices for footnote placement.
 */
declare enum EPubFootnotePlacement {
	/**
	 * Footnote after paragraph.
	 */
	FOOTNOTE_AFTER_PARAGRAPH = 1701213296,

	/**
	 * Footnote after story.
	 */
	FOOTNOTE_AFTER_STORY = 1701213267,

	/**
	 * Footnote inside popup.
	 */
	FOOTNOTE_INSIDE_POPUP = 1701213235,

}

/**
 * Choices for page range format for export.
 */
declare enum PageRangeFormat {
	/**
	 * export all pages.
	 */
	EXPORT_ALL_PAGES = 1700883568,

	/**
	 * export page ranges.
	 */
	EXPORT_PAGE_RANGE = 1700951410,

}

/**
 * Choices for epub navigation style.
 */
declare enum EpubNavigationStyle {
	/**
	 * Bookmarks based navigation
	 */
	BOOKMARKS_NAVIGATION = 1700949622,

	/**
	 * File name based navigation
	 */
	FILENAME_NAVIGATION = 1701211766,

	/**
	 * No navigation.
	 */
	NO_NAVIGATION = 1701736054,

	/**
	 * TOC style based navigation
	 */
	TOC_STYLE_NAVIGATION = 1702129270,

}

/**
 * Choices for spread control for fixed layout EPub.
 */
declare enum EpubFixedLayoutSpreadControl {
	/**
	 * No spreads.
	 */
	NO_SPREADS = 1702063727,

	/**
	 * Physical spreads.
	 */
	PHYSICAL_SPREADS = 1701865593,

	/**
	 * Spreads based on document.
	 */
	SPREADS_BASED_ON_DOC = 1700949860,

	/**
	 * Synthetic spreads.
	 */
	SYNTHETIC_SPREADS = 1702066542,

}

/**
 * Choices for publish format.
 */
declare enum PublishFormatEnum {
	/**
	 * publish by pages.
	 */
	PUBLISH_BY_PAGES = 1700950134,

	/**
	 * publish by spread.
	 */
	PUBLISH_BY_SPREAD = 1700950902,

}

/**
 * publish export option for cover image.
 */
declare enum PublishCoverEnum {
	/**
	 * Rasterize chosen page as cover image.
	 */
	CHOSEN_PAGE = 1701013072,

	/**
	 * Use external image as cover image.
	 */
	EXTERNAL_IMAGE = 1700952169,

	/**
	 * Rasterize first page as cover image.
	 */
	FIRST_PAGE = 1700947536,

}

/**
 * Mapping type for style mappings.
 */
declare enum MapType {
	/**
	 * group to group mapping rule.
	 */
	GROUP_MAPPING_RULE = 1735681906,

	/**
	 * group to style mapping rule.
	 */
	GROUP_TO_STYLE_MAPPING_RULE = 1735684978,

	/**
	 * style to style mapping rule.
	 */
	STYLE_MAPPING_RULE = 1937011570,

	/**
	 * style to group mapping rule.
	 */
	STYLE_TO_GROUP_MAPPING_RULE = 1937008498,

}

/**
 * Paragraph direction.
 */
declare enum ParagraphDirectionOptions {
	/**
	 * Left to Right paragraph direction
	 */
	LEFT_TO_RIGHT_DIRECTION = 1278366308,

	/**
	 * Right to Left paragraph direction
	 */
	RIGHT_TO_LEFT_DIRECTION = 1379028068,

}

/**
 * Paragraph justification.
 */
declare enum ParagraphJustificationOptions {
	/**
	 * Arabic justification
	 */
	ARABIC_JUSTIFICATION = 1886019954,

	/**
	 * Default justification
	 */
	DEFAULT_JUSTIFICATION = 1886020709,

	/**
	 * Naskh justification
	 */
	NASKH_JUSTIFICATION = 1886023265,

	/**
	 * Kashidas. Use naskh justification if you want to also use Justifcation Alternates.
	 */
	NASKH_KASHIDA_JUSTIFICATION = 1886023275,

	/**
	 * Fractional Kashidas. Use naskh justification if you want to also use Justifcation Alternates.
	 */
	NASKH_KASHIDA_JUSTIFICATION_FRAC = 1886021227,

	/**
	 * Kashidas without Stretched Connections.
	 */
	NASKH_TATWEEL_JUSTIFICATION = 1886023284,

	/**
	 * Fractional Kashidas without Stretched Connections.
	 */
	NASKH_TATWEEL_JUSTIFICATION_FRAC = 1886021236,

}

/**
 * Character direction.
 */
declare enum CharacterDirectionOptions {
	/**
	 * Default direction
	 */
	DEFAULT_DIRECTION = 1147496036,

	/**
	 * Left to right direction
	 */
	LEFT_TO_RIGHT_DIRECTION = 1278366308,

	/**
	 * Right to left direction
	 */
	RIGHT_TO_LEFT_DIRECTION = 1379028068,

}

/**
 * Digits type options.
 */
declare enum DigitsTypeOptions {
	/**
	 * Arabic digits
	 */
	ARABIC_DIGITS = 1684627826,

	/**
	 * Bengali digits
	 */
	BENGALI_DIGITS = 1684628069,

	/**
	 * Burmese digits
	 */
	BURMESE_DIGITS = 1684628085,

	/**
	 * Default digits
	 */
	DEFAULT_DIGITS = 1684628581,

	/**
	 * Devanagari digits
	 */
	DEVANAGARI_DIGITS = 1684628598,

	/**
	 * Farsi digits
	 */
	FARSI_DIGITS = 1684629089,

	/**
	 * Full Farsi digits
	 */
	FULL_FARSI_DIGITS = 1684629094,

	/**
	 * Gujarati digits
	 */
	GUJARATI_DIGITS = 1684629354,

	/**
	 * Gurmukhi digits
	 */
	GURMUKHI_DIGITS = 1684629357,

	/**
	 * Hindi digits
	 */
	HINDI_DIGITS = 1684629609,

	/**
	 * Kannada digits
	 */
	KANNADA_DIGITS = 1684630369,

	/**
	 * Khmer digits
	 */
	KHMER_DIGITS = 1684630376,

	/**
	 * Lao digits
	 */
	LAO_DIGITS = 1684630625,

	/**
	 * Malayalam digits
	 */
	MALAYALAM_DIGITS = 1684630881,

	/**
	 * native digits
	 */
	NATIVE_DIGITS = 1684631137,

	/**
	 * Oriya digits
	 */
	ORIYA_DIGITS = 1684631410,

	/**
	 * Tamil digits
	 */
	TAMIL_DIGITS = 1684632673,

	/**
	 * Telugu digits
	 */
	TELUGU_DIGITS = 1684632677,

	/**
	 * Thai digits
	 */
	THAI_DIGITS = 1684632680,

	/**
	 * Tibetan digits
	 */
	TIBETAN_DIGITS = 1684632681,

}

/**
 * Kashidas.
 */
declare enum KashidasOptions {
	/**
	 * Default kashidas
	 */
	DEFAULT_KASHIDAS = 1801544805,

	/**
	 * Kashidas off
	 */
	KASHIDAS_OFF = 1801547622,

}

/**
 * Diacritic position.
 */
declare enum DiacriticPositionOptions {
	/**
	 * Default position
	 */
	DEFAULT_POSITION = 1685090150,

	/**
	 * Loose position
	 */
	LOOSE_POSITION = 1685089391,

	/**
	 * Medium position
	 */
	MEDIUM_POSITION = 1685089637,

	/**
	 * OpenType position
	 */
	OPENTYPE_POSITION = 1685090164,

	/**
	 * OpenType position from baseline
	 */
	OPENTYPE_POSITION_FROM_BASELINE = 1685090146,

	/**
	 * Tight position
	 */
	TIGHT_POSITION = 1685091433,

}

/**
 * Table direction options.
 */
declare enum TableDirectionOptions {
	/**
	 * Set left to right table direction
	 */
	LEFT_TO_RIGHT_DIRECTION = 1278366308,

	/**
	 * Set right to left table direction
	 */
	RIGHT_TO_LEFT_DIRECTION = 1379028068,

}

/**
 * A hyperlink.
 */
declare class Hyperlink {
	/**
	 * The hyperlink border color.
	 */
	borderColor: [number, number, number] | UIColors;

	/**
	 * The hyperlink border style.
	 */
	borderStyle: HyperlinkAppearanceStyle;

	/**
	 * The text, page, or URL that the hyperlink points to.
	 */
	destination: HyperlinkTextDestination | HyperlinkPageDestination | HyperlinkExternalPageDestination | HyperlinkURLDestination | ParagraphDestination;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, the hyperlink is hidden.
	 */
	readonly hidden: boolean;

	/**
	 * The hyperlink highlight style.
	 */
	highlight: HyperlinkAppearanceHighlight;

	/**
	 * The unique ID of the Hyperlink.
	 */
	readonly id: number;

	/**
	 * The index of the Hyperlink within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the Hyperlink.
	 */
	name: string;

	/**
	 * The parent of the Hyperlink (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The hyperlinked text or page item.
	 */
	source: HyperlinkPageItemSource | HyperlinkTextSource | CrossReferenceSource;

	/**
	 * If true, the Hyperlink is visible.
	 */
	visible: boolean;

	/**
	 * The stroke weight of the hyperlink border.
	 */
	width: HyperlinkAppearanceWidth;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Hyperlink[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the Hyperlink.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Jumps to the hyperlink destination.
	 */
	showDestination(): void;

	/**
	 * Jumps to the hyperlink source.
	 */
	showSource(): void;

	/**
	 * Generates a string which, if executed, will return the Hyperlink.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of hyperlinks.
 */
declare class Hyperlinks {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Hyperlink with the specified index.
	 * @param index The index.
	 */
	[index: number]: Hyperlink;

	/**
	 * Creates a new hyperlink.
	 * @param hyperlinkSource The hyperlinked object.
	 * @param hyperlinkDestination The destination that the hyperlink points to. Can accept: Ordered array containing fileName:String, volumn:String, directoryId:Long Integer, dataLinkClassId:Long Integer, destinationUid:Long Integer, HyperlinkTextDestination, HyperlinkPageDestination, HyperlinkExternalPageDestination, HyperlinkURLDestination or ParagraphDestination.
	 * @param withProperties Initial values for properties of the new Hyperlink
	 */
	add(hyperlinkSource: HyperlinkPageItemSource | HyperlinkTextSource | CrossReferenceSource, hyperlinkDestination: any, withProperties: object): Hyperlink;

	/**
	 * Returns any Hyperlink in the collection.
	 */
	anyItem(): Hyperlink;

	/**
	 * Displays the number of elements in the Hyperlink.
	 */
	count(): number;

	/**
	 * Returns every Hyperlink in the collection.
	 */
	everyItem(): Hyperlink[];

	/**
	 * Returns the first Hyperlink in the collection.
	 */
	firstItem(): Hyperlink;

	/**
	 * Returns the Hyperlink with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Hyperlink;

	/**
	 * Returns the Hyperlink with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Hyperlink;

	/**
	 * Returns the Hyperlink with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Hyperlink;

	/**
	 * Returns the Hyperlinks within the specified range.
	 * @param from The Hyperlink, index, or name at the beginning of the range.
	 * @param to The Hyperlink, index, or name at the end of the range.
	 */
	itemByRange(from: Hyperlink | number | string, to: Hyperlink | number | string): Hyperlink[];

	/**
	 * Returns the last Hyperlink in the collection.
	 */
	lastItem(): Hyperlink;

	/**
	 * Returns the middle Hyperlink in the collection.
	 */
	middleItem(): Hyperlink;

	/**
	 * Returns the Hyperlink whose index follows the specified Hyperlink in the collection.
	 * @param obj The Hyperlink whose index comes before the desired Hyperlink.
	 */
	nextItem(obj: Hyperlink): Hyperlink;

	/**
	 * Returns the Hyperlink with the index previous to the specified index.
	 * @param obj The index of the Hyperlink that follows the desired Hyperlink.
	 */
	previousItem(obj: Hyperlink): Hyperlink;

	/**
	 * Generates a string which, if executed, will return the Hyperlink.
	 */
	toSource(): string;

}

/**
 * A bookmark.
 */
declare class Bookmark {
	/**
	 * A collection of bookmarks.
	 */
	readonly bookmarks: Bookmarks;

	/**
	 * The destination that the hyperlink points to.
	 */
	readonly destination: HyperlinkTextDestination | HyperlinkPageDestination | HyperlinkExternalPageDestination | Page;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the Bookmark.
	 */
	readonly id: number;

	/**
	 * The indent level of the bookmark.
	 */
	readonly indent: number;

	/**
	 * The index of the Bookmark within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the Bookmark.
	 */
	name: string;

	/**
	 * The parent of the Bookmark (a Document or Bookmark).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Bookmark[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the bookmark to the specified location.
	 * @param to The bookmark location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to?: LocationOptions, reference?: Bookmark | Document): Bookmark;

	/**
	 * Deletes the Bookmark.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Go to the bookmark.
	 */
	showBookmark(): void;

	/**
	 * Generates a string which, if executed, will return the Bookmark.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of bookmarks.
 */
declare class Bookmarks {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Bookmark with the specified index.
	 * @param index The index.
	 */
	[index: number]: Bookmark;

	/**
	 * Creates a new bookmark.
	 * @param destination The bookmark destination.
	 * @param withProperties Initial values for properties of the new Bookmark
	 */
	add(destination: HyperlinkTextDestination | HyperlinkPageDestination | HyperlinkExternalPageDestination | Page, withProperties: object): Bookmark;

	/**
	 * Returns any Bookmark in the collection.
	 */
	anyItem(): Bookmark;

	/**
	 * Displays the number of elements in the Bookmark.
	 */
	count(): number;

	/**
	 * Returns every Bookmark in the collection.
	 */
	everyItem(): Bookmark[];

	/**
	 * Returns the first Bookmark in the collection.
	 */
	firstItem(): Bookmark;

	/**
	 * Returns the Bookmark with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Bookmark;

	/**
	 * Returns the Bookmark with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Bookmark;

	/**
	 * Returns the Bookmark with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Bookmark;

	/**
	 * Returns the Bookmarks within the specified range.
	 * @param from The Bookmark, index, or name at the beginning of the range.
	 * @param to The Bookmark, index, or name at the end of the range.
	 */
	itemByRange(from: Bookmark | number | string, to: Bookmark | number | string): Bookmark[];

	/**
	 * Returns the last Bookmark in the collection.
	 */
	lastItem(): Bookmark;

	/**
	 * Returns the middle Bookmark in the collection.
	 */
	middleItem(): Bookmark;

	/**
	 * Returns the Bookmark whose index follows the specified Bookmark in the collection.
	 * @param obj The Bookmark whose index comes before the desired Bookmark.
	 */
	nextItem(obj: Bookmark): Bookmark;

	/**
	 * Returns the Bookmark with the index previous to the specified index.
	 * @param obj The index of the Bookmark that follows the desired Bookmark.
	 */
	previousItem(obj: Bookmark): Bookmark;

	/**
	 * Generates a string which, if executed, will return the Bookmark.
	 */
	toSource(): string;

}

/**
 * A hyperlinked page item.
 */
declare class HyperlinkPageItemSource {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, the hyperlink is hidden.
	 */
	readonly hidden: boolean;

	/**
	 * The unique ID of the HyperlinkPageItemSource.
	 */
	readonly id: number;

	/**
	 * The index of the HyperlinkPageItemSource within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the HyperlinkPageItemSource.
	 */
	name: string;

	/**
	 * The parent of the HyperlinkPageItemSource (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The hyperlinked page item.
	 */
	sourcePageItem: PageItem;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyperlinkPageItemSource[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the HyperlinkPageItemSource.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Jumps to the hyperlink source.
	 */
	showSource(): void;

	/**
	 * Generates a string which, if executed, will return the HyperlinkPageItemSource.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of hyperlink page item sources.
 */
declare class HyperlinkPageItemSources {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the HyperlinkPageItemSource with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyperlinkPageItemSource;

	/**
	 * Creates a new hyperlink page item source.
	 * @param source The page item to hyperlink.
	 * @param withProperties Initial values for properties of the new HyperlinkPageItemSource
	 */
	add(source: PageItem, withProperties: object): HyperlinkPageItemSource;

	/**
	 * Returns any HyperlinkPageItemSource in the collection.
	 */
	anyItem(): HyperlinkPageItemSource;

	/**
	 * Displays the number of elements in the HyperlinkPageItemSource.
	 */
	count(): number;

	/**
	 * Returns every HyperlinkPageItemSource in the collection.
	 */
	everyItem(): HyperlinkPageItemSource[];

	/**
	 * Returns the first HyperlinkPageItemSource in the collection.
	 */
	firstItem(): HyperlinkPageItemSource;

	/**
	 * Returns the HyperlinkPageItemSource with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyperlinkPageItemSource;

	/**
	 * Returns the HyperlinkPageItemSource with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HyperlinkPageItemSource;

	/**
	 * Returns the HyperlinkPageItemSource with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyperlinkPageItemSource;

	/**
	 * Returns the HyperlinkPageItemSources within the specified range.
	 * @param from The HyperlinkPageItemSource, index, or name at the beginning of the range.
	 * @param to The HyperlinkPageItemSource, index, or name at the end of the range.
	 */
	itemByRange(from: HyperlinkPageItemSource | number | string, to: HyperlinkPageItemSource | number | string): HyperlinkPageItemSource[];

	/**
	 * Returns the last HyperlinkPageItemSource in the collection.
	 */
	lastItem(): HyperlinkPageItemSource;

	/**
	 * Returns the middle HyperlinkPageItemSource in the collection.
	 */
	middleItem(): HyperlinkPageItemSource;

	/**
	 * Returns the HyperlinkPageItemSource whose index follows the specified HyperlinkPageItemSource in the collection.
	 * @param obj The HyperlinkPageItemSource whose index comes before the desired HyperlinkPageItemSource.
	 */
	nextItem(obj: HyperlinkPageItemSource): HyperlinkPageItemSource;

	/**
	 * Returns the HyperlinkPageItemSource with the index previous to the specified index.
	 * @param obj The index of the HyperlinkPageItemSource that follows the desired HyperlinkPageItemSource.
	 */
	previousItem(obj: HyperlinkPageItemSource): HyperlinkPageItemSource;

	/**
	 * Generates a string which, if executed, will return the HyperlinkPageItemSource.
	 */
	toSource(): string;

}

/**
 * A hyperlinked text object or insertion point.
 */
declare class HyperlinkTextSource {
	/**
	 * Character style of the hyperlink text source.
	 */
	appliedCharacterStyle: CharacterStyle;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, the hyperlink is hidden.
	 */
	readonly hidden: boolean;

	/**
	 * The unique ID of the HyperlinkTextSource.
	 */
	readonly id: number;

	/**
	 * The index of the HyperlinkTextSource within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the HyperlinkTextSource.
	 */
	name: string;

	/**
	 * The parent of the HyperlinkTextSource (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The hyperlinked text or insertion point.
	 */
	sourceText: Text;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyperlinkTextSource[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the HyperlinkTextSource.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Jumps to the hyperlink source.
	 */
	showSource(): void;

	/**
	 * Generates a string which, if executed, will return the HyperlinkTextSource.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of hyperlink text sources.
 */
declare class HyperlinkTextSources {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the HyperlinkTextSource with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyperlinkTextSource;

	/**
	 * Creates a new hyperlink text source.
	 * @param source The text or insertion point to hyperlink.
	 * @param withProperties Initial values for properties of the new HyperlinkTextSource
	 */
	add(source: Text, withProperties: object): HyperlinkTextSource;

	/**
	 * Returns any HyperlinkTextSource in the collection.
	 */
	anyItem(): HyperlinkTextSource;

	/**
	 * Displays the number of elements in the HyperlinkTextSource.
	 */
	count(): number;

	/**
	 * Returns every HyperlinkTextSource in the collection.
	 */
	everyItem(): HyperlinkTextSource[];

	/**
	 * Returns the first HyperlinkTextSource in the collection.
	 */
	firstItem(): HyperlinkTextSource;

	/**
	 * Returns the HyperlinkTextSource with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyperlinkTextSource;

	/**
	 * Returns the HyperlinkTextSource with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HyperlinkTextSource;

	/**
	 * Returns the HyperlinkTextSource with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyperlinkTextSource;

	/**
	 * Returns the HyperlinkTextSources within the specified range.
	 * @param from The HyperlinkTextSource, index, or name at the beginning of the range.
	 * @param to The HyperlinkTextSource, index, or name at the end of the range.
	 */
	itemByRange(from: HyperlinkTextSource | number | string, to: HyperlinkTextSource | number | string): HyperlinkTextSource[];

	/**
	 * Returns the last HyperlinkTextSource in the collection.
	 */
	lastItem(): HyperlinkTextSource;

	/**
	 * Returns the middle HyperlinkTextSource in the collection.
	 */
	middleItem(): HyperlinkTextSource;

	/**
	 * Returns the HyperlinkTextSource whose index follows the specified HyperlinkTextSource in the collection.
	 * @param obj The HyperlinkTextSource whose index comes before the desired HyperlinkTextSource.
	 */
	nextItem(obj: HyperlinkTextSource): HyperlinkTextSource;

	/**
	 * Returns the HyperlinkTextSource with the index previous to the specified index.
	 * @param obj The index of the HyperlinkTextSource that follows the desired HyperlinkTextSource.
	 */
	previousItem(obj: HyperlinkTextSource): HyperlinkTextSource;

	/**
	 * Generates a string which, if executed, will return the HyperlinkTextSource.
	 */
	toSource(): string;

}

/**
 * A hyperlink destination that is either text or an insertion point.
 */
declare class HyperlinkTextDestination {
	/**
	 * The text or insertion point that the hyperlink points to.
	 */
	destinationText: InsertionPoint | Text;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, the hyperlink is hidden.
	 */
	readonly hidden: boolean;

	/**
	 * The unique ID of the HyperlinkTextDestination.
	 */
	readonly id: number;

	/**
	 * The index of the HyperlinkTextDestination within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the HyperlinkTextDestination.
	 */
	name: string;

	/**
	 * The parent of the HyperlinkTextDestination (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyperlinkTextDestination[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the HyperlinkTextDestination.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Jumps to the hyperlink destination.
	 */
	showDestination(): void;

	/**
	 * Generates a string which, if executed, will return the HyperlinkTextDestination.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of hyperlink text destinations.
 */
declare class HyperlinkTextDestinations {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the HyperlinkTextDestination with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyperlinkTextDestination;

	/**
	 * Creates a new hyperlink text destination.
	 * @param destination The text or insertion point location that the hyperlink points to.
	 * @param withProperties Initial values for properties of the new HyperlinkTextDestination
	 */
	add(destination: Text, withProperties: object): HyperlinkTextDestination;

	/**
	 * Returns any HyperlinkTextDestination in the collection.
	 */
	anyItem(): HyperlinkTextDestination;

	/**
	 * Displays the number of elements in the HyperlinkTextDestination.
	 */
	count(): number;

	/**
	 * Returns every HyperlinkTextDestination in the collection.
	 */
	everyItem(): HyperlinkTextDestination[];

	/**
	 * Returns the first HyperlinkTextDestination in the collection.
	 */
	firstItem(): HyperlinkTextDestination;

	/**
	 * Returns the HyperlinkTextDestination with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyperlinkTextDestination;

	/**
	 * Returns the HyperlinkTextDestination with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HyperlinkTextDestination;

	/**
	 * Returns the HyperlinkTextDestination with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyperlinkTextDestination;

	/**
	 * Returns the HyperlinkTextDestinations within the specified range.
	 * @param from The HyperlinkTextDestination, index, or name at the beginning of the range.
	 * @param to The HyperlinkTextDestination, index, or name at the end of the range.
	 */
	itemByRange(from: HyperlinkTextDestination | number | string, to: HyperlinkTextDestination | number | string): HyperlinkTextDestination[];

	/**
	 * Returns the last HyperlinkTextDestination in the collection.
	 */
	lastItem(): HyperlinkTextDestination;

	/**
	 * Returns the middle HyperlinkTextDestination in the collection.
	 */
	middleItem(): HyperlinkTextDestination;

	/**
	 * Returns the HyperlinkTextDestination whose index follows the specified HyperlinkTextDestination in the collection.
	 * @param obj The HyperlinkTextDestination whose index comes before the desired HyperlinkTextDestination.
	 */
	nextItem(obj: HyperlinkTextDestination): HyperlinkTextDestination;

	/**
	 * Returns the HyperlinkTextDestination with the index previous to the specified index.
	 * @param obj The index of the HyperlinkTextDestination that follows the desired HyperlinkTextDestination.
	 */
	previousItem(obj: HyperlinkTextDestination): HyperlinkTextDestination;

	/**
	 * Generates a string which, if executed, will return the HyperlinkTextDestination.
	 */
	toSource(): string;

}

/**
 * A hyperlink destination that is a document page.
 */
declare class HyperlinkPageDestination {
	/**
	 * The page that the hyperlink points to.
	 */
	destinationPage: Page;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, the hyperlink is hidden.
	 */
	readonly hidden: boolean;

	/**
	 * The unique ID of the HyperlinkPageDestination.
	 */
	readonly id: number;

	/**
	 * The index of the HyperlinkPageDestination within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the HyperlinkPageDestination.
	 */
	name: string;

	/**
	 * If true or unspecified, allows a custom destination name; also does not update the name when the destination is moved to a different page. If false, uses the page number as the page destination name and makes the name property read-only for the destination object; also updates the name when the destination is moved to a different page.
	 */
	nameManually: boolean;

	/**
	 * The parent of the HyperlinkPageDestination (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The view rectangle, specified in the format [y1, x1, y2, x2]. Note: Valid only when view setting is fixed. Can return: Ordered array containing top:Unit, left:Unit, bottom:Unit, right:Unit.
	 */
	viewBounds: any;

	/**
	 * The zoom percentage. (Range: 5 to 4000) Note: Valid only when view setting is fixed.
	 */
	viewPercentage: number;

	/**
	 * The destination page size when the page is reached by clicking the hyperlink.
	 */
	viewSetting: HyperlinkDestinationPageSetting;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyperlinkPageDestination[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the HyperlinkPageDestination.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Jumps to the hyperlink destination.
	 */
	showDestination(): void;

	/**
	 * Generates a string which, if executed, will return the HyperlinkPageDestination.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of hyperlink page destinations.
 */
declare class HyperlinkPageDestinations {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the HyperlinkPageDestination with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyperlinkPageDestination;

	/**
	 * Creates a new hyperlink page destination.
	 * @param destination The document page that the hyperlink points to.
	 * @param withProperties Initial values for properties of the new HyperlinkPageDestination
	 */
	add(destination: Page, withProperties: object): HyperlinkPageDestination;

	/**
	 * Returns any HyperlinkPageDestination in the collection.
	 */
	anyItem(): HyperlinkPageDestination;

	/**
	 * Displays the number of elements in the HyperlinkPageDestination.
	 */
	count(): number;

	/**
	 * Returns every HyperlinkPageDestination in the collection.
	 */
	everyItem(): HyperlinkPageDestination[];

	/**
	 * Returns the first HyperlinkPageDestination in the collection.
	 */
	firstItem(): HyperlinkPageDestination;

	/**
	 * Returns the HyperlinkPageDestination with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyperlinkPageDestination;

	/**
	 * Returns the HyperlinkPageDestination with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HyperlinkPageDestination;

	/**
	 * Returns the HyperlinkPageDestination with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyperlinkPageDestination;

	/**
	 * Returns the HyperlinkPageDestinations within the specified range.
	 * @param from The HyperlinkPageDestination, index, or name at the beginning of the range.
	 * @param to The HyperlinkPageDestination, index, or name at the end of the range.
	 */
	itemByRange(from: HyperlinkPageDestination | number | string, to: HyperlinkPageDestination | number | string): HyperlinkPageDestination[];

	/**
	 * Returns the last HyperlinkPageDestination in the collection.
	 */
	lastItem(): HyperlinkPageDestination;

	/**
	 * Returns the middle HyperlinkPageDestination in the collection.
	 */
	middleItem(): HyperlinkPageDestination;

	/**
	 * Returns the HyperlinkPageDestination whose index follows the specified HyperlinkPageDestination in the collection.
	 * @param obj The HyperlinkPageDestination whose index comes before the desired HyperlinkPageDestination.
	 */
	nextItem(obj: HyperlinkPageDestination): HyperlinkPageDestination;

	/**
	 * Returns the HyperlinkPageDestination with the index previous to the specified index.
	 * @param obj The index of the HyperlinkPageDestination that follows the desired HyperlinkPageDestination.
	 */
	previousItem(obj: HyperlinkPageDestination): HyperlinkPageDestination;

	/**
	 * Generates a string which, if executed, will return the HyperlinkPageDestination.
	 */
	toSource(): string;

}

/**
 * A hyperlink destination that is a page in a document other than the document that contains the hyperlink source. For information on hyperlink sources, hyperlink page item source or hyperlink text source.
 */
declare class HyperlinkExternalPageDestination {
	/**
	 * The index of the page that the hyperlink destination points to. Note: Valid only when hyperlink destination is an external page.
	 */
	destinationPageIndex: number;

	/**
	 * The path to the document that the hyperlink destination points to.
	 */
	documentPath: File;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, the hyperlink is hidden.
	 */
	readonly hidden: boolean;

	/**
	 * The unique ID of the HyperlinkExternalPageDestination.
	 */
	readonly id: number;

	/**
	 * The index of the HyperlinkExternalPageDestination within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the HyperlinkExternalPageDestination.
	 */
	readonly name: string;

	/**
	 * The parent of the HyperlinkExternalPageDestination (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The view rectangle, specified in the format [y1, x1, y2, x2]. Note: Valid only when view setting is fixed. Can return: Ordered array containing top:Unit, left:Unit, bottom:Unit, right:Unit.
	 */
	viewBounds: any;

	/**
	 * The zoom percentage. (Range: 5 to 4000) Note: Valid only when view setting is fixed.
	 */
	viewPercentage: number;

	/**
	 * The destination page size when the page is reached by clicking the hyperlink.
	 */
	viewSetting: HyperlinkDestinationPageSetting;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyperlinkExternalPageDestination[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the HyperlinkExternalPageDestination.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Jumps to the hyperlink destination.
	 */
	showDestination(): void;

	/**
	 * Generates a string which, if executed, will return the HyperlinkExternalPageDestination.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of hyperlink external page destinations.
 */
declare class HyperlinkExternalPageDestinations {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the HyperlinkExternalPageDestination with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyperlinkExternalPageDestination;

	/**
	 * Creates a new hyperlink external page destination.
	 * @param destination The destination page.
	 * @param withProperties Initial values for properties of the new HyperlinkExternalPageDestination
	 */
	add(destination: Page, withProperties: object): HyperlinkExternalPageDestination;

	/**
	 * Returns any HyperlinkExternalPageDestination in the collection.
	 */
	anyItem(): HyperlinkExternalPageDestination;

	/**
	 * Displays the number of elements in the HyperlinkExternalPageDestination.
	 */
	count(): number;

	/**
	 * Returns every HyperlinkExternalPageDestination in the collection.
	 */
	everyItem(): HyperlinkExternalPageDestination[];

	/**
	 * Returns the first HyperlinkExternalPageDestination in the collection.
	 */
	firstItem(): HyperlinkExternalPageDestination;

	/**
	 * Returns the HyperlinkExternalPageDestination with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyperlinkExternalPageDestination;

	/**
	 * Returns the HyperlinkExternalPageDestination with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HyperlinkExternalPageDestination;

	/**
	 * Returns the HyperlinkExternalPageDestination with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyperlinkExternalPageDestination;

	/**
	 * Returns the HyperlinkExternalPageDestinations within the specified range.
	 * @param from The HyperlinkExternalPageDestination, index, or name at the beginning of the range.
	 * @param to The HyperlinkExternalPageDestination, index, or name at the end of the range.
	 */
	itemByRange(from: HyperlinkExternalPageDestination | number | string, to: HyperlinkExternalPageDestination | number | string): HyperlinkExternalPageDestination[];

	/**
	 * Returns the last HyperlinkExternalPageDestination in the collection.
	 */
	lastItem(): HyperlinkExternalPageDestination;

	/**
	 * Returns the middle HyperlinkExternalPageDestination in the collection.
	 */
	middleItem(): HyperlinkExternalPageDestination;

	/**
	 * Returns the HyperlinkExternalPageDestination whose index follows the specified HyperlinkExternalPageDestination in the collection.
	 * @param obj The HyperlinkExternalPageDestination whose index comes before the desired HyperlinkExternalPageDestination.
	 */
	nextItem(obj: HyperlinkExternalPageDestination): HyperlinkExternalPageDestination;

	/**
	 * Returns the HyperlinkExternalPageDestination with the index previous to the specified index.
	 * @param obj The index of the HyperlinkExternalPageDestination that follows the desired HyperlinkExternalPageDestination.
	 */
	previousItem(obj: HyperlinkExternalPageDestination): HyperlinkExternalPageDestination;

	/**
	 * Generates a string which, if executed, will return the HyperlinkExternalPageDestination.
	 */
	toSource(): string;

}

/**
 * A hyperlink destination that is a URL.
 */
declare class HyperlinkURLDestination {
	/**
	 * The URL the hyperlink points to.
	 */
	destinationURL: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, the hyperlink is hidden.
	 */
	readonly hidden: boolean;

	/**
	 * The unique ID of the HyperlinkURLDestination.
	 */
	readonly id: number;

	/**
	 * The index of the HyperlinkURLDestination within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the HyperlinkURLDestination.
	 */
	name: string;

	/**
	 * The parent of the HyperlinkURLDestination (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyperlinkURLDestination[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the HyperlinkURLDestination.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Jumps to the hyperlink destination.
	 */
	showDestination(): void;

	/**
	 * Generates a string which, if executed, will return the HyperlinkURLDestination.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of hyperlink URL destinations.
 */
declare class HyperlinkURLDestinations {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the HyperlinkURLDestination with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyperlinkURLDestination;

	/**
	 * Creates a new hyperlink URL destination.
	 * @param destination The URL that the hyperlink points to.
	 * @param withProperties Initial values for properties of the new HyperlinkURLDestination
	 */
	add(destination: string, withProperties: object): HyperlinkURLDestination;

	/**
	 * Returns any HyperlinkURLDestination in the collection.
	 */
	anyItem(): HyperlinkURLDestination;

	/**
	 * Displays the number of elements in the HyperlinkURLDestination.
	 */
	count(): number;

	/**
	 * Returns every HyperlinkURLDestination in the collection.
	 */
	everyItem(): HyperlinkURLDestination[];

	/**
	 * Returns the first HyperlinkURLDestination in the collection.
	 */
	firstItem(): HyperlinkURLDestination;

	/**
	 * Returns the HyperlinkURLDestination with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyperlinkURLDestination;

	/**
	 * Returns the HyperlinkURLDestination with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HyperlinkURLDestination;

	/**
	 * Returns the HyperlinkURLDestination with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyperlinkURLDestination;

	/**
	 * Returns the HyperlinkURLDestinations within the specified range.
	 * @param from The HyperlinkURLDestination, index, or name at the beginning of the range.
	 * @param to The HyperlinkURLDestination, index, or name at the end of the range.
	 */
	itemByRange(from: HyperlinkURLDestination | number | string, to: HyperlinkURLDestination | number | string): HyperlinkURLDestination[];

	/**
	 * Returns the last HyperlinkURLDestination in the collection.
	 */
	lastItem(): HyperlinkURLDestination;

	/**
	 * Returns the middle HyperlinkURLDestination in the collection.
	 */
	middleItem(): HyperlinkURLDestination;

	/**
	 * Returns the HyperlinkURLDestination whose index follows the specified HyperlinkURLDestination in the collection.
	 * @param obj The HyperlinkURLDestination whose index comes before the desired HyperlinkURLDestination.
	 */
	nextItem(obj: HyperlinkURLDestination): HyperlinkURLDestination;

	/**
	 * Returns the HyperlinkURLDestination with the index previous to the specified index.
	 * @param obj The index of the HyperlinkURLDestination that follows the desired HyperlinkURLDestination.
	 */
	previousItem(obj: HyperlinkURLDestination): HyperlinkURLDestination;

	/**
	 * Generates a string which, if executed, will return the HyperlinkURLDestination.
	 */
	toSource(): string;

}

/**
 * A cross reference format object.
 */
declare class CrossReferenceFormat {
	/**
	 * Character style of the cross reference format.
	 */
	appliedCharacterStyle: CharacterStyle;

	/**
	 * A collection of cross reference building blocks.
	 */
	readonly buildingBlocks: BuildingBlocks;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the CrossReferenceFormat.
	 */
	readonly id: number;

	/**
	 * The index of the CrossReferenceFormat within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the CrossReferenceFormat.
	 */
	name: string;

	/**
	 * The parent of the CrossReferenceFormat (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CrossReferenceFormat[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the CrossReferenceFormat.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the CrossReferenceFormat.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of cross reference formats.
 */
declare class CrossReferenceFormats {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the CrossReferenceFormat with the specified index.
	 * @param index The index.
	 */
	[index: number]: CrossReferenceFormat;

	/**
	 * Creates a new cross reference format.
	 * @param name The format name.
	 * @param withProperties Initial values for properties of the new CrossReferenceFormat
	 */
	add(name: string, withProperties: object): CrossReferenceFormat;

	/**
	 * Returns any CrossReferenceFormat in the collection.
	 */
	anyItem(): CrossReferenceFormat;

	/**
	 * Displays the number of elements in the CrossReferenceFormat.
	 */
	count(): number;

	/**
	 * Returns every CrossReferenceFormat in the collection.
	 */
	everyItem(): CrossReferenceFormat[];

	/**
	 * Returns the first CrossReferenceFormat in the collection.
	 */
	firstItem(): CrossReferenceFormat;

	/**
	 * Returns the CrossReferenceFormat with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CrossReferenceFormat;

	/**
	 * Returns the CrossReferenceFormat with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CrossReferenceFormat;

	/**
	 * Returns the CrossReferenceFormat with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CrossReferenceFormat;

	/**
	 * Returns the CrossReferenceFormats within the specified range.
	 * @param from The CrossReferenceFormat, index, or name at the beginning of the range.
	 * @param to The CrossReferenceFormat, index, or name at the end of the range.
	 */
	itemByRange(from: CrossReferenceFormat | number | string, to: CrossReferenceFormat | number | string): CrossReferenceFormat[];

	/**
	 * Returns the last CrossReferenceFormat in the collection.
	 */
	lastItem(): CrossReferenceFormat;

	/**
	 * Returns the middle CrossReferenceFormat in the collection.
	 */
	middleItem(): CrossReferenceFormat;

	/**
	 * Returns the CrossReferenceFormat whose index follows the specified CrossReferenceFormat in the collection.
	 * @param obj The CrossReferenceFormat whose index comes before the desired CrossReferenceFormat.
	 */
	nextItem(obj: CrossReferenceFormat): CrossReferenceFormat;

	/**
	 * Returns the CrossReferenceFormat with the index previous to the specified index.
	 * @param obj The index of the CrossReferenceFormat that follows the desired CrossReferenceFormat.
	 */
	previousItem(obj: CrossReferenceFormat): CrossReferenceFormat;

	/**
	 * Generates a string which, if executed, will return the CrossReferenceFormat.
	 */
	toSource(): string;

}

/**
 * A cross reference text source object.
 */
declare class CrossReferenceSource extends HyperlinkTextSource {
	/**
	 * Format used for cross reference source.
	 */
	appliedFormat: CrossReferenceFormat;

	/**
	 * Updates cross reference text source content.
	 */
	update(): void;

}

/**
 * A collection of cross reference text sources.
 */
declare class CrossReferenceSources {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the CrossReferenceSource with the specified index.
	 * @param index The index.
	 */
	[index: number]: CrossReferenceSource;

	/**
	 * Creates a new cross reference text source.
	 * @param source The text or insertion point to create the source.
	 * @param appliedFormat Format used for cross reference source.
	 * @param withProperties Initial values for properties of the new CrossReferenceSource
	 */
	add(source: Text, appliedFormat: CrossReferenceFormat, withProperties: object): CrossReferenceSource;

	/**
	 * Returns any CrossReferenceSource in the collection.
	 */
	anyItem(): CrossReferenceSource;

	/**
	 * Displays the number of elements in the CrossReferenceSource.
	 */
	count(): number;

	/**
	 * Returns every CrossReferenceSource in the collection.
	 */
	everyItem(): CrossReferenceSource[];

	/**
	 * Returns the first CrossReferenceSource in the collection.
	 */
	firstItem(): CrossReferenceSource;

	/**
	 * Returns the CrossReferenceSource with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CrossReferenceSource;

	/**
	 * Returns the CrossReferenceSource with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CrossReferenceSource;

	/**
	 * Returns the CrossReferenceSource with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CrossReferenceSource;

	/**
	 * Returns the CrossReferenceSources within the specified range.
	 * @param from The CrossReferenceSource, index, or name at the beginning of the range.
	 * @param to The CrossReferenceSource, index, or name at the end of the range.
	 */
	itemByRange(from: CrossReferenceSource | number | string, to: CrossReferenceSource | number | string): CrossReferenceSource[];

	/**
	 * Returns the last CrossReferenceSource in the collection.
	 */
	lastItem(): CrossReferenceSource;

	/**
	 * Returns the middle CrossReferenceSource in the collection.
	 */
	middleItem(): CrossReferenceSource;

	/**
	 * Returns the CrossReferenceSource whose index follows the specified CrossReferenceSource in the collection.
	 * @param obj The CrossReferenceSource whose index comes before the desired CrossReferenceSource.
	 */
	nextItem(obj: CrossReferenceSource): CrossReferenceSource;

	/**
	 * Returns the CrossReferenceSource with the index previous to the specified index.
	 * @param obj The index of the CrossReferenceSource that follows the desired CrossReferenceSource.
	 */
	previousItem(obj: CrossReferenceSource): CrossReferenceSource;

	/**
	 * Generates a string which, if executed, will return the CrossReferenceSource.
	 */
	toSource(): string;

}

/**
 * A cross reference building block object.
 */
declare class BuildingBlock {
	/**
	 * Character style to be applied to the building block.
	 */
	appliedCharacterStyle: CharacterStyle;

	/**
	 * Delimiter character for paragraph text and full paragraph building blocks. It is ignored for other types of building blocks.
	 */
	appliedDelimiter: string;

	/**
	 * Type of the building block.
	 */
	blockType: BuildingBlockTypes;

	/**
	 * Building block custom text. Currently this is only useful in custom string building block. It is ignored for other types of building blocks.
	 */
	customText: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, the source generated for the building block includes the delimiter. It is ignored if no delimiter is specified on the building block.
	 */
	includeDelimiter: boolean;

	/**
	 * The index of the BuildingBlock within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the BuildingBlock (a CrossReferenceFormat).
	 */
	readonly parent: CrossReferenceFormat;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): BuildingBlock[];

	/**
	 * Deletes the BuildingBlock.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the BuildingBlock.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of cross reference building blocks.
 */
declare class BuildingBlocks {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the BuildingBlock with the specified index.
	 * @param index The index.
	 */
	[index: number]: BuildingBlock;

	/**
	 * Creates a new cross reference building block.
	 * @param blockType Type of the building block.
	 * @param appliedCharacterStyle Character style to be applied to the building block.
	 * @param customText Building block custom text. Currently this is only useful in custom string building block. It is ignored for other types of building blocks.
	 * @param withProperties Initial values for properties of the new BuildingBlock
	 */
	add(blockType: BuildingBlockTypes, appliedCharacterStyle: CharacterStyle, customText: string, withProperties: object): BuildingBlock;

	/**
	 * Returns any BuildingBlock in the collection.
	 */
	anyItem(): BuildingBlock;

	/**
	 * Displays the number of elements in the BuildingBlock.
	 */
	count(): number;

	/**
	 * Returns every BuildingBlock in the collection.
	 */
	everyItem(): BuildingBlock[];

	/**
	 * Returns the first BuildingBlock in the collection.
	 */
	firstItem(): BuildingBlock;

	/**
	 * Returns the BuildingBlock with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): BuildingBlock;

	/**
	 * Returns the BuildingBlocks within the specified range.
	 * @param from The BuildingBlock, index, or name at the beginning of the range.
	 * @param to The BuildingBlock, index, or name at the end of the range.
	 */
	itemByRange(from: BuildingBlock | number | string, to: BuildingBlock | number | string): BuildingBlock[];

	/**
	 * Returns the last BuildingBlock in the collection.
	 */
	lastItem(): BuildingBlock;

	/**
	 * Returns the middle BuildingBlock in the collection.
	 */
	middleItem(): BuildingBlock;

	/**
	 * Returns the BuildingBlock whose index follows the specified BuildingBlock in the collection.
	 * @param obj The BuildingBlock whose index comes before the desired BuildingBlock.
	 */
	nextItem(obj: BuildingBlock): BuildingBlock;

	/**
	 * Returns the BuildingBlock with the index previous to the specified index.
	 * @param obj The index of the BuildingBlock that follows the desired BuildingBlock.
	 */
	previousItem(obj: BuildingBlock): BuildingBlock;

	/**
	 * Generates a string which, if executed, will return the BuildingBlock.
	 */
	toSource(): string;

}

/**
 * Paragraph destination of a cross reference.
 */
declare class ParagraphDestination extends HyperlinkTextDestination {
}

/**
 * A collection of paragraph destinations.
 */
declare class ParagraphDestinations {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ParagraphDestination with the specified index.
	 * @param index The index.
	 */
	[index: number]: ParagraphDestination;

	/**
	 * Creates a new paragraph destination.
	 * @param destination The text or insertion point inside the paragraph that the cross reference points to. The insertion point is always adjusted to the beginning of the paragraph.
	 * @param withProperties Initial values for properties of the new ParagraphDestination
	 */
	add(destination: Text, withProperties: object): ParagraphDestination;

	/**
	 * Returns any ParagraphDestination in the collection.
	 */
	anyItem(): ParagraphDestination;

	/**
	 * Displays the number of elements in the ParagraphDestination.
	 */
	count(): number;

	/**
	 * Returns every ParagraphDestination in the collection.
	 */
	everyItem(): ParagraphDestination[];

	/**
	 * Returns the first ParagraphDestination in the collection.
	 */
	firstItem(): ParagraphDestination;

	/**
	 * Returns the ParagraphDestination with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ParagraphDestination;

	/**
	 * Returns the ParagraphDestination with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ParagraphDestination;

	/**
	 * Returns the ParagraphDestination with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ParagraphDestination;

	/**
	 * Returns the ParagraphDestinations within the specified range.
	 * @param from The ParagraphDestination, index, or name at the beginning of the range.
	 * @param to The ParagraphDestination, index, or name at the end of the range.
	 */
	itemByRange(from: ParagraphDestination | number | string, to: ParagraphDestination | number | string): ParagraphDestination[];

	/**
	 * Returns the last ParagraphDestination in the collection.
	 */
	lastItem(): ParagraphDestination;

	/**
	 * Returns the middle ParagraphDestination in the collection.
	 */
	middleItem(): ParagraphDestination;

	/**
	 * Returns the ParagraphDestination whose index follows the specified ParagraphDestination in the collection.
	 * @param obj The ParagraphDestination whose index comes before the desired ParagraphDestination.
	 */
	nextItem(obj: ParagraphDestination): ParagraphDestination;

	/**
	 * Returns the ParagraphDestination with the index previous to the specified index.
	 * @param obj The index of the ParagraphDestination that follows the desired ParagraphDestination.
	 */
	previousItem(obj: ParagraphDestination): ParagraphDestination;

	/**
	 * Generates a string which, if executed, will return the ParagraphDestination.
	 */
	toSource(): string;

}

/**
 * An index.
 */
declare class Index {
	/**
	 * The topics in the specified index section.
	 */
	readonly allTopics: Topic[];

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the Index.
	 */
	readonly id: number;

	/**
	 * The index of the Index within its containing object.
	 */
	readonly index: number;

	/**
	 * A collection of index sections.
	 */
	readonly indexSections: IndexSections;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the Index; this is an alias to the Index's label property.
	 */
	name: string;

	/**
	 * The parent of the Index (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of index topics.
	 */
	readonly topics: Topics;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Makes the initial letter for the specified index topic or group of index topics upper case.
	 * @param capitalizationOption The entry or entries to capitalize.
	 */
	capitalize(capitalizationOption?: IndexCapitalizationOptions): void;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Generates a new index story.
	 * @param on The spread or page on which to place the story.
	 * @param placePoint The coordinates of the upper left corner of the story bounding box, in the format [x, y].
	 * @param destinationLayer The layer on which to place the story.
	 * @param autoflowing If true, allows the story to flow onto subsequent pages if the story does not fit on the specified page. If no subsequent pages exist in the document, creates the necessary pages.
	 * @param includeOverset If true, includes topics in overset text in the story.
	 */
	generate(on: Page | Spread | MasterSpread, placePoint: (number | string)[], destinationLayer: Layer, autoflowing?: boolean, includeOverset?: boolean): Story[];

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Index[];

	/**
	 * Imports a list of index topics.
	 * @param from The file from which to import the topics.
	 */
	importTopics(from: File): void;

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Removes all index topics that do not have any index entries.
	 */
	removeUnusedTopics(): void;

	/**
	 * Generates a string which, if executed, will return the Index.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Updates the index preview pane. Note: Does not update the index.
	 */
	update(): void;

}

/**
 * A collection of indexes.
 */
declare class Indexes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Index with the specified index.
	 * @param index The index.
	 */
	[index: number]: Index;

	/**
	 * Creates a new Index.
	 * @param withProperties Initial values for properties of the new Index
	 */
	add(withProperties: object): Index;

	/**
	 * Returns any Index in the collection.
	 */
	anyItem(): Index;

	/**
	 * Displays the number of elements in the Index.
	 */
	count(): number;

	/**
	 * Returns every Index in the collection.
	 */
	everyItem(): Index[];

	/**
	 * Returns the first Index in the collection.
	 */
	firstItem(): Index;

	/**
	 * Returns the Index with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Index;

	/**
	 * Returns the Index with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Index;

	/**
	 * Returns the Index with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Index;

	/**
	 * Returns the Indexes within the specified range.
	 * @param from The Index, index, or name at the beginning of the range.
	 * @param to The Index, index, or name at the end of the range.
	 */
	itemByRange(from: Index | number | string, to: Index | number | string): Index[];

	/**
	 * Returns the last Index in the collection.
	 */
	lastItem(): Index;

	/**
	 * Returns the middle Index in the collection.
	 */
	middleItem(): Index;

	/**
	 * Returns the Index whose index follows the specified Index in the collection.
	 * @param obj The Index whose index comes before the desired Index.
	 */
	nextItem(obj: Index): Index;

	/**
	 * Returns the Index with the index previous to the specified index.
	 * @param obj The index of the Index that follows the desired Index.
	 */
	previousItem(obj: Index): Index;

	/**
	 * Generates a string which, if executed, will return the Index.
	 */
	toSource(): string;

}

/**
 * Index options.
 */
declare class IndexOptions extends Preference {
	/**
	 * The character(s) inserted at the start of cross references.
	 */
	beforeCrossReferenceSeparator: string;

	/**
	 * The character(s) inserted between index entries when runin-style index format is used for nested topics.
	 */
	betweenEntriesSeparator: string;

	/**
	 * The character(s) inserted between separate page numbers, page numbers and page ranges, and series of page ranges.
	 */
	betweenPageNumbersSeparator: string;

	/**
	 * The character style applied to cross references.
	 */
	crossReferenceStyle: CharacterStyle;

	/**
	 * The character style applied to cross reference topics.
	 */
	crossReferenceTopicStyle: CharacterStyle;

	/**
	 * The character(s) inserted at the end of each index entry.
	 */
	entryEndSeparator: string;

	/**
	 * The character(s) inserted after each index topic.
	 */
	followingTopicSeparator: string;

	/**
	 * If true, includes topics and page references from all the documents in a book.
	 */
	includeBookDocuments: boolean;

	/**
	 * If true, displays headings for sections with no index topics. Note: Valid only when include section headings is true.
	 */
	includeEmptyIndexSections: boolean;

	/**
	 * If true, includes topics and page references on hidden layers.
	 */
	includeHiddenEntries: boolean;

	/**
	 * If true, displays the letters of the alphabet as index section headings.
	 */
	includeSectionHeadings: boolean;

	/**
	 * The format for level 2 and lower index topics.
	 */
	indexFormat: IndexFormat;

	/**
	 * The paragraph style applied to level 1 index topics.
	 */
	level1Style: ParagraphStyle;

	/**
	 * The paragraph style applied to level 2 index topics.
	 */
	level2Style: ParagraphStyle;

	/**
	 * The paragraph style applied to level 3 index topics.
	 */
	level3Style: ParagraphStyle;

	/**
	 * The paragraph style applied to level 4 index topics.
	 */
	level4Style: ParagraphStyle;

	/**
	 * The character style applied to page numbers in the index.
	 */
	pageNumberStyle: CharacterStyle;

	/**
	 * The character(s) inserted between page numbers to indicate a page range.
	 */
	pageRangeSeparator: string;

	/**
	 * If true, replaces the content of the existing index. Note: Replaces only index content; does not update the index location or other index properties that may have been changed.
	 */
	replaceExistingIndex: boolean;

	/**
	 * The paragraph style applied to index section headings. Note: Valid when include section headings is true.
	 */
	sectionHeadingStyle: ParagraphStyle;

	/**
	 * The title of the generated index.
	 */
	title: string;

	/**
	 * The paragraph style applied to the title of the generated index.
	 */
	titleStyle: ParagraphStyle | string;

}

/**
 * An index topic.
 */
declare class Topic {
	/**
	 * A collection of index cross references. (For cross references in text, use the 'cross reference source' and 'hyperlink' objects.)
	 */
	readonly crossReferences: CrossReferences;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the Topic within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the Topic.
	 */
	name: string;

	/**
	 * A collection of index page references.
	 */
	readonly pageReferences: PageReferences;

	/**
	 * The parent of the Topic (a IndexSection, Topic or Index).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The string by which the topic is sorted instead of the topic name is not used. Note: The actual topic text, rather than the sort order text, appears in the index.
	 */
	sortOrder: string;

	/**
	 * A collection of index topics.
	 */
	readonly topics: Topics;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Makes the initial letter for the specified index topic or group of index topics upper case.
	 * @param capitalizationOption The entry or entries to capitalize.
	 */
	capitalize(capitalizationOption?: IndexCapitalizationOptions): void;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Topic[];

	/**
	 * Deletes the Topic.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Topic.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of index topics.
 */
declare class Topics {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Topic with the specified index.
	 * @param index The index.
	 */
	[index: number]: Topic;

	/**
	 * Creates a new index topic.
	 * @param name The name of the topic. Note: This is the text that appears in the index.
	 * @param sortBy The string to sort this topic by instead of the topic name. Note: The actual topic text, rather than the sort order text, appears in the index.
	 * @param withProperties Initial values for properties of the new Topic
	 */
	add(name: string, sortBy: string, withProperties: object): Topic;

	/**
	 * Returns any Topic in the collection.
	 */
	anyItem(): Topic;

	/**
	 * Displays the number of elements in the Topic.
	 */
	count(): number;

	/**
	 * Returns every Topic in the collection.
	 */
	everyItem(): Topic[];

	/**
	 * Returns the first Topic in the collection.
	 */
	firstItem(): Topic;

	/**
	 * Returns the Topic with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Topic;

	/**
	 * Returns the Topic with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Topic;

	/**
	 * Returns the Topics within the specified range.
	 * @param from The Topic, index, or name at the beginning of the range.
	 * @param to The Topic, index, or name at the end of the range.
	 */
	itemByRange(from: Topic | number | string, to: Topic | number | string): Topic[];

	/**
	 * Returns the last Topic in the collection.
	 */
	lastItem(): Topic;

	/**
	 * Returns the middle Topic in the collection.
	 */
	middleItem(): Topic;

	/**
	 * Returns the Topic whose index follows the specified Topic in the collection.
	 * @param obj The Topic whose index comes before the desired Topic.
	 */
	nextItem(obj: Topic): Topic;

	/**
	 * Returns the Topic with the index previous to the specified index.
	 * @param obj The index of the Topic that follows the desired Topic.
	 */
	previousItem(obj: Topic): Topic;

	/**
	 * Generates a string which, if executed, will return the Topic.
	 */
	toSource(): string;

}

/**
 * A cross reference to a different index topic. (For cross references in text, use the 'cross reference source' and 'hyperlink' objects.)
 */
declare class CrossReference {
	/**
	 * The text that precedes or follows the referenced topic.
	 */
	crossReferenceType: CrossReferenceType;

	/**
	 * The text used for a custom cross reference type. Note: Valid only for custom cross reference types.
	 */
	customTypeString: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the CrossReference.
	 */
	readonly id: number;

	/**
	 * The index of the CrossReference within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the CrossReference; this is an alias to the CrossReference's label property.
	 */
	name: string;

	/**
	 * The parent of the CrossReference (a Topic).
	 */
	readonly parent: Topic;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The topic to which this CrossReference points.
	 */
	referencedTopic: Topic;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CrossReference[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the CrossReference.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the CrossReference.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of index cross references. (For cross references in text, use the 'cross reference source' and 'hyperlink' objects.)
 */
declare class CrossReferences {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the CrossReference with the specified index.
	 * @param index The index.
	 */
	[index: number]: CrossReference;

	/**
	 * Creates a new cross reference.
	 * @param referencedTopic The topic that the cross reference points to.
	 * @param crossReferenceType The cross reference type.
	 * @param customTypeString The custom string to use in the cross reference. Valid only for custom cross reference types.
	 * @param withProperties Initial values for properties of the new CrossReference
	 */
	add(referencedTopic: Topic, crossReferenceType: CrossReferenceType, customTypeString: string, withProperties: object): CrossReference;

	/**
	 * Returns any CrossReference in the collection.
	 */
	anyItem(): CrossReference;

	/**
	 * Displays the number of elements in the CrossReference.
	 */
	count(): number;

	/**
	 * Returns every CrossReference in the collection.
	 */
	everyItem(): CrossReference[];

	/**
	 * Returns the first CrossReference in the collection.
	 */
	firstItem(): CrossReference;

	/**
	 * Returns the CrossReference with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CrossReference;

	/**
	 * Returns the CrossReference with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CrossReference;

	/**
	 * Returns the CrossReference with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CrossReference;

	/**
	 * Returns the CrossReferences within the specified range.
	 * @param from The CrossReference, index, or name at the beginning of the range.
	 * @param to The CrossReference, index, or name at the end of the range.
	 */
	itemByRange(from: CrossReference | number | string, to: CrossReference | number | string): CrossReference[];

	/**
	 * Returns the last CrossReference in the collection.
	 */
	lastItem(): CrossReference;

	/**
	 * Returns the middle CrossReference in the collection.
	 */
	middleItem(): CrossReference;

	/**
	 * Returns the CrossReference whose index follows the specified CrossReference in the collection.
	 * @param obj The CrossReference whose index comes before the desired CrossReference.
	 */
	nextItem(obj: CrossReference): CrossReference;

	/**
	 * Returns the CrossReference with the index previous to the specified index.
	 * @param obj The index of the CrossReference that follows the desired CrossReference.
	 */
	previousItem(obj: CrossReference): CrossReference;

	/**
	 * Generates a string which, if executed, will return the CrossReference.
	 */
	toSource(): string;

}

/**
 * The page reference for an index topic.
 */
declare class PageReference {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the PageReference.
	 */
	readonly id: number;

	/**
	 * The index of the PageReference within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the PageReference; this is an alias to the PageReference's label property.
	 */
	name: string;

	/**
	 * The character style applied to page numbers.
	 */
	pageNumberStyleOverride: CharacterStyle;

	/**
	 * The paragraph style or number of paragraphs or pages that defines the last page in a page range. Note: Valid only when page reference type specifies the next use of a paragraph style or a number of paragraphs or pages. .
	 */
	pageReferenceLimit: ParagraphStyle | number;

	/**
	 * Options for index page references.
	 */
	pageReferenceType: PageReferenceType;

	/**
	 * The parent of the PageReference (a Topic).
	 */
	readonly parent: Topic;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The hyperlinked text or insertion point.
	 */
	readonly sourceText: Text;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PageReference[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the PageReference.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the PageReference.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of index page references.
 */
declare class PageReferences {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PageReference with the specified index.
	 * @param index The index.
	 */
	[index: number]: PageReference;

	/**
	 * Creates a new page reference.
	 * @param source The text or insertion point to which the page reference points.
	 * @param pageReferenceType The page number for an index page reference or the last page in an index page reference page range.
	 * @param pageReferenceLimit The paragraph style or number of paragraphs or pages that defines the last page in a page range. Valid only when page reference type specifies the next use of a paragraph style or a number of paragraphs or pages. .
	 * @param pageNumberStyleOverride The style override for the page number.
	 * @param withProperties Initial values for properties of the new PageReference
	 */
	add(source: Text, pageReferenceType?: PageReferenceType, pageReferenceLimit?: ParagraphStyle | number, pageNumberStyleOverride?: CharacterStyle, withProperties?: object): PageReference;

	/**
	 * Returns any PageReference in the collection.
	 */
	anyItem(): PageReference;

	/**
	 * Displays the number of elements in the PageReference.
	 */
	count(): number;

	/**
	 * Returns every PageReference in the collection.
	 */
	everyItem(): PageReference[];

	/**
	 * Returns the first PageReference in the collection.
	 */
	firstItem(): PageReference;

	/**
	 * Returns the PageReference with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PageReference;

	/**
	 * Returns the PageReference with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PageReference;

	/**
	 * Returns the PageReference with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PageReference;

	/**
	 * Returns the PageReferences within the specified range.
	 * @param from The PageReference, index, or name at the beginning of the range.
	 * @param to The PageReference, index, or name at the end of the range.
	 */
	itemByRange(from: PageReference | number | string, to: PageReference | number | string): PageReference[];

	/**
	 * Returns the last PageReference in the collection.
	 */
	lastItem(): PageReference;

	/**
	 * Returns the middle PageReference in the collection.
	 */
	middleItem(): PageReference;

	/**
	 * Returns the PageReference whose index follows the specified PageReference in the collection.
	 * @param obj The PageReference whose index comes before the desired PageReference.
	 */
	nextItem(obj: PageReference): PageReference;

	/**
	 * Returns the PageReference with the index previous to the specified index.
	 * @param obj The index of the PageReference that follows the desired PageReference.
	 */
	previousItem(obj: PageReference): PageReference;

	/**
	 * Generates a string which, if executed, will return the PageReference.
	 */
	toSource(): string;

}

/**
 * A section within an index.
 */
declare class IndexSection {
	/**
	 * The topics in the specified index section.
	 */
	readonly allTopics: Topic[];

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the IndexSection.
	 */
	readonly id: number;

	/**
	 * The index of the IndexSection within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the IndexSection.
	 */
	readonly name: string;

	/**
	 * The parent of the IndexSection (a Index).
	 */
	readonly parent: Index;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of index topics.
	 */
	readonly topics: Topics;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): IndexSection[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the IndexSection.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of index sections.
 */
declare class IndexSections {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the IndexSection with the specified index.
	 * @param index The index.
	 */
	[index: number]: IndexSection;

	/**
	 * Returns any IndexSection in the collection.
	 */
	anyItem(): IndexSection;

	/**
	 * Displays the number of elements in the IndexSection.
	 */
	count(): number;

	/**
	 * Returns every IndexSection in the collection.
	 */
	everyItem(): IndexSection[];

	/**
	 * Returns the first IndexSection in the collection.
	 */
	firstItem(): IndexSection;

	/**
	 * Returns the IndexSection with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): IndexSection;

	/**
	 * Returns the IndexSection with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): IndexSection;

	/**
	 * Returns the IndexSection with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): IndexSection;

	/**
	 * Returns the IndexSections within the specified range.
	 * @param from The IndexSection, index, or name at the beginning of the range.
	 * @param to The IndexSection, index, or name at the end of the range.
	 */
	itemByRange(from: IndexSection | number | string, to: IndexSection | number | string): IndexSection[];

	/**
	 * Returns the last IndexSection in the collection.
	 */
	lastItem(): IndexSection;

	/**
	 * Returns the middle IndexSection in the collection.
	 */
	middleItem(): IndexSection;

	/**
	 * Returns the IndexSection whose index follows the specified IndexSection in the collection.
	 * @param obj The IndexSection whose index comes before the desired IndexSection.
	 */
	nextItem(obj: IndexSection): IndexSection;

	/**
	 * Returns the IndexSection with the index previous to the specified index.
	 * @param obj The index of the IndexSection that follows the desired IndexSection.
	 */
	previousItem(obj: IndexSection): IndexSection;

	/**
	 * Generates a string which, if executed, will return the IndexSection.
	 */
	toSource(): string;

}

/**
 * A form field.
 */
declare class FormField extends PageItem {
	/**
	 * The index of the active state in the object's states collection.
	 */
	activeStateIndex: number;

	/**
	 * Anchored object settings.
	 */
	readonly anchoredObjectSettings: AnchoredObjectSetting;

	/**
	 * The description of the FormField.
	 */
	description: string;

}

/**
 * A collection of form fields.
 */
declare class FormFields {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the FormField with the specified index.
	 * @param index The index.
	 */
	[index: number]: FormField;

	/**
	 * Creates a new FormField
	 * @param layer The layer on which to create the FormField.
	 * @param at The location at which to insert the FormField relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new FormField
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): FormField;

	/**
	 * Returns any FormField in the collection.
	 */
	anyItem(): FormField;

	/**
	 * Displays the number of elements in the FormField.
	 */
	count(): number;

	/**
	 * Returns every FormField in the collection.
	 */
	everyItem(): FormField[];

	/**
	 * Returns the first FormField in the collection.
	 */
	firstItem(): FormField;

	/**
	 * Returns the FormField with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): FormField;

	/**
	 * Returns the FormField with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): FormField;

	/**
	 * Returns the FormField with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): FormField;

	/**
	 * Returns the FormFields within the specified range.
	 * @param from The FormField, index, or name at the beginning of the range.
	 * @param to The FormField, index, or name at the end of the range.
	 */
	itemByRange(from: FormField | number | string, to: FormField | number | string): FormField[];

	/**
	 * Returns the last FormField in the collection.
	 */
	lastItem(): FormField;

	/**
	 * Returns the middle FormField in the collection.
	 */
	middleItem(): FormField;

	/**
	 * Returns the FormField whose index follows the specified FormField in the collection.
	 * @param obj The FormField whose index comes before the desired FormField.
	 */
	nextItem(obj: FormField): FormField;

	/**
	 * Returns the FormField with the index previous to the specified index.
	 * @param obj The index of the FormField that follows the desired FormField.
	 */
	previousItem(obj: FormField): FormField;

	/**
	 * Generates a string which, if executed, will return the FormField.
	 */
	toSource(): string;

}

/**
 * A button.
 */
declare class Button extends FormField {
	/**
	 * A collection of animation behaviors.
	 */
	readonly animationBehaviors: AnimationBehaviors;

	/**
	 * A collection of behavior objects.
	 */
	readonly behaviors: Behaviors;

	/**
	 * A collection of clear form behavior objects.
	 */
	readonly clearFormBehaviors: ClearFormBehaviors;

	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * A collection of EPS files.
	 */
	readonly epss: EPSs;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of goto anchor behavior objects.
	 */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;

	/**
	 * A collection of goto first page behavior objects.
	 */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;

	/**
	 * A collection of goto last page behavior objects.
	 */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;

	/**
	 * A collection of goto next page behavior objects.
	 */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;

	/**
	 * A collection of goto next state behaviors.
	 */
	readonly gotoNextStateBehaviors: GotoNextStateBehaviors;

	/**
	 * A collection of goto next view behavior objects.
	 */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;

	/**
	 * A collection of go to page behavior objects.
	 */
	readonly gotoPageBehaviors: GotoPageBehaviors;

	/**
	 * A collection of goto previous page behavior objects.
	 */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;

	/**
	 * A collection of goto previous state behaviors.
	 */
	readonly gotoPreviousStateBehaviors: GotoPreviousStateBehaviors;

	/**
	 * A collection of goto previous view behavior objects.
	 */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;

	/**
	 * A collection of goto state behaviors.
	 */
	readonly gotoStateBehaviors: GotoStateBehaviors;

	/**
	 * A collection of goto URL behavior objects.
	 */
	readonly gotoURLBehaviors: GotoURLBehaviors;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * A collection of movie behavior objects.
	 */
	readonly movieBehaviors: MovieBehaviors;

	/**
	 * A collection of open file behavior objects.
	 */
	readonly openFileBehaviors: OpenFileBehaviors;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of paths.
	 */
	readonly paths: Paths;

	/**
	 * A collection of PDF files.
	 */
	readonly pdfs: PDFs;

	/**
	 * A collection of PICT graphics.
	 */
	readonly picts: PICTs;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of print form behavior objects.
	 */
	readonly printFormBehaviors: PrintFormBehaviors;

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;

	/**
	 * A collection of sound behavior objects.
	 */
	readonly soundBehaviors: SoundBehaviors;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of states.
	 */
	readonly states: States;

	/**
	 * A collection of submit form behavior objects.
	 */
	readonly submitFormBehaviors: SubmitFormBehaviors;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of view zoom behavior objects.
	 */
	readonly viewZoomBehaviors: ViewZoomBehaviors;

	/**
	 * A collection of WMF graphics.
	 */
	readonly wmfs: WMFs;

	/**
	 * Brings the Button forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the Button to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void;

	/**
	 * Sends the Button back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the Button to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

}

/**
 * A collection of buttons.
 */
declare class Buttons {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Button with the specified index.
	 * @param index The index.
	 */
	[index: number]: Button;

	/**
	 * Creates a new Button
	 * @param layer The layer on which to create the Button.
	 * @param at The location at which to insert the Button relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Button
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Button;

	/**
	 * Returns any Button in the collection.
	 */
	anyItem(): Button;

	/**
	 * Displays the number of elements in the Button.
	 */
	count(): number;

	/**
	 * Returns every Button in the collection.
	 */
	everyItem(): Button[];

	/**
	 * Returns the first Button in the collection.
	 */
	firstItem(): Button;

	/**
	 * Returns the Button with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Button;

	/**
	 * Returns the Button with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Button;

	/**
	 * Returns the Button with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Button;

	/**
	 * Returns the Buttons within the specified range.
	 * @param from The Button, index, or name at the beginning of the range.
	 * @param to The Button, index, or name at the end of the range.
	 */
	itemByRange(from: Button | number | string, to: Button | number | string): Button[];

	/**
	 * Returns the last Button in the collection.
	 */
	lastItem(): Button;

	/**
	 * Returns the middle Button in the collection.
	 */
	middleItem(): Button;

	/**
	 * Returns the Button whose index follows the specified Button in the collection.
	 * @param obj The Button whose index comes before the desired Button.
	 */
	nextItem(obj: Button): Button;

	/**
	 * Returns the Button with the index previous to the specified index.
	 * @param obj The index of the Button that follows the desired Button.
	 */
	previousItem(obj: Button): Button;

	/**
	 * Generates a string which, if executed, will return the Button.
	 */
	toSource(): string;

}

/**
 * A state (states define the display of the field in an exported PDF or SWF).
 */
declare class State {
	/**
	 * If true, the state is active in the exported PDF.
	 */
	active: boolean;

	/**
	 * If true, the state is enabled in PDF documents.
	 */
	enabled: boolean;

	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * A collection of EPS files.
	 */
	readonly epss: EPSs;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * The unique ID of the State.
	 */
	readonly id: number;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * The index of the State within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the State.
	 */
	name: string;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * The parent of the State (a Button, MultiStateObject, CheckBox or RadioButton).
	 */
	readonly parent: any;

	/**
	 * A collection of PDF files.
	 */
	readonly pdfs: PDFs;

	/**
	 * A collection of PICT graphics.
	 */
	readonly picts: PICTs;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * For a button, the type of user action that dictates the object's appearance. For a MultiStateObject, which has no user actions associated with states, this property is a numeric value uniquely identifying the state.
	 */
	statetype: StateTypes | number;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of WMF graphics.
	 */
	readonly wmfs: WMFs;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Adds page items to this state.
	 * @param pageitems One or more page items to add to this state.
	 */
	addItemsToState(pageitems: PageItem[]): void;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): State[];

	/**
	 * Moves the state to a new position in its parent collection.
	 * @param newPosition the index to move the state to in its parent collection
	 */
	move(newPosition: number): void;

	/**
	 * Releases this state's appearance as a page item, removing the state from its parent object.
	 */
	releaseAsObject(): void;

	/**
	 * Deletes the State.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the State.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of states.
 */
declare class States {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the State with the specified index.
	 * @param index The index.
	 */
	[index: number]: State;

	/**
	 * Creates a new State.
	 * @param withProperties Initial values for properties of the new State
	 */
	add(withProperties: object): State;

	/**
	 * Returns any State in the collection.
	 */
	anyItem(): State;

	/**
	 * Displays the number of elements in the State.
	 */
	count(): number;

	/**
	 * Returns every State in the collection.
	 */
	everyItem(): State[];

	/**
	 * Returns the first State in the collection.
	 */
	firstItem(): State;

	/**
	 * Returns the State with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): State;

	/**
	 * Returns the State with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): State;

	/**
	 * Returns the State with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): State;

	/**
	 * Returns the States within the specified range.
	 * @param from The State, index, or name at the beginning of the range.
	 * @param to The State, index, or name at the end of the range.
	 */
	itemByRange(from: State | number | string, to: State | number | string): State[];

	/**
	 * Returns the last State in the collection.
	 */
	lastItem(): State;

	/**
	 * Returns the middle State in the collection.
	 */
	middleItem(): State;

	/**
	 * Returns the State whose index follows the specified State in the collection.
	 * @param obj The State whose index comes before the desired State.
	 */
	nextItem(obj: State): State;

	/**
	 * Returns the State with the index previous to the specified index.
	 * @param obj The index of the State that follows the desired State.
	 */
	previousItem(obj: State): State;

	/**
	 * Generates a string which, if executed, will return the State.
	 */
	toSource(): string;

}

/**
 * A multi-state object.
 */
declare class MultiStateObject extends FormField {
	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * A collection of EPS files.
	 */
	readonly epss: EPSs;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * Determines if this object is initially hidden when displayed in an exported SWF file.
	 */
	initiallyHidden: boolean;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of paths.
	 */
	readonly paths: Paths;

	/**
	 * A collection of PDF files.
	 */
	readonly pdfs: PDFs;

	/**
	 * A collection of PICT graphics.
	 */
	readonly picts: PICTs;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of states.
	 */
	readonly states: States;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of WMF graphics.
	 */
	readonly wmfs: WMFs;

	/**
	 * Adds items to a specific appearance state of this object.
	 * @param pageitems One or more page items to add as a state.
	 */
	addItemsAsState(pageitems: PageItem[]): void;

	/**
	 * Brings the MultiStateObject forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the MultiStateObject to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Releases all the states associated with this object and then destroys the parent object.
	 */
	releaseAsObjects(): void;

	/**
	 * Sends the MultiStateObject back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the MultiStateObject to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

}

/**
 * A collection of multi-state objects.
 */
declare class MultiStateObjects {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MultiStateObject with the specified index.
	 * @param index The index.
	 */
	[index: number]: MultiStateObject;

	/**
	 * Creates a new MultiStateObject
	 * @param layer The layer on which to create the MultiStateObject.
	 * @param at The location at which to insert the MultiStateObject relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new MultiStateObject
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): MultiStateObject;

	/**
	 * Returns any MultiStateObject in the collection.
	 */
	anyItem(): MultiStateObject;

	/**
	 * Displays the number of elements in the MultiStateObject.
	 */
	count(): number;

	/**
	 * Returns every MultiStateObject in the collection.
	 */
	everyItem(): MultiStateObject[];

	/**
	 * Returns the first MultiStateObject in the collection.
	 */
	firstItem(): MultiStateObject;

	/**
	 * Returns the MultiStateObject with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MultiStateObject;

	/**
	 * Returns the MultiStateObject with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MultiStateObject;

	/**
	 * Returns the MultiStateObject with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MultiStateObject;

	/**
	 * Returns the MultiStateObjects within the specified range.
	 * @param from The MultiStateObject, index, or name at the beginning of the range.
	 * @param to The MultiStateObject, index, or name at the end of the range.
	 */
	itemByRange(from: MultiStateObject | number | string, to: MultiStateObject | number | string): MultiStateObject[];

	/**
	 * Returns the last MultiStateObject in the collection.
	 */
	lastItem(): MultiStateObject;

	/**
	 * Returns the middle MultiStateObject in the collection.
	 */
	middleItem(): MultiStateObject;

	/**
	 * Returns the MultiStateObject whose index follows the specified MultiStateObject in the collection.
	 * @param obj The MultiStateObject whose index comes before the desired MultiStateObject.
	 */
	nextItem(obj: MultiStateObject): MultiStateObject;

	/**
	 * Returns the MultiStateObject with the index previous to the specified index.
	 * @param obj The index of the MultiStateObject that follows the desired MultiStateObject.
	 */
	previousItem(obj: MultiStateObject): MultiStateObject;

	/**
	 * Generates a string which, if executed, will return the MultiStateObject.
	 */
	toSource(): string;

}

/**
 * A checkbox.
 */
declare class CheckBox extends FormField {
	/**
	 * A collection of behavior objects.
	 */
	readonly behaviors: Behaviors;

	/**
	 * If true, the check box/radio button is selected by default in the exported PDF.
	 */
	checkedByDefault: boolean;

	/**
	 * A collection of clear form behavior objects.
	 */
	readonly clearFormBehaviors: ClearFormBehaviors;

	/**
	 * A collection of EPS files.
	 */
	readonly epss: EPSs;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * Export value for the check box/radio button in the exported PDF.
	 */
	exportValue: string;

	/**
	 * A collection of goto anchor behavior objects.
	 */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;

	/**
	 * A collection of goto first page behavior objects.
	 */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;

	/**
	 * A collection of goto last page behavior objects.
	 */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;

	/**
	 * A collection of goto next page behavior objects.
	 */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;

	/**
	 * A collection of goto next view behavior objects.
	 */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;

	/**
	 * A collection of goto previous page behavior objects.
	 */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;

	/**
	 * A collection of goto previous view behavior objects.
	 */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;

	/**
	 * A collection of goto URL behavior objects.
	 */
	readonly gotoURLBehaviors: GotoURLBehaviors;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * A collection of movie behavior objects.
	 */
	readonly movieBehaviors: MovieBehaviors;

	/**
	 * A collection of open file behavior objects.
	 */
	readonly openFileBehaviors: OpenFileBehaviors;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of PDF files.
	 */
	readonly pdfs: PDFs;

	/**
	 * A collection of PICT graphics.
	 */
	readonly picts: PICTs;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of print form behavior objects.
	 */
	readonly printFormBehaviors: PrintFormBehaviors;

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean;

	/**
	 * If true, the form field is read only in the exported PDF.
	 */
	readOnly: boolean;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * If true, the form field is required in the exported PDF.
	 */
	required: boolean;

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;

	/**
	 * A collection of sound behavior objects.
	 */
	readonly soundBehaviors: SoundBehaviors;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of states.
	 */
	readonly states: States;

	/**
	 * A collection of submit form behavior objects.
	 */
	readonly submitFormBehaviors: SubmitFormBehaviors;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of view zoom behavior objects.
	 */
	readonly viewZoomBehaviors: ViewZoomBehaviors;

	/**
	 * A collection of WMF graphics.
	 */
	readonly wmfs: WMFs;

	/**
	 * Brings the CheckBox forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the CheckBox to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void;

	/**
	 * Sends the CheckBox back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the CheckBox to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

}

/**
 * A collection of checkboxes.
 */
declare class CheckBoxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the CheckBox with the specified index.
	 * @param index The index.
	 */
	[index: number]: CheckBox;

	/**
	 * Creates a new CheckBox
	 * @param layer The layer on which to create the CheckBox.
	 * @param at The location at which to insert the CheckBox relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new CheckBox
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): CheckBox;

	/**
	 * Returns any CheckBox in the collection.
	 */
	anyItem(): CheckBox;

	/**
	 * Displays the number of elements in the CheckBox.
	 */
	count(): number;

	/**
	 * Returns every CheckBox in the collection.
	 */
	everyItem(): CheckBox[];

	/**
	 * Returns the first CheckBox in the collection.
	 */
	firstItem(): CheckBox;

	/**
	 * Returns the CheckBox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CheckBox;

	/**
	 * Returns the CheckBox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CheckBox;

	/**
	 * Returns the CheckBox with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CheckBox;

	/**
	 * Returns the CheckBoxes within the specified range.
	 * @param from The CheckBox, index, or name at the beginning of the range.
	 * @param to The CheckBox, index, or name at the end of the range.
	 */
	itemByRange(from: CheckBox | number | string, to: CheckBox | number | string): CheckBox[];

	/**
	 * Returns the last CheckBox in the collection.
	 */
	lastItem(): CheckBox;

	/**
	 * Returns the middle CheckBox in the collection.
	 */
	middleItem(): CheckBox;

	/**
	 * Returns the CheckBox whose index follows the specified CheckBox in the collection.
	 * @param obj The CheckBox whose index comes before the desired CheckBox.
	 */
	nextItem(obj: CheckBox): CheckBox;

	/**
	 * Returns the CheckBox with the index previous to the specified index.
	 * @param obj The index of the CheckBox that follows the desired CheckBox.
	 */
	previousItem(obj: CheckBox): CheckBox;

	/**
	 * Generates a string which, if executed, will return the CheckBox.
	 */
	toSource(): string;

}

/**
 * A combobox.
 */
declare class ComboBox extends FormField {
	/**
	 * The font family for the form field in the exported PDF.
	 */
	appliedFont: string;

	/**
	 * A collection of behavior objects.
	 */
	readonly behaviors: Behaviors;

	/**
	 * The list of choices for combo and list boxes in the exported PDF.
	 */
	choiceList: string[];

	/**
	 * A collection of clear form behavior objects.
	 */
	readonly clearFormBehaviors: ClearFormBehaviors;

	/**
	 * A collection of EPS files.
	 */
	readonly epss: EPSs;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * The font size for the form field in the exported PDF.
	 */
	fontSize: number;

	/**
	 * The font style for the form field in the exported PDF.
	 */
	fontStyle: string;

	/**
	 * A collection of goto anchor behavior objects.
	 */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;

	/**
	 * A collection of goto first page behavior objects.
	 */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;

	/**
	 * A collection of goto last page behavior objects.
	 */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;

	/**
	 * A collection of goto next page behavior objects.
	 */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;

	/**
	 * A collection of goto next view behavior objects.
	 */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;

	/**
	 * A collection of goto previous page behavior objects.
	 */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;

	/**
	 * A collection of goto previous view behavior objects.
	 */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;

	/**
	 * A collection of goto URL behavior objects.
	 */
	readonly gotoURLBehaviors: GotoURLBehaviors;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * A collection of movie behavior objects.
	 */
	readonly movieBehaviors: MovieBehaviors;

	/**
	 * A collection of open file behavior objects.
	 */
	readonly openFileBehaviors: OpenFileBehaviors;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of PDF files.
	 */
	readonly pdfs: PDFs;

	/**
	 * A collection of PICT graphics.
	 */
	readonly picts: PICTs;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of print form behavior objects.
	 */
	readonly printFormBehaviors: PrintFormBehaviors;

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean;

	/**
	 * If true, the form field is read only in the exported PDF.
	 */
	readOnly: boolean;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * If true, the form field is required in the exported PDF.
	 */
	required: boolean;

	/**
	 * If true, the form field has right to left text enabled in the exported PDF.
	 */
	rightToLeftField: boolean;

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;

	/**
	 * If true, the choices would be sorted in the exported PDF.
	 */
	sortChoices: boolean;

	/**
	 * A collection of sound behavior objects.
	 */
	readonly soundBehaviors: SoundBehaviors;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of submit form behavior objects.
	 */
	readonly submitFormBehaviors: SubmitFormBehaviors;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of view zoom behavior objects.
	 */
	readonly viewZoomBehaviors: ViewZoomBehaviors;

	/**
	 * A collection of WMF graphics.
	 */
	readonly wmfs: WMFs;

	/**
	 * Brings the ComboBox forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the ComboBox to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void;

	/**
	 * Sends the ComboBox back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the ComboBox to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

}

/**
 * A collection of comboboxes.
 */
declare class ComboBoxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ComboBox with the specified index.
	 * @param index The index.
	 */
	[index: number]: ComboBox;

	/**
	 * Creates a new ComboBox
	 * @param layer The layer on which to create the ComboBox.
	 * @param at The location at which to insert the ComboBox relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new ComboBox
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): ComboBox;

	/**
	 * Returns any ComboBox in the collection.
	 */
	anyItem(): ComboBox;

	/**
	 * Displays the number of elements in the ComboBox.
	 */
	count(): number;

	/**
	 * Returns every ComboBox in the collection.
	 */
	everyItem(): ComboBox[];

	/**
	 * Returns the first ComboBox in the collection.
	 */
	firstItem(): ComboBox;

	/**
	 * Returns the ComboBox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ComboBox;

	/**
	 * Returns the ComboBox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ComboBox;

	/**
	 * Returns the ComboBox with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ComboBox;

	/**
	 * Returns the ComboBoxes within the specified range.
	 * @param from The ComboBox, index, or name at the beginning of the range.
	 * @param to The ComboBox, index, or name at the end of the range.
	 */
	itemByRange(from: ComboBox | number | string, to: ComboBox | number | string): ComboBox[];

	/**
	 * Returns the last ComboBox in the collection.
	 */
	lastItem(): ComboBox;

	/**
	 * Returns the middle ComboBox in the collection.
	 */
	middleItem(): ComboBox;

	/**
	 * Returns the ComboBox whose index follows the specified ComboBox in the collection.
	 * @param obj The ComboBox whose index comes before the desired ComboBox.
	 */
	nextItem(obj: ComboBox): ComboBox;

	/**
	 * Returns the ComboBox with the index previous to the specified index.
	 * @param obj The index of the ComboBox that follows the desired ComboBox.
	 */
	previousItem(obj: ComboBox): ComboBox;

	/**
	 * Generates a string which, if executed, will return the ComboBox.
	 */
	toSource(): string;

}

/**
 * A listbox.
 */
declare class ListBox extends FormField {
	/**
	 * The font family for the form field in the exported PDF.
	 */
	appliedFont: string;

	/**
	 * A collection of behavior objects.
	 */
	readonly behaviors: Behaviors;

	/**
	 * The list of choices for combo and list boxes in the exported PDF.
	 */
	choiceList: string[];

	/**
	 * A collection of clear form behavior objects.
	 */
	readonly clearFormBehaviors: ClearFormBehaviors;

	/**
	 * A collection of EPS files.
	 */
	readonly epss: EPSs;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * The font size for the form field in the exported PDF.
	 */
	fontSize: number;

	/**
	 * The font style for the form field in the exported PDF.
	 */
	fontStyle: string;

	/**
	 * A collection of goto anchor behavior objects.
	 */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;

	/**
	 * A collection of goto first page behavior objects.
	 */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;

	/**
	 * A collection of goto last page behavior objects.
	 */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;

	/**
	 * A collection of goto next page behavior objects.
	 */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;

	/**
	 * A collection of goto next view behavior objects.
	 */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;

	/**
	 * A collection of goto previous page behavior objects.
	 */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;

	/**
	 * A collection of goto previous view behavior objects.
	 */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;

	/**
	 * A collection of goto URL behavior objects.
	 */
	readonly gotoURLBehaviors: GotoURLBehaviors;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * A collection of movie behavior objects.
	 */
	readonly movieBehaviors: MovieBehaviors;

	/**
	 * If true, the list box can have multiple items selected simultaneously in the exported PDF.
	 */
	multipleSelection: boolean;

	/**
	 * A collection of open file behavior objects.
	 */
	readonly openFileBehaviors: OpenFileBehaviors;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of PDF files.
	 */
	readonly pdfs: PDFs;

	/**
	 * A collection of PICT graphics.
	 */
	readonly picts: PICTs;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of print form behavior objects.
	 */
	readonly printFormBehaviors: PrintFormBehaviors;

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean;

	/**
	 * If true, the form field is read only in the exported PDF.
	 */
	readOnly: boolean;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * If true, the form field is required in the exported PDF.
	 */
	required: boolean;

	/**
	 * If true, the form field has right to left text enabled in the exported PDF.
	 */
	rightToLeftField: boolean;

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;

	/**
	 * If true, the choices would be sorted in the exported PDF.
	 */
	sortChoices: boolean;

	/**
	 * A collection of sound behavior objects.
	 */
	readonly soundBehaviors: SoundBehaviors;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of submit form behavior objects.
	 */
	readonly submitFormBehaviors: SubmitFormBehaviors;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of view zoom behavior objects.
	 */
	readonly viewZoomBehaviors: ViewZoomBehaviors;

	/**
	 * A collection of WMF graphics.
	 */
	readonly wmfs: WMFs;

	/**
	 * Brings the ListBox forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the ListBox to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void;

	/**
	 * Sends the ListBox back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the ListBox to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

}

/**
 * A collection of listboxes.
 */
declare class ListBoxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ListBox with the specified index.
	 * @param index The index.
	 */
	[index: number]: ListBox;

	/**
	 * Creates a new ListBox
	 * @param layer The layer on which to create the ListBox.
	 * @param at The location at which to insert the ListBox relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new ListBox
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): ListBox;

	/**
	 * Returns any ListBox in the collection.
	 */
	anyItem(): ListBox;

	/**
	 * Displays the number of elements in the ListBox.
	 */
	count(): number;

	/**
	 * Returns every ListBox in the collection.
	 */
	everyItem(): ListBox[];

	/**
	 * Returns the first ListBox in the collection.
	 */
	firstItem(): ListBox;

	/**
	 * Returns the ListBox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ListBox;

	/**
	 * Returns the ListBox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ListBox;

	/**
	 * Returns the ListBox with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ListBox;

	/**
	 * Returns the ListBoxes within the specified range.
	 * @param from The ListBox, index, or name at the beginning of the range.
	 * @param to The ListBox, index, or name at the end of the range.
	 */
	itemByRange(from: ListBox | number | string, to: ListBox | number | string): ListBox[];

	/**
	 * Returns the last ListBox in the collection.
	 */
	lastItem(): ListBox;

	/**
	 * Returns the middle ListBox in the collection.
	 */
	middleItem(): ListBox;

	/**
	 * Returns the ListBox whose index follows the specified ListBox in the collection.
	 * @param obj The ListBox whose index comes before the desired ListBox.
	 */
	nextItem(obj: ListBox): ListBox;

	/**
	 * Returns the ListBox with the index previous to the specified index.
	 * @param obj The index of the ListBox that follows the desired ListBox.
	 */
	previousItem(obj: ListBox): ListBox;

	/**
	 * Generates a string which, if executed, will return the ListBox.
	 */
	toSource(): string;

}

/**
 * A radio button.
 */
declare class RadioButton extends FormField {
	/**
	 * A collection of behavior objects.
	 */
	readonly behaviors: Behaviors;

	/**
	 * If true, the check box/radio button is selected by default in the exported PDF.
	 */
	checkedByDefault: boolean;

	/**
	 * A collection of clear form behavior objects.
	 */
	readonly clearFormBehaviors: ClearFormBehaviors;

	/**
	 * A collection of EPS files.
	 */
	readonly epss: EPSs;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * Export value for the check box/radio button in the exported PDF.
	 */
	exportValue: string;

	/**
	 * A collection of goto anchor behavior objects.
	 */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;

	/**
	 * A collection of goto first page behavior objects.
	 */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;

	/**
	 * A collection of goto last page behavior objects.
	 */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;

	/**
	 * A collection of goto next page behavior objects.
	 */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;

	/**
	 * A collection of goto next view behavior objects.
	 */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;

	/**
	 * A collection of goto previous page behavior objects.
	 */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;

	/**
	 * A collection of goto previous view behavior objects.
	 */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;

	/**
	 * A collection of goto URL behavior objects.
	 */
	readonly gotoURLBehaviors: GotoURLBehaviors;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * A collection of movie behavior objects.
	 */
	readonly movieBehaviors: MovieBehaviors;

	/**
	 * A collection of open file behavior objects.
	 */
	readonly openFileBehaviors: OpenFileBehaviors;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of PDF files.
	 */
	readonly pdfs: PDFs;

	/**
	 * A collection of PICT graphics.
	 */
	readonly picts: PICTs;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of print form behavior objects.
	 */
	readonly printFormBehaviors: PrintFormBehaviors;

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean;

	/**
	 * If true, the form field is read only in the exported PDF.
	 */
	readOnly: boolean;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * If true, the form field is required in the exported PDF.
	 */
	required: boolean;

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;

	/**
	 * A collection of sound behavior objects.
	 */
	readonly soundBehaviors: SoundBehaviors;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of states.
	 */
	readonly states: States;

	/**
	 * A collection of submit form behavior objects.
	 */
	readonly submitFormBehaviors: SubmitFormBehaviors;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of view zoom behavior objects.
	 */
	readonly viewZoomBehaviors: ViewZoomBehaviors;

	/**
	 * A collection of WMF graphics.
	 */
	readonly wmfs: WMFs;

	/**
	 * Brings the RadioButton forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the RadioButton to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void;

	/**
	 * Sends the RadioButton back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the RadioButton to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

}

/**
 * A collection of radio buttons.
 */
declare class RadioButtons {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the RadioButton with the specified index.
	 * @param index The index.
	 */
	[index: number]: RadioButton;

	/**
	 * Creates a new RadioButton
	 * @param layer The layer on which to create the RadioButton.
	 * @param at The location at which to insert the RadioButton relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new RadioButton
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): RadioButton;

	/**
	 * Returns any RadioButton in the collection.
	 */
	anyItem(): RadioButton;

	/**
	 * Displays the number of elements in the RadioButton.
	 */
	count(): number;

	/**
	 * Returns every RadioButton in the collection.
	 */
	everyItem(): RadioButton[];

	/**
	 * Returns the first RadioButton in the collection.
	 */
	firstItem(): RadioButton;

	/**
	 * Returns the RadioButton with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): RadioButton;

	/**
	 * Returns the RadioButton with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): RadioButton;

	/**
	 * Returns the RadioButton with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): RadioButton;

	/**
	 * Returns the RadioButtons within the specified range.
	 * @param from The RadioButton, index, or name at the beginning of the range.
	 * @param to The RadioButton, index, or name at the end of the range.
	 */
	itemByRange(from: RadioButton | number | string, to: RadioButton | number | string): RadioButton[];

	/**
	 * Returns the last RadioButton in the collection.
	 */
	lastItem(): RadioButton;

	/**
	 * Returns the middle RadioButton in the collection.
	 */
	middleItem(): RadioButton;

	/**
	 * Returns the RadioButton whose index follows the specified RadioButton in the collection.
	 * @param obj The RadioButton whose index comes before the desired RadioButton.
	 */
	nextItem(obj: RadioButton): RadioButton;

	/**
	 * Returns the RadioButton with the index previous to the specified index.
	 * @param obj The index of the RadioButton that follows the desired RadioButton.
	 */
	previousItem(obj: RadioButton): RadioButton;

	/**
	 * Generates a string which, if executed, will return the RadioButton.
	 */
	toSource(): string;

}

/**
 * A text box.
 */
declare class TextBox extends FormField {
	/**
	 * The font family for the form field in the exported PDF.
	 */
	appliedFont: string;

	/**
	 * A collection of behavior objects.
	 */
	readonly behaviors: Behaviors;

	/**
	 * A collection of clear form behavior objects.
	 */
	readonly clearFormBehaviors: ClearFormBehaviors;

	/**
	 * A collection of EPS files.
	 */
	readonly epss: EPSs;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * The font size for the form field in the exported PDF.
	 */
	fontSize: number;

	/**
	 * The font style for the form field in the exported PDF.
	 */
	fontStyle: string;

	/**
	 * A collection of goto anchor behavior objects.
	 */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;

	/**
	 * A collection of goto first page behavior objects.
	 */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;

	/**
	 * A collection of goto last page behavior objects.
	 */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;

	/**
	 * A collection of goto next page behavior objects.
	 */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;

	/**
	 * A collection of goto next view behavior objects.
	 */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;

	/**
	 * A collection of goto previous page behavior objects.
	 */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;

	/**
	 * A collection of goto previous view behavior objects.
	 */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;

	/**
	 * A collection of goto URL behavior objects.
	 */
	readonly gotoURLBehaviors: GotoURLBehaviors;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * A collection of movie behavior objects.
	 */
	readonly movieBehaviors: MovieBehaviors;

	/**
	 * If true, the text field is multiline in the exported PDF.
	 */
	multiline: boolean;

	/**
	 * A collection of open file behavior objects.
	 */
	readonly openFileBehaviors: OpenFileBehaviors;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * If true, the text field is a password field in the exported PDF.
	 */
	password: boolean;

	/**
	 * A collection of PDF files.
	 */
	readonly pdfs: PDFs;

	/**
	 * A collection of PICT graphics.
	 */
	readonly picts: PICTs;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of print form behavior objects.
	 */
	readonly printFormBehaviors: PrintFormBehaviors;

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean;

	/**
	 * If true, the form field is read only in the exported PDF.
	 */
	readOnly: boolean;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * If true, the form field is required in the exported PDF.
	 */
	required: boolean;

	/**
	 * If true, the form field has right to left text enabled in the exported PDF.
	 */
	rightToLeftField: boolean;

	/**
	 * If true, the text field is scrollable in the exported PDF.
	 */
	scrollable: boolean;

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;

	/**
	 * A collection of sound behavior objects.
	 */
	readonly soundBehaviors: SoundBehaviors;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of submit form behavior objects.
	 */
	readonly submitFormBehaviors: SubmitFormBehaviors;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of view zoom behavior objects.
	 */
	readonly viewZoomBehaviors: ViewZoomBehaviors;

	/**
	 * A collection of WMF graphics.
	 */
	readonly wmfs: WMFs;

	/**
	 * Brings the TextBox forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the TextBox to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void;

	/**
	 * Sends the TextBox back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the TextBox to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

}

/**
 * A collection of text boxes.
 */
declare class TextBoxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TextBox with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextBox;

	/**
	 * Creates a new TextBox
	 * @param layer The layer on which to create the TextBox.
	 * @param at The location at which to insert the TextBox relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new TextBox
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): TextBox;

	/**
	 * Returns any TextBox in the collection.
	 */
	anyItem(): TextBox;

	/**
	 * Displays the number of elements in the TextBox.
	 */
	count(): number;

	/**
	 * Returns every TextBox in the collection.
	 */
	everyItem(): TextBox[];

	/**
	 * Returns the first TextBox in the collection.
	 */
	firstItem(): TextBox;

	/**
	 * Returns the TextBox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextBox;

	/**
	 * Returns the TextBox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TextBox;

	/**
	 * Returns the TextBox with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TextBox;

	/**
	 * Returns the TextBoxes within the specified range.
	 * @param from The TextBox, index, or name at the beginning of the range.
	 * @param to The TextBox, index, or name at the end of the range.
	 */
	itemByRange(from: TextBox | number | string, to: TextBox | number | string): TextBox[];

	/**
	 * Returns the last TextBox in the collection.
	 */
	lastItem(): TextBox;

	/**
	 * Returns the middle TextBox in the collection.
	 */
	middleItem(): TextBox;

	/**
	 * Returns the TextBox whose index follows the specified TextBox in the collection.
	 * @param obj The TextBox whose index comes before the desired TextBox.
	 */
	nextItem(obj: TextBox): TextBox;

	/**
	 * Returns the TextBox with the index previous to the specified index.
	 * @param obj The index of the TextBox that follows the desired TextBox.
	 */
	previousItem(obj: TextBox): TextBox;

	/**
	 * Generates a string which, if executed, will return the TextBox.
	 */
	toSource(): string;

}

/**
 * A signature field.
 */
declare class SignatureField extends FormField {
	/**
	 * A collection of behavior objects.
	 */
	readonly behaviors: Behaviors;

	/**
	 * A collection of clear form behavior objects.
	 */
	readonly clearFormBehaviors: ClearFormBehaviors;

	/**
	 * A collection of EPS files.
	 */
	readonly epss: EPSs;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of goto anchor behavior objects.
	 */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;

	/**
	 * A collection of goto first page behavior objects.
	 */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;

	/**
	 * A collection of goto last page behavior objects.
	 */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;

	/**
	 * A collection of goto next page behavior objects.
	 */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;

	/**
	 * A collection of goto next view behavior objects.
	 */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;

	/**
	 * A collection of goto previous page behavior objects.
	 */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;

	/**
	 * A collection of goto previous view behavior objects.
	 */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;

	/**
	 * A collection of goto URL behavior objects.
	 */
	readonly gotoURLBehaviors: GotoURLBehaviors;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * A collection of movie behavior objects.
	 */
	readonly movieBehaviors: MovieBehaviors;

	/**
	 * A collection of open file behavior objects.
	 */
	readonly openFileBehaviors: OpenFileBehaviors;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of PDF files.
	 */
	readonly pdfs: PDFs;

	/**
	 * A collection of PICT graphics.
	 */
	readonly picts: PICTs;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of print form behavior objects.
	 */
	readonly printFormBehaviors: PrintFormBehaviors;

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean;

	/**
	 * If true, the form field is read only in the exported PDF.
	 */
	readOnly: boolean;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * If true, the form field is required in the exported PDF.
	 */
	required: boolean;

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;

	/**
	 * A collection of sound behavior objects.
	 */
	readonly soundBehaviors: SoundBehaviors;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of submit form behavior objects.
	 */
	readonly submitFormBehaviors: SubmitFormBehaviors;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of view zoom behavior objects.
	 */
	readonly viewZoomBehaviors: ViewZoomBehaviors;

	/**
	 * A collection of WMF graphics.
	 */
	readonly wmfs: WMFs;

	/**
	 * Brings the SignatureField forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the SignatureField to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void;

	/**
	 * Sends the SignatureField back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the SignatureField to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

}

/**
 * A collection of signature fields.
 */
declare class SignatureFields {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the SignatureField with the specified index.
	 * @param index The index.
	 */
	[index: number]: SignatureField;

	/**
	 * Creates a new SignatureField
	 * @param layer The layer on which to create the SignatureField.
	 * @param at The location at which to insert the SignatureField relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new SignatureField
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): SignatureField;

	/**
	 * Returns any SignatureField in the collection.
	 */
	anyItem(): SignatureField;

	/**
	 * Displays the number of elements in the SignatureField.
	 */
	count(): number;

	/**
	 * Returns every SignatureField in the collection.
	 */
	everyItem(): SignatureField[];

	/**
	 * Returns the first SignatureField in the collection.
	 */
	firstItem(): SignatureField;

	/**
	 * Returns the SignatureField with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): SignatureField;

	/**
	 * Returns the SignatureField with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): SignatureField;

	/**
	 * Returns the SignatureField with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): SignatureField;

	/**
	 * Returns the SignatureFields within the specified range.
	 * @param from The SignatureField, index, or name at the beginning of the range.
	 * @param to The SignatureField, index, or name at the end of the range.
	 */
	itemByRange(from: SignatureField | number | string, to: SignatureField | number | string): SignatureField[];

	/**
	 * Returns the last SignatureField in the collection.
	 */
	lastItem(): SignatureField;

	/**
	 * Returns the middle SignatureField in the collection.
	 */
	middleItem(): SignatureField;

	/**
	 * Returns the SignatureField whose index follows the specified SignatureField in the collection.
	 * @param obj The SignatureField whose index comes before the desired SignatureField.
	 */
	nextItem(obj: SignatureField): SignatureField;

	/**
	 * Returns the SignatureField with the index previous to the specified index.
	 * @param obj The index of the SignatureField that follows the desired SignatureField.
	 */
	previousItem(obj: SignatureField): SignatureField;

	/**
	 * Generates a string which, if executed, will return the SignatureField.
	 */
	toSource(): string;

}

/**
 * A movie.
 */
declare class Movie extends MediaItem {
	/**
	 * The video controller skin name.
	 */
	controllerSkin: string;

	/**
	 * The description of the Movie.
	 */
	description: string;

	/**
	 * If true, the file is embedded in the PDF. If false, the file is linked to the PDF. Note: To embed movie files, acrobat compatibility must be acrobat 6 or higher.
	 */
	embedInPDF: boolean;

	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	filePath: string | File;

	/**
	 * If true, opens a new window to play the movie. If false, plays the movie in the poster frame on the PDF document page.
	 */
	floatingWindow: boolean;

	/**
	 * The position of the floating window that displays the movie.
	 */
	floatingWindowPosition: FloatingWindowPosition;

	/**
	 * The size of the floating window that displays the movie.
	 */
	floatingWindowSize: FloatingWindowSize;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * The source file of the link.
	 */
	readonly itemLink: Link;

	/**
	 * If true, movie loops forever.
	 */
	movieLoop: boolean;

	/**
	 * The type of poster for the movie.
	 */
	moviePosterType: MoviePosterTypes;

	/**
	 * A collection of navigation points.
	 */
	readonly navigationPoints: NavigationPoints;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * If true, the movie plays automatically when a user views the page that contains the movie poster in the PDF document.
	 */
	playOnPageTurn: boolean;

	/**
	 * The poster file.
	 */
	posterFile: string;

	/**
	 * If true, displays controller skin with mouse rollover.
	 */
	showController: boolean;

	/**
	 * If true, displays playback controls at the bottom of the movie display window.
	 */
	showControls: boolean;

	/**
	 * The URL.
	 */
	url: string;

	/**
	 * Brings the Movie forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the Movie to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Sends the Movie back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the Movie to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

	/**
	 * Verifies that the specified URL is valid and contains the specified movie file. Valid only when the movie file is specified by a URL rather than a file path.
	 */
	verifyURL(): boolean;

}

/**
 * A collection of movies.
 */
declare class Movies {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Movie with the specified index.
	 * @param index The index.
	 */
	[index: number]: Movie;

	/**
	 * Creates a new Movie
	 * @param layer The layer on which to create the Movie.
	 * @param at The location at which to insert the Movie relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Movie
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Movie;

	/**
	 * Returns any Movie in the collection.
	 */
	anyItem(): Movie;

	/**
	 * Displays the number of elements in the Movie.
	 */
	count(): number;

	/**
	 * Returns every Movie in the collection.
	 */
	everyItem(): Movie[];

	/**
	 * Returns the first Movie in the collection.
	 */
	firstItem(): Movie;

	/**
	 * Returns the Movie with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Movie;

	/**
	 * Returns the Movie with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Movie;

	/**
	 * Returns the Movie with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Movie;

	/**
	 * Returns the Movies within the specified range.
	 * @param from The Movie, index, or name at the beginning of the range.
	 * @param to The Movie, index, or name at the end of the range.
	 */
	itemByRange(from: Movie | number | string, to: Movie | number | string): Movie[];

	/**
	 * Returns the last Movie in the collection.
	 */
	lastItem(): Movie;

	/**
	 * Returns the middle Movie in the collection.
	 */
	middleItem(): Movie;

	/**
	 * Returns the Movie whose index follows the specified Movie in the collection.
	 * @param obj The Movie whose index comes before the desired Movie.
	 */
	nextItem(obj: Movie): Movie;

	/**
	 * Returns the Movie with the index previous to the specified index.
	 * @param obj The index of the Movie that follows the desired Movie.
	 */
	previousItem(obj: Movie): Movie;

	/**
	 * Generates a string which, if executed, will return the Movie.
	 */
	toSource(): string;

}

/**
 * A navigation point.
 */
declare class NavigationPoint {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * Unique internally-generated identifier (read only).
	 */
	readonly id: number;

	/**
	 * The index of the NavigationPoint within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The UI display name.
	 */
	name: string;

	/**
	 * The parent of the NavigationPoint (a Movie).
	 */
	readonly parent: Movie;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The time in seconds rounded up to two decimal places (e.g., 3.115 rounded to 3.12).
	 */
	time: number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): NavigationPoint[];

	/**
	 * Deletes the NavigationPoint.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the NavigationPoint.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of navigation points.
 */
declare class NavigationPoints {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the NavigationPoint with the specified index.
	 * @param index The index.
	 */
	[index: number]: NavigationPoint;

	/**
	 * Creates a new NavigationPoint.
	 * @param withProperties Initial values for properties of the new NavigationPoint
	 */
	add(withProperties: object): NavigationPoint;

	/**
	 * Returns any NavigationPoint in the collection.
	 */
	anyItem(): NavigationPoint;

	/**
	 * Displays the number of elements in the NavigationPoint.
	 */
	count(): number;

	/**
	 * Returns every NavigationPoint in the collection.
	 */
	everyItem(): NavigationPoint[];

	/**
	 * Returns the first NavigationPoint in the collection.
	 */
	firstItem(): NavigationPoint;

	/**
	 * Returns the NavigationPoint with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): NavigationPoint;

	/**
	 * Returns the NavigationPoint with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): NavigationPoint;

	/**
	 * Returns the NavigationPoint with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): NavigationPoint;

	/**
	 * Returns the NavigationPoints within the specified range.
	 * @param from The NavigationPoint, index, or name at the beginning of the range.
	 * @param to The NavigationPoint, index, or name at the end of the range.
	 */
	itemByRange(from: NavigationPoint | number | string, to: NavigationPoint | number | string): NavigationPoint[];

	/**
	 * Returns the last NavigationPoint in the collection.
	 */
	lastItem(): NavigationPoint;

	/**
	 * Returns the middle NavigationPoint in the collection.
	 */
	middleItem(): NavigationPoint;

	/**
	 * Returns the NavigationPoint whose index follows the specified NavigationPoint in the collection.
	 * @param obj The NavigationPoint whose index comes before the desired NavigationPoint.
	 */
	nextItem(obj: NavigationPoint): NavigationPoint;

	/**
	 * Returns the NavigationPoint with the index previous to the specified index.
	 * @param obj The index of the NavigationPoint that follows the desired NavigationPoint.
	 */
	previousItem(obj: NavigationPoint): NavigationPoint;

	/**
	 * Generates a string which, if executed, will return the NavigationPoint.
	 */
	toSource(): string;

}

/**
 * A sound clip.
 */
declare class Sound extends MediaItem {
	/**
	 * The description of the Sound.
	 */
	description: string;

	/**
	 * If true, the sound poster does not print with the document.
	 */
	doNotPrintPoster: boolean;

	/**
	 * If true, the file is embedded in the PDF. If false, the file is linked to the PDF. Note: To embed movie files, acrobat compatibility must be acrobat 6 or higher.
	 */
	embedInPDF: boolean;

	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	filePath: string | File;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * The source file of the link.
	 */
	readonly itemLink: Link;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * If true, the movie plays automatically when a user views the page that contains the movie poster in the PDF document.
	 */
	playOnPageTurn: boolean;

	/**
	 * The poster file.
	 */
	posterFile: string;

	/**
	 * If true, sound loops forever (SWF only).
	 */
	soundLoop: boolean;

	/**
	 * The type of sound poster.
	 */
	soundPosterType: SoundPosterTypes;

	/**
	 * If true, sounds stops playing when its page turns.
	 */
	stopOnPageTurn: boolean;

	/**
	 * Brings the Sound forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the Sound to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Sends the Sound back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the Sound to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

}

/**
 * A collection of sound clips.
 */
declare class Sounds {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Sound with the specified index.
	 * @param index The index.
	 */
	[index: number]: Sound;

	/**
	 * Creates a new Sound
	 * @param layer The layer on which to create the Sound.
	 * @param at The location at which to insert the Sound relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Sound
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Sound;

	/**
	 * Returns any Sound in the collection.
	 */
	anyItem(): Sound;

	/**
	 * Displays the number of elements in the Sound.
	 */
	count(): number;

	/**
	 * Returns every Sound in the collection.
	 */
	everyItem(): Sound[];

	/**
	 * Returns the first Sound in the collection.
	 */
	firstItem(): Sound;

	/**
	 * Returns the Sound with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Sound;

	/**
	 * Returns the Sound with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Sound;

	/**
	 * Returns the Sound with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Sound;

	/**
	 * Returns the Sounds within the specified range.
	 * @param from The Sound, index, or name at the beginning of the range.
	 * @param to The Sound, index, or name at the end of the range.
	 */
	itemByRange(from: Sound | number | string, to: Sound | number | string): Sound[];

	/**
	 * Returns the last Sound in the collection.
	 */
	lastItem(): Sound;

	/**
	 * Returns the middle Sound in the collection.
	 */
	middleItem(): Sound;

	/**
	 * Returns the Sound whose index follows the specified Sound in the collection.
	 * @param obj The Sound whose index comes before the desired Sound.
	 */
	nextItem(obj: Sound): Sound;

	/**
	 * Returns the Sound with the index previous to the specified index.
	 * @param obj The index of the Sound that follows the desired Sound.
	 */
	previousItem(obj: Sound): Sound;

	/**
	 * Generates a string which, if executed, will return the Sound.
	 */
	toSource(): string;

}

/**
 * A behavior object.
 */
declare class Behavior {
	/**
	 * The event which triggers the behavior.
	 */
	behaviorEvent: BehaviorEvents;

	/**
	 * If true, the behavior is enabled.
	 */
	enableBehavior: boolean;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the Behavior.
	 */
	readonly id: number;

	/**
	 * The index of the Behavior within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the Behavior.
	 */
	readonly name: string;

	/**
	 * The parent of the Behavior (a Button, CheckBox, ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Behavior[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the Behavior.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Behavior.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of behavior objects.
 */
declare class Behaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Behavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: Behavior;

	/**
	 * Returns any Behavior in the collection.
	 */
	anyItem(): Behavior;

	/**
	 * Displays the number of elements in the Behavior.
	 */
	count(): number;

	/**
	 * Returns every Behavior in the collection.
	 */
	everyItem(): Behavior[];

	/**
	 * Returns the first Behavior in the collection.
	 */
	firstItem(): Behavior;

	/**
	 * Returns the Behavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Behavior;

	/**
	 * Returns the Behavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Behavior;

	/**
	 * Returns the Behavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Behavior;

	/**
	 * Returns the Behaviors within the specified range.
	 * @param from The Behavior, index, or name at the beginning of the range.
	 * @param to The Behavior, index, or name at the end of the range.
	 */
	itemByRange(from: Behavior | number | string, to: Behavior | number | string): Behavior[];

	/**
	 * Returns the last Behavior in the collection.
	 */
	lastItem(): Behavior;

	/**
	 * Returns the middle Behavior in the collection.
	 */
	middleItem(): Behavior;

	/**
	 * Returns the Behavior whose index follows the specified Behavior in the collection.
	 * @param obj The Behavior whose index comes before the desired Behavior.
	 */
	nextItem(obj: Behavior): Behavior;

	/**
	 * Returns the Behavior with the index previous to the specified index.
	 * @param obj The index of the Behavior that follows the desired Behavior.
	 */
	previousItem(obj: Behavior): Behavior;

	/**
	 * Generates a string which, if executed, will return the Behavior.
	 */
	toSource(): string;

}

/**
 * A behavior object that jumps to the first page of the document.
 */
declare class GotoFirstPageBehavior extends Behavior {
	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions;

}

/**
 * A collection of goto first page behavior objects.
 */
declare class GotoFirstPageBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GotoFirstPageBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoFirstPageBehavior;

	/**
	 * Creates a new GotoFirstPageBehavior.
	 * @param withProperties Initial values for properties of the new GotoFirstPageBehavior
	 */
	add(withProperties: object): GotoFirstPageBehavior;

	/**
	 * Returns any GotoFirstPageBehavior in the collection.
	 */
	anyItem(): GotoFirstPageBehavior;

	/**
	 * Displays the number of elements in the GotoFirstPageBehavior.
	 */
	count(): number;

	/**
	 * Returns every GotoFirstPageBehavior in the collection.
	 */
	everyItem(): GotoFirstPageBehavior[];

	/**
	 * Returns the first GotoFirstPageBehavior in the collection.
	 */
	firstItem(): GotoFirstPageBehavior;

	/**
	 * Returns the GotoFirstPageBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoFirstPageBehavior;

	/**
	 * Returns the GotoFirstPageBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoFirstPageBehavior;

	/**
	 * Returns the GotoFirstPageBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoFirstPageBehavior;

	/**
	 * Returns the GotoFirstPageBehaviors within the specified range.
	 * @param from The GotoFirstPageBehavior, index, or name at the beginning of the range.
	 * @param to The GotoFirstPageBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoFirstPageBehavior | number | string, to: GotoFirstPageBehavior | number | string): GotoFirstPageBehavior[];

	/**
	 * Returns the last GotoFirstPageBehavior in the collection.
	 */
	lastItem(): GotoFirstPageBehavior;

	/**
	 * Returns the middle GotoFirstPageBehavior in the collection.
	 */
	middleItem(): GotoFirstPageBehavior;

	/**
	 * Returns the GotoFirstPageBehavior whose index follows the specified GotoFirstPageBehavior in the collection.
	 * @param obj The GotoFirstPageBehavior whose index comes before the desired GotoFirstPageBehavior.
	 */
	nextItem(obj: GotoFirstPageBehavior): GotoFirstPageBehavior;

	/**
	 * Returns the GotoFirstPageBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoFirstPageBehavior that follows the desired GotoFirstPageBehavior.
	 */
	previousItem(obj: GotoFirstPageBehavior): GotoFirstPageBehavior;

	/**
	 * Generates a string which, if executed, will return the GotoFirstPageBehavior.
	 */
	toSource(): string;

}

/**
 * A behavior object that jumps to the last page of the document.
 */
declare class GotoLastPageBehavior extends Behavior {
	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions;

}

/**
 * A collection of goto last page behavior objects.
 */
declare class GotoLastPageBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GotoLastPageBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoLastPageBehavior;

	/**
	 * Creates a new GotoLastPageBehavior.
	 * @param withProperties Initial values for properties of the new GotoLastPageBehavior
	 */
	add(withProperties: object): GotoLastPageBehavior;

	/**
	 * Returns any GotoLastPageBehavior in the collection.
	 */
	anyItem(): GotoLastPageBehavior;

	/**
	 * Displays the number of elements in the GotoLastPageBehavior.
	 */
	count(): number;

	/**
	 * Returns every GotoLastPageBehavior in the collection.
	 */
	everyItem(): GotoLastPageBehavior[];

	/**
	 * Returns the first GotoLastPageBehavior in the collection.
	 */
	firstItem(): GotoLastPageBehavior;

	/**
	 * Returns the GotoLastPageBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoLastPageBehavior;

	/**
	 * Returns the GotoLastPageBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoLastPageBehavior;

	/**
	 * Returns the GotoLastPageBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoLastPageBehavior;

	/**
	 * Returns the GotoLastPageBehaviors within the specified range.
	 * @param from The GotoLastPageBehavior, index, or name at the beginning of the range.
	 * @param to The GotoLastPageBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoLastPageBehavior | number | string, to: GotoLastPageBehavior | number | string): GotoLastPageBehavior[];

	/**
	 * Returns the last GotoLastPageBehavior in the collection.
	 */
	lastItem(): GotoLastPageBehavior;

	/**
	 * Returns the middle GotoLastPageBehavior in the collection.
	 */
	middleItem(): GotoLastPageBehavior;

	/**
	 * Returns the GotoLastPageBehavior whose index follows the specified GotoLastPageBehavior in the collection.
	 * @param obj The GotoLastPageBehavior whose index comes before the desired GotoLastPageBehavior.
	 */
	nextItem(obj: GotoLastPageBehavior): GotoLastPageBehavior;

	/**
	 * Returns the GotoLastPageBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoLastPageBehavior that follows the desired GotoLastPageBehavior.
	 */
	previousItem(obj: GotoLastPageBehavior): GotoLastPageBehavior;

	/**
	 * Generates a string which, if executed, will return the GotoLastPageBehavior.
	 */
	toSource(): string;

}

/**
 * A behavior object that jumps to the next page in the document.
 */
declare class GotoNextPageBehavior extends Behavior {
	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions;

}

/**
 * A collection of goto next page behavior objects.
 */
declare class GotoNextPageBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GotoNextPageBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoNextPageBehavior;

	/**
	 * Creates a new GotoNextPageBehavior.
	 * @param withProperties Initial values for properties of the new GotoNextPageBehavior
	 */
	add(withProperties: object): GotoNextPageBehavior;

	/**
	 * Returns any GotoNextPageBehavior in the collection.
	 */
	anyItem(): GotoNextPageBehavior;

	/**
	 * Displays the number of elements in the GotoNextPageBehavior.
	 */
	count(): number;

	/**
	 * Returns every GotoNextPageBehavior in the collection.
	 */
	everyItem(): GotoNextPageBehavior[];

	/**
	 * Returns the first GotoNextPageBehavior in the collection.
	 */
	firstItem(): GotoNextPageBehavior;

	/**
	 * Returns the GotoNextPageBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoNextPageBehavior;

	/**
	 * Returns the GotoNextPageBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoNextPageBehavior;

	/**
	 * Returns the GotoNextPageBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoNextPageBehavior;

	/**
	 * Returns the GotoNextPageBehaviors within the specified range.
	 * @param from The GotoNextPageBehavior, index, or name at the beginning of the range.
	 * @param to The GotoNextPageBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoNextPageBehavior | number | string, to: GotoNextPageBehavior | number | string): GotoNextPageBehavior[];

	/**
	 * Returns the last GotoNextPageBehavior in the collection.
	 */
	lastItem(): GotoNextPageBehavior;

	/**
	 * Returns the middle GotoNextPageBehavior in the collection.
	 */
	middleItem(): GotoNextPageBehavior;

	/**
	 * Returns the GotoNextPageBehavior whose index follows the specified GotoNextPageBehavior in the collection.
	 * @param obj The GotoNextPageBehavior whose index comes before the desired GotoNextPageBehavior.
	 */
	nextItem(obj: GotoNextPageBehavior): GotoNextPageBehavior;

	/**
	 * Returns the GotoNextPageBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoNextPageBehavior that follows the desired GotoNextPageBehavior.
	 */
	previousItem(obj: GotoNextPageBehavior): GotoNextPageBehavior;

	/**
	 * Generates a string which, if executed, will return the GotoNextPageBehavior.
	 */
	toSource(): string;

}

/**
 * A behavior object that jumps to the previous page in the document.
 */
declare class GotoPreviousPageBehavior extends Behavior {
	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions;

}

/**
 * A collection of goto previous page behavior objects.
 */
declare class GotoPreviousPageBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GotoPreviousPageBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoPreviousPageBehavior;

	/**
	 * Creates a new GotoPreviousPageBehavior.
	 * @param withProperties Initial values for properties of the new GotoPreviousPageBehavior
	 */
	add(withProperties: object): GotoPreviousPageBehavior;

	/**
	 * Returns any GotoPreviousPageBehavior in the collection.
	 */
	anyItem(): GotoPreviousPageBehavior;

	/**
	 * Displays the number of elements in the GotoPreviousPageBehavior.
	 */
	count(): number;

	/**
	 * Returns every GotoPreviousPageBehavior in the collection.
	 */
	everyItem(): GotoPreviousPageBehavior[];

	/**
	 * Returns the first GotoPreviousPageBehavior in the collection.
	 */
	firstItem(): GotoPreviousPageBehavior;

	/**
	 * Returns the GotoPreviousPageBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoPreviousPageBehavior;

	/**
	 * Returns the GotoPreviousPageBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoPreviousPageBehavior;

	/**
	 * Returns the GotoPreviousPageBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoPreviousPageBehavior;

	/**
	 * Returns the GotoPreviousPageBehaviors within the specified range.
	 * @param from The GotoPreviousPageBehavior, index, or name at the beginning of the range.
	 * @param to The GotoPreviousPageBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoPreviousPageBehavior | number | string, to: GotoPreviousPageBehavior | number | string): GotoPreviousPageBehavior[];

	/**
	 * Returns the last GotoPreviousPageBehavior in the collection.
	 */
	lastItem(): GotoPreviousPageBehavior;

	/**
	 * Returns the middle GotoPreviousPageBehavior in the collection.
	 */
	middleItem(): GotoPreviousPageBehavior;

	/**
	 * Returns the GotoPreviousPageBehavior whose index follows the specified GotoPreviousPageBehavior in the collection.
	 * @param obj The GotoPreviousPageBehavior whose index comes before the desired GotoPreviousPageBehavior.
	 */
	nextItem(obj: GotoPreviousPageBehavior): GotoPreviousPageBehavior;

	/**
	 * Returns the GotoPreviousPageBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoPreviousPageBehavior that follows the desired GotoPreviousPageBehavior.
	 */
	previousItem(obj: GotoPreviousPageBehavior): GotoPreviousPageBehavior;

	/**
	 * Generates a string which, if executed, will return the GotoPreviousPageBehavior.
	 */
	toSource(): string;

}

/**
 * A behavior object that jumps to the next view.
 */
declare class GotoNextViewBehavior extends Behavior {
	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions;

}

/**
 * A collection of goto next view behavior objects.
 */
declare class GotoNextViewBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GotoNextViewBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoNextViewBehavior;

	/**
	 * Creates a new GotoNextViewBehavior.
	 * @param withProperties Initial values for properties of the new GotoNextViewBehavior
	 */
	add(withProperties: object): GotoNextViewBehavior;

	/**
	 * Returns any GotoNextViewBehavior in the collection.
	 */
	anyItem(): GotoNextViewBehavior;

	/**
	 * Displays the number of elements in the GotoNextViewBehavior.
	 */
	count(): number;

	/**
	 * Returns every GotoNextViewBehavior in the collection.
	 */
	everyItem(): GotoNextViewBehavior[];

	/**
	 * Returns the first GotoNextViewBehavior in the collection.
	 */
	firstItem(): GotoNextViewBehavior;

	/**
	 * Returns the GotoNextViewBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoNextViewBehavior;

	/**
	 * Returns the GotoNextViewBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoNextViewBehavior;

	/**
	 * Returns the GotoNextViewBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoNextViewBehavior;

	/**
	 * Returns the GotoNextViewBehaviors within the specified range.
	 * @param from The GotoNextViewBehavior, index, or name at the beginning of the range.
	 * @param to The GotoNextViewBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoNextViewBehavior | number | string, to: GotoNextViewBehavior | number | string): GotoNextViewBehavior[];

	/**
	 * Returns the last GotoNextViewBehavior in the collection.
	 */
	lastItem(): GotoNextViewBehavior;

	/**
	 * Returns the middle GotoNextViewBehavior in the collection.
	 */
	middleItem(): GotoNextViewBehavior;

	/**
	 * Returns the GotoNextViewBehavior whose index follows the specified GotoNextViewBehavior in the collection.
	 * @param obj The GotoNextViewBehavior whose index comes before the desired GotoNextViewBehavior.
	 */
	nextItem(obj: GotoNextViewBehavior): GotoNextViewBehavior;

	/**
	 * Returns the GotoNextViewBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoNextViewBehavior that follows the desired GotoNextViewBehavior.
	 */
	previousItem(obj: GotoNextViewBehavior): GotoNextViewBehavior;

	/**
	 * Generates a string which, if executed, will return the GotoNextViewBehavior.
	 */
	toSource(): string;

}

/**
 * A behavior object that jumps to the previous view.
 */
declare class GotoPreviousViewBehavior extends Behavior {
	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions;

}

/**
 * A collection of goto previous view behavior objects.
 */
declare class GotoPreviousViewBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GotoPreviousViewBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoPreviousViewBehavior;

	/**
	 * Creates a new GotoPreviousViewBehavior.
	 * @param withProperties Initial values for properties of the new GotoPreviousViewBehavior
	 */
	add(withProperties: object): GotoPreviousViewBehavior;

	/**
	 * Returns any GotoPreviousViewBehavior in the collection.
	 */
	anyItem(): GotoPreviousViewBehavior;

	/**
	 * Displays the number of elements in the GotoPreviousViewBehavior.
	 */
	count(): number;

	/**
	 * Returns every GotoPreviousViewBehavior in the collection.
	 */
	everyItem(): GotoPreviousViewBehavior[];

	/**
	 * Returns the first GotoPreviousViewBehavior in the collection.
	 */
	firstItem(): GotoPreviousViewBehavior;

	/**
	 * Returns the GotoPreviousViewBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoPreviousViewBehavior;

	/**
	 * Returns the GotoPreviousViewBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoPreviousViewBehavior;

	/**
	 * Returns the GotoPreviousViewBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoPreviousViewBehavior;

	/**
	 * Returns the GotoPreviousViewBehaviors within the specified range.
	 * @param from The GotoPreviousViewBehavior, index, or name at the beginning of the range.
	 * @param to The GotoPreviousViewBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoPreviousViewBehavior | number | string, to: GotoPreviousViewBehavior | number | string): GotoPreviousViewBehavior[];

	/**
	 * Returns the last GotoPreviousViewBehavior in the collection.
	 */
	lastItem(): GotoPreviousViewBehavior;

	/**
	 * Returns the middle GotoPreviousViewBehavior in the collection.
	 */
	middleItem(): GotoPreviousViewBehavior;

	/**
	 * Returns the GotoPreviousViewBehavior whose index follows the specified GotoPreviousViewBehavior in the collection.
	 * @param obj The GotoPreviousViewBehavior whose index comes before the desired GotoPreviousViewBehavior.
	 */
	nextItem(obj: GotoPreviousViewBehavior): GotoPreviousViewBehavior;

	/**
	 * Returns the GotoPreviousViewBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoPreviousViewBehavior that follows the desired GotoPreviousViewBehavior.
	 */
	previousItem(obj: GotoPreviousViewBehavior): GotoPreviousViewBehavior;

	/**
	 * Generates a string which, if executed, will return the GotoPreviousViewBehavior.
	 */
	toSource(): string;

}

/**
 * A behavior object that jumps to a URL.
 */
declare class GotoURLBehavior extends Behavior {
	/**
	 * The URL.
	 */
	url: string;

}

/**
 * A collection of goto URL behavior objects.
 */
declare class GotoURLBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GotoURLBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoURLBehavior;

	/**
	 * Creates a new GotoURLBehavior.
	 * @param withProperties Initial values for properties of the new GotoURLBehavior
	 */
	add(withProperties: object): GotoURLBehavior;

	/**
	 * Returns any GotoURLBehavior in the collection.
	 */
	anyItem(): GotoURLBehavior;

	/**
	 * Displays the number of elements in the GotoURLBehavior.
	 */
	count(): number;

	/**
	 * Returns every GotoURLBehavior in the collection.
	 */
	everyItem(): GotoURLBehavior[];

	/**
	 * Returns the first GotoURLBehavior in the collection.
	 */
	firstItem(): GotoURLBehavior;

	/**
	 * Returns the GotoURLBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoURLBehavior;

	/**
	 * Returns the GotoURLBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoURLBehavior;

	/**
	 * Returns the GotoURLBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoURLBehavior;

	/**
	 * Returns the GotoURLBehaviors within the specified range.
	 * @param from The GotoURLBehavior, index, or name at the beginning of the range.
	 * @param to The GotoURLBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoURLBehavior | number | string, to: GotoURLBehavior | number | string): GotoURLBehavior[];

	/**
	 * Returns the last GotoURLBehavior in the collection.
	 */
	lastItem(): GotoURLBehavior;

	/**
	 * Returns the middle GotoURLBehavior in the collection.
	 */
	middleItem(): GotoURLBehavior;

	/**
	 * Returns the GotoURLBehavior whose index follows the specified GotoURLBehavior in the collection.
	 * @param obj The GotoURLBehavior whose index comes before the desired GotoURLBehavior.
	 */
	nextItem(obj: GotoURLBehavior): GotoURLBehavior;

	/**
	 * Returns the GotoURLBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoURLBehavior that follows the desired GotoURLBehavior.
	 */
	previousItem(obj: GotoURLBehavior): GotoURLBehavior;

	/**
	 * Generates a string which, if executed, will return the GotoURLBehavior.
	 */
	toSource(): string;

}

/**
 * A movie behavior object.
 */
declare class MovieBehavior extends Behavior {
	/**
	 * The movie page item.
	 */
	movieItem: Movie;

	/**
	 * The id of the navigation point to play from. This property is ignored for all operations other than Play From Navigation Point.
	 */
	navigationPointID: number;

	/**
	 * The playback mode.
	 */
	operation: MoviePlayOperations;

}

/**
 * A collection of movie behavior objects.
 */
declare class MovieBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MovieBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: MovieBehavior;

	/**
	 * Creates a new MovieBehavior.
	 * @param withProperties Initial values for properties of the new MovieBehavior
	 */
	add(withProperties: object): MovieBehavior;

	/**
	 * Returns any MovieBehavior in the collection.
	 */
	anyItem(): MovieBehavior;

	/**
	 * Displays the number of elements in the MovieBehavior.
	 */
	count(): number;

	/**
	 * Returns every MovieBehavior in the collection.
	 */
	everyItem(): MovieBehavior[];

	/**
	 * Returns the first MovieBehavior in the collection.
	 */
	firstItem(): MovieBehavior;

	/**
	 * Returns the MovieBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MovieBehavior;

	/**
	 * Returns the MovieBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MovieBehavior;

	/**
	 * Returns the MovieBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MovieBehavior;

	/**
	 * Returns the MovieBehaviors within the specified range.
	 * @param from The MovieBehavior, index, or name at the beginning of the range.
	 * @param to The MovieBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: MovieBehavior | number | string, to: MovieBehavior | number | string): MovieBehavior[];

	/**
	 * Returns the last MovieBehavior in the collection.
	 */
	lastItem(): MovieBehavior;

	/**
	 * Returns the middle MovieBehavior in the collection.
	 */
	middleItem(): MovieBehavior;

	/**
	 * Returns the MovieBehavior whose index follows the specified MovieBehavior in the collection.
	 * @param obj The MovieBehavior whose index comes before the desired MovieBehavior.
	 */
	nextItem(obj: MovieBehavior): MovieBehavior;

	/**
	 * Returns the MovieBehavior with the index previous to the specified index.
	 * @param obj The index of the MovieBehavior that follows the desired MovieBehavior.
	 */
	previousItem(obj: MovieBehavior): MovieBehavior;

	/**
	 * Generates a string which, if executed, will return the MovieBehavior.
	 */
	toSource(): string;

}

/**
 * A show/hide fields behavior object.
 */
declare class ShowHideFieldsBehavior extends Behavior {
	/**
	 * The hidden interactive objects.
	 */
	fieldsToHide: Button[] | CheckBoxes | ComboBoxes | ListBoxes | RadioButtons | TextBoxes | SignatureFields;

	/**
	 * The visible interactive objects.
	 */
	fieldsToShow: Button[] | CheckBoxes | ComboBoxes | ListBoxes | RadioButtons | TextBoxes | SignatureFields;

}

/**
 * A collection of show/hide fields behavior objects.
 */
declare class ShowHideFieldsBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ShowHideFieldsBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: ShowHideFieldsBehavior;

	/**
	 * Creates a new ShowHideFieldsBehavior.
	 * @param withProperties Initial values for properties of the new ShowHideFieldsBehavior
	 */
	add(withProperties: object): ShowHideFieldsBehavior;

	/**
	 * Returns any ShowHideFieldsBehavior in the collection.
	 */
	anyItem(): ShowHideFieldsBehavior;

	/**
	 * Displays the number of elements in the ShowHideFieldsBehavior.
	 */
	count(): number;

	/**
	 * Returns every ShowHideFieldsBehavior in the collection.
	 */
	everyItem(): ShowHideFieldsBehavior[];

	/**
	 * Returns the first ShowHideFieldsBehavior in the collection.
	 */
	firstItem(): ShowHideFieldsBehavior;

	/**
	 * Returns the ShowHideFieldsBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ShowHideFieldsBehavior;

	/**
	 * Returns the ShowHideFieldsBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ShowHideFieldsBehavior;

	/**
	 * Returns the ShowHideFieldsBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ShowHideFieldsBehavior;

	/**
	 * Returns the ShowHideFieldsBehaviors within the specified range.
	 * @param from The ShowHideFieldsBehavior, index, or name at the beginning of the range.
	 * @param to The ShowHideFieldsBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: ShowHideFieldsBehavior | number | string, to: ShowHideFieldsBehavior | number | string): ShowHideFieldsBehavior[];

	/**
	 * Returns the last ShowHideFieldsBehavior in the collection.
	 */
	lastItem(): ShowHideFieldsBehavior;

	/**
	 * Returns the middle ShowHideFieldsBehavior in the collection.
	 */
	middleItem(): ShowHideFieldsBehavior;

	/**
	 * Returns the ShowHideFieldsBehavior whose index follows the specified ShowHideFieldsBehavior in the collection.
	 * @param obj The ShowHideFieldsBehavior whose index comes before the desired ShowHideFieldsBehavior.
	 */
	nextItem(obj: ShowHideFieldsBehavior): ShowHideFieldsBehavior;

	/**
	 * Returns the ShowHideFieldsBehavior with the index previous to the specified index.
	 * @param obj The index of the ShowHideFieldsBehavior that follows the desired ShowHideFieldsBehavior.
	 */
	previousItem(obj: ShowHideFieldsBehavior): ShowHideFieldsBehavior;

	/**
	 * Generates a string which, if executed, will return the ShowHideFieldsBehavior.
	 */
	toSource(): string;

}

/**
 * A animation behavior.
 */
declare class AnimationBehavior extends Behavior {
	/**
	 * The animation page item.
	 */
	animatedPageItem: PageItem;

	/**
	 * If true, will automatically play the animation in reverse on roll off of the rollover event.
	 */
	autoReverseOnRollOff: boolean;

	/**
	 * The playback mode.
	 */
	operation: AnimationPlayOperations;

}

/**
 * A collection of animation behaviors.
 */
declare class AnimationBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the AnimationBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: AnimationBehavior;

	/**
	 * Creates a new AnimationBehavior.
	 * @param withProperties Initial values for properties of the new AnimationBehavior
	 */
	add(withProperties: object): AnimationBehavior;

	/**
	 * Returns any AnimationBehavior in the collection.
	 */
	anyItem(): AnimationBehavior;

	/**
	 * Displays the number of elements in the AnimationBehavior.
	 */
	count(): number;

	/**
	 * Returns every AnimationBehavior in the collection.
	 */
	everyItem(): AnimationBehavior[];

	/**
	 * Returns the first AnimationBehavior in the collection.
	 */
	firstItem(): AnimationBehavior;

	/**
	 * Returns the AnimationBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): AnimationBehavior;

	/**
	 * Returns the AnimationBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): AnimationBehavior;

	/**
	 * Returns the AnimationBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): AnimationBehavior;

	/**
	 * Returns the AnimationBehaviors within the specified range.
	 * @param from The AnimationBehavior, index, or name at the beginning of the range.
	 * @param to The AnimationBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: AnimationBehavior | number | string, to: AnimationBehavior | number | string): AnimationBehavior[];

	/**
	 * Returns the last AnimationBehavior in the collection.
	 */
	lastItem(): AnimationBehavior;

	/**
	 * Returns the middle AnimationBehavior in the collection.
	 */
	middleItem(): AnimationBehavior;

	/**
	 * Returns the AnimationBehavior whose index follows the specified AnimationBehavior in the collection.
	 * @param obj The AnimationBehavior whose index comes before the desired AnimationBehavior.
	 */
	nextItem(obj: AnimationBehavior): AnimationBehavior;

	/**
	 * Returns the AnimationBehavior with the index previous to the specified index.
	 * @param obj The index of the AnimationBehavior that follows the desired AnimationBehavior.
	 */
	previousItem(obj: AnimationBehavior): AnimationBehavior;

	/**
	 * Generates a string which, if executed, will return the AnimationBehavior.
	 */
	toSource(): string;

}

/**
 * An open file behavior object.
 */
declare class OpenFileBehavior extends Behavior {
	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	filePath: string | File;

}

/**
 * A collection of open file behavior objects.
 */
declare class OpenFileBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the OpenFileBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: OpenFileBehavior;

	/**
	 * Creates a new OpenFileBehavior.
	 * @param withProperties Initial values for properties of the new OpenFileBehavior
	 */
	add(withProperties: object): OpenFileBehavior;

	/**
	 * Returns any OpenFileBehavior in the collection.
	 */
	anyItem(): OpenFileBehavior;

	/**
	 * Displays the number of elements in the OpenFileBehavior.
	 */
	count(): number;

	/**
	 * Returns every OpenFileBehavior in the collection.
	 */
	everyItem(): OpenFileBehavior[];

	/**
	 * Returns the first OpenFileBehavior in the collection.
	 */
	firstItem(): OpenFileBehavior;

	/**
	 * Returns the OpenFileBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): OpenFileBehavior;

	/**
	 * Returns the OpenFileBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): OpenFileBehavior;

	/**
	 * Returns the OpenFileBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): OpenFileBehavior;

	/**
	 * Returns the OpenFileBehaviors within the specified range.
	 * @param from The OpenFileBehavior, index, or name at the beginning of the range.
	 * @param to The OpenFileBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: OpenFileBehavior | number | string, to: OpenFileBehavior | number | string): OpenFileBehavior[];

	/**
	 * Returns the last OpenFileBehavior in the collection.
	 */
	lastItem(): OpenFileBehavior;

	/**
	 * Returns the middle OpenFileBehavior in the collection.
	 */
	middleItem(): OpenFileBehavior;

	/**
	 * Returns the OpenFileBehavior whose index follows the specified OpenFileBehavior in the collection.
	 * @param obj The OpenFileBehavior whose index comes before the desired OpenFileBehavior.
	 */
	nextItem(obj: OpenFileBehavior): OpenFileBehavior;

	/**
	 * Returns the OpenFileBehavior with the index previous to the specified index.
	 * @param obj The index of the OpenFileBehavior that follows the desired OpenFileBehavior.
	 */
	previousItem(obj: OpenFileBehavior): OpenFileBehavior;

	/**
	 * Generates a string which, if executed, will return the OpenFileBehavior.
	 */
	toSource(): string;

}

/**
 * A goto next state behavior.
 */
declare class GotoNextStateBehavior extends Behavior {
	/**
	 * The associated multi-state object page item.
	 */
	associatedMultiStateObject: MultiStateObject;

	/**
	 * If true, will loop to the next or previous state.
	 */
	loopsToNextOrPrevious: boolean;

}

/**
 * A collection of goto next state behaviors.
 */
declare class GotoNextStateBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GotoNextStateBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoNextStateBehavior;

	/**
	 * Creates a new GotoNextStateBehavior.
	 * @param withProperties Initial values for properties of the new GotoNextStateBehavior
	 */
	add(withProperties: object): GotoNextStateBehavior;

	/**
	 * Returns any GotoNextStateBehavior in the collection.
	 */
	anyItem(): GotoNextStateBehavior;

	/**
	 * Displays the number of elements in the GotoNextStateBehavior.
	 */
	count(): number;

	/**
	 * Returns every GotoNextStateBehavior in the collection.
	 */
	everyItem(): GotoNextStateBehavior[];

	/**
	 * Returns the first GotoNextStateBehavior in the collection.
	 */
	firstItem(): GotoNextStateBehavior;

	/**
	 * Returns the GotoNextStateBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoNextStateBehavior;

	/**
	 * Returns the GotoNextStateBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoNextStateBehavior;

	/**
	 * Returns the GotoNextStateBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoNextStateBehavior;

	/**
	 * Returns the GotoNextStateBehaviors within the specified range.
	 * @param from The GotoNextStateBehavior, index, or name at the beginning of the range.
	 * @param to The GotoNextStateBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoNextStateBehavior | number | string, to: GotoNextStateBehavior | number | string): GotoNextStateBehavior[];

	/**
	 * Returns the last GotoNextStateBehavior in the collection.
	 */
	lastItem(): GotoNextStateBehavior;

	/**
	 * Returns the middle GotoNextStateBehavior in the collection.
	 */
	middleItem(): GotoNextStateBehavior;

	/**
	 * Returns the GotoNextStateBehavior whose index follows the specified GotoNextStateBehavior in the collection.
	 * @param obj The GotoNextStateBehavior whose index comes before the desired GotoNextStateBehavior.
	 */
	nextItem(obj: GotoNextStateBehavior): GotoNextStateBehavior;

	/**
	 * Returns the GotoNextStateBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoNextStateBehavior that follows the desired GotoNextStateBehavior.
	 */
	previousItem(obj: GotoNextStateBehavior): GotoNextStateBehavior;

	/**
	 * Generates a string which, if executed, will return the GotoNextStateBehavior.
	 */
	toSource(): string;

}

/**
 * A goto previous state behavior.
 */
declare class GotoPreviousStateBehavior extends Behavior {
	/**
	 * The associated multi-state object page item.
	 */
	associatedMultiStateObject: MultiStateObject;

	/**
	 * If true, will loop to the next or previous state.
	 */
	loopsToNextOrPrevious: boolean;

}

/**
 * A collection of goto previous state behaviors.
 */
declare class GotoPreviousStateBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GotoPreviousStateBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoPreviousStateBehavior;

	/**
	 * Creates a new GotoPreviousStateBehavior.
	 * @param withProperties Initial values for properties of the new GotoPreviousStateBehavior
	 */
	add(withProperties: object): GotoPreviousStateBehavior;

	/**
	 * Returns any GotoPreviousStateBehavior in the collection.
	 */
	anyItem(): GotoPreviousStateBehavior;

	/**
	 * Displays the number of elements in the GotoPreviousStateBehavior.
	 */
	count(): number;

	/**
	 * Returns every GotoPreviousStateBehavior in the collection.
	 */
	everyItem(): GotoPreviousStateBehavior[];

	/**
	 * Returns the first GotoPreviousStateBehavior in the collection.
	 */
	firstItem(): GotoPreviousStateBehavior;

	/**
	 * Returns the GotoPreviousStateBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoPreviousStateBehavior;

	/**
	 * Returns the GotoPreviousStateBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoPreviousStateBehavior;

	/**
	 * Returns the GotoPreviousStateBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoPreviousStateBehavior;

	/**
	 * Returns the GotoPreviousStateBehaviors within the specified range.
	 * @param from The GotoPreviousStateBehavior, index, or name at the beginning of the range.
	 * @param to The GotoPreviousStateBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoPreviousStateBehavior | number | string, to: GotoPreviousStateBehavior | number | string): GotoPreviousStateBehavior[];

	/**
	 * Returns the last GotoPreviousStateBehavior in the collection.
	 */
	lastItem(): GotoPreviousStateBehavior;

	/**
	 * Returns the middle GotoPreviousStateBehavior in the collection.
	 */
	middleItem(): GotoPreviousStateBehavior;

	/**
	 * Returns the GotoPreviousStateBehavior whose index follows the specified GotoPreviousStateBehavior in the collection.
	 * @param obj The GotoPreviousStateBehavior whose index comes before the desired GotoPreviousStateBehavior.
	 */
	nextItem(obj: GotoPreviousStateBehavior): GotoPreviousStateBehavior;

	/**
	 * Returns the GotoPreviousStateBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoPreviousStateBehavior that follows the desired GotoPreviousStateBehavior.
	 */
	previousItem(obj: GotoPreviousStateBehavior): GotoPreviousStateBehavior;

	/**
	 * Generates a string which, if executed, will return the GotoPreviousStateBehavior.
	 */
	toSource(): string;

}

/**
 * A goto state behavior.
 */
declare class GotoStateBehavior extends Behavior {
	/**
	 * The associated multi-state object page item.
	 */
	associatedMultiStateObject: MultiStateObject;

	/**
	 * If true, will automatically go back to the prior state on roll off of the rollover event.
	 */
	goBackOnRollOff: boolean;

	/**
	 * The name of the state in the associated multi-state object.
	 */
	stateName: string;

}

/**
 * A collection of goto state behaviors.
 */
declare class GotoStateBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GotoStateBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoStateBehavior;

	/**
	 * Creates a new GotoStateBehavior.
	 * @param withProperties Initial values for properties of the new GotoStateBehavior
	 */
	add(withProperties: object): GotoStateBehavior;

	/**
	 * Returns any GotoStateBehavior in the collection.
	 */
	anyItem(): GotoStateBehavior;

	/**
	 * Displays the number of elements in the GotoStateBehavior.
	 */
	count(): number;

	/**
	 * Returns every GotoStateBehavior in the collection.
	 */
	everyItem(): GotoStateBehavior[];

	/**
	 * Returns the first GotoStateBehavior in the collection.
	 */
	firstItem(): GotoStateBehavior;

	/**
	 * Returns the GotoStateBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoStateBehavior;

	/**
	 * Returns the GotoStateBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoStateBehavior;

	/**
	 * Returns the GotoStateBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoStateBehavior;

	/**
	 * Returns the GotoStateBehaviors within the specified range.
	 * @param from The GotoStateBehavior, index, or name at the beginning of the range.
	 * @param to The GotoStateBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoStateBehavior | number | string, to: GotoStateBehavior | number | string): GotoStateBehavior[];

	/**
	 * Returns the last GotoStateBehavior in the collection.
	 */
	lastItem(): GotoStateBehavior;

	/**
	 * Returns the middle GotoStateBehavior in the collection.
	 */
	middleItem(): GotoStateBehavior;

	/**
	 * Returns the GotoStateBehavior whose index follows the specified GotoStateBehavior in the collection.
	 * @param obj The GotoStateBehavior whose index comes before the desired GotoStateBehavior.
	 */
	nextItem(obj: GotoStateBehavior): GotoStateBehavior;

	/**
	 * Returns the GotoStateBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoStateBehavior that follows the desired GotoStateBehavior.
	 */
	previousItem(obj: GotoStateBehavior): GotoStateBehavior;

	/**
	 * Generates a string which, if executed, will return the GotoStateBehavior.
	 */
	toSource(): string;

}

/**
 * A view zoom behavior object.
 */
declare class ViewZoomBehavior extends Behavior {
	/**
	 * The view zoom style.
	 */
	viewZoomStyle: ViewZoomStyle;

}

/**
 * A collection of view zoom behavior objects.
 */
declare class ViewZoomBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ViewZoomBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: ViewZoomBehavior;

	/**
	 * Creates a new ViewZoomBehavior.
	 * @param withProperties Initial values for properties of the new ViewZoomBehavior
	 */
	add(withProperties: object): ViewZoomBehavior;

	/**
	 * Returns any ViewZoomBehavior in the collection.
	 */
	anyItem(): ViewZoomBehavior;

	/**
	 * Displays the number of elements in the ViewZoomBehavior.
	 */
	count(): number;

	/**
	 * Returns every ViewZoomBehavior in the collection.
	 */
	everyItem(): ViewZoomBehavior[];

	/**
	 * Returns the first ViewZoomBehavior in the collection.
	 */
	firstItem(): ViewZoomBehavior;

	/**
	 * Returns the ViewZoomBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ViewZoomBehavior;

	/**
	 * Returns the ViewZoomBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ViewZoomBehavior;

	/**
	 * Returns the ViewZoomBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ViewZoomBehavior;

	/**
	 * Returns the ViewZoomBehaviors within the specified range.
	 * @param from The ViewZoomBehavior, index, or name at the beginning of the range.
	 * @param to The ViewZoomBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: ViewZoomBehavior | number | string, to: ViewZoomBehavior | number | string): ViewZoomBehavior[];

	/**
	 * Returns the last ViewZoomBehavior in the collection.
	 */
	lastItem(): ViewZoomBehavior;

	/**
	 * Returns the middle ViewZoomBehavior in the collection.
	 */
	middleItem(): ViewZoomBehavior;

	/**
	 * Returns the ViewZoomBehavior whose index follows the specified ViewZoomBehavior in the collection.
	 * @param obj The ViewZoomBehavior whose index comes before the desired ViewZoomBehavior.
	 */
	nextItem(obj: ViewZoomBehavior): ViewZoomBehavior;

	/**
	 * Returns the ViewZoomBehavior with the index previous to the specified index.
	 * @param obj The index of the ViewZoomBehavior that follows the desired ViewZoomBehavior.
	 */
	previousItem(obj: ViewZoomBehavior): ViewZoomBehavior;

	/**
	 * Generates a string which, if executed, will return the ViewZoomBehavior.
	 */
	toSource(): string;

}

/**
 * A sound behavior object.
 */
declare class SoundBehavior extends Behavior {
	/**
	 * The playback mode.
	 */
	operation: PlayOperations;

	/**
	 * The sound page item.
	 */
	soundItem: Sound;

}

/**
 * A collection of sound behavior objects.
 */
declare class SoundBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the SoundBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: SoundBehavior;

	/**
	 * Creates a new SoundBehavior.
	 * @param withProperties Initial values for properties of the new SoundBehavior
	 */
	add(withProperties: object): SoundBehavior;

	/**
	 * Returns any SoundBehavior in the collection.
	 */
	anyItem(): SoundBehavior;

	/**
	 * Displays the number of elements in the SoundBehavior.
	 */
	count(): number;

	/**
	 * Returns every SoundBehavior in the collection.
	 */
	everyItem(): SoundBehavior[];

	/**
	 * Returns the first SoundBehavior in the collection.
	 */
	firstItem(): SoundBehavior;

	/**
	 * Returns the SoundBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): SoundBehavior;

	/**
	 * Returns the SoundBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): SoundBehavior;

	/**
	 * Returns the SoundBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): SoundBehavior;

	/**
	 * Returns the SoundBehaviors within the specified range.
	 * @param from The SoundBehavior, index, or name at the beginning of the range.
	 * @param to The SoundBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: SoundBehavior | number | string, to: SoundBehavior | number | string): SoundBehavior[];

	/**
	 * Returns the last SoundBehavior in the collection.
	 */
	lastItem(): SoundBehavior;

	/**
	 * Returns the middle SoundBehavior in the collection.
	 */
	middleItem(): SoundBehavior;

	/**
	 * Returns the SoundBehavior whose index follows the specified SoundBehavior in the collection.
	 * @param obj The SoundBehavior whose index comes before the desired SoundBehavior.
	 */
	nextItem(obj: SoundBehavior): SoundBehavior;

	/**
	 * Returns the SoundBehavior with the index previous to the specified index.
	 * @param obj The index of the SoundBehavior that follows the desired SoundBehavior.
	 */
	previousItem(obj: SoundBehavior): SoundBehavior;

	/**
	 * Generates a string which, if executed, will return the SoundBehavior.
	 */
	toSource(): string;

}

/**
 * A behavior object that jumps to an anchor.
 */
declare class GotoAnchorBehavior extends Behavior {
	/**
	 * The anchor item, specified as a bookmark or a hyperlink text or page destination.
	 */
	anchorItem: Bookmark | HyperlinkTextDestination | HyperlinkPageDestination;

	/**
	 * The anchor name.
	 */
	readonly anchorName: string;

	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	filePath: string | File;

	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions;

}

/**
 * A collection of goto anchor behavior objects.
 */
declare class GotoAnchorBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GotoAnchorBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoAnchorBehavior;

	/**
	 * Creates a new GotoAnchorBehavior.
	 * @param withProperties Initial values for properties of the new GotoAnchorBehavior
	 */
	add(withProperties: object): GotoAnchorBehavior;

	/**
	 * Returns any GotoAnchorBehavior in the collection.
	 */
	anyItem(): GotoAnchorBehavior;

	/**
	 * Displays the number of elements in the GotoAnchorBehavior.
	 */
	count(): number;

	/**
	 * Returns every GotoAnchorBehavior in the collection.
	 */
	everyItem(): GotoAnchorBehavior[];

	/**
	 * Returns the first GotoAnchorBehavior in the collection.
	 */
	firstItem(): GotoAnchorBehavior;

	/**
	 * Returns the GotoAnchorBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoAnchorBehavior;

	/**
	 * Returns the GotoAnchorBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoAnchorBehavior;

	/**
	 * Returns the GotoAnchorBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoAnchorBehavior;

	/**
	 * Returns the GotoAnchorBehaviors within the specified range.
	 * @param from The GotoAnchorBehavior, index, or name at the beginning of the range.
	 * @param to The GotoAnchorBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoAnchorBehavior | number | string, to: GotoAnchorBehavior | number | string): GotoAnchorBehavior[];

	/**
	 * Returns the last GotoAnchorBehavior in the collection.
	 */
	lastItem(): GotoAnchorBehavior;

	/**
	 * Returns the middle GotoAnchorBehavior in the collection.
	 */
	middleItem(): GotoAnchorBehavior;

	/**
	 * Returns the GotoAnchorBehavior whose index follows the specified GotoAnchorBehavior in the collection.
	 * @param obj The GotoAnchorBehavior whose index comes before the desired GotoAnchorBehavior.
	 */
	nextItem(obj: GotoAnchorBehavior): GotoAnchorBehavior;

	/**
	 * Returns the GotoAnchorBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoAnchorBehavior that follows the desired GotoAnchorBehavior.
	 */
	previousItem(obj: GotoAnchorBehavior): GotoAnchorBehavior;

	/**
	 * Generates a string which, if executed, will return the GotoAnchorBehavior.
	 */
	toSource(): string;

}

/**
 * A behavior object that jumps to a specific page of the document.
 */
declare class GotoPageBehavior extends Behavior {
	/**
	 * The page number to go to expressed as an index where 1 is the first page.
	 */
	pageNumber: number;

	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions;

}

/**
 * A collection of go to page behavior objects.
 */
declare class GotoPageBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GotoPageBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoPageBehavior;

	/**
	 * Creates a new GotoPageBehavior.
	 * @param withProperties Initial values for properties of the new GotoPageBehavior
	 */
	add(withProperties: object): GotoPageBehavior;

	/**
	 * Returns any GotoPageBehavior in the collection.
	 */
	anyItem(): GotoPageBehavior;

	/**
	 * Displays the number of elements in the GotoPageBehavior.
	 */
	count(): number;

	/**
	 * Returns every GotoPageBehavior in the collection.
	 */
	everyItem(): GotoPageBehavior[];

	/**
	 * Returns the first GotoPageBehavior in the collection.
	 */
	firstItem(): GotoPageBehavior;

	/**
	 * Returns the GotoPageBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoPageBehavior;

	/**
	 * Returns the GotoPageBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoPageBehavior;

	/**
	 * Returns the GotoPageBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoPageBehavior;

	/**
	 * Returns the GotoPageBehaviors within the specified range.
	 * @param from The GotoPageBehavior, index, or name at the beginning of the range.
	 * @param to The GotoPageBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoPageBehavior | number | string, to: GotoPageBehavior | number | string): GotoPageBehavior[];

	/**
	 * Returns the last GotoPageBehavior in the collection.
	 */
	lastItem(): GotoPageBehavior;

	/**
	 * Returns the middle GotoPageBehavior in the collection.
	 */
	middleItem(): GotoPageBehavior;

	/**
	 * Returns the GotoPageBehavior whose index follows the specified GotoPageBehavior in the collection.
	 * @param obj The GotoPageBehavior whose index comes before the desired GotoPageBehavior.
	 */
	nextItem(obj: GotoPageBehavior): GotoPageBehavior;

	/**
	 * Returns the GotoPageBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoPageBehavior that follows the desired GotoPageBehavior.
	 */
	previousItem(obj: GotoPageBehavior): GotoPageBehavior;

	/**
	 * Generates a string which, if executed, will return the GotoPageBehavior.
	 */
	toSource(): string;

}

/**
 * A behavior object that clears the form fields in the document.
 */
declare class ClearFormBehavior extends Behavior {
}

/**
 * A collection of clear form behavior objects.
 */
declare class ClearFormBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ClearFormBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: ClearFormBehavior;

	/**
	 * Creates a new ClearFormBehavior.
	 * @param withProperties Initial values for properties of the new ClearFormBehavior
	 */
	add(withProperties: object): ClearFormBehavior;

	/**
	 * Returns any ClearFormBehavior in the collection.
	 */
	anyItem(): ClearFormBehavior;

	/**
	 * Displays the number of elements in the ClearFormBehavior.
	 */
	count(): number;

	/**
	 * Returns every ClearFormBehavior in the collection.
	 */
	everyItem(): ClearFormBehavior[];

	/**
	 * Returns the first ClearFormBehavior in the collection.
	 */
	firstItem(): ClearFormBehavior;

	/**
	 * Returns the ClearFormBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ClearFormBehavior;

	/**
	 * Returns the ClearFormBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ClearFormBehavior;

	/**
	 * Returns the ClearFormBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ClearFormBehavior;

	/**
	 * Returns the ClearFormBehaviors within the specified range.
	 * @param from The ClearFormBehavior, index, or name at the beginning of the range.
	 * @param to The ClearFormBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: ClearFormBehavior | number | string, to: ClearFormBehavior | number | string): ClearFormBehavior[];

	/**
	 * Returns the last ClearFormBehavior in the collection.
	 */
	lastItem(): ClearFormBehavior;

	/**
	 * Returns the middle ClearFormBehavior in the collection.
	 */
	middleItem(): ClearFormBehavior;

	/**
	 * Returns the ClearFormBehavior whose index follows the specified ClearFormBehavior in the collection.
	 * @param obj The ClearFormBehavior whose index comes before the desired ClearFormBehavior.
	 */
	nextItem(obj: ClearFormBehavior): ClearFormBehavior;

	/**
	 * Returns the ClearFormBehavior with the index previous to the specified index.
	 * @param obj The index of the ClearFormBehavior that follows the desired ClearFormBehavior.
	 */
	previousItem(obj: ClearFormBehavior): ClearFormBehavior;

	/**
	 * Generates a string which, if executed, will return the ClearFormBehavior.
	 */
	toSource(): string;

}

/**
 * A behavior object that triggers print for the document.
 */
declare class PrintFormBehavior extends Behavior {
}

/**
 * A collection of print form behavior objects.
 */
declare class PrintFormBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PrintFormBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: PrintFormBehavior;

	/**
	 * Creates a new PrintFormBehavior.
	 * @param withProperties Initial values for properties of the new PrintFormBehavior
	 */
	add(withProperties: object): PrintFormBehavior;

	/**
	 * Returns any PrintFormBehavior in the collection.
	 */
	anyItem(): PrintFormBehavior;

	/**
	 * Displays the number of elements in the PrintFormBehavior.
	 */
	count(): number;

	/**
	 * Returns every PrintFormBehavior in the collection.
	 */
	everyItem(): PrintFormBehavior[];

	/**
	 * Returns the first PrintFormBehavior in the collection.
	 */
	firstItem(): PrintFormBehavior;

	/**
	 * Returns the PrintFormBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PrintFormBehavior;

	/**
	 * Returns the PrintFormBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PrintFormBehavior;

	/**
	 * Returns the PrintFormBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PrintFormBehavior;

	/**
	 * Returns the PrintFormBehaviors within the specified range.
	 * @param from The PrintFormBehavior, index, or name at the beginning of the range.
	 * @param to The PrintFormBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: PrintFormBehavior | number | string, to: PrintFormBehavior | number | string): PrintFormBehavior[];

	/**
	 * Returns the last PrintFormBehavior in the collection.
	 */
	lastItem(): PrintFormBehavior;

	/**
	 * Returns the middle PrintFormBehavior in the collection.
	 */
	middleItem(): PrintFormBehavior;

	/**
	 * Returns the PrintFormBehavior whose index follows the specified PrintFormBehavior in the collection.
	 * @param obj The PrintFormBehavior whose index comes before the desired PrintFormBehavior.
	 */
	nextItem(obj: PrintFormBehavior): PrintFormBehavior;

	/**
	 * Returns the PrintFormBehavior with the index previous to the specified index.
	 * @param obj The index of the PrintFormBehavior that follows the desired PrintFormBehavior.
	 */
	previousItem(obj: PrintFormBehavior): PrintFormBehavior;

	/**
	 * Generates a string which, if executed, will return the PrintFormBehavior.
	 */
	toSource(): string;

}

/**
 * A behavior object that submits the document.
 */
declare class SubmitFormBehavior extends Behavior {
	/**
	 * The URL.
	 */
	url: string;

}

/**
 * A collection of submit form behavior objects.
 */
declare class SubmitFormBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the SubmitFormBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: SubmitFormBehavior;

	/**
	 * Creates a new SubmitFormBehavior.
	 * @param withProperties Initial values for properties of the new SubmitFormBehavior
	 */
	add(withProperties: object): SubmitFormBehavior;

	/**
	 * Returns any SubmitFormBehavior in the collection.
	 */
	anyItem(): SubmitFormBehavior;

	/**
	 * Displays the number of elements in the SubmitFormBehavior.
	 */
	count(): number;

	/**
	 * Returns every SubmitFormBehavior in the collection.
	 */
	everyItem(): SubmitFormBehavior[];

	/**
	 * Returns the first SubmitFormBehavior in the collection.
	 */
	firstItem(): SubmitFormBehavior;

	/**
	 * Returns the SubmitFormBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): SubmitFormBehavior;

	/**
	 * Returns the SubmitFormBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): SubmitFormBehavior;

	/**
	 * Returns the SubmitFormBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): SubmitFormBehavior;

	/**
	 * Returns the SubmitFormBehaviors within the specified range.
	 * @param from The SubmitFormBehavior, index, or name at the beginning of the range.
	 * @param to The SubmitFormBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: SubmitFormBehavior | number | string, to: SubmitFormBehavior | number | string): SubmitFormBehavior[];

	/**
	 * Returns the last SubmitFormBehavior in the collection.
	 */
	lastItem(): SubmitFormBehavior;

	/**
	 * Returns the middle SubmitFormBehavior in the collection.
	 */
	middleItem(): SubmitFormBehavior;

	/**
	 * Returns the SubmitFormBehavior whose index follows the specified SubmitFormBehavior in the collection.
	 * @param obj The SubmitFormBehavior whose index comes before the desired SubmitFormBehavior.
	 */
	nextItem(obj: SubmitFormBehavior): SubmitFormBehavior;

	/**
	 * Returns the SubmitFormBehavior with the index previous to the specified index.
	 * @param obj The index of the SubmitFormBehavior that follows the desired SubmitFormBehavior.
	 */
	previousItem(obj: SubmitFormBehavior): SubmitFormBehavior;

	/**
	 * Generates a string which, if executed, will return the SubmitFormBehavior.
	 */
	toSource(): string;

}

/**
 * Timing settings.
 */
declare class TimingSetting extends Preference {
	/**
	 * A collection of timing lists.
	 */
	readonly timingLists: TimingLists;

	/**
	 * Dynamic targets on the spread that are not assigned.
	 */
	readonly unassignedDynamicTargets: object[];

}

/**
 * a timing list.
 */
declare class TimingList {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the TimingList within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the TimingList (a TimingSetting).
	 */
	readonly parent: TimingSetting;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of timing data objects.
	 */
	readonly timingGroups: TimingGroups;

	/**
	 * trigger event.
	 */
	readonly triggerEvent: DynamicTriggerEvents;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TimingList[];

	/**
	 * Deletes the TimingList.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the TimingList.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of timing lists.
 */
declare class TimingLists {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TimingList with the specified index.
	 * @param index The index.
	 */
	[index: number]: TimingList;

	/**
	 * Adds a new event-triggered timing list object.
	 * @param triggerEvent Trigger Event
	 * @param withProperties Initial values for properties of the new TimingList
	 */
	add(triggerEvent: DynamicTriggerEvents, withProperties: object): TimingList;

	/**
	 * Returns any TimingList in the collection.
	 */
	anyItem(): TimingList;

	/**
	 * Displays the number of elements in the TimingList.
	 */
	count(): number;

	/**
	 * Returns every TimingList in the collection.
	 */
	everyItem(): TimingList[];

	/**
	 * Returns the first TimingList in the collection.
	 */
	firstItem(): TimingList;

	/**
	 * Returns the TimingList with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TimingList;

	/**
	 * Returns the TimingLists within the specified range.
	 * @param from The TimingList, index, or name at the beginning of the range.
	 * @param to The TimingList, index, or name at the end of the range.
	 */
	itemByRange(from: TimingList | number | string, to: TimingList | number | string): TimingList[];

	/**
	 * Returns the last TimingList in the collection.
	 */
	lastItem(): TimingList;

	/**
	 * Returns the middle TimingList in the collection.
	 */
	middleItem(): TimingList;

	/**
	 * Returns the TimingList whose index follows the specified TimingList in the collection.
	 * @param obj The TimingList whose index comes before the desired TimingList.
	 */
	nextItem(obj: TimingList): TimingList;

	/**
	 * Returns the TimingList with the index previous to the specified index.
	 * @param obj The index of the TimingList that follows the desired TimingList.
	 */
	previousItem(obj: TimingList): TimingList;

	/**
	 * Generates a string which, if executed, will return the TimingList.
	 */
	toSource(): string;

}

/**
 * a timing group.
 */
declare class TimingGroup {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the TimingGroup within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the TimingGroup (a TimingList).
	 */
	readonly parent: TimingList;

	/**
	 * The placement of the timing group in the timing list.
	 */
	placement: number;

	/**
	 * The number of times this timing group plays.
	 */
	plays: number;

	/**
	 * Set to true if timing group loops.
	 */
	playsLoop: boolean;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of timing target.
	 */
	readonly timingTargets: TimingTargets;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TimingGroup[];

	/**
	 * Moves the timing group or target to the specified location.
	 * @param to The location in relation to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after. .
	 */
	move(to: LocationOptions, reference: TimingGroup | TimingTarget | TimingList): TimingGroup;

	/**
	 * Deletes the TimingGroup.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the TimingGroup.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Unlink all targets in the group into separate groups in this timing list.
	 */
	unlink(): void;

}

/**
 * A collection of timing data objects.
 */
declare class TimingGroups {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TimingGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: TimingGroup;

	/**
	 * Adds a new timing group.
	 * @param dynamicTarget A page item target that is an animation, media, or mso.
	 * @param delaySeconds The time delay in seconds for a target.
	 * @param withProperties Initial values for properties of the new TimingGroup
	 */
	add(dynamicTarget: PageItem | Graphic | Behavior | MediaItem, delaySeconds?: number, withProperties?: object): TimingGroup;

	/**
	 * Returns any TimingGroup in the collection.
	 */
	anyItem(): TimingGroup;

	/**
	 * Displays the number of elements in the TimingGroup.
	 */
	count(): number;

	/**
	 * Returns every TimingGroup in the collection.
	 */
	everyItem(): TimingGroup[];

	/**
	 * Returns the first TimingGroup in the collection.
	 */
	firstItem(): TimingGroup;

	/**
	 * Returns the TimingGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TimingGroup;

	/**
	 * Returns the TimingGroups within the specified range.
	 * @param from The TimingGroup, index, or name at the beginning of the range.
	 * @param to The TimingGroup, index, or name at the end of the range.
	 */
	itemByRange(from: TimingGroup | number | string, to: TimingGroup | number | string): TimingGroup[];

	/**
	 * Returns the last TimingGroup in the collection.
	 */
	lastItem(): TimingGroup;

	/**
	 * Returns the middle TimingGroup in the collection.
	 */
	middleItem(): TimingGroup;

	/**
	 * Returns the TimingGroup whose index follows the specified TimingGroup in the collection.
	 * @param obj The TimingGroup whose index comes before the desired TimingGroup.
	 */
	nextItem(obj: TimingGroup): TimingGroup;

	/**
	 * Returns the TimingGroup with the index previous to the specified index.
	 * @param obj The index of the TimingGroup that follows the desired TimingGroup.
	 */
	previousItem(obj: TimingGroup): TimingGroup;

	/**
	 * Generates a string which, if executed, will return the TimingGroup.
	 */
	toSource(): string;

}

/**
 * a timing target.
 */
declare class TimingTarget {
	/**
	 * The time delay in seconds for a single target or a group of targets after the previoius group has finished.
	 */
	delaySeconds: number;

	/**
	 * A page item target that is an animation, media, or mso.
	 */
	dynamicTarget: PageItem | Graphic | Behavior | MediaItem;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the TimingTarget within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the TimingTarget (a TimingGroup).
	 */
	readonly parent: TimingGroup;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Set to true if reversing animation on rolloff. Valid only for self rolloff trigger event.
	 */
	reverseAnimation: boolean;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TimingTarget[];

	/**
	 * Moves the timing group or target to the specified location.
	 * @param to The location in relation to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after. .
	 */
	move(to: LocationOptions, reference: TimingGroup | TimingTarget | TimingList): TimingTarget;

	/**
	 * Deletes the TimingTarget.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the TimingTarget.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Unlink target from this group and append to the end of this timing list.
	 */
	unlink(): void;

}

/**
 * A collection of timing target.
 */
declare class TimingTargets {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TimingTarget with the specified index.
	 * @param index The index.
	 */
	[index: number]: TimingTarget;

	/**
	 * Adds a new target item.
	 * @param dynamicTarget A page item target that is an animation, media, or mso.
	 * @param delaySeconds The time delay in seconds for a target.
	 * @param withProperties Initial values for properties of the new TimingTarget
	 */
	add(dynamicTarget: PageItem | Graphic | Behavior | MediaItem, delaySeconds?: number, withProperties?: object): TimingTarget;

	/**
	 * Returns any TimingTarget in the collection.
	 */
	anyItem(): TimingTarget;

	/**
	 * Displays the number of elements in the TimingTarget.
	 */
	count(): number;

	/**
	 * Returns every TimingTarget in the collection.
	 */
	everyItem(): TimingTarget[];

	/**
	 * Returns the first TimingTarget in the collection.
	 */
	firstItem(): TimingTarget;

	/**
	 * Returns the TimingTarget with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TimingTarget;

	/**
	 * Returns the TimingTargets within the specified range.
	 * @param from The TimingTarget, index, or name at the beginning of the range.
	 * @param to The TimingTarget, index, or name at the end of the range.
	 */
	itemByRange(from: TimingTarget | number | string, to: TimingTarget | number | string): TimingTarget[];

	/**
	 * Returns the last TimingTarget in the collection.
	 */
	lastItem(): TimingTarget;

	/**
	 * Returns the middle TimingTarget in the collection.
	 */
	middleItem(): TimingTarget;

	/**
	 * Returns the TimingTarget whose index follows the specified TimingTarget in the collection.
	 * @param obj The TimingTarget whose index comes before the desired TimingTarget.
	 */
	nextItem(obj: TimingTarget): TimingTarget;

	/**
	 * Returns the TimingTarget with the index previous to the specified index.
	 * @param obj The index of the TimingTarget that follows the desired TimingTarget.
	 */
	previousItem(obj: TimingTarget): TimingTarget;

	/**
	 * Generates a string which, if executed, will return the TimingTarget.
	 */
	toSource(): string;

}

/**
 * A layer.
 */
declare class Layer {
	/**
	 * Lists all graphics contained by the Layer.
	 */
	readonly allGraphics: Graphic[];

	/**
	 * Lists all page items contained by the Layer.
	 */
	readonly allPageItems: PageItem[];

	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * A collection of guides.
	 */
	readonly guides: Guides;

	/**
	 * The unique ID of the Layer.
	 */
	readonly id: number;

	/**
	 * If true, text wrap settings applied to objects on the layer will not affect text on other layers when the layer is hidden.
	 */
	ignoreWrap: boolean;

	/**
	 * The index of the Layer within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The color of the layer, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	layerColor: [number, number, number] | UIColors;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * If true, the guide positions on the layer are locked.
	 */
	lockGuides: boolean;

	/**
	 * If true, the Layer is locked.
	 */
	locked: boolean;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * The name of the Layer.
	 */
	name: string;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * The parent of the Layer (a Document).
	 */
	readonly parent: Document;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * If true, the layer will print.
	 */
	printable: boolean;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * If true, guides are visible on the layer.
	 */
	showGuides: boolean;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * If true, the Layer is visible.
	 */
	visible: boolean;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the Layer.
	 */
	duplicate(): Layer;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Layer[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Merges the layer with other layer(s).
	 * @param with_ The layer(s) with which to merge.
	 */
	merge(with_: Layer[]): Layer;

	/**
	 * Moves the Layer to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 */
	move(to: LocationOptions, reference: Layer): Layer;

	/**
	 * Deletes the Layer.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Layer.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of layers.
 */
declare class Layers {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Layer with the specified index.
	 * @param index The index.
	 */
	[index: number]: Layer;

	/**
	 * Creates a new Layer.
	 * @param withProperties Initial values for properties of the new Layer
	 */
	add(withProperties: object): Layer;

	/**
	 * Returns any Layer in the collection.
	 */
	anyItem(): Layer;

	/**
	 * Displays the number of elements in the Layer.
	 */
	count(): number;

	/**
	 * Returns every Layer in the collection.
	 */
	everyItem(): Layer[];

	/**
	 * Returns the first Layer in the collection.
	 */
	firstItem(): Layer;

	/**
	 * Returns the Layer with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Layer;

	/**
	 * Returns the Layer with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Layer;

	/**
	 * Returns the Layer with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Layer;

	/**
	 * Returns the Layers within the specified range.
	 * @param from The Layer, index, or name at the beginning of the range.
	 * @param to The Layer, index, or name at the end of the range.
	 */
	itemByRange(from: Layer | number | string, to: Layer | number | string): Layer[];

	/**
	 * Returns the last Layer in the collection.
	 */
	lastItem(): Layer;

	/**
	 * Returns the middle Layer in the collection.
	 */
	middleItem(): Layer;

	/**
	 * Returns the Layer whose index follows the specified Layer in the collection.
	 * @param obj The Layer whose index comes before the desired Layer.
	 */
	nextItem(obj: Layer): Layer;

	/**
	 * Returns the Layer with the index previous to the specified index.
	 * @param obj The index of the Layer that follows the desired Layer.
	 */
	previousItem(obj: Layer): Layer;

	/**
	 * Generates a string which, if executed, will return the Layer.
	 */
	toSource(): string;

}

/**
 * A spread.
 */
declare class Spread {
	/**
	 * Lists all graphics contained by the Spread.
	 */
	readonly allGraphics: Graphic[];

	/**
	 * Lists all page items contained by the Spread.
	 */
	readonly allPageItems: PageItem[];

	/**
	 * If true, guarantees that when pages are added to a spread it will contain a maximum of two pages. If false, allows pages to be added or moved into existing spreads. For override information, see preserve layout when shuffling.
	 */
	allowPageShuffle: boolean;

	/**
	 * The master spread applied to the Spread.
	 */
	appliedMaster: MasterSpread | NothingEnum;

	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The transparency flattener preferences override for the spread.
	 */
	flattenerOverride: SpreadFlattenerLevel;

	/**
	 * Flattener preference settings.
	 */
	readonly flattenerPreferences: FlattenerPreference;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * A collection of guides.
	 */
	readonly guides: Guides;

	/**
	 * The unique ID of the Spread.
	 */
	readonly id: number;

	/**
	 * The IDML component name of the Spread.
	 */
	idmlComponentName: string;

	/**
	 * The index of the Spread within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * The name of the Spread; this is an alias to the Spread's label property.
	 */
	name: string;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * The direction of the page transition.
	 */
	pageTransitionDirection: PageTransitionDirectionOptions;

	/**
	 * The duration of the page transition.
	 */
	pageTransitionDuration: PageTransitionDurationOptions;

	/**
	 * The type of page transition.
	 */
	pageTransitionType: PageTransitionTypeOptions;

	/**
	 * A collection of pages.
	 */
	readonly pages: Pages;

	/**
	 * The parent of the Spread (a Document).
	 */
	readonly parent: Document;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * If true, displays master page items on document pages in the spread.
	 */
	showMasterItems: boolean;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * The object timing settings.
	 */
	readonly timingSettings: TimingSetting;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicate an object and place it into the target.
	 * @param pageItems One or more page items to place or load
	 * @param linkPageItems Whether to link pageItems in content placer (if true it will override link stories value)
	 * @param linkStories Whether to link stories in content placer (only applicable for single story, pageItem links will also be created in case of more than one item)
	 * @param mapStyles Whether to map styles in content placer
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the link options dialog
	 */
	contentPlace(pageItems: PageItem[], linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, placePoint?: (number | string)[], destinationLayer?: Layer, showingOptions?: boolean): any[];

	/**
	 * Creates multiple guides on all pages of the spread.
	 * @param numberOfRows The number of rows to create on each page.
	 * @param numberOfColumns The number of columns to create on each page.
	 * @param rowGutter The height of the gutter between rows.
	 * @param columnGutter The width of the gutter between columns.
	 * @param guideColor The color to make the guides, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 * @param fitMargins If true, the row height and column width are calculated based on the space within the page margins. If false, row height and column width are calculated based on the full page.
	 * @param removeExisting If true, removes existing guides when creating new ones.
	 * @param layer The layer on which to create the guides.
	 */
	createGuides(numberOfRows?: number, numberOfColumns?: number, rowGutter?: number | string, columnGutter?: number | string, guideColor?: [number, number, number] | UIColors, fitMargins?: boolean, removeExisting?: boolean, layer?: Layer): void;

	/**
	 * Detaches an overridden master page item from the master page.
	 */
	detach(): void;

	/**
	 * Duplicates the spread.
	 * @param to The location of the spread relative to the reference object or within the document.
	 * @param reference The reference object. Note: Required only when the to parameter specifies before or after.
	 */
	duplicate(to?: LocationOptions, reference?: Spread | Document | MasterSpread): any;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Spread[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the spread.
	 * @param to The location of the spread relative to the reference object or within the document.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to?: LocationOptions, reference?: Spread | Page | Document): Spread;

	/**
	 * Places the file.
	 * @param fileName The file to place
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the import options dialog
	 * @param autoflowing Whether to autoflow placed text
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File, placePoint: (number | string)[], destinationLayer: Layer, showingOptions?: boolean, autoflowing?: boolean, withProperties?: object): any[];

	/**
	 * Deprecated: Use contentPlace method. Original Description: Create a linked story and place it into the target.
	 * @param parentStory The story to place and link from.
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the link options dialog
	 */
	placeAndLink(parentStory: Story, placePoint: (number | string)[], destinationLayer: Layer, showingOptions?: boolean): Story;

	/**
	 * Places the XML element onto a page. If the place point is above an existing page item, place the XML element into the page item.
	 * @param using The XML element to place.
	 * @param placePoint The point at which to place the object, specified in the format [x, y].
	 * @param autoflowing If true, autoflows placed text.
	 */
	placeXML(using: XMLElement, placePoint: (number | string)[], autoflowing?: boolean): PageItem;

	/**
	 * Deletes the Spread.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Removes the override from a previously overridden master page item.
	 */
	removeOverride(): void;

	/**
	 * Get the coordinates of the given location in the specified coordinate system.
	 * @param location The location requested. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param in_ The coordinate space to use.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resolve(location: any, in_: CoordinateSpaces, consideringRulerUnits?: boolean): any;

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Spread in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void;

	/**
	 * Replaces the content of XML element with content imported from a file.
	 * @param using The file path to the import file.
	 * @param relativeBasePath Base path used to resolve relative paths.
	 */
	setContent(using: string, relativeBasePath: string): PageItem;

	/**
	 * Generates a string which, if executed, will return the Spread.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Transform the page item.
	 * @param in_ The coordinate space to use
	 * @param from The temporary origin during the transformation. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param withMatrix Transform matrix.
	 * @param replacingCurrent Transform components to consider; providing this optional parameter causes the target's existing transform components to be replaced with new values.Without this parameter, the given matrix is concatenated onto the target's existing transform combining the effect of the two.
	 * @param consideringRulerUnits If true then a ruler based origin is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	transform(in_: CoordinateSpaces, from: any, withMatrix: [number, number, number, number, number, number] | TransformationMatrix, replacingCurrent: MatrixContent | MatrixContent[] | number, consideringRulerUnits?: boolean): void;

	/**
	 * Get the transformation values of the page item.
	 * @param in_ The coordinate space to use
	 */
	transformValuesOf(in_: CoordinateSpaces): TransformationMatrix[];

}

/**
 * A collection of spreads.
 */
declare class Spreads {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Spread with the specified index.
	 * @param index The index.
	 */
	[index: number]: Spread;

	/**
	 * Creates a new spread.
	 * @param at The location of the spread relative to the reference object or within the document.
	 * @param reference The reference object. Note: Required when the at parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new Spread
	 */
	add(at?: LocationOptions, reference?: Spread | Document, withProperties?: object): Spread;

	/**
	 * Returns any Spread in the collection.
	 */
	anyItem(): Spread;

	/**
	 * Displays the number of elements in the Spread.
	 */
	count(): number;

	/**
	 * Returns every Spread in the collection.
	 */
	everyItem(): Spread[];

	/**
	 * Returns the first Spread in the collection.
	 */
	firstItem(): Spread;

	/**
	 * Returns the Spread with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Spread;

	/**
	 * Returns the Spread with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Spread;

	/**
	 * Returns the Spread with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Spread;

	/**
	 * Returns the Spreads within the specified range.
	 * @param from The Spread, index, or name at the beginning of the range.
	 * @param to The Spread, index, or name at the end of the range.
	 */
	itemByRange(from: Spread | number | string, to: Spread | number | string): Spread[];

	/**
	 * Returns the last Spread in the collection.
	 */
	lastItem(): Spread;

	/**
	 * Returns the middle Spread in the collection.
	 */
	middleItem(): Spread;

	/**
	 * Returns the Spread whose index follows the specified Spread in the collection.
	 * @param obj The Spread whose index comes before the desired Spread.
	 */
	nextItem(obj: Spread): Spread;

	/**
	 * Returns the Spread with the index previous to the specified index.
	 * @param obj The index of the Spread that follows the desired Spread.
	 */
	previousItem(obj: Spread): Spread;

	/**
	 * Generates a string which, if executed, will return the Spread.
	 */
	toSource(): string;

}

/**
 * A page.
 */
declare class Page {
	/**
	 * Lists all graphics contained by the Page.
	 */
	readonly allGraphics: Graphic[];

	/**
	 * Lists all page items contained by the Page.
	 */
	readonly allPageItems: PageItem[];

	/**
	 * The alternate layout section to which the page belongs.
	 */
	readonly appliedAlternateLayout: Section;

	/**
	 * The master spread applied to the Page.
	 */
	appliedMaster: MasterSpread | NothingEnum;

	/**
	 * The section to which the page belongs.
	 */
	readonly appliedSection: Section;

	/**
	 * The trap preset applied to the page.
	 */
	appliedTrapPreset: TrapPreset | string;

	/**
	 * The bounds of the Page, in the format [y1, x1, y2, x2].
	 */
	readonly bounds: (number | string)[];

	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * The sequential number of the page within the document.
	 */
	readonly documentOffset: number;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * Default grid properties. Note: Applies to named, layout, and frame (story) grids.
	 */
	readonly gridData: GridDataInformation;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * A collection of guides.
	 */
	readonly guides: Guides;

	/**
	 * The unique ID of the Page.
	 */
	readonly id: number;

	/**
	 * The index of the Page within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * layout rule
	 */
	layoutRule: LayoutRuleOptions;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * Margin preference settings.
	 */
	readonly marginPreferences: MarginPreference;

	/**
	 * The items on a specified document page that originated on the applied master page and have not been overridden or detached.
	 */
	readonly masterPageItems: PageItem[] | Guides | Graphics | Movies | Sounds;

	/**
	 * The transform applied to the master page before it is applied to Page.
	 */
	masterPageTransform: TransformationMatrix;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * The name of the Page.
	 */
	readonly name: string;

	/**
	 * optional page for HTML5 pagination. Obsolete after CS6
	 */
	optionalPage: boolean;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The color label of the Page, specified either asan array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	pageColor: [number, number, number] | UIColors | PageColorOptions;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * The parent of the Page (a Spread or MasterSpread).
	 */
	readonly parent: any;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * The side of the binding spine on which to place the page within the spread.
	 */
	readonly side: PageSideOptions;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * snapshot blending mode
	 */
	snapshotBlendingMode: SnapshotBlendingModes;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * The order in which the focus moves to different form fields in the PDF when the tab key is pressed.
	 */
	tabOrder: Button[] | CheckBoxes | ComboBoxes | ListBoxes | RadioButtons | TextBoxes | SignatureFields;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Adjust the existing layout according to new page size, bleed and margin values. The first parameter is a plain object with key value pairs for properties affected. Permissible keys are width, height, bleedInside, bleedTop, bleedOutside, bleedBottom, leftMargin, topMargin, rightMargin, bottomMargin. The values can be specified as decimal numbers in units of Pt or as a string having a measurement value such as '1 in'. Not all properties need to be specified, only the values that need updation. Notice that when dealing with individual pages rather than the whole document, bleed changes has no effect. E.g. - app.activeDocument.adjustLayout({width:'600px', leftMargin: '1in'}), app.activeDocument.adjustLayout({rightMargin:'1in'}, app.activeDocument.spreads[0].pages), app.activeDocument.spreads[0].pages[0].adjustLayout({width:'400px', leftMargin: '10px'})
	 * @param adoptTo Change values - see functin definition for details
	 * @param affectedPages The collection of Page objects to affect . Has no effect if function is called from Page (Optional)
	 */
	adjustLayout(adoptTo: object, affectedPages: Page[]): void;

	/**
	 * Duplicate an object and place it into the target.
	 * @param pageItems One or more page items to place or load
	 * @param linkPageItems Whether to link pageItems in content placer (if true it will override link stories value)
	 * @param linkStories Whether to link stories in content placer (only applicable for single story, pageItem links will also be created in case of more than one item)
	 * @param mapStyles Whether to map styles in content placer
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the link options dialog
	 */
	contentPlace(pageItems: PageItem[], linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, placePoint?: (number | string)[], destinationLayer?: Layer, showingOptions?: boolean): any[];

	/**
	 * Delete all layout snapshots for this Page.
	 */
	deleteAllLayoutSnapshots(): void;

	/**
	 * Delete the snapshot of the layout for the current Page size and shape.
	 */
	deleteLayoutSnapshot(): void;

	/**
	 * Detaches an overridden master page item from the master page.
	 */
	detach(): void;

	/**
	 * Duplicates the page.
	 * @param to The location at which to place the duplicate page relative to the reference object or within the document or spread.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 */
	duplicate(to?: LocationOptions, reference?: Page | Spread): Page;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Page[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the page.
	 * @param to The new location of the page relative to the reference object or within the document or spread.
	 * @param reference The reference object. Note: Required when the to parameter value specifies before or after.
	 * @param binding The location of the binding spine in spreads.
	 */
	move(to?: LocationOptions, reference?: Page | Spread, binding?: BindingOptions): Page;

	/**
	 * Places the file.
	 * @param fileName The file to place
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the import options dialog
	 * @param autoflowing Whether to autoflow placed text
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File, placePoint: (number | string)[], destinationLayer: Layer, showingOptions?: boolean, autoflowing?: boolean, withProperties?: object): any[];

	/**
	 * Deprecated: Use contentPlace method. Original Description: Create a linked story and place it into the target.
	 * @param parentStory The story to place and link from.
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the link options dialog
	 */
	placeAndLink(parentStory: Story, placePoint: (number | string)[], destinationLayer: Layer, showingOptions?: boolean): Story;

	/**
	 * Places the XML element onto a page. If the place point is above an existing page item, place the XML element into the page item.
	 * @param using The XML element to place.
	 * @param placePoint The point at which to place the object, specified in the format [x, y].
	 * @param autoflowing If true, autoflows placed text.
	 */
	placeXML(using: XMLElement, placePoint: (number | string)[], autoflowing?: boolean): PageItem;

	/**
	 * Move the bounding box of the page item
	 * @param in_ The bounding box to resize. Can accept: CoordinateSpaces enumerator or Ordered array containing coordinateSpace:CoordinateSpaces enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param opposingCorners Opposing corners of new bounding box in the given coordinate space
	 */
	reframe(in_: any, opposingCorners: any[]): void;

	/**
	 * Deletes the Page.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Removes the override from a previously overridden master page item.
	 */
	removeOverride(): void;

	/**
	 * Resize the page item.
	 * @param in_ The bounding box to resize. Can accept: CoordinateSpaces enumerator, BoundingBoxLimits enumerator or Ordered array containing coordinateSpace:CoordinateSpaces enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param from The transform origin. Legal specifications: relative to bounding box: anchor | {anchor | {x,y}, bounds kind [, coordinate space]}; relative to coordinate space: {x,y} | {{x,y}[, coordinate space]}; relative to layout window ruler: {{x,y}, page index | bounds kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param by How the current dimensions are affected by the given values
	 * @param values The width and height values. Legal dimensions specifications: {x, y [, coordinate space]}, {x, resize constraint [, coordinate space]}, or {resize constraint, y [, coordinate space]}; where x and y are real numbers and coordinate space is used to determine _only_ the unit of length for x and y; coordinate space is ignored for the 'current dimensions times' resize method).
	 * @param resizeIndividually If false and multiple page items are targeted, the new dimensions are attained only by moving the individual items rather than resizing them.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resize(in_: any, from: any, by: ResizeMethods, values: number[] | ResizeConstraints | CoordinateSpaces, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;

	/**
	 * Get the coordinates of the given location in the specified coordinate system.
	 * @param location The location requested. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param in_ The coordinate space to use.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resolve(location: any, in_: CoordinateSpaces, consideringRulerUnits?: boolean): any;

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Page in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void;

	/**
	 * Replaces the content of XML element with content imported from a file.
	 * @param using The file path to the import file.
	 * @param relativeBasePath Base path used to resolve relative paths.
	 */
	setContent(using: string, relativeBasePath: string): PageItem;

	/**
	 * Create a snapshot of the layout for the current Page size and shape.
	 */
	snapshotCurrentLayout(): void;

	/**
	 * Generates a string which, if executed, will return the Page.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Transform the page item.
	 * @param in_ The coordinate space to use
	 * @param from The temporary origin during the transformation. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param withMatrix Transform matrix.
	 * @param replacingCurrent Transform components to consider; providing this optional parameter causes the target's existing transform components to be replaced with new values.Without this parameter, the given matrix is concatenated onto the target's existing transform combining the effect of the two.
	 * @param consideringRulerUnits If true then a ruler based origin is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	transform(in_: CoordinateSpaces, from: any, withMatrix: [number, number, number, number, number, number] | TransformationMatrix, replacingCurrent: MatrixContent | MatrixContent[] | number, consideringRulerUnits?: boolean): void;

	/**
	 * Get the transformation values of the page item.
	 * @param in_ The coordinate space to use
	 */
	transformValuesOf(in_: CoordinateSpaces): TransformationMatrix[];

}

/**
 * A collection of pages.
 */
declare class Pages {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Page with the specified index.
	 * @param index The index.
	 */
	[index: number]: Page;

	/**
	 * Creates a new page.
	 * @param at The location of the new page relative to the reference object or within the document or spread.
	 * @param reference The reference object. Note: Required when the at parameter value specifies before or after.
	 * @param withProperties Initial values for properties of the new Page
	 */
	add(at?: LocationOptions, reference?: Page | Spread | MasterSpread | Document, withProperties?: object): Page;

	/**
	 * Returns any Page in the collection.
	 */
	anyItem(): Page;

	/**
	 * Displays the number of elements in the Page.
	 */
	count(): number;

	/**
	 * Returns every Page in the collection.
	 */
	everyItem(): Page[];

	/**
	 * Returns the first Page in the collection.
	 */
	firstItem(): Page;

	/**
	 * Returns the Page with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Page;

	/**
	 * Returns the Page with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Page;

	/**
	 * Returns the Page with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Page;

	/**
	 * Returns the Pages within the specified range.
	 * @param from The Page, index, or name at the beginning of the range.
	 * @param to The Page, index, or name at the end of the range.
	 */
	itemByRange(from: Page | number | string, to: Page | number | string): Page[];

	/**
	 * Returns the last Page in the collection.
	 */
	lastItem(): Page;

	/**
	 * Returns the middle Page in the collection.
	 */
	middleItem(): Page;

	/**
	 * Returns the Page whose index follows the specified Page in the collection.
	 * @param obj The Page whose index comes before the desired Page.
	 */
	nextItem(obj: Page): Page;

	/**
	 * Returns the Page with the index previous to the specified index.
	 * @param obj The index of the Page that follows the desired Page.
	 */
	previousItem(obj: Page): Page;

	/**
	 * Generates a string which, if executed, will return the Page.
	 */
	toSource(): string;

}

/**
 * A master spread.
 */
declare class MasterSpread {
	/**
	 * Lists all graphics contained by the MasterSpread.
	 */
	readonly allGraphics: Graphic[];

	/**
	 * Lists all page items contained by the MasterSpread.
	 */
	readonly allPageItems: PageItem[];

	/**
	 * The master spread applied to the MasterSpread.
	 */
	appliedMaster: MasterSpread | NothingEnum;

	/**
	 * The name of the master spread.
	 */
	baseName: string;

	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * A collection of guides.
	 */
	readonly guides: Guides;

	/**
	 * The unique ID of the MasterSpread.
	 */
	readonly id: number;

	/**
	 * The IDML component name of the MasterSpread.
	 */
	idmlComponentName: string;

	/**
	 * The index of the MasterSpread within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * The name of the MasterSpread.
	 */
	readonly name: string;

	/**
	 * The prefix of the master spread name.
	 */
	namePrefix: string;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The color label of the MasterSpread, specified either asan array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	pageColor: [number, number, number] | UIColors | PageColorOptions;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of pages.
	 */
	readonly pages: Pages;

	/**
	 * The parent of the MasterSpread (a Document).
	 */
	readonly parent: Document;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * The primary text frame through which text flows on the MasterSpread. Must be a text frame or a type on a path spline.
	 */
	primaryTextFrame: PageItem | NothingEnum;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * If true, displays master page items on document pages in the spread.
	 */
	showMasterItems: boolean;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * The object timing settings.
	 */
	readonly timingSettings: TimingSetting;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicate an object and place it into the target.
	 * @param pageItems One or more page items to place or load
	 * @param linkPageItems Whether to link pageItems in content placer (if true it will override link stories value)
	 * @param linkStories Whether to link stories in content placer (only applicable for single story, pageItem links will also be created in case of more than one item)
	 * @param mapStyles Whether to map styles in content placer
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the link options dialog
	 */
	contentPlace(pageItems: PageItem[], linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, placePoint?: (number | string)[], destinationLayer?: Layer, showingOptions?: boolean): any[];

	/**
	 * Creates multiple guides on all pages of the spread.
	 * @param numberOfRows The number of rows to create on each page.
	 * @param numberOfColumns The number of columns to create on each page.
	 * @param rowGutter The height of the gutter between rows.
	 * @param columnGutter The width of the gutter between columns.
	 * @param guideColor The color to make the guides, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 * @param fitMargins If true, the row height and column width are calculated based on the space within the page margins. If false, row height and column width are calculated based on the full page.
	 * @param removeExisting If true, removes existing guides when creating new ones.
	 * @param layer The layer on which to create the guides.
	 */
	createGuides(numberOfRows?: number, numberOfColumns?: number, rowGutter?: number | string, columnGutter?: number | string, guideColor?: [number, number, number] | UIColors, fitMargins?: boolean, removeExisting?: boolean, layer?: Layer): void;

	/**
	 * Detaches an overridden master page item from the master page.
	 */
	detach(): void;

	/**
	 * Duplicates the spread.
	 * @param to The location of the spread relative to the reference object or within the document.
	 * @param reference The reference object. Note: Required only when the to parameter specifies before or after.
	 */
	duplicate(to?: LocationOptions, reference?: MasterSpread | Document): any;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): MasterSpread[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Places the file.
	 * @param fileName The file to place
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the import options dialog
	 * @param autoflowing Whether to autoflow placed text
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File, placePoint: (number | string)[], destinationLayer: Layer, showingOptions?: boolean, autoflowing?: boolean, withProperties?: object): any[];

	/**
	 * Deprecated: Use contentPlace method. Original Description: Create a linked story and place it into the target.
	 * @param parentStory The story to place and link from.
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the link options dialog
	 */
	placeAndLink(parentStory: Story, placePoint: (number | string)[], destinationLayer: Layer, showingOptions?: boolean): Story;

	/**
	 * Deletes the MasterSpread.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Removes the override from a previously overridden master page item.
	 */
	removeOverride(): void;

	/**
	 * Get the coordinates of the given location in the specified coordinate system.
	 * @param location The location requested. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param in_ The coordinate space to use.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resolve(location: any, in_: CoordinateSpaces, consideringRulerUnits?: boolean): any;

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the MasterSpread in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void;

	/**
	 * Generates a string which, if executed, will return the MasterSpread.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Transform the page item.
	 * @param in_ The coordinate space to use
	 * @param from The temporary origin during the transformation. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param withMatrix Transform matrix.
	 * @param replacingCurrent Transform components to consider; providing this optional parameter causes the target's existing transform components to be replaced with new values.Without this parameter, the given matrix is concatenated onto the target's existing transform combining the effect of the two.
	 * @param consideringRulerUnits If true then a ruler based origin is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	transform(in_: CoordinateSpaces, from: any, withMatrix: [number, number, number, number, number, number] | TransformationMatrix, replacingCurrent: MatrixContent | MatrixContent[] | number, consideringRulerUnits?: boolean): void;

	/**
	 * Get the transformation values of the page item.
	 * @param in_ The coordinate space to use
	 */
	transformValuesOf(in_: CoordinateSpaces): TransformationMatrix[];

}

/**
 * A collection of master spreads.
 */
declare class MasterSpreads {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MasterSpread with the specified index.
	 * @param index The index.
	 */
	[index: number]: MasterSpread;

	/**
	 * Creates a new master spread.
	 * @param pagesPerSpread The number of pages to include in the master spread.
	 * @param withProperties Initial values for properties of the new MasterSpread
	 */
	add(pagesPerSpread: number, withProperties: object): MasterSpread;

	/**
	 * Returns any MasterSpread in the collection.
	 */
	anyItem(): MasterSpread;

	/**
	 * Displays the number of elements in the MasterSpread.
	 */
	count(): number;

	/**
	 * Returns every MasterSpread in the collection.
	 */
	everyItem(): MasterSpread[];

	/**
	 * Returns the first MasterSpread in the collection.
	 */
	firstItem(): MasterSpread;

	/**
	 * Returns the MasterSpread with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MasterSpread;

	/**
	 * Returns the MasterSpread with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MasterSpread;

	/**
	 * Returns the MasterSpread with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MasterSpread;

	/**
	 * Returns the MasterSpreads within the specified range.
	 * @param from The MasterSpread, index, or name at the beginning of the range.
	 * @param to The MasterSpread, index, or name at the end of the range.
	 */
	itemByRange(from: MasterSpread | number | string, to: MasterSpread | number | string): MasterSpread[];

	/**
	 * Returns the last MasterSpread in the collection.
	 */
	lastItem(): MasterSpread;

	/**
	 * Returns the middle MasterSpread in the collection.
	 */
	middleItem(): MasterSpread;

	/**
	 * Returns the MasterSpread whose index follows the specified MasterSpread in the collection.
	 * @param obj The MasterSpread whose index comes before the desired MasterSpread.
	 */
	nextItem(obj: MasterSpread): MasterSpread;

	/**
	 * Returns the MasterSpread with the index previous to the specified index.
	 * @param obj The index of the MasterSpread that follows the desired MasterSpread.
	 */
	previousItem(obj: MasterSpread): MasterSpread;

	/**
	 * Generates a string which, if executed, will return the MasterSpread.
	 */
	toSource(): string;

}

/**
 * PDF attributes.
 */
declare class PDFAttribute extends Preference {
	/**
	 * The page number of the PDF document page to place.
	 */
	readonly pageNumber: number;

	/**
	 * The type of cropping to apply.
	 */
	readonly pdfCrop: PDFCrop;

	/**
	 * If true, the background of the PDF is transparent.
	 */
	readonly transparentBackground: boolean;

}

/**
 * An item on a page, including rectangles, ellipses, graphic lines, polygons, groups, text frames, and buttons.
 */
declare class PageItem {
	/**
	 * Dispatched after a PageItem is placed. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_PLACE: string;

	/**
	 * Dispatched before a PageItem is placed. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_PLACE: string;

	/**
	 * Indicates whether the PageItem has been flipped independently of its parent object and, if yes, the direction in which the PageItem was flipped.
	 */
	absoluteFlip: Flip;

	/**
	 * The horizontal scale of the PageItem relative to its containing object.
	 */
	absoluteHorizontalScale: number;

	/**
	 * The rotation angle of the PageItem relative to its containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;

	/**
	 * The skewing angle of the PageItem relative to its containing object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;

	/**
	 * The vertical scale of the PageItem relative to its containing object.
	 */
	absoluteVerticalScale: number;

	/**
	 * The list of all articles this page item is part of
	 */
	readonly allArticles: Article[];

	/**
	 * Lists all graphics contained by the PageItem.
	 */
	readonly allGraphics: Graphic[];

	/**
	 * Lists all page items contained by the PageItem.
	 */
	readonly allPageItems: PageItem[];

	/**
	 * If true, the master page item can be overridden.
	 */
	allowOverrides: boolean;

	/**
	 * The page item animation settings.
	 */
	readonly animationSettings: AnimationSetting;

	/**
	 * The object style applied to the PageItem.
	 */
	appliedObjectStyle: ObjectStyle;

	/**
	 * The arrowhead alignment applied to the PageItem.
	 */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;

	/**
	 * The XML element associated with the PageItem.
	 */
	readonly associatedXMLElement: XMLItem;

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number | string;

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number | string;

	/**
	 * Transparency settings for the content of the PageItem.
	 */
	readonly contentTransparencySettings: ContentTransparencySetting;

	/**
	 * The end shape of an open path.
	 */
	endCap: EndCap;

	/**
	 * The corner join applied to the PageItem.
	 */
	endJoin: EndJoin;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the PageItem. .
	 */
	fillColor: Swatch | string;

	/**
	 * The percent of tint to use in the PageItem's fill color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;

	/**
	 * Transparency settings for the fill applied to the PageItem.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;

	/**
	 * The direction in which to flip the printed image.
	 */
	flip: Flip;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of a dashed, dotted, or striped stroke. For information, see stroke type.
	 */
	gapColor: Swatch;

	/**
	 * The tint as a percentage of the gap color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	gapTint: number;

	/**
	 * The bounds of the PageItem excluding the stroke width, in the format [y1, x1, y2, x2], which give the coordinates of the top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: (number | string)[];

	/**
	 * The angle of a linear gradient applied to the fill of the PageItem. (Range: -180 to 180)
	 */
	gradientFillAngle: number;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the PageItem.
	 */
	gradientFillLength: number | string;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the PageItem, in the format [x, y].
	 */
	gradientFillStart: (number | string)[];

	/**
	 * The angle of a linear gradient applied to the stroke of the PageItem. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the PageItem.
	 */
	gradientStrokeLength: number | string;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the PageItem, in the format [x, y].
	 */
	gradientStrokeStart: (number | string)[];

	/**
	 * The left margin, width, and right margin constraints this item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints[];

	/**
	 * The horizontal scaling applied to the PageItem.
	 */
	horizontalScale: number;

	/**
	 * The unique ID of the PageItem.
	 */
	readonly id: number;

	/**
	 * The index of the PageItem within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The layer that the PageItem is on.
	 */
	itemLayer: Layer;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The scaling applied to the arrowhead at the start of the path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;

	/**
	 * The arrowhead applied to the start of the path.
	 */
	leftLineEnd: ArrowHead;

	/**
	 * Linked Page Item options
	 */
	readonly linkedPageItemOptions: LinkedPageItemOption;

	/**
	 * Display performance options for the PageItem.
	 */
	localDisplaySetting: DisplaySettingOptions;

	/**
	 * If true, the PageItem is locked.
	 */
	locked: boolean;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number;

	/**
	 * The name of the PageItem.
	 */
	name: string;

	/**
	 * If true, the PageItem does not print.
	 */
	nonprinting: boolean;

	/**
	 * If true, the PageItem's fill color overprints any underlying objects. If false, the fill color knocks out the underlying colors.
	 */
	overprintFill: boolean;

	/**
	 * If true, the gap color overprints any underlying colors. If false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;

	/**
	 * If true, the PageItem's stroke color overprints any underlying objects. If false, the stroke color knocks out theunderlying colors.
	 */
	overprintStroke: boolean;

	/**
	 * If true, the object originated on a master spread and was overridden. If false, the object either originated on a master spread and was not overridden, or the object did not originate on a master page.
	 */
	readonly overridden: boolean;

	/**
	 * An object that originated on a master page and has been overridden.
	 */
	readonly overriddenMasterPageItem: PageItem | Guide | Graphic | Movie | Sound;

	/**
	 * The parent of the PageItem (a XMLElement, ComboBox, ListBox, TextBox, SignatureField, Spread, MasterSpread, Polygon, GraphicLine, Rectangle, Oval, SplineItem, Group, State, Cell, Character, Sound, PlaceGun, Movie or Snippet).
	 */
	readonly parent: any;

	/**
	 * The page on which this page item appears.
	 */
	readonly parentPage: Page;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The scaling applied to the arrowhead at the end of the path. (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;

	/**
	 * The arrowhead applied to the end of the path.
	 */
	rightLineEnd: ArrowHead;

	/**
	 * The rotatation angle of the PageItem. (Range: -360 to 360)
	 */
	rotationAngle: number;

	/**
	 * The skewing angle applied to the PageItem. (Range: -360 to 360)
	 */
	shearAngle: number;

	/**
	 * The stroke alignment applied to the PageItem.
	 */
	strokeAlignment: StrokeAlignment;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the PageItem.
	 */
	strokeColor: Swatch | string;

	/**
	 * The corner adjustment applied to the PageItem.
	 */
	strokeCornerAdjustment: StrokeCornerAdjustment;

	/**
	 * The dash and gap measurements that define the pattern of a custom dashed line. Define up to six values (in points) in the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: (number | string)[];

	/**
	 * The percent of tint to use in object's stroke color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;

	/**
	 * Transparency settings for the stroke.
	 */
	readonly strokeTransparencySettings: StrokeTransparencySetting;

	/**
	 * The name of the stroke style to apply.
	 */
	strokeType: StrokeStyle | string;

	/**
	 * The weight (in points) to apply to the PageItem's stroke.
	 */
	strokeWeight: number | string;

	/**
	 * The text wrap preference properties that define the default formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;

	/**
	 * The object timing settings.
	 */
	readonly timingSettings: TimingSetting;

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	topLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	topLeftCornerRadius: number | string;

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	topRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number | string;

	/**
	 * Transparency settings.
	 */
	readonly transparencySettings: TransparencySetting;

	/**
	 * The top margin, height, and bottom margin constraints this item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints[];

	/**
	 * The vertical scaling applied to the PageItem.
	 */
	verticalScale: number;

	/**
	 * If true, the PageItem is visible.
	 */
	visible: boolean;

	/**
	 * The bounds of the PageItem including the stroke width, in the format [y1, x1, y2, x2], which give the coordinates of the top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: (number | string)[];

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Applies the specified object style.
	 * @param using The object style to apply.
	 * @param clearingOverrides If true, clears the PageItem's existing attributes before applying the style.
	 * @param clearingOverridesThroughRootObjectStyle If true, clears attributes and formatting applied to the PageItem that are not defined in the object style.
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;

	/**
	 * asynchronously exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	asynchronousExportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;

	/**
	 * Tag the object or the parent story using default tags defined in XML preference.
	 */
	autoTag(): void;

	/**
	 * Finds objects that match the find what value and replace the objects with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeObject(reverseOrder: boolean): PageItem[];

	/**
	 * Clear overrides for object style
	 */
	clearObjectStyleOverrides(): void;

	/**
	 * Clears transformations from the PageItem. Transformations include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;

	/**
	 * Duplicate an object and place it into the target page item.
	 * @param pageItems One or more page items to place or load
	 * @param linkPageItems Whether to link pageItems in content placer (if true it will override link stories value)
	 * @param linkStories Whether to link stories in content placer (only applicable for single story, pageItem links will also be created in case of more than one item)
	 * @param mapStyles Whether to map styles in content placer
	 * @param showingOptions Whether to display the link options dialog
	 */
	contentPlace(pageItems: PageItem[], linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any[];

	/**
	 * Converts the PageItem to a different shape.
	 * @param given The PageItem's new shape.
	 * @param numberOfSides The number of sides for the resulting polygon. (Range: 3 to 100)
	 * @param insetPercentage The star inset percentage for the resulting polygon. (Range: 0.0 to 100.0)
	 * @param cornerRadius The corner radius of the resulting rectangle.
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number | string): void;

	/**
	 * Create Email QR Code on the page item or document
	 * @param emailAddress QR code Email Address
	 * @param subject QR code Email Subject
	 * @param body QR code Email Body Message
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new PageItem. Above parameters can also be passed as properties
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param urlLink QR code Hyperlink URL
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new PageItem. Above parameters can also be passed as properties
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Create Plain Text QR Code on the page item
	 * @param plainText QR code Plain Text
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new PageItem. Above parameters can also be passed as properties
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param cellNumber QR code Text Phone Number
	 * @param textMessage QR code Text Message
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new PageItem. Above parameters can also be passed as properties
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Create Business Card QR Code on the page item or load on document's placegun
	 * @param firstName QR code Business Card First Name
	 * @param lastName QR code Business Card Last Name
	 * @param jobTitle QR code Business Card Title
	 * @param cellPhone QR code Business Card Cell Phone Number
	 * @param phone QR code Business Card Phone Number
	 * @param email QR code Business Card Email Address
	 * @param organisation QR code Business Card Organisation
	 * @param streetAddress QR code Business Card Street Address
	 * @param city QR code Business Card City
	 * @param adrState QR code Business Card State
	 * @param country QR code Business Card Country
	 * @param postalCode QR code Business Card Postal Code
	 * @param website QR code Business Card URL
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new PageItem. Above parameters can also be passed as properties
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Detaches an overridden master page item from the master page.
	 */
	detach(): void;

	/**
	 * Duplicates the PageItem at the specified location or offset.
	 * @param to The location of the new PageItem, specified in coordinates in the format [x, y].
	 * @param by Amount by which to offset the new PageItem from the original PageItem's position.
	 */
	duplicate(to: [number | string, number | string] | Spread | Page | Layer, by: (number | string)[]): PageItem;

	/**
	 * Exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	exportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Finds objects that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findObject(reverseOrder: boolean): PageItem[];

	/**
	 * Applies the specified fit option to content in a frame.
	 * @param given The fit option to use.
	 */
	fit(given: FitOptions): void;

	/**
	 * Flips the PageItem.
	 * @param given The axis around which to flip the PageItem.
	 * @param around The point around which to flip the PageItem.
	 */
	flipItem(given: Flip, around: [number | string, number | string] | AnchorPoint): void;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PageItem[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Associates the page item with the specified XML element while preserving existing content.
	 * @param using The XML element.
	 */
	markup(using: XMLElement): void;

	/**
	 * Moves the PageItem to a new location. Note: Either the 'to' or 'by' parameter is required; if both parameters are defined, only the to value is used.
	 * @param to The new location of the PageItem,in the format (x, y).
	 * @param by The amount (in measurement units) to move the PageItem relative to its current position, in the format (x, y).
	 */
	move(to: [number | string, number | string] | Spread | Page | Layer, by: (number | string)[]): void;

	/**
	 * Overrides a master page item and places the item on the document page as a new object.
	 * @param destinationPage The document page that contains the master page item to override.
	 */
	override(destinationPage: Page): any;

	/**
	 * Places the file.
	 * @param fileName The file to place
	 * @param showingOptions Whether to display the import options dialog
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: object): any[];

	/**
	 * Places XML content into the specified object. Note: Replaces any existing content.
	 * @param using The XML element whose content you want to place.
	 */
	placeXML(using: XMLElement): void;

	/**
	 * Apply an item's scaling to its content if possible.
	 * @param to The scale factors to be left on the item.The default is {1.0, 1.0}.
	 */
	redefineScaling(to: number[]): void;

	/**
	 * Move the bounding box of the page item
	 * @param in_ The bounding box to resize. Can accept: CoordinateSpaces enumerator or Ordered array containing coordinateSpace:CoordinateSpaces enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param opposingCorners Opposing corners of new bounding box in the given coordinate space
	 */
	reframe(in_: any, opposingCorners: any[]): void;

	/**
	 * Deletes the PageItem.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Removes the override from a previously overridden master page item.
	 */
	removeOverride(): void;

	/**
	 * Resize the page item.
	 * @param in_ The bounding box to resize. Can accept: CoordinateSpaces enumerator, BoundingBoxLimits enumerator or Ordered array containing coordinateSpace:CoordinateSpaces enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param from The transform origin. Legal specifications: relative to bounding box: anchor | {anchor | {x,y}, bounds kind [, coordinate space]}; relative to coordinate space: {x,y} | {{x,y}[, coordinate space]}; relative to layout window ruler: {{x,y}, page index | bounds kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param by How the current dimensions are affected by the given values
	 * @param values The width and height values. Legal dimensions specifications: {x, y [, coordinate space]}, {x, resize constraint [, coordinate space]}, or {resize constraint, y [, coordinate space]}; where x and y are real numbers and coordinate space is used to determine _only_ the unit of length for x and y; coordinate space is ignored for the 'current dimensions times' resize method).
	 * @param resizeIndividually If false and multiple page items are targeted, the new dimensions are attained only by moving the individual items rather than resizing them.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resize(in_: any, from: any, by: ResizeMethods, values: number[] | ResizeConstraints | CoordinateSpaces, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;

	/**
	 * Get the coordinates of the given location in the specified coordinate system.
	 * @param location The location requested. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param in_ The coordinate space to use.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resolve(location: any, in_: CoordinateSpaces, consideringRulerUnits?: boolean): any;

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the PageItem in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void;

	/**
	 * Stores the object in the specified library.
	 * @param using The library in which to store the object.
	 * @param withProperties Initial values for properties of the new PageItem
	 */
	store(using: Library, withProperties: object): Asset;

	/**
	 * Generates a string which, if executed, will return the PageItem.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Transform the page item.
	 * @param in_ The coordinate space to use
	 * @param from The temporary origin during the transformation. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param withMatrix Transform matrix.
	 * @param replacingCurrent Transform components to consider; providing this optional parameter causes the target's existing transform components to be replaced with new values.Without this parameter, the given matrix is concatenated onto the target's existing transform combining the effect of the two.
	 * @param consideringRulerUnits If true then a ruler based origin is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	transform(in_: CoordinateSpaces, from: any, withMatrix: [number, number, number, number, number, number] | TransformationMatrix, replacingCurrent: MatrixContent | MatrixContent[] | number, consideringRulerUnits?: boolean): void;

	/**
	 * Transforms the PageItem using the last transformation performed on any object. Transformations include moving, rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string[];

	/**
	 * Transforms the PageItem using the last transformation performed on any PageItem. Transformations include moving, rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string[];

	/**
	 * Transforms the PageItem using the last sequence of transform operations performed on any single object or performed at the same time on any group of objects. Transformations include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string[];

	/**
	 * Transforms the PageItem using the last sequence of transformations performed on any single object or performed at the same time on any group of objects. Transformations include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string[];

	/**
	 * Get the transformation values of the page item.
	 * @param in_ The coordinate space to use
	 */
	transformValuesOf(in_: CoordinateSpaces): TransformationMatrix[];

}

/**
 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
 */
declare class PageItems {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PageItem with the specified index.
	 * @param index The index.
	 */
	[index: number]: PageItem;

	/**
	 * Returns any PageItem in the collection.
	 */
	anyItem(): PageItem;

	/**
	 * Displays the number of elements in the PageItem.
	 */
	count(): number;

	/**
	 * Returns every PageItem in the collection.
	 */
	everyItem(): PageItem[];

	/**
	 * Returns the first PageItem in the collection.
	 */
	firstItem(): PageItem;

	/**
	 * Returns the PageItem with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PageItem;

	/**
	 * Returns the PageItem with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PageItem;

	/**
	 * Returns the PageItem with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PageItem;

	/**
	 * Returns the PageItems within the specified range.
	 * @param from The PageItem, index, or name at the beginning of the range.
	 * @param to The PageItem, index, or name at the end of the range.
	 */
	itemByRange(from: PageItem | number | string, to: PageItem | number | string): PageItem[];

	/**
	 * Returns the last PageItem in the collection.
	 */
	lastItem(): PageItem;

	/**
	 * Returns the middle PageItem in the collection.
	 */
	middleItem(): PageItem;

	/**
	 * Returns the PageItem whose index follows the specified PageItem in the collection.
	 * @param obj The PageItem whose index comes before the desired PageItem.
	 */
	nextItem(obj: PageItem): PageItem;

	/**
	 * Returns the PageItem with the index previous to the specified index.
	 * @param obj The index of the PageItem that follows the desired PageItem.
	 */
	previousItem(obj: PageItem): PageItem;

	/**
	 * Generates a string which, if executed, will return the PageItem.
	 */
	toSource(): string;

}

/**
 * An ellipse.
 */
declare class Oval extends SplineItem {
	/**
	 * The frame fitting option to apply to placed or pasted content. Can be applied to a frame, object style, or document or to the application.
	 */
	readonly frameFittingOptions: FrameFittingOption;

	/**
	 * Export options for InCopy INCX document format.
	 */
	readonly incopyExportOptions: InCopyExportOption;

	/**
	 * Title for this InCopy story.
	 */
	storyTitle: string;

	/**
	 * Removes the frame fittings options and resets it to the initial state.
	 */
	clearFrameFittingOptions(): void;

}

/**
 * A collection of ellipses.
 */
declare class Ovals {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Oval with the specified index.
	 * @param index The index.
	 */
	[index: number]: Oval;

	/**
	 * Creates a new Oval
	 * @param layer The layer on which to create the Oval.
	 * @param at The location at which to insert the Oval relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Oval
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Oval;

	/**
	 * Returns any Oval in the collection.
	 */
	anyItem(): Oval;

	/**
	 * Displays the number of elements in the Oval.
	 */
	count(): number;

	/**
	 * Returns every Oval in the collection.
	 */
	everyItem(): Oval[];

	/**
	 * Returns the first Oval in the collection.
	 */
	firstItem(): Oval;

	/**
	 * Returns the Oval with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Oval;

	/**
	 * Returns the Oval with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Oval;

	/**
	 * Returns the Oval with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Oval;

	/**
	 * Returns the Ovals within the specified range.
	 * @param from The Oval, index, or name at the beginning of the range.
	 * @param to The Oval, index, or name at the end of the range.
	 */
	itemByRange(from: Oval | number | string, to: Oval | number | string): Oval[];

	/**
	 * Returns the last Oval in the collection.
	 */
	lastItem(): Oval;

	/**
	 * Returns the middle Oval in the collection.
	 */
	middleItem(): Oval;

	/**
	 * Returns the Oval whose index follows the specified Oval in the collection.
	 * @param obj The Oval whose index comes before the desired Oval.
	 */
	nextItem(obj: Oval): Oval;

	/**
	 * Returns the Oval with the index previous to the specified index.
	 * @param obj The index of the Oval that follows the desired Oval.
	 */
	previousItem(obj: Oval): Oval;

	/**
	 * Generates a string which, if executed, will return the Oval.
	 */
	toSource(): string;

}

/**
 * A rectangle.
 */
declare class Rectangle extends SplineItem {
	/**
	 * The frame fitting option to apply to placed or pasted content. Can be applied to a frame, object style, or document or to the application.
	 */
	readonly frameFittingOptions: FrameFittingOption;

	/**
	 * Export options for InCopy INCX document format.
	 */
	readonly incopyExportOptions: InCopyExportOption;

	/**
	 * Title for this InCopy story.
	 */
	storyTitle: string;

	/**
	 * Removes the frame fittings options and resets it to the initial state.
	 */
	clearFrameFittingOptions(): void;

}

/**
 * A collection of rectangles.
 */
declare class Rectangles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Rectangle with the specified index.
	 * @param index The index.
	 */
	[index: number]: Rectangle;

	/**
	 * Creates a new Rectangle
	 * @param layer The layer on which to create the Rectangle.
	 * @param at The location at which to insert the Rectangle relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Rectangle
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Rectangle;

	/**
	 * Returns any Rectangle in the collection.
	 */
	anyItem(): Rectangle;

	/**
	 * Displays the number of elements in the Rectangle.
	 */
	count(): number;

	/**
	 * Returns every Rectangle in the collection.
	 */
	everyItem(): Rectangle[];

	/**
	 * Returns the first Rectangle in the collection.
	 */
	firstItem(): Rectangle;

	/**
	 * Returns the Rectangle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Rectangle;

	/**
	 * Returns the Rectangle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Rectangle;

	/**
	 * Returns the Rectangle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Rectangle;

	/**
	 * Returns the Rectangles within the specified range.
	 * @param from The Rectangle, index, or name at the beginning of the range.
	 * @param to The Rectangle, index, or name at the end of the range.
	 */
	itemByRange(from: Rectangle | number | string, to: Rectangle | number | string): Rectangle[];

	/**
	 * Returns the last Rectangle in the collection.
	 */
	lastItem(): Rectangle;

	/**
	 * Returns the middle Rectangle in the collection.
	 */
	middleItem(): Rectangle;

	/**
	 * Returns the Rectangle whose index follows the specified Rectangle in the collection.
	 * @param obj The Rectangle whose index comes before the desired Rectangle.
	 */
	nextItem(obj: Rectangle): Rectangle;

	/**
	 * Returns the Rectangle with the index previous to the specified index.
	 * @param obj The index of the Rectangle that follows the desired Rectangle.
	 */
	previousItem(obj: Rectangle): Rectangle;

	/**
	 * Generates a string which, if executed, will return the Rectangle.
	 */
	toSource(): string;

}

/**
 * A straight line consisting of two points.
 */
declare class GraphicLine extends SplineItem {
}

/**
 * A collection of graphic lines.
 */
declare class GraphicLines {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GraphicLine with the specified index.
	 * @param index The index.
	 */
	[index: number]: GraphicLine;

	/**
	 * Creates a new GraphicLine
	 * @param layer The layer on which to create the GraphicLine.
	 * @param at The location at which to insert the GraphicLine relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new GraphicLine
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): GraphicLine;

	/**
	 * Returns any GraphicLine in the collection.
	 */
	anyItem(): GraphicLine;

	/**
	 * Displays the number of elements in the GraphicLine.
	 */
	count(): number;

	/**
	 * Returns every GraphicLine in the collection.
	 */
	everyItem(): GraphicLine[];

	/**
	 * Returns the first GraphicLine in the collection.
	 */
	firstItem(): GraphicLine;

	/**
	 * Returns the GraphicLine with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GraphicLine;

	/**
	 * Returns the GraphicLine with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GraphicLine;

	/**
	 * Returns the GraphicLine with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GraphicLine;

	/**
	 * Returns the GraphicLines within the specified range.
	 * @param from The GraphicLine, index, or name at the beginning of the range.
	 * @param to The GraphicLine, index, or name at the end of the range.
	 */
	itemByRange(from: GraphicLine | number | string, to: GraphicLine | number | string): GraphicLine[];

	/**
	 * Returns the last GraphicLine in the collection.
	 */
	lastItem(): GraphicLine;

	/**
	 * Returns the middle GraphicLine in the collection.
	 */
	middleItem(): GraphicLine;

	/**
	 * Returns the GraphicLine whose index follows the specified GraphicLine in the collection.
	 * @param obj The GraphicLine whose index comes before the desired GraphicLine.
	 */
	nextItem(obj: GraphicLine): GraphicLine;

	/**
	 * Returns the GraphicLine with the index previous to the specified index.
	 * @param obj The index of the GraphicLine that follows the desired GraphicLine.
	 */
	previousItem(obj: GraphicLine): GraphicLine;

	/**
	 * Generates a string which, if executed, will return the GraphicLine.
	 */
	toSource(): string;

}

/**
 * A polygon. Any shape that is not a rectangle, ellipse, or graphic line. When you add a polygon, InDesign creates a regular polygon based on the current polygon preferences settings.
 */
declare class Polygon extends SplineItem {
	/**
	 * The frame fitting option to apply to placed or pasted content. Can be applied to a frame, object style, or document or to the application.
	 */
	readonly frameFittingOptions: FrameFittingOption;

	/**
	 * Export options for InCopy INCX document format.
	 */
	readonly incopyExportOptions: InCopyExportOption;

	/**
	 * Title for this InCopy story.
	 */
	storyTitle: string;

	/**
	 * Removes the frame fittings options and resets it to the initial state.
	 */
	clearFrameFittingOptions(): void;

}

/**
 * A collection of polygons.
 */
declare class Polygons {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Polygon with the specified index.
	 * @param index The index.
	 */
	[index: number]: Polygon;

	/**
	 * Creates a new Polygon.
	 * @param layer The layer on which to create the Polygon.
	 * @param numberOfSides The number of sides to give the Polygon. (Range: 3 to 100)
	 * @param insetPercentage The star inset percentage applied to the Polygon.
	 * @param at The location at which to insert the Polygon relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Polygon
	 */
	add(layer: Layer, numberOfSides: number, insetPercentage: number, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Polygon;

	/**
	 * Returns any Polygon in the collection.
	 */
	anyItem(): Polygon;

	/**
	 * Displays the number of elements in the Polygon.
	 */
	count(): number;

	/**
	 * Returns every Polygon in the collection.
	 */
	everyItem(): Polygon[];

	/**
	 * Returns the first Polygon in the collection.
	 */
	firstItem(): Polygon;

	/**
	 * Returns the Polygon with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Polygon;

	/**
	 * Returns the Polygon with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Polygon;

	/**
	 * Returns the Polygon with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Polygon;

	/**
	 * Returns the Polygons within the specified range.
	 * @param from The Polygon, index, or name at the beginning of the range.
	 * @param to The Polygon, index, or name at the end of the range.
	 */
	itemByRange(from: Polygon | number | string, to: Polygon | number | string): Polygon[];

	/**
	 * Returns the last Polygon in the collection.
	 */
	lastItem(): Polygon;

	/**
	 * Returns the middle Polygon in the collection.
	 */
	middleItem(): Polygon;

	/**
	 * Returns the Polygon whose index follows the specified Polygon in the collection.
	 * @param obj The Polygon whose index comes before the desired Polygon.
	 */
	nextItem(obj: Polygon): Polygon;

	/**
	 * Returns the Polygon with the index previous to the specified index.
	 * @param obj The index of the Polygon that follows the desired Polygon.
	 */
	previousItem(obj: Polygon): Polygon;

	/**
	 * Generates a string which, if executed, will return the Polygon.
	 */
	toSource(): string;

}

/**
 * A group.
 */
declare class Group extends PageItem {
	/**
	 * Anchored object settings.
	 */
	readonly anchoredObjectSettings: AnchoredObjectSetting;

	/**
	 * A collection of group items that are also part of an article.
	 */
	readonly articleChildren: ArticleChildren;

	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * Export options for the object
	 */
	readonly objectExportOptions: ObjectExportOption;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * Brings the Group forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the Group to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Sends the Group back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the Group to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

	/**
	 * Ungroups the group.
	 */
	ungroup(): void;

}

/**
 * A collection of groups.
 */
declare class Groups {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Group with the specified index.
	 * @param index The index.
	 */
	[index: number]: Group;

	/**
	 * Creates a new Group.
	 * @param groupItems The objects to group.
	 * @param layer The layer on which to create the Group.
	 * @param at The location at which to insert the Group relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Group
	 */
	add(groupItems: PageItem[], layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Group;

	/**
	 * Returns any Group in the collection.
	 */
	anyItem(): Group;

	/**
	 * Displays the number of elements in the Group.
	 */
	count(): number;

	/**
	 * Returns every Group in the collection.
	 */
	everyItem(): Group[];

	/**
	 * Returns the first Group in the collection.
	 */
	firstItem(): Group;

	/**
	 * Returns the Group with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Group;

	/**
	 * Returns the Group with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Group;

	/**
	 * Returns the Group with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Group;

	/**
	 * Returns the Groups within the specified range.
	 * @param from The Group, index, or name at the beginning of the range.
	 * @param to The Group, index, or name at the end of the range.
	 */
	itemByRange(from: Group | number | string, to: Group | number | string): Group[];

	/**
	 * Returns the last Group in the collection.
	 */
	lastItem(): Group;

	/**
	 * Returns the middle Group in the collection.
	 */
	middleItem(): Group;

	/**
	 * Returns the Group whose index follows the specified Group in the collection.
	 * @param obj The Group whose index comes before the desired Group.
	 */
	nextItem(obj: Group): Group;

	/**
	 * Returns the Group with the index previous to the specified index.
	 * @param obj The index of the Group that follows the desired Group.
	 */
	previousItem(obj: Group): Group;

	/**
	 * Generates a string which, if executed, will return the Group.
	 */
	toSource(): string;

}

/**
 * An imported bitmap image in any bitmap file format (including TIFF, JPEG, or GIF).
 */
declare class Image extends Graphic {
	/**
	 * The native resolution of a placed graphic.
	 */
	readonly actualPpi: number[];

	/**
	 * Clipping path settings.
	 */
	readonly clippingPath: ClippingPathSettings;

	/**
	 * The resolution of a graphic after it has been resized.
	 */
	readonly effectivePpi: number[];

	/**
	 * Graphic layer option settings.
	 */
	readonly graphicLayerOptions: GraphicLayerOption;

	/**
	 * The image I/O preference properties that define preferences for importing images.
	 */
	readonly imageIOPreferences: ImageIOPreference;

	/**
	 * The rendering intent override applied to the image.
	 */
	imageRenderingIntent: RenderingIntent;

	/**
	 * The color profile.
	 */
	profile: Profile | string;

	/**
	 * A list of valid RGB profiles.
	 */
	readonly profileList: string[];

	/**
	 * The color space.
	 */
	readonly space: string;

}

/**
 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
 */
declare class Images {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Image with the specified index.
	 * @param index The index.
	 */
	[index: number]: Image;

	/**
	 * Returns any Image in the collection.
	 */
	anyItem(): Image;

	/**
	 * Displays the number of elements in the Image.
	 */
	count(): number;

	/**
	 * Returns every Image in the collection.
	 */
	everyItem(): Image[];

	/**
	 * Returns the first Image in the collection.
	 */
	firstItem(): Image;

	/**
	 * Returns the Image with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Image;

	/**
	 * Returns the Image with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Image;

	/**
	 * Returns the Image with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Image;

	/**
	 * Returns the Images within the specified range.
	 * @param from The Image, index, or name at the beginning of the range.
	 * @param to The Image, index, or name at the end of the range.
	 */
	itemByRange(from: Image | number | string, to: Image | number | string): Image[];

	/**
	 * Returns the last Image in the collection.
	 */
	lastItem(): Image;

	/**
	 * Returns the middle Image in the collection.
	 */
	middleItem(): Image;

	/**
	 * Returns the Image whose index follows the specified Image in the collection.
	 * @param obj The Image whose index comes before the desired Image.
	 */
	nextItem(obj: Image): Image;

	/**
	 * Returns the Image with the index previous to the specified index.
	 * @param obj The index of the Image that follows the desired Image.
	 */
	previousItem(obj: Image): Image;

	/**
	 * Generates a string which, if executed, will return the Image.
	 */
	toSource(): string;

}

/**
 * A placed EPS file.
 */
declare class EPS extends Graphic {
	/**
	 * The native resolution of a placed graphic.
	 */
	readonly actualPpi: number[];

	/**
	 * Clipping path settings.
	 */
	readonly clippingPath: ClippingPathSettings;

	/**
	 * The color profile policy for CMYK content in a placed vector.
	 */
	cmykVectorPolicy: PlacedVectorProfilePolicy;

	/**
	 * The resolution of a graphic after it has been resized.
	 */
	readonly effectivePpi: number[];

	/**
	 * The color profile policy for grayscale content in a placed vector.
	 */
	grayVectorPolicy: PlacedVectorProfilePolicy;

	/**
	 * The color profile policy for RGB content in a placed vector.
	 */
	rgbVectorPolicy: PlacedVectorProfilePolicy;

	/**
	 * The color space.
	 */
	readonly space: string;

}

/**
 * A collection of EPS files.
 */
declare class EPSs {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the EPS with the specified index.
	 * @param index The index.
	 */
	[index: number]: EPS;

	/**
	 * Returns any EPS in the collection.
	 */
	anyItem(): EPS;

	/**
	 * Displays the number of elements in the EPS.
	 */
	count(): number;

	/**
	 * Returns every EPS in the collection.
	 */
	everyItem(): EPS[];

	/**
	 * Returns the first EPS in the collection.
	 */
	firstItem(): EPS;

	/**
	 * Returns the EPS with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): EPS;

	/**
	 * Returns the EPS with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): EPS;

	/**
	 * Returns the EPS with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): EPS;

	/**
	 * Returns the EPSs within the specified range.
	 * @param from The EPS, index, or name at the beginning of the range.
	 * @param to The EPS, index, or name at the end of the range.
	 */
	itemByRange(from: EPS | number | string, to: EPS | number | string): EPS[];

	/**
	 * Returns the last EPS in the collection.
	 */
	lastItem(): EPS;

	/**
	 * Returns the middle EPS in the collection.
	 */
	middleItem(): EPS;

	/**
	 * Returns the EPS whose index follows the specified EPS in the collection.
	 * @param obj The EPS whose index comes before the desired EPS.
	 */
	nextItem(obj: EPS): EPS;

	/**
	 * Returns the EPS with the index previous to the specified index.
	 * @param obj The index of the EPS that follows the desired EPS.
	 */
	previousItem(obj: EPS): EPS;

	/**
	 * Generates a string which, if executed, will return the EPS.
	 */
	toSource(): string;

}

/**
 * A placed PDF file.
 */
declare class PDF extends Graphic {
	/**
	 * Clipping path settings.
	 */
	readonly clippingPath: ClippingPathSettings;

	/**
	 * The color profile policy for CMYK content in a placed vector.
	 */
	cmykVectorPolicy: PlacedVectorProfilePolicy;

	/**
	 * Graphic layer option settings.
	 */
	readonly graphicLayerOptions: GraphicLayerOption;

	/**
	 * The color profile policy for grayscale content in a placed vector.
	 */
	grayVectorPolicy: PlacedVectorProfilePolicy;

	/**
	 * PDF attribute settings.
	 */
	readonly pdfAttributes: PDFAttribute;

	/**
	 * The color profile policy for RGB content in a placed vector.
	 */
	rgbVectorPolicy: PlacedVectorProfilePolicy;

}

/**
 * A collection of PDF files.
 */
declare class PDFs {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PDF with the specified index.
	 * @param index The index.
	 */
	[index: number]: PDF;

	/**
	 * Returns any PDF in the collection.
	 */
	anyItem(): PDF;

	/**
	 * Displays the number of elements in the PDF.
	 */
	count(): number;

	/**
	 * Returns every PDF in the collection.
	 */
	everyItem(): PDF[];

	/**
	 * Returns the first PDF in the collection.
	 */
	firstItem(): PDF;

	/**
	 * Returns the PDF with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PDF;

	/**
	 * Returns the PDF with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PDF;

	/**
	 * Returns the PDF with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PDF;

	/**
	 * Returns the PDFs within the specified range.
	 * @param from The PDF, index, or name at the beginning of the range.
	 * @param to The PDF, index, or name at the end of the range.
	 */
	itemByRange(from: PDF | number | string, to: PDF | number | string): PDF[];

	/**
	 * Returns the last PDF in the collection.
	 */
	lastItem(): PDF;

	/**
	 * Returns the middle PDF in the collection.
	 */
	middleItem(): PDF;

	/**
	 * Returns the PDF whose index follows the specified PDF in the collection.
	 * @param obj The PDF whose index comes before the desired PDF.
	 */
	nextItem(obj: PDF): PDF;

	/**
	 * Returns the PDF with the index previous to the specified index.
	 * @param obj The index of the PDF that follows the desired PDF.
	 */
	previousItem(obj: PDF): PDF;

	/**
	 * Generates a string which, if executed, will return the PDF.
	 */
	toSource(): string;

}

/**
 * A placed WMF graphic.
 */
declare class WMF extends Graphic {
	/**
	 * Clipping path settings.
	 */
	readonly clippingPath: ClippingPathSettings;

}

/**
 * A collection of WMF graphics.
 */
declare class WMFs {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the WMF with the specified index.
	 * @param index The index.
	 */
	[index: number]: WMF;

	/**
	 * Returns any WMF in the collection.
	 */
	anyItem(): WMF;

	/**
	 * Displays the number of elements in the WMF.
	 */
	count(): number;

	/**
	 * Returns every WMF in the collection.
	 */
	everyItem(): WMF[];

	/**
	 * Returns the first WMF in the collection.
	 */
	firstItem(): WMF;

	/**
	 * Returns the WMF with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): WMF;

	/**
	 * Returns the WMF with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): WMF;

	/**
	 * Returns the WMF with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): WMF;

	/**
	 * Returns the WMFs within the specified range.
	 * @param from The WMF, index, or name at the beginning of the range.
	 * @param to The WMF, index, or name at the end of the range.
	 */
	itemByRange(from: WMF | number | string, to: WMF | number | string): WMF[];

	/**
	 * Returns the last WMF in the collection.
	 */
	lastItem(): WMF;

	/**
	 * Returns the middle WMF in the collection.
	 */
	middleItem(): WMF;

	/**
	 * Returns the WMF whose index follows the specified WMF in the collection.
	 * @param obj The WMF whose index comes before the desired WMF.
	 */
	nextItem(obj: WMF): WMF;

	/**
	 * Returns the WMF with the index previous to the specified index.
	 * @param obj The index of the WMF that follows the desired WMF.
	 */
	previousItem(obj: WMF): WMF;

	/**
	 * Generates a string which, if executed, will return the WMF.
	 */
	toSource(): string;

}

/**
 * A placed PICT graphic.
 */
declare class PICT extends Graphic {
	/**
	 * Clipping path settings.
	 */
	readonly clippingPath: ClippingPathSettings;

}

/**
 * A collection of PICT graphics.
 */
declare class PICTs {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PICT with the specified index.
	 * @param index The index.
	 */
	[index: number]: PICT;

	/**
	 * Returns any PICT in the collection.
	 */
	anyItem(): PICT;

	/**
	 * Displays the number of elements in the PICT.
	 */
	count(): number;

	/**
	 * Returns every PICT in the collection.
	 */
	everyItem(): PICT[];

	/**
	 * Returns the first PICT in the collection.
	 */
	firstItem(): PICT;

	/**
	 * Returns the PICT with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PICT;

	/**
	 * Returns the PICT with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PICT;

	/**
	 * Returns the PICT with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PICT;

	/**
	 * Returns the PICTs within the specified range.
	 * @param from The PICT, index, or name at the beginning of the range.
	 * @param to The PICT, index, or name at the end of the range.
	 */
	itemByRange(from: PICT | number | string, to: PICT | number | string): PICT[];

	/**
	 * Returns the last PICT in the collection.
	 */
	lastItem(): PICT;

	/**
	 * Returns the middle PICT in the collection.
	 */
	middleItem(): PICT;

	/**
	 * Returns the PICT whose index follows the specified PICT in the collection.
	 * @param obj The PICT whose index comes before the desired PICT.
	 */
	nextItem(obj: PICT): PICT;

	/**
	 * Returns the PICT with the index previous to the specified index.
	 * @param obj The index of the PICT that follows the desired PICT.
	 */
	previousItem(obj: PICT): PICT;

	/**
	 * Generates a string which, if executed, will return the PICT.
	 */
	toSource(): string;

}

/**
 * An imported graphic in any graphic file format (including vector, metafile, and bitmap formats).
 */
declare class Graphic extends PageItem {
	/**
	 * The type of the image.
	 */
	readonly imageTypeName: string;

	/**
	 * The source file of the link.
	 */
	readonly itemLink: Link;

	/**
	 * Exports the Graphic for the web.
	 * @param to The full path name of the exported file.
	 */
	exportForWeb(to: File): string[];

}

/**
 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
 */
declare class Graphics {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Graphic with the specified index.
	 * @param index The index.
	 */
	[index: number]: Graphic;

	/**
	 * Returns any Graphic in the collection.
	 */
	anyItem(): Graphic;

	/**
	 * Displays the number of elements in the Graphic.
	 */
	count(): number;

	/**
	 * Returns every Graphic in the collection.
	 */
	everyItem(): Graphic[];

	/**
	 * Returns the first Graphic in the collection.
	 */
	firstItem(): Graphic;

	/**
	 * Returns the Graphic with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Graphic;

	/**
	 * Returns the Graphic with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Graphic;

	/**
	 * Returns the Graphic with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Graphic;

	/**
	 * Returns the Graphics within the specified range.
	 * @param from The Graphic, index, or name at the beginning of the range.
	 * @param to The Graphic, index, or name at the end of the range.
	 */
	itemByRange(from: Graphic | number | string, to: Graphic | number | string): Graphic[];

	/**
	 * Returns the last Graphic in the collection.
	 */
	lastItem(): Graphic;

	/**
	 * Returns the middle Graphic in the collection.
	 */
	middleItem(): Graphic;

	/**
	 * Returns the Graphic whose index follows the specified Graphic in the collection.
	 * @param obj The Graphic whose index comes before the desired Graphic.
	 */
	nextItem(obj: Graphic): Graphic;

	/**
	 * Returns the Graphic with the index previous to the specified index.
	 * @param obj The index of the Graphic that follows the desired Graphic.
	 */
	previousItem(obj: Graphic): Graphic;

	/**
	 * Generates a string which, if executed, will return the Graphic.
	 */
	toSource(): string;

}

/**
 * A transformation matrix.
 */
declare class TransformationMatrix {
	/**
	 * The shear angle of the transformation matrix.
	 */
	readonly clockwiseShearAngle: number;

	/**
	 * The rotation angle of the transformation matrix.
	 */
	readonly counterclockwiseRotationAngle: number;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The horizontal scale factor of the transformation matrix.
	 */
	readonly horizontalScaleFactor: number;

	/**
	 * The horizontal translation of the transformation matrix.
	 */
	readonly horizontalTranslation: number;

	/**
	 * The index of the TransformationMatrix within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The mapping the transformation matrix performs on the unit triangle. Can return: Array of Array of 2 Arrays of 2 Reals.
	 */
	readonly matrixMapping: any[];

	/**
	 * The values of the transformation matrix.
	 */
	readonly matrixValues: number[];

	/**
	 * The name of the TransformationMatrix.
	 */
	readonly name: string;

	/**
	 * The parent of the TransformationMatrix (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The vertical scale factor of the transformation matrix.
	 */
	readonly verticalScaleFactor: number;

	/**
	 * The vertical translation of the transformation matrix.
	 */
	readonly verticalTranslation: number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Multiply the transformation matrix by another.
	 * @param withMatrix The right hand matrix factor
	 */
	catenateMatrix(withMatrix: TransformationMatrix): TransformationMatrix;

	/**
	 * Multiply the point by the matrix.
	 * @param point The point to transform
	 */
	changeCoordinates(point: number[]): number[];

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TransformationMatrix[];

	/**
	 * Invert the transformation matrix.
	 */
	invertMatrix(): TransformationMatrix;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Rotate the transformation matrix.
	 * @param byAngle The counterclockwise rotation angle
	 * @param byCosine The cosine of the desired rotation
	 * @param bySine The sine of the desired rotation
	 */
	rotateMatrix(byAngle: number, byCosine: number, bySine: number): TransformationMatrix;

	/**
	 * Scale the transformation matrix.
	 * @param horizontallyBy The horizontal scale factor
	 * @param verticallyBy The vertical scale factor
	 */
	scaleMatrix(horizontallyBy: number, verticallyBy: number): TransformationMatrix;

	/**
	 * Shear the transformation matrix.
	 * @param byAngle The horizontal shear angle
	 * @param bySlope The horizontal shear slope
	 */
	shearMatrix(byAngle: number, bySlope: number): TransformationMatrix;

	/**
	 * Generates a string which, if executed, will return the TransformationMatrix.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Translate the transformation matrix.
	 * @param horizontallyBy The horizontal translation distance
	 * @param verticallyBy The vertical translation distance
	 */
	translateMatrix(horizontallyBy: number, verticallyBy: number): TransformationMatrix;

}

/**
 * A collection of transformation matrices.
 */
declare class TransformationMatrices {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TransformationMatrix with the specified index.
	 * @param index The index.
	 */
	[index: number]: TransformationMatrix;

	/**
	 * Create a new TransformationMatrix.
	 * @param horizontalScaleFactor The horizontal scale factor of the transformation matrix
	 * @param verticalScaleFactor The vertical scale factor of the transformation matrix
	 * @param clockwiseShearAngle The shear angle of the transformation matrix
	 * @param counterclockwiseRotationAngle The rotation angle of the transformation matrix
	 * @param horizontalTranslation The horizontal translation of the transformation matrix
	 * @param verticalTranslation The vertical translation of the transformation matrix
	 * @param matrixValues The values of the transformation matrix
	 * @param matrixMapping The mapping the transformation matrix performs on the unit triangle. Can accept: Array of Array of 2 Arrays of 2 Reals.
	 * @param withProperties Initial values for properties of the new TransformationMatrix
	 */
	add(horizontalScaleFactor: number, verticalScaleFactor: number, clockwiseShearAngle: number, counterclockwiseRotationAngle: number, horizontalTranslation: number, verticalTranslation: number, matrixValues: number[], matrixMapping: any[], withProperties: object): TransformationMatrix;

	/**
	 * Returns any TransformationMatrix in the collection.
	 */
	anyItem(): TransformationMatrix;

	/**
	 * Displays the number of elements in the TransformationMatrix.
	 */
	count(): number;

	/**
	 * Returns every TransformationMatrix in the collection.
	 */
	everyItem(): TransformationMatrix[];

	/**
	 * Returns the first TransformationMatrix in the collection.
	 */
	firstItem(): TransformationMatrix;

	/**
	 * Returns the TransformationMatrix with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TransformationMatrix;

	/**
	 * Returns the TransformationMatrix with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TransformationMatrix;

	/**
	 * Returns the TransformationMatrices within the specified range.
	 * @param from The TransformationMatrix, index, or name at the beginning of the range.
	 * @param to The TransformationMatrix, index, or name at the end of the range.
	 */
	itemByRange(from: TransformationMatrix | number | string, to: TransformationMatrix | number | string): TransformationMatrix[];

	/**
	 * Returns the last TransformationMatrix in the collection.
	 */
	lastItem(): TransformationMatrix;

	/**
	 * Returns the middle TransformationMatrix in the collection.
	 */
	middleItem(): TransformationMatrix;

	/**
	 * Returns the TransformationMatrix whose index follows the specified TransformationMatrix in the collection.
	 * @param obj The TransformationMatrix whose index comes before the desired TransformationMatrix.
	 */
	nextItem(obj: TransformationMatrix): TransformationMatrix;

	/**
	 * Returns the TransformationMatrix with the index previous to the specified index.
	 * @param obj The index of the TransformationMatrix that follows the desired TransformationMatrix.
	 */
	previousItem(obj: TransformationMatrix): TransformationMatrix;

	/**
	 * Generates a string which, if executed, will return the TransformationMatrix.
	 */
	toSource(): string;

}

/**
 * Options for fitting placed or pasted content in a frame.
 */
declare class FrameFittingOption extends Preference {
	/**
	 * If true, the last saved fitting options will be applied to the contents of a frame when it is resized.
	 */
	autoFit: boolean;

	/**
	 * The amount in measurement units to crop the bottom edge of a graphic.
	 */
	bottomCrop: number | string;

	/**
	 * The point with which to align the image empty when fitting in a frame. For information, see frame fitting options.
	 */
	fittingAlignment: AnchorPoint;

	/**
	 * The frame fitting option to apply to placed or pasted content if the frame is empty. Can be applied to a frame, object style, or document or to the application.
	 */
	fittingOnEmptyFrame: EmptyFrameFittingOptions;

	/**
	 * The amount in measurement units to crop the left edge of a graphic.
	 */
	leftCrop: number | string;

	/**
	 * The amount in measurement units to crop the right edge of a graphic.
	 */
	rightCrop: number | string;

	/**
	 * The amount in measurement units to crop the top edge of a graphic.
	 */
	topCrop: number | string;

}

/**
 * A guide.
 */
declare class Guide {
	/**
	 * Dispatched after a Guide is placed. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_PLACE: string;

	/**
	 * If true, the master page item can be overridden.
	 */
	allowOverrides: boolean;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, horizontal orientation guides stop at the edges of the specified page. If false, the guides extends across the width of the spread and into the pasteboard area.
	 */
	fitToPage: boolean;

	/**
	 * The color of the guide, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	guideColor: [number, number, number] | UIColors;

	/**
	 * The type of the guide.
	 */
	guideType: GuideTypeOptions;

	/**
	 * The zone of the guide.
	 */
	guideZone: number | string;

	/**
	 * The unique ID of the Guide.
	 */
	readonly id: number;

	/**
	 * The index of the Guide within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The layer that the Guide is on.
	 */
	itemLayer: Layer;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The location at which to place the guide relative to the current ruler zero point.
	 */
	location: number | string;

	/**
	 * If true, the Guide is locked.
	 */
	locked: boolean;

	/**
	 * The name of the Guide; this is an alias to the Guide's label property.
	 */
	name: string;

	/**
	 * The orientation of the guide.
	 */
	orientation: HorizontalOrVertical;

	/**
	 * If true, the object originated on a master spread and was overridden. If false, the object either originated on a master spread and was not overridden, or the object did not originate on a master page.
	 */
	readonly overridden: boolean;

	/**
	 * An object that originated on a master page and has been overridden.
	 */
	readonly overriddenMasterPageItem: PageItem | Guide | Graphic | Movie | Sound;

	/**
	 * The parent of the Guide (a Spread or MasterSpread).
	 */
	readonly parent: any;

	/**
	 * The page on which this page item appears.
	 */
	readonly parentPage: Page;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The view magnification as a percentage below which guides are no longer displayed. (Range: 5.0 to 4000.0)
	 */
	viewThreshold: number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Detaches an overridden master page item from the master page.
	 */
	detach(): void;

	/**
	 * Duplicates the Guide.
	 */
	duplicate(): Guide;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Guide[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the guide to a new location. Note: Either the to or the by parameter is required; if both parameters are defined, only the to value is used.
	 * @param to The new location of the guide, in the format [x, y].
	 * @param by The amount to move the guide relative to its current position, in the format [x, y].
	 */
	move(to: (number | string)[], by: (number | string)[]): void;

	/**
	 * Overrides a master page item and places the item on the document page as a new object.
	 * @param destinationPage The document page that contains the master page item to override.
	 */
	override(destinationPage: Page): any;

	/**
	 * Deletes the Guide.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Removes the override from a previously overridden master page item.
	 */
	removeOverride(): void;

	/**
	 * Get the coordinates of the given location in the specified coordinate system.
	 * @param location The location requested. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param in_ The coordinate space to use.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resolve(location: any, in_: CoordinateSpaces, consideringRulerUnits?: boolean): any;

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Guide in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void;

	/**
	 * Generates a string which, if executed, will return the Guide.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Get the transformation values of the page item.
	 * @param in_ The coordinate space to use
	 */
	transformValuesOf(in_: CoordinateSpaces): TransformationMatrix[];

}

/**
 * A collection of guides.
 */
declare class Guides {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Guide with the specified index.
	 * @param index The index.
	 */
	[index: number]: Guide;

	/**
	 * Creates a new guide.
	 * @param layer The layer on which to create the guide.
	 * @param withProperties Initial values for properties of the new Guide
	 */
	add(layer: Layer, withProperties: object): Guide;

	/**
	 * Returns any Guide in the collection.
	 */
	anyItem(): Guide;

	/**
	 * Displays the number of elements in the Guide.
	 */
	count(): number;

	/**
	 * Returns every Guide in the collection.
	 */
	everyItem(): Guide[];

	/**
	 * Returns the first Guide in the collection.
	 */
	firstItem(): Guide;

	/**
	 * Returns the Guide with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Guide;

	/**
	 * Returns the Guide with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Guide;

	/**
	 * Returns the Guide with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Guide;

	/**
	 * Returns the Guides within the specified range.
	 * @param from The Guide, index, or name at the beginning of the range.
	 * @param to The Guide, index, or name at the end of the range.
	 */
	itemByRange(from: Guide | number | string, to: Guide | number | string): Guide[];

	/**
	 * Returns the last Guide in the collection.
	 */
	lastItem(): Guide;

	/**
	 * Returns the middle Guide in the collection.
	 */
	middleItem(): Guide;

	/**
	 * Returns the Guide whose index follows the specified Guide in the collection.
	 * @param obj The Guide whose index comes before the desired Guide.
	 */
	nextItem(obj: Guide): Guide;

	/**
	 * Returns the Guide with the index previous to the specified index.
	 * @param obj The index of the Guide that follows the desired Guide.
	 */
	previousItem(obj: Guide): Guide;

	/**
	 * Generates a string which, if executed, will return the Guide.
	 */
	toSource(): string;

}

/**
 * Text wrap preferences.
 */
declare class TextWrapPreference extends Preference {
	/**
	 * If true, text wraps on the master spread apply to that spread only, and not to any pages the master spread has been applied to.
	 */
	applyToMasterPageOnly: boolean;

	/**
	 * The contour of the text wrap. Valid only when when text wrap type is contour.
	 */
	readonly contourOptions: ContourOption;

	/**
	 * If true, inverts the text wrap.
	 */
	inverse: boolean;

	/**
	 * A collection of paths.
	 */
	readonly paths: Paths;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * The text wrap mode.
	 */
	textWrapMode: TextWrapModes;

	/**
	 * The minimum space between text and the edges of the wrapped object. The format for defining text wrap offset values depends on the text wrap type. If text wrap type is jump object text wrap, specify 2 values in the format [top, bottom]. If text wrap type is next column text wrap or contour, specify a single value. For bounding box text wrap, specify 4 values in the format in the format [top, left, bottom, right]. .
	 */
	textWrapOffset: number | number[] | NothingEnum;

	/**
	 * Text wrap side options.
	 */
	textWrapSide: TextWrapSideOptions;

	/**
	 * If true, the text wrap path has been explicitly modified by the user.
	 */
	readonly userModifiedWrap: boolean;

}

/**
 * A contour option.
 */
declare class ContourOption extends Preference {
	/**
	 * A list of the alpha channels stored in the graphic.
	 */
	readonly alphaChannelPathNames: string[];

	/**
	 * The alpha channel or Photoshop path to use for the contour option. Valid only when the contour options is photoshop path or alpha channel.
	 */
	contourPathName: string;

	/**
	 * The contour type.
	 */
	contourType: ContourOptionsTypes;

	/**
	 * If true, creates interior clipping paths within the surrounding clipping path. Note: Valid only when clipping type is alpha channel or detect edges.
	 */
	includeInsideEdges: boolean;

	/**
	 * A list of the clipping paths stored in the graphic.
	 */
	readonly photoshopPathNames: string[];

}

/**
 * A section.
 */
declare class Section {
	/**
	 * The alternate layout name for a set of pages.
	 */
	alternateLayout: string;

	/**
	 * The number of pages in the alternate layout section.
	 */
	readonly alternateLayoutLength: number;

	/**
	 * If true, continues page numbers sequentially from the previous section.
	 */
	continueNumbering: boolean;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the Section.
	 */
	readonly id: number;

	/**
	 * If true, places the specified prefix before page numbers on all pages in the section.
	 */
	includeSectionPrefix: boolean;

	/**
	 * The index of the Section within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The number of pages in the section.
	 */
	readonly length: number;

	/**
	 * The section marker.
	 */
	marker: string;

	/**
	 * The name of the Section.
	 */
	name: string;

	/**
	 * The page number assigned to the first page in the section. Note: Valid only when continue numbering is false.
	 */
	pageNumberStart: number;

	/**
	 * The page number style.
	 */
	pageNumberStyle: PageNumberStyle | string;

	/**
	 * The start page for the section.
	 */
	pageStart: Page;

	/**
	 * The parent of the Section (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The prefix to place before page numbers on pages in the section. May include up to 8 characters. Note: Valid only when include section prefix is true.
	 */
	sectionPrefix: string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Section[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the Section.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Section.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of sections.
 */
declare class Sections {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Section with the specified index.
	 * @param index The index.
	 */
	[index: number]: Section;

	/**
	 * Creates a new section.
	 * @param reference The page on which the section begins.
	 * @param withProperties Initial values for properties of the new Section
	 */
	add(reference: Page, withProperties: object): Section;

	/**
	 * Returns any Section in the collection.
	 */
	anyItem(): Section;

	/**
	 * Displays the number of elements in the Section.
	 */
	count(): number;

	/**
	 * Returns every Section in the collection.
	 */
	everyItem(): Section[];

	/**
	 * Returns the first Section in the collection.
	 */
	firstItem(): Section;

	/**
	 * Returns the Section with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Section;

	/**
	 * Returns the Section with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Section;

	/**
	 * Returns the Section with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Section;

	/**
	 * Returns the Sections within the specified range.
	 * @param from The Section, index, or name at the beginning of the range.
	 * @param to The Section, index, or name at the end of the range.
	 */
	itemByRange(from: Section | number | string, to: Section | number | string): Section[];

	/**
	 * Returns the last Section in the collection.
	 */
	lastItem(): Section;

	/**
	 * Returns the middle Section in the collection.
	 */
	middleItem(): Section;

	/**
	 * Returns the Section whose index follows the specified Section in the collection.
	 * @param obj The Section whose index comes before the desired Section.
	 */
	nextItem(obj: Section): Section;

	/**
	 * Returns the Section with the index previous to the specified index.
	 * @param obj The index of the Section that follows the desired Section.
	 */
	previousItem(obj: Section): Section;

	/**
	 * Generates a string which, if executed, will return the Section.
	 */
	toSource(): string;

}

/**
 * A path.
 */
declare class Path {
	/**
	 * A list of the coordinates of all of the path points on the path, including anchor points and left- and right-direction points. When creating a path using this property, supply either a list of anchor point coordinates ([[x1, y1], [x2, y2], ...]) or a list of anchor point, left-direction point, and right-direction point coordinates ([[[x1, y1], [x2, y2], [x3, y3]], [[x4, y4], [x5, y5], [x6, y6]], ...]). Note: Providing only anchor points results in a path on which all of the path points are connected with straight line segments; supplying the positions of left- and right-direction points specifies curved line segments. Can return: Array of Arrays of 2 Units.
	 */
	entirePath: any[];

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the Path within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the Path (a SplineItem, Polygon, GraphicLine, Rectangle, Oval, TextFrame, EndnoteTextFrame, MediaItem, Sound, Movie, Button, MultiStateObject, ClippingPathSettings or TextWrapPreference).
	 */
	readonly parent: any;

	/**
	 * A collection of path points.
	 */
	readonly pathPoints: PathPoints;

	/**
	 * The path type.
	 */
	pathType: PathType;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Path[];

	/**
	 * Deletes the Path.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Reverses the path.
	 */
	reverse(): void;

	/**
	 * Generates a string which, if executed, will return the Path.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of paths.
 */
declare class Paths {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Path with the specified index.
	 * @param index The index.
	 */
	[index: number]: Path;

	/**
	 * Creates a new Path.
	 * @param withProperties Initial values for properties of the new Path
	 */
	add(withProperties: object): Path;

	/**
	 * Returns any Path in the collection.
	 */
	anyItem(): Path;

	/**
	 * Displays the number of elements in the Path.
	 */
	count(): number;

	/**
	 * Returns every Path in the collection.
	 */
	everyItem(): Path[];

	/**
	 * Returns the first Path in the collection.
	 */
	firstItem(): Path;

	/**
	 * Returns the Path with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Path;

	/**
	 * Returns the Paths within the specified range.
	 * @param from The Path, index, or name at the beginning of the range.
	 * @param to The Path, index, or name at the end of the range.
	 */
	itemByRange(from: Path | number | string, to: Path | number | string): Path[];

	/**
	 * Returns the last Path in the collection.
	 */
	lastItem(): Path;

	/**
	 * Returns the middle Path in the collection.
	 */
	middleItem(): Path;

	/**
	 * Returns the Path whose index follows the specified Path in the collection.
	 * @param obj The Path whose index comes before the desired Path.
	 */
	nextItem(obj: Path): Path;

	/**
	 * Returns the Path with the index previous to the specified index.
	 * @param obj The index of the Path that follows the desired Path.
	 */
	previousItem(obj: Path): Path;

	/**
	 * Generates a string which, if executed, will return the Path.
	 */
	toSource(): string;

}

/**
 * A path point of a path.
 */
declare class PathPoint {
	/**
	 * The location of the path point on the page, in the format [x, y].
	 */
	anchor: (number | string)[];

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the PathPoint within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The left-direction point, which controls the curve of the line segment preceding the path point on the path, in the format [x, y].
	 */
	leftDirection: (number | string)[];

	/**
	 * The parent of the PathPoint (a Path).
	 */
	readonly parent: Path;

	/**
	 * The path point type.
	 */
	pointType: PointType;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The right-direction point, which controls the curve of the line segment following the path point on the path, in the format [x, y].
	 */
	rightDirection: (number | string)[];

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PathPoint[];

	/**
	 * Join this path point to another path point. The two points must be end points and their paths combined into a single path on a single page item.
	 * @param reference The reference object. The path point to join to
	 * @param given The join option to use.
	 */
	join(reference: PathPoint, given: JoinOptions): void;

	/**
	 * Deletes the PathPoint.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the PathPoint.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of path points.
 */
declare class PathPoints {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PathPoint with the specified index.
	 * @param index The index.
	 */
	[index: number]: PathPoint;

	/**
	 * Creates a new PathPoint.
	 * @param withProperties Initial values for properties of the new PathPoint
	 */
	add(withProperties: object): PathPoint;

	/**
	 * Returns any PathPoint in the collection.
	 */
	anyItem(): PathPoint;

	/**
	 * Displays the number of elements in the PathPoint.
	 */
	count(): number;

	/**
	 * Returns every PathPoint in the collection.
	 */
	everyItem(): PathPoint[];

	/**
	 * Returns the first PathPoint in the collection.
	 */
	firstItem(): PathPoint;

	/**
	 * Returns the PathPoint with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PathPoint;

	/**
	 * Returns the PathPoints within the specified range.
	 * @param from The PathPoint, index, or name at the beginning of the range.
	 * @param to The PathPoint, index, or name at the end of the range.
	 */
	itemByRange(from: PathPoint | number | string, to: PathPoint | number | string): PathPoint[];

	/**
	 * Returns the last PathPoint in the collection.
	 */
	lastItem(): PathPoint;

	/**
	 * Returns the middle PathPoint in the collection.
	 */
	middleItem(): PathPoint;

	/**
	 * Returns the PathPoint whose index follows the specified PathPoint in the collection.
	 * @param obj The PathPoint whose index comes before the desired PathPoint.
	 */
	nextItem(obj: PathPoint): PathPoint;

	/**
	 * Returns the PathPoint with the index previous to the specified index.
	 * @param obj The index of the PathPoint that follows the desired PathPoint.
	 */
	previousItem(obj: PathPoint): PathPoint;

	/**
	 * Generates a string which, if executed, will return the PathPoint.
	 */
	toSource(): string;

}

/**
 * A path-based page item, such as a rectangle, oval, polygon, or graphic line.
 */
declare class SplineItem extends PageItem {
	/**
	 * Anchored object settings.
	 */
	readonly anchoredObjectSettings: AnchoredObjectSetting;

	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * The type of content that a frame can contain.
	 */
	contentType: ContentType;

	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * A collection of EPS files.
	 */
	readonly epss: EPSs;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * A collection of embedded HTML page items.
	 */
	readonly htmlItems: HtmlItems;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * Imported InDesign pages.
	 */
	readonly importedPages: ImportedPages;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * The lock state.
	 */
	readonly lockState: LockStateValues;

	/**
	 * The media items collection.
	 */
	readonly mediaItems: MediaItems;

	/**
	 * A collection of movies.
	 */
	readonly movies: Movies;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * Export options for the object
	 */
	readonly objectExportOptions: ObjectExportOption;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of paths.
	 */
	readonly paths: Paths;

	/**
	 * A collection of PDF files.
	 */
	readonly pdfs: PDFs;

	/**
	 * A collection of PICT graphics.
	 */
	readonly picts: PICTs;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * A collection of sound clips.
	 */
	readonly sounds: Sounds;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of text paths.
	 */
	readonly textPaths: TextPaths;

	/**
	 * A collection of WMF graphics.
	 */
	readonly wmfs: WMFs;

	/**
	 * Creates a new page item by combining the SplineItem with other objects. Deletes the objects if they do not intersect.
	 * @param with_ The object(s) to add.
	 */
	addPath(with_: PageItem[]): PageItem;

	/**
	 * Brings the SplineItem forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the SplineItem to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Checks in the story or stories.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	checkIn(versionComments: string, forceSave?: boolean): boolean;

	/**
	 * Checks out the story.
	 */
	checkOut(): boolean;

	/**
	 * Creates a new page item by excluding the overlapping areas of the SplineItem and other objects.
	 * @param with_ The object(s) to exclude.
	 */
	excludeOverlapPath(with_: PageItem[]): PageItem;

	/**
	 * Creates a new page item by intersecting the SplineItem with other objects. Returns an error if the objects do not intersect.
	 * @param with_ The object(s) with which to intersect.
	 */
	intersectPath(with_: PageItem[]): PageItem;

	/**
	 * Creates a compound path by combining the path(s) of the SplineItem with the paths of other objects.
	 * @param with_ The other objects whose paths to include in the new compound path.
	 */
	makeCompoundPath(with_: PageItem[]): PageItem;

	/**
	 * Creates a new page item by reverse subtracting the overlapping areas of the SplineItem and other objects.
	 * @param with_ The object(s) to reverse subtract.
	 */
	minusBack(with_: PageItem[]): PageItem;

	/**
	 * Releases a compound path.
	 */
	releaseCompoundPath(): PageItem[];

	/**
	 * Reverts the document to its state at the last save operation.
	 */
	revert(): boolean;

	/**
	 * Sends the SplineItem back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the SplineItem to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

	/**
	 * Creates a new page item by subtracting the overlapping areas of the SplineItem and other objects.
	 * @param with_ The object(s) to subtract.
	 */
	subtractPath(with_: PageItem[]): PageItem;

}

/**
 * The spline items collection.
 */
declare class SplineItems {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the SplineItem with the specified index.
	 * @param index The index.
	 */
	[index: number]: SplineItem;

	/**
	 * Returns any SplineItem in the collection.
	 */
	anyItem(): SplineItem;

	/**
	 * Displays the number of elements in the SplineItem.
	 */
	count(): number;

	/**
	 * Returns every SplineItem in the collection.
	 */
	everyItem(): SplineItem[];

	/**
	 * Returns the first SplineItem in the collection.
	 */
	firstItem(): SplineItem;

	/**
	 * Returns the SplineItem with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): SplineItem;

	/**
	 * Returns the SplineItem with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): SplineItem;

	/**
	 * Returns the SplineItem with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): SplineItem;

	/**
	 * Returns the SplineItems within the specified range.
	 * @param from The SplineItem, index, or name at the beginning of the range.
	 * @param to The SplineItem, index, or name at the end of the range.
	 */
	itemByRange(from: SplineItem | number | string, to: SplineItem | number | string): SplineItem[];

	/**
	 * Returns the last SplineItem in the collection.
	 */
	lastItem(): SplineItem;

	/**
	 * Returns the middle SplineItem in the collection.
	 */
	middleItem(): SplineItem;

	/**
	 * Returns the SplineItem whose index follows the specified SplineItem in the collection.
	 * @param obj The SplineItem whose index comes before the desired SplineItem.
	 */
	nextItem(obj: SplineItem): SplineItem;

	/**
	 * Returns the SplineItem with the index previous to the specified index.
	 * @param obj The index of the SplineItem that follows the desired SplineItem.
	 */
	previousItem(obj: SplineItem): SplineItem;

	/**
	 * Generates a string which, if executed, will return the SplineItem.
	 */
	toSource(): string;

}

/**
 * EPSText.
 */
declare class EPSText extends PageItem {
	/**
	 * Anchored object settings.
	 */
	readonly anchoredObjectSettings: AnchoredObjectSetting;

	/**
	 * A collection of text paths.
	 */
	readonly textPaths: TextPaths;

	/**
	 * Brings the EPSText forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the EPSText to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Sends the EPSText back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the EPSText to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

}

/**
 * EPSTexts
 */
declare class EPSTexts {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the EPSText with the specified index.
	 * @param index The index.
	 */
	[index: number]: EPSText;

	/**
	 * Returns any EPSText in the collection.
	 */
	anyItem(): EPSText;

	/**
	 * Displays the number of elements in the EPSText.
	 */
	count(): number;

	/**
	 * Returns every EPSText in the collection.
	 */
	everyItem(): EPSText[];

	/**
	 * Returns the first EPSText in the collection.
	 */
	firstItem(): EPSText;

	/**
	 * Returns the EPSText with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): EPSText;

	/**
	 * Returns the EPSText with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): EPSText;

	/**
	 * Returns the EPSText with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): EPSText;

	/**
	 * Returns the EPSTexts within the specified range.
	 * @param from The EPSText, index, or name at the beginning of the range.
	 * @param to The EPSText, index, or name at the end of the range.
	 */
	itemByRange(from: EPSText | number | string, to: EPSText | number | string): EPSText[];

	/**
	 * Returns the last EPSText in the collection.
	 */
	lastItem(): EPSText;

	/**
	 * Returns the middle EPSText in the collection.
	 */
	middleItem(): EPSText;

	/**
	 * Returns the EPSText whose index follows the specified EPSText in the collection.
	 * @param obj The EPSText whose index comes before the desired EPSText.
	 */
	nextItem(obj: EPSText): EPSText;

	/**
	 * Returns the EPSText with the index previous to the specified index.
	 * @param obj The index of the EPSText that follows the desired EPSText.
	 */
	previousItem(obj: EPSText): EPSText;

	/**
	 * Generates a string which, if executed, will return the EPSText.
	 */
	toSource(): string;

}

/**
 * An imported InDesign page.
 */
declare class ImportedPage extends Graphic {
	/**
	 * Clipping path settings.
	 */
	readonly clippingPath: ClippingPathSettings;

	/**
	 * Graphic layer option settings.
	 */
	readonly graphicLayerOptions: GraphicLayerOption;

	/**
	 * Specifies the cropping of the imported InDesign page. Read only for page items.
	 */
	readonly importedPageCrop: ImportedPageCropOptions;

	/**
	 * Which page of the InDesign document should be imported. Read only for page items.
	 */
	readonly pageNumber: number;

	/**
	 * PDF attribute settings.
	 */
	readonly pdfAttributes: PDFAttribute;

}

/**
 * Imported InDesign pages.
 */
declare class ImportedPages {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ImportedPage with the specified index.
	 * @param index The index.
	 */
	[index: number]: ImportedPage;

	/**
	 * Creates a new ImportedPage.
	 * @param withProperties Initial values for properties of the new ImportedPage
	 */
	add(withProperties: object): ImportedPage;

	/**
	 * Returns any ImportedPage in the collection.
	 */
	anyItem(): ImportedPage;

	/**
	 * Displays the number of elements in the ImportedPage.
	 */
	count(): number;

	/**
	 * Returns every ImportedPage in the collection.
	 */
	everyItem(): ImportedPage[];

	/**
	 * Returns the first ImportedPage in the collection.
	 */
	firstItem(): ImportedPage;

	/**
	 * Returns the ImportedPage with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ImportedPage;

	/**
	 * Returns the ImportedPage with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ImportedPage;

	/**
	 * Returns the ImportedPage with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ImportedPage;

	/**
	 * Returns the ImportedPages within the specified range.
	 * @param from The ImportedPage, index, or name at the beginning of the range.
	 * @param to The ImportedPage, index, or name at the end of the range.
	 */
	itemByRange(from: ImportedPage | number | string, to: ImportedPage | number | string): ImportedPage[];

	/**
	 * Returns the last ImportedPage in the collection.
	 */
	lastItem(): ImportedPage;

	/**
	 * Returns the middle ImportedPage in the collection.
	 */
	middleItem(): ImportedPage;

	/**
	 * Returns the ImportedPage whose index follows the specified ImportedPage in the collection.
	 * @param obj The ImportedPage whose index comes before the desired ImportedPage.
	 */
	nextItem(obj: ImportedPage): ImportedPage;

	/**
	 * Returns the ImportedPage with the index previous to the specified index.
	 * @param obj The index of the ImportedPage that follows the desired ImportedPage.
	 */
	previousItem(obj: ImportedPage): ImportedPage;

	/**
	 * Generates a string which, if executed, will return the ImportedPage.
	 */
	toSource(): string;

}

/**
 * An sound or movie page item.
 */
declare class MediaItem extends PageItem {
	/**
	 * Dispatched when the value of a property changes on this MediaItem. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_ATTRIBUTE_CHANGED: string;

	/**
	 * A collection of paths.
	 */
	readonly paths: Paths;

}

/**
 * The media items collection.
 */
declare class MediaItems {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MediaItem with the specified index.
	 * @param index The index.
	 */
	[index: number]: MediaItem;

	/**
	 * Returns any MediaItem in the collection.
	 */
	anyItem(): MediaItem;

	/**
	 * Displays the number of elements in the MediaItem.
	 */
	count(): number;

	/**
	 * Returns every MediaItem in the collection.
	 */
	everyItem(): MediaItem[];

	/**
	 * Returns the first MediaItem in the collection.
	 */
	firstItem(): MediaItem;

	/**
	 * Returns the MediaItem with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MediaItem;

	/**
	 * Returns the MediaItem with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MediaItem;

	/**
	 * Returns the MediaItem with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MediaItem;

	/**
	 * Returns the MediaItems within the specified range.
	 * @param from The MediaItem, index, or name at the beginning of the range.
	 * @param to The MediaItem, index, or name at the end of the range.
	 */
	itemByRange(from: MediaItem | number | string, to: MediaItem | number | string): MediaItem[];

	/**
	 * Returns the last MediaItem in the collection.
	 */
	lastItem(): MediaItem;

	/**
	 * Returns the middle MediaItem in the collection.
	 */
	middleItem(): MediaItem;

	/**
	 * Returns the MediaItem whose index follows the specified MediaItem in the collection.
	 * @param obj The MediaItem whose index comes before the desired MediaItem.
	 */
	nextItem(obj: MediaItem): MediaItem;

	/**
	 * Returns the MediaItem with the index previous to the specified index.
	 * @param obj The index of the MediaItem that follows the desired MediaItem.
	 */
	previousItem(obj: MediaItem): MediaItem;

	/**
	 * Generates a string which, if executed, will return the MediaItem.
	 */
	toSource(): string;

}

/**
 * An IDML snippet.
 */
declare class Snippet {
	/**
	 * Dispatched before a Snippet is placed. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_PLACE: string;

	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * A collection of EPS files.
	 */
	readonly epss: EPSs;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * The unique ID of the Snippet.
	 */
	readonly id: number;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * The index of the Snippet within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * The name of the Snippet; this is an alias to the Snippet's label property.
	 */
	name: string;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * The parent of the Snippet (a PlaceGun).
	 */
	readonly parent: PlaceGun;

	/**
	 * A collection of PDF files.
	 */
	readonly pdfs: PDFs;

	/**
	 * A collection of PICT graphics.
	 */
	readonly picts: PICTs;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of WMF graphics.
	 */
	readonly wmfs: WMFs;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Snippet[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the Snippet.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Snippet.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of IDML snippets.
 */
declare class Snippets {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Snippet with the specified index.
	 * @param index The index.
	 */
	[index: number]: Snippet;

	/**
	 * Returns any Snippet in the collection.
	 */
	anyItem(): Snippet;

	/**
	 * Displays the number of elements in the Snippet.
	 */
	count(): number;

	/**
	 * Returns every Snippet in the collection.
	 */
	everyItem(): Snippet[];

	/**
	 * Returns the first Snippet in the collection.
	 */
	firstItem(): Snippet;

	/**
	 * Returns the Snippet with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Snippet;

	/**
	 * Returns the Snippet with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Snippet;

	/**
	 * Returns the Snippet with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Snippet;

	/**
	 * Returns the Snippets within the specified range.
	 * @param from The Snippet, index, or name at the beginning of the range.
	 * @param to The Snippet, index, or name at the end of the range.
	 */
	itemByRange(from: Snippet | number | string, to: Snippet | number | string): Snippet[];

	/**
	 * Returns the last Snippet in the collection.
	 */
	lastItem(): Snippet;

	/**
	 * Returns the middle Snippet in the collection.
	 */
	middleItem(): Snippet;

	/**
	 * Returns the Snippet whose index follows the specified Snippet in the collection.
	 * @param obj The Snippet whose index comes before the desired Snippet.
	 */
	nextItem(obj: Snippet): Snippet;

	/**
	 * Returns the Snippet with the index previous to the specified index.
	 * @param obj The index of the Snippet that follows the desired Snippet.
	 */
	previousItem(obj: Snippet): Snippet;

	/**
	 * Generates a string which, if executed, will return the Snippet.
	 */
	toSource(): string;

}

/**
 * Options for applying layout attributes to any page item.
 */
declare class TransformAttributeOption extends Preference {
	/**
	 * The height of the object, defined by the object style.
	 */
	transformAttrHeight: number | string;

	/**
	 * The reference point to be used while setting the X attribute of object style.
	 */
	transformAttrLeftReference: TransformPositionReference;

	/**
	 * Option to specify the achor point to be used by the style for anchoring the object while applying the position.
	 */
	transformAttrRefAnchorPoint: AnchorPoint;

	/**
	 * The reference point to be used while setting the Y attribute of object style.
	 */
	transformAttrTopReference: TransformPositionReference;

	/**
	 * The width of the object, defined by the object style.
	 */
	transformAttrWidth: number | string;

	/**
	 * The left position of the object, defined by the object style.
	 */
	transformAttrX: number | string;

	/**
	 * The top position of the object, defined by the object style.
	 */
	transformAttrY: number | string;

}

/**
 * A Motion preset Object.
 */
declare class MotionPreset {
	/**
	 * Motion preset raw data
	 */
	contents: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the MotionPreset.
	 */
	readonly id: number;

	/**
	 * The index of the MotionPreset within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the MotionPreset.
	 */
	name: string;

	/**
	 * The parent of the MotionPreset (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the motion preset.
	 * @param name The name for the duplicated motion preset.
	 */
	duplicate(name: string): MotionPreset;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): MotionPreset[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the MotionPreset.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Save a copy of this motion preset to a InDesign motion preset file.
	 * @param to The Flash motion preset file to export to.
	 */
	saveACopy(to: File): void;

	/**
	 * Generates a string which, if executed, will return the MotionPreset.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of Motion presets.
 */
declare class MotionPresets {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MotionPreset with the specified index.
	 * @param index The index.
	 */
	[index: number]: MotionPreset;

	/**
	 * Creates a new MotionPreset.
	 * @param withProperties Initial values for properties of the new MotionPreset
	 */
	add(withProperties: object): MotionPreset;

	/**
	 * Returns any MotionPreset in the collection.
	 */
	anyItem(): MotionPreset;

	/**
	 * Displays the number of elements in the MotionPreset.
	 */
	count(): number;

	/**
	 * Returns every MotionPreset in the collection.
	 */
	everyItem(): MotionPreset[];

	/**
	 * Returns the first MotionPreset in the collection.
	 */
	firstItem(): MotionPreset;

	/**
	 * Returns the MotionPreset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MotionPreset;

	/**
	 * Returns the MotionPreset with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MotionPreset;

	/**
	 * Returns the MotionPreset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MotionPreset;

	/**
	 * Returns the MotionPresets within the specified range.
	 * @param from The MotionPreset, index, or name at the beginning of the range.
	 * @param to The MotionPreset, index, or name at the end of the range.
	 */
	itemByRange(from: MotionPreset | number | string, to: MotionPreset | number | string): MotionPreset[];

	/**
	 * Returns the last MotionPreset in the collection.
	 */
	lastItem(): MotionPreset;

	/**
	 * Returns the middle MotionPreset in the collection.
	 */
	middleItem(): MotionPreset;

	/**
	 * Returns the MotionPreset whose index follows the specified MotionPreset in the collection.
	 * @param obj The MotionPreset whose index comes before the desired MotionPreset.
	 */
	nextItem(obj: MotionPreset): MotionPreset;

	/**
	 * Returns the MotionPreset with the index previous to the specified index.
	 * @param obj The index of the MotionPreset that follows the desired MotionPreset.
	 */
	previousItem(obj: MotionPreset): MotionPreset;

	/**
	 * Generates a string which, if executed, will return the MotionPreset.
	 */
	toSource(): string;

}

/**
 * An article
 */
declare class Article {
	/**
	 * The export status of the Article
	 */
	articleExportStatus: boolean;

	/**
	 * A collection of article members.
	 */
	readonly articleMembers: ArticleMembers;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the Article.
	 */
	readonly id: number;

	/**
	 * The index of the Article within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the Article.
	 */
	name: string;

	/**
	 * The parent of the Article (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Populates the article with all page items in the document.
	 */
	addDocumentContent(): void;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Article[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the Article to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 */
	move(to: LocationOptions, reference: Article): Article;

	/**
	 * Deletes the Article.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Article.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of articles.
 */
declare class Articles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Article with the specified index.
	 * @param index The index.
	 */
	[index: number]: Article;

	/**
	 * Creates a new Article
	 * @param name The article name
	 * @param articleExportStatus The article's export status
	 * @param at The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 * @param withProperties Initial values for properties of the new Article
	 */
	add(name: string, articleExportStatus: boolean, at?: LocationOptions, reference?: Article, withProperties?: object): Article;

	/**
	 * Returns any Article in the collection.
	 */
	anyItem(): Article;

	/**
	 * Displays the number of elements in the Article.
	 */
	count(): number;

	/**
	 * Returns every Article in the collection.
	 */
	everyItem(): Article[];

	/**
	 * Returns the first Article in the collection.
	 */
	firstItem(): Article;

	/**
	 * Returns the Article with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Article;

	/**
	 * Returns the Article with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Article;

	/**
	 * Returns the Article with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Article;

	/**
	 * Returns the Articles within the specified range.
	 * @param from The Article, index, or name at the beginning of the range.
	 * @param to The Article, index, or name at the end of the range.
	 */
	itemByRange(from: Article | number | string, to: Article | number | string): Article[];

	/**
	 * Returns the last Article in the collection.
	 */
	lastItem(): Article;

	/**
	 * Returns the middle Article in the collection.
	 */
	middleItem(): Article;

	/**
	 * Returns the Article whose index follows the specified Article in the collection.
	 * @param obj The Article whose index comes before the desired Article.
	 */
	nextItem(obj: Article): Article;

	/**
	 * Returns the Article with the index previous to the specified index.
	 * @param obj The index of the Article that follows the desired Article.
	 */
	previousItem(obj: Article): Article;

	/**
	 * Generates a string which, if executed, will return the Article.
	 */
	toSource(): string;

}

/**
 * An article member.
 */
declare class ArticleMember {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the ArticleMember.
	 */
	readonly id: number;

	/**
	 * The index of the ArticleMember within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The underlying page item
	 */
	readonly itemRef: PageItem;

	/**
	 * The parent of the ArticleMember (a Article).
	 */
	readonly parent: Article;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ArticleMember[];

	/**
	 * Moves the ArticleMember to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 */
	move(to: LocationOptions, reference: ArticleMember): ArticleMember;

	/**
	 * Deletes the ArticleMember.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the ArticleMember.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of article members.
 */
declare class ArticleMembers {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ArticleMember with the specified index.
	 * @param index The index.
	 */
	[index: number]: ArticleMember;

	/**
	 * Adds a new member.
	 * @param itemRef page item to be added to article
	 * @param at The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 * @param withProperties Initial values for properties of the new ArticleMember
	 */
	add(itemRef: PageItem, at?: LocationOptions, reference?: ArticleMember, withProperties?: object): ArticleMember;

	/**
	 * Returns any ArticleMember in the collection.
	 */
	anyItem(): ArticleMember;

	/**
	 * Displays the number of elements in the ArticleMember.
	 */
	count(): number;

	/**
	 * Returns every ArticleMember in the collection.
	 */
	everyItem(): ArticleMember[];

	/**
	 * Returns the first ArticleMember in the collection.
	 */
	firstItem(): ArticleMember;

	/**
	 * Returns the ArticleMember with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ArticleMember;

	/**
	 * Returns the ArticleMember with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ArticleMember;

	/**
	 * Returns the ArticleMembers within the specified range.
	 * @param from The ArticleMember, index, or name at the beginning of the range.
	 * @param to The ArticleMember, index, or name at the end of the range.
	 */
	itemByRange(from: ArticleMember | number | string, to: ArticleMember | number | string): ArticleMember[];

	/**
	 * Returns the last ArticleMember in the collection.
	 */
	lastItem(): ArticleMember;

	/**
	 * Returns the middle ArticleMember in the collection.
	 */
	middleItem(): ArticleMember;

	/**
	 * Returns the ArticleMember whose index follows the specified ArticleMember in the collection.
	 * @param obj The ArticleMember whose index comes before the desired ArticleMember.
	 */
	nextItem(obj: ArticleMember): ArticleMember;

	/**
	 * Returns the ArticleMember with the index previous to the specified index.
	 * @param obj The index of the ArticleMember that follows the desired ArticleMember.
	 */
	previousItem(obj: ArticleMember): ArticleMember;

	/**
	 * Generates a string which, if executed, will return the ArticleMember.
	 */
	toSource(): string;

}

/**
 * Member of a group that is part of an article.
 */
declare class ArticleChild {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the ArticleChild.
	 */
	readonly id: number;

	/**
	 * The index of the ArticleChild within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The underlying page item
	 */
	readonly itemRef: PageItem;

	/**
	 * The parent of the ArticleChild (a Group).
	 */
	readonly parent: Group;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ArticleChild[];

	/**
	 * Moves the ArticleChild to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 */
	move(to: LocationOptions, reference: ArticleChild): ArticleChild;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the ArticleChild.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of group items that are also part of an article.
 */
declare class ArticleChildren {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ArticleChild with the specified index.
	 * @param index The index.
	 */
	[index: number]: ArticleChild;

	/**
	 * Returns any ArticleChild in the collection.
	 */
	anyItem(): ArticleChild;

	/**
	 * Displays the number of elements in the ArticleChild.
	 */
	count(): number;

	/**
	 * Returns every ArticleChild in the collection.
	 */
	everyItem(): ArticleChild[];

	/**
	 * Returns the first ArticleChild in the collection.
	 */
	firstItem(): ArticleChild;

	/**
	 * Returns the ArticleChild with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ArticleChild;

	/**
	 * Returns the ArticleChild with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ArticleChild;

	/**
	 * Returns the ArticleChildren within the specified range.
	 * @param from The ArticleChild, index, or name at the beginning of the range.
	 * @param to The ArticleChild, index, or name at the end of the range.
	 */
	itemByRange(from: ArticleChild | number | string, to: ArticleChild | number | string): ArticleChild[];

	/**
	 * Returns the last ArticleChild in the collection.
	 */
	lastItem(): ArticleChild;

	/**
	 * Returns the middle ArticleChild in the collection.
	 */
	middleItem(): ArticleChild;

	/**
	 * Returns the ArticleChild whose index follows the specified ArticleChild in the collection.
	 * @param obj The ArticleChild whose index comes before the desired ArticleChild.
	 */
	nextItem(obj: ArticleChild): ArticleChild;

	/**
	 * Returns the ArticleChild with the index previous to the specified index.
	 * @param obj The index of the ArticleChild that follows the desired ArticleChild.
	 */
	previousItem(obj: ArticleChild): ArticleChild;

	/**
	 * Generates a string which, if executed, will return the ArticleChild.
	 */
	toSource(): string;

}

/**
 * Embedded HTML.
 */
declare class HtmlItem extends PageItem {
	/**
	 * Is this HTML able to adapt its width and height based on changes to the parent div or does it have fixed dimensions?
	 */
	fixedDimensions: boolean;

	/**
	 * The embedded HTML text
	 */
	htmlContent: string;

}

/**
 * A collection of embedded HTML page items.
 */
declare class HtmlItems {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the HtmlItem with the specified index.
	 * @param index The index.
	 */
	[index: number]: HtmlItem;

	/**
	 * Creates a new HtmlItem
	 * @param layer The layer on which to create the HtmlItem.
	 * @param at The location at which to insert the HtmlItem relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new HtmlItem
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): HtmlItem;

	/**
	 * Returns any HtmlItem in the collection.
	 */
	anyItem(): HtmlItem;

	/**
	 * Displays the number of elements in the HtmlItem.
	 */
	count(): number;

	/**
	 * Returns every HtmlItem in the collection.
	 */
	everyItem(): HtmlItem[];

	/**
	 * Returns the first HtmlItem in the collection.
	 */
	firstItem(): HtmlItem;

	/**
	 * Returns the HtmlItem with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HtmlItem;

	/**
	 * Returns the HtmlItem with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HtmlItem;

	/**
	 * Returns the HtmlItem with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HtmlItem;

	/**
	 * Returns the HtmlItems within the specified range.
	 * @param from The HtmlItem, index, or name at the beginning of the range.
	 * @param to The HtmlItem, index, or name at the end of the range.
	 */
	itemByRange(from: HtmlItem | number | string, to: HtmlItem | number | string): HtmlItem[];

	/**
	 * Returns the last HtmlItem in the collection.
	 */
	lastItem(): HtmlItem;

	/**
	 * Returns the middle HtmlItem in the collection.
	 */
	middleItem(): HtmlItem;

	/**
	 * Returns the HtmlItem whose index follows the specified HtmlItem in the collection.
	 * @param obj The HtmlItem whose index comes before the desired HtmlItem.
	 */
	nextItem(obj: HtmlItem): HtmlItem;

	/**
	 * Returns the HtmlItem with the index previous to the specified index.
	 * @param obj The index of the HtmlItem that follows the desired HtmlItem.
	 */
	previousItem(obj: HtmlItem): HtmlItem;

	/**
	 * Generates a string which, if executed, will return the HtmlItem.
	 */
	toSource(): string;

}

/**
 * An object library.
 */
declare class Library {
	/**
	 * A collection of object library assets.
	 */
	readonly assets: Assets;

	/**
	 * The associated panel.
	 */
	readonly associatedPanel: Panel;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The full path to the file.
	 */
	readonly filePath: File;

	/**
	 * The full path to the Library, including the name of the Library.
	 */
	readonly fullName: File;

	/**
	 * The index of the Library within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the Library.
	 */
	readonly name: string;

	/**
	 * The parent of the Library (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Closes the Library.
	 */
	close(): void;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Library[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Stores the specified object in the library.
	 * @param using The page item(s) to store.
	 * @param withProperties Initial values for properties of the new Library
	 */
	store(using: PageItem[] | Movies | Sounds | Graphics | XMLElements, withProperties: object): Asset;

	/**
	 * Generates a string which, if executed, will return the Library.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of object libraries.
 */
declare class Libraries {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Library with the specified index.
	 * @param index The index.
	 */
	[index: number]: Library;

	/**
	 * Creates a new object libary.
	 * @param fullName The library's path and file name.
	 * @param withProperties Initial values for properties of the new Library
	 */
	add(fullName: File, withProperties: object): Library;

	/**
	 * Returns any Library in the collection.
	 */
	anyItem(): Library;

	/**
	 * Displays the number of elements in the Library.
	 */
	count(): number;

	/**
	 * Returns every Library in the collection.
	 */
	everyItem(): Library[];

	/**
	 * Returns the first Library in the collection.
	 */
	firstItem(): Library;

	/**
	 * Returns the Library with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Library;

	/**
	 * Returns the Library with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Library;

	/**
	 * Returns the Libraries within the specified range.
	 * @param from The Library, index, or name at the beginning of the range.
	 * @param to The Library, index, or name at the end of the range.
	 */
	itemByRange(from: Library | number | string, to: Library | number | string): Library[];

	/**
	 * Returns the last Library in the collection.
	 */
	lastItem(): Library;

	/**
	 * Returns the middle Library in the collection.
	 */
	middleItem(): Library;

	/**
	 * Returns the Library whose index follows the specified Library in the collection.
	 * @param obj The Library whose index comes before the desired Library.
	 */
	nextItem(obj: Library): Library;

	/**
	 * Returns the Library with the index previous to the specified index.
	 * @param obj The index of the Library that follows the desired Library.
	 */
	previousItem(obj: Library): Library;

	/**
	 * Generates a string which, if executed, will return the Library.
	 */
	toSource(): string;

}

/**
 * An object library asset.
 */
declare class Asset {
	/**
	 * The type of object library asset.
	 */
	assetType: AssetType;

	/**
	 * The date and time the Asset was created.
	 */
	readonly date: Date;

	/**
	 * The description of the Asset.
	 */
	description: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the Asset.
	 */
	readonly id: number;

	/**
	 * The index of the Asset within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the Asset.
	 */
	name: string;

	/**
	 * The parent of the Asset (a Library).
	 */
	readonly parent: Library;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Asset[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Places the asset in the specified document or text.
	 * @param on The document or text object in which to place the asset.
	 */
	placeAsset(on: Document | Text): any[];

	/**
	 * Deletes the Asset.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Asset in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void;

	/**
	 * Generates a string which, if executed, will return the Asset.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of object library assets.
 */
declare class Assets {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Asset with the specified index.
	 * @param index The index.
	 */
	[index: number]: Asset;

	/**
	 * Returns any Asset in the collection.
	 */
	anyItem(): Asset;

	/**
	 * Displays the number of elements in the Asset.
	 */
	count(): number;

	/**
	 * Returns every Asset in the collection.
	 */
	everyItem(): Asset[];

	/**
	 * Returns the first Asset in the collection.
	 */
	firstItem(): Asset;

	/**
	 * Returns the Asset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Asset;

	/**
	 * Returns the Asset with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Asset;

	/**
	 * Returns the Asset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Asset;

	/**
	 * Returns the Assets within the specified range.
	 * @param from The Asset, index, or name at the beginning of the range.
	 * @param to The Asset, index, or name at the end of the range.
	 */
	itemByRange(from: Asset | number | string, to: Asset | number | string): Asset[];

	/**
	 * Returns the last Asset in the collection.
	 */
	lastItem(): Asset;

	/**
	 * Returns the middle Asset in the collection.
	 */
	middleItem(): Asset;

	/**
	 * Returns the Asset whose index follows the specified Asset in the collection.
	 * @param obj The Asset whose index comes before the desired Asset.
	 */
	nextItem(obj: Asset): Asset;

	/**
	 * Returns the Asset with the index previous to the specified index.
	 * @param obj The index of the Asset that follows the desired Asset.
	 */
	previousItem(obj: Asset): Asset;

	/**
	 * Generates a string which, if executed, will return the Asset.
	 */
	toSource(): string;

}

/**
 * A link to a placed file.
 */
declare class Link {
	/**
	 * Dispatched when the value of a property changes on this Link. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_ATTRIBUTE_CHANGED: string;

	/**
	 * Dispatched after a Link is deleted. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_DELETE: string;

	/**
	 * Dispatched after a Link is embedded. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_EMBED: string;

	/**
	 * Dispatched after a Link is relocated from one object to another. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_MOVE: string;

	/**
	 * Dispatched after a Link is created. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_NEW: string;

	/**
	 * Dispatched after a Link is unembedded. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_UNEMBED: string;

	/**
	 * Dispatched after a Link is updated. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_UPDATE: string;

	/**
	 * Dispatched before a Link is deleted. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_DELETE: string;

	/**
	 * Dispatched before a Link is embedded. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_EMBED: string;

	/**
	 * Dispatched before a Link is relocated from one object to another. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_MOVE: string;

	/**
	 * Dispatched before a Link is unembedded. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_UNEMBED: string;

	/**
	 * Dispatched before a Link is updated. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_UPDATE: string;

	/**
	 * The asset ID of the linked object.
	 */
	readonly assetID: string;

	/**
	 * The asset URL of the linked object.
	 */
	readonly assetURL: string;

	/**
	 * The date and time the Link was created.
	 */
	readonly date: Date;

	/**
	 * If true, indicates the linked object has been edited in the current document but the source file has not been updated.
	 */
	readonly edited: boolean;

	/**
	 * The Version Cue editing state of the file.
	 */
	readonly editingState: EditingState;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	readonly filePath: string | File;

	/**
	 * The unique ID of the Link.
	 */
	readonly id: number;

	/**
	 * The index of the link in the links collection.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The URI of the linked resource.
	 */
	readonly linkResourceURI: string;

	/**
	 * The file type of the linked object.
	 */
	readonly linkType: string;

	/**
	 * XMP data for the link source file.
	 */
	readonly linkXmp: LinkMetadata;

	/**
	 * A collection of links.
	 */
	readonly links: Links;

	/**
	 * The name of the Link.
	 */
	readonly name: string;

	/**
	 * If true, indicates a link to a full-resolution version of the source file is needed. If false, indicates the object is embedded.
	 */
	readonly needed: boolean;

	/**
	 * The linked object.
	 */
	readonly parent: Story | Graphic | Movie | Sound;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The rendition data of the link resource.
	 */
	readonly renditionData: LinkResourceRenditionType;

	/**
	 * The size of the Link file.
	 */
	readonly size: number;

	/**
	 * The status of the link.
	 */
	readonly status: LinkStatus;

	/**
	 * The Version Cue version state of the file.
	 */
	readonly versionState: VersionState;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Check in to Version Cue.
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	checkIn(versionComments: string, forceSave?: boolean): void;

	/**
	 * Copies the link file to the specified location.
	 * @param to The file or folder to which to copy the file.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	copyLink(to: File, versionComments: string, forceSave?: boolean): void;

	/**
	 * Opens the source file of the link in the default editor for the source file type.
	 */
	editOriginal(): void;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Link[];

	/**
	 * Opens the source file of the link in InDesign for SharedContent links.
	 */
	goToSource(): void;

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Experimental: Reinitialize the link to a new uri
	 * @param linkResourceURI Resource URI to relink.
	 */
	reinitLink(linkResourceURI: string): void;

	/**
	 * Points the link to a new source file.
	 * @param to The full path name of the new source file.
	 */
	relink(to: File | string): void;

	/**
	 * Experimental: Relink the text fragment link to a new uri
	 * @param linkResourceURI Resource URI to relink to.
	 * @param name The tag name for the key.
	 */
	relinkTextFragmentLink(linkResourceURI: string, name: string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Experimental: Download the original asset and replace FPO with it.
	 */
	replaceWithOriginal(): void;

	/**
	 * Opens Adobe Bridge and selects the source file of the link.
	 */
	revealInBridge(): void;

	/**
	 * Opens the file system to the folder that contains the source file of the link, and selects the file.
	 */
	revealInSystem(): void;

	/**
	 * Selects the link.
	 */
	show(): void;

	/**
	 * Generates a string which, if executed, will return the Link.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Unembeds the source file. If no folder is specified, creates a link to the original source file; if a folder is specified, copies the file to the folder and creates a link to the copied file.
	 * @param to The folder to which to copy the unembedded file.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	unembed(to: File, versionComments: string, forceSave?: boolean): void;

	/**
	 * Embeds the source file in the document.
	 */
	unlink(): void;

	/**
	 * Updates the link if the source file has been changed.
	 */
	update(): Link;

}

/**
 * A collection of links.
 */
declare class Links {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Link with the specified index.
	 * @param index The index.
	 */
	[index: number]: Link;

	/**
	 * Returns any Link in the collection.
	 */
	anyItem(): Link;

	/**
	 * Displays the number of elements in the Link.
	 */
	count(): number;

	/**
	 * Returns every Link in the collection.
	 */
	everyItem(): Link[];

	/**
	 * Returns the first Link in the collection.
	 */
	firstItem(): Link;

	/**
	 * Returns the Link with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Link;

	/**
	 * Returns the Link with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Link;

	/**
	 * Returns the Link with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Link;

	/**
	 * Returns the Links within the specified range.
	 * @param from The Link, index, or name at the beginning of the range.
	 * @param to The Link, index, or name at the end of the range.
	 */
	itemByRange(from: Link | number | string, to: Link | number | string): Link[];

	/**
	 * Returns the last Link in the collection.
	 */
	lastItem(): Link;

	/**
	 * Returns the middle Link in the collection.
	 */
	middleItem(): Link;

	/**
	 * Returns the Link whose index follows the specified Link in the collection.
	 * @param obj The Link whose index comes before the desired Link.
	 */
	nextItem(obj: Link): Link;

	/**
	 * Returns the Link with the index previous to the specified index.
	 * @param obj The index of the Link that follows the desired Link.
	 */
	previousItem(obj: Link): Link;

	/**
	 * Generates a string which, if executed, will return the Link.
	 */
	toSource(): string;

}

/**
 * Experimental: An http link connection manager.
 */
declare class HttpLinkConnectionManagerObject {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the HttpLinkConnectionManagerObject within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the HttpLinkConnectionManagerObject (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HttpLinkConnectionManagerObject[];

	/**
	 * Experimental: Create a url connection for the given server address
	 * @param serverurl Server URL to connect
	 * @param jsonData JSON data
	 */
	httpConnect(serverurl: string, jsonData: string): void;

	/**
	 * Experimental: Checks if the given server URL is connected or not.
	 * @param serverurl Server URL to check
	 */
	isConnected(serverurl: string): boolean;

	/**
	 * Experimental: Logout from the given URL
	 * @param serverurl Server URL to logout from
	 */
	logout(serverurl: string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the HttpLinkConnectionManagerObject.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * MetaData properties for the link source file.
 */
declare class LinkMetadata extends Preference {
	/**
	 * The author of the document.
	 */
	readonly author: string;

	/**
	 * The URL of the file that contains the linked copyright statement.
	 */
	readonly copyrightInfoURL: string;

	/**
	 * The text to use as a copyright notice.
	 */
	readonly copyrightNotice: string;

	/**
	 * The copyright status of the document.
	 */
	readonly copyrightStatus: CopyrightStatus;

	/**
	 * The creation date of the document.
	 */
	readonly creationDate: Date;

	/**
	 * The name of the application used to create the document.
	 */
	readonly creator: string;

	/**
	 * The description of the LinkMetadata.
	 */
	readonly description: string;

	/**
	 * The title of the document.
	 */
	readonly documentTitle: string;

	/**
	 * The format of the document.
	 */
	readonly format: string;

	/**
	 * The job name.
	 */
	readonly jobName: string;

	/**
	 * The list of keywords associated with the document.
	 */
	readonly keywords: string[];

	/**
	 * The most recent modification date of the document.
	 */
	readonly modificationDate: Date;

	/**
	 * The location of the document on the asset management server.
	 */
	readonly serverURL: string;

	/**
	 * Counts the number of items in the container.
	 * @param namespace The namespace of the container.
	 * @param path The path to the container.
	 */
	countContainer(namespace: string, path: string): number;

	/**
	 * Gets the XMP property value associated with the specified path.
	 * @param namespace The namespace of the property.
	 * @param path The specified path.
	 */
	getProperty(namespace: string, path: string): string;

}

/**
 * An object style.
 */
declare class ObjectStyle {
	/**
	 * Anchored object settings.
	 */
	anchoredObjectSettings: AnchoredObjectSetting;

	/**
	 * The named grid in use.
	 */
	appliedNamedGrid: NamedGrid;

	/**
	 * The paragraph style applied to the text.
	 */
	appliedParagraphStyle: ParagraphStyle | string;

	/**
	 * If true, applies paragraph styles using Next Paragraph Style settings, beginning with the Next Paragraph Style defined in the paragraph style associated with the object style (if any).
	 */
	applyNextParagraphStyle: boolean;

	/**
	 * The arrowhead alignment applied to the ObjectStyle.
	 */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;

	/**
	 * The style that this style is based on.
	 */
	basedOn: ObjectStyle | string;

	/**
	 * Baseline frame grid option settings.
	 */
	baselineFrameGridOptions: BaselineFrameGridOption;

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number | string;

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number | string;

	/**
	 * The content effects enabling settings.
	 */
	readonly contentEffectsEnablingSettings: ObjectStyleContentEffectsCategorySettings;

	/**
	 * Transparency settings for the content of the ObjectStyle.
	 */
	readonly contentTransparencySettings: ContentTransparencySetting;

	/**
	 * Emit CSS
	 */
	emitCss: boolean;

	/**
	 * If true, the object style will apply an anchored object setting.
	 */
	enableAnchoredObjectOptions: boolean;

	/**
	 * If true, the object style will apply an epub tag and class.
	 */
	enableExportTagging: boolean;

	/**
	 * If true, the object style will apply a fill.
	 */
	enableFill: boolean;

	/**
	 * If true, the object style will apply frame fitting options.
	 */
	enableFrameFittingOptions: boolean;

	/**
	 * If true, the object style will apply alt text export options.
	 */
	enableObjectExportAltTextOptions: boolean;

	/**
	 * If true, the object style will apply epub export options.
	 */
	enableObjectExportEpubOptions: boolean;

	/**
	 * If true, the object style will apply tagged pdf export options.
	 */
	enableObjectExportTaggedPdfOptions: boolean;

	/**
	 * If true, the object style will apply a paragraph style.
	 */
	enableParagraphStyle: boolean;

	/**
	 * If true, the object style will apply story options.
	 */
	enableStoryOptions: boolean;

	/**
	 * If true, the object style will apply a stroke.
	 */
	enableStroke: boolean;

	/**
	 * If true, the object style will apply stroke options and corner options.
	 */
	enableStrokeAndCornerOptions: boolean;

	/**
	 * If true, the object style will apply auto-sizing text frame options.
	 */
	enableTextFrameAutoSizingOptions: boolean;

	/**
	 * If true, the object style will apply baseline text frame options.
	 */
	enableTextFrameBaselineOptions: boolean;

	/**
	 * Enable the text frame footnote options category of object style
	 */
	enableTextFrameFootnoteOptions: boolean;

	/**
	 * If true, the object style will apply general text frame options.
	 */
	enableTextFrameGeneralOptions: boolean;

	/**
	 * If true, the object style will apply text wrap, contour, and non-printing settings.
	 */
	enableTextWrapAndOthers: boolean;

	/**
	 * If true, enables the Dimension and Position attributes
	 */
	enableTransformAttributes: boolean;

	/**
	 * The end shape of an open path.
	 */
	endCap: EndCap;

	/**
	 * The corner join applied to the ObjectStyle.
	 */
	endJoin: EndJoin;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the ObjectStyle. .
	 */
	fillColor: Swatch | string;

	/**
	 * The fill effects enabling settings.
	 */
	readonly fillEffectsEnablingSettings: ObjectStyleFillEffectsCategorySettings;

	/**
	 * The percent of tint to use in the ObjectStyle's fill color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;

	/**
	 * Transparency settings for the fill applied to the ObjectStyle.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;

	/**
	 * The frame fitting option to apply to placed or pasted content. Can be applied to a frame, object style, or document or to the application.
	 */
	frameFittingOptions: FrameFittingOption;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of a dashed, dotted, or striped stroke. For information, see stroke type.
	 */
	gapColor: Swatch;

	/**
	 * The tint as a percentage of the gap color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	gapTint: number;

	/**
	 * The angle of a linear gradient applied to the fill of the ObjectStyle. (Range: -180 to 180)
	 */
	gradientFillAngle: number;

	/**
	 * The angle of a linear gradient applied to the stroke of the ObjectStyle. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;

	/**
	 * The unique ID of the ObjectStyle.
	 */
	readonly id: number;

	/**
	 * If true, class attribute will be generated for the style
	 */
	includeClass: boolean;

	/**
	 * The index of the ObjectStyle within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The scaling applied to the arrowhead at the start of the path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;

	/**
	 * The arrowhead applied to the start of the path.
	 */
	leftLineEnd: ArrowHead;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number;

	/**
	 * The name of the ObjectStyle.
	 */
	name: string;

	/**
	 * If true, the ObjectStyle does not print.
	 */
	nonprinting: boolean;

	/**
	 * The object effects enabling settings.
	 */
	readonly objectEffectsEnablingSettings: ObjectStyleObjectEffectsCategorySettings;

	/**
	 * Export options for the object
	 */
	readonly objectExportOptions: ObjectExportOption;

	/**
	 * A collection of object style export tag maps.
	 */
	readonly objectStyleExportTagMaps: ObjectStyleExportTagMaps;

	/**
	 * If true, the ObjectStyle's fill color overprints any underlying objects. If false, the fill color knocks out the underlying colors.
	 */
	overprintFill: boolean;

	/**
	 * If true, the gap color overprints any underlying colors. If false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;

	/**
	 * If true, the ObjectStyle's stroke color overprints any underlying objects. If false, the stroke color knocks out theunderlying colors.
	 */
	overprintStroke: boolean;

	/**
	 * The parent of the ObjectStyle (a Document, Application or ObjectStyleGroup).
	 */
	readonly parent: any;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The scaling applied to the arrowhead at the end of the path. (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;

	/**
	 * The arrowhead applied to the end of the path.
	 */
	rightLineEnd: ArrowHead;

	/**
	 * Story preference settings.
	 */
	storyPreferences: StoryPreference;

	/**
	 * The stroke alignment applied to the ObjectStyle.
	 */
	strokeAlignment: StrokeAlignment;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the ObjectStyle.
	 */
	strokeColor: Swatch | string;

	/**
	 * The stroke effects enabling settings.
	 */
	readonly strokeEffectsEnablingSettings: ObjectStyleStrokeEffectsCategorySettings;

	/**
	 * The percent of tint to use in object's stroke color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;

	/**
	 * Transparency settings for the stroke.
	 */
	readonly strokeTransparencySettings: StrokeTransparencySetting;

	/**
	 * The name of the stroke style to apply.
	 */
	strokeType: StrokeStyle | string;

	/**
	 * The weight (in points) to apply to the ObjectStyle's stroke.
	 */
	strokeWeight: number | string;

	/**
	 * Text frame preference settings.
	 */
	textFramePreferences: TextFramePreference;

	/**
	 * The text wrap preference properties that define the default formatting for wrapping text around objects.
	 */
	textWrapPreferences: TextWrapPreference;

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	topLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	topLeftCornerRadius: number | string;

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	topRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number | string;

	/**
	 * The layout attribute options to apply to any page item.
	 */
	transformAttributeOptions: TransformAttributeOption;

	/**
	 * Transparency settings.
	 */
	readonly transparencySettings: TransparencySetting;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the ObjectStyle.
	 */
	duplicate(): ObjectStyle;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ObjectStyle[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the ObjectStyle to the specified location.
	 * @param to The new location relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the to parameter is before or after.
	 */
	move(to: LocationOptions, reference: ObjectStyle | ObjectStyleGroup | Document | Application): ObjectStyle;

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: ObjectStyle): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Sets the given dimension attribute state to enabled or disabled state
	 * @param whichAttributes Which dimension attributes do you want to enable or disable.
	 * @param attributeState Attribute state to be set, set true to enable and false to disable the attributes
	 */
	setDimensionAttributeState(whichAttributes: DimensionAttributes, attributeState: boolean): boolean;

	/**
	 * Sets the given position attribute state to enabled or disabled state
	 * @param whichAttributes Which position attributes do you want to enable or disable.
	 * @param attributeState Attribute state to be set, set true to enable and false to disable the attributes
	 */
	setPositionAttributeState(whichAttributes: PositionAttributes, attributeState: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the ObjectStyle.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of object styles.
 */
declare class ObjectStyles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ObjectStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: ObjectStyle;

	/**
	 * Creates a new ObjectStyle.
	 * @param withProperties Initial values for properties of the new ObjectStyle
	 */
	add(withProperties: object): ObjectStyle;

	/**
	 * Returns any ObjectStyle in the collection.
	 */
	anyItem(): ObjectStyle;

	/**
	 * Displays the number of elements in the ObjectStyle.
	 */
	count(): number;

	/**
	 * Returns every ObjectStyle in the collection.
	 */
	everyItem(): ObjectStyle[];

	/**
	 * Returns the first ObjectStyle in the collection.
	 */
	firstItem(): ObjectStyle;

	/**
	 * Returns the ObjectStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ObjectStyle;

	/**
	 * Returns the ObjectStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ObjectStyle;

	/**
	 * Returns the ObjectStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ObjectStyle;

	/**
	 * Returns the ObjectStyles within the specified range.
	 * @param from The ObjectStyle, index, or name at the beginning of the range.
	 * @param to The ObjectStyle, index, or name at the end of the range.
	 */
	itemByRange(from: ObjectStyle | number | string, to: ObjectStyle | number | string): ObjectStyle[];

	/**
	 * Returns the last ObjectStyle in the collection.
	 */
	lastItem(): ObjectStyle;

	/**
	 * Returns the middle ObjectStyle in the collection.
	 */
	middleItem(): ObjectStyle;

	/**
	 * Returns the ObjectStyle whose index follows the specified ObjectStyle in the collection.
	 * @param obj The ObjectStyle whose index comes before the desired ObjectStyle.
	 */
	nextItem(obj: ObjectStyle): ObjectStyle;

	/**
	 * Returns the ObjectStyle with the index previous to the specified index.
	 * @param obj The index of the ObjectStyle that follows the desired ObjectStyle.
	 */
	previousItem(obj: ObjectStyle): ObjectStyle;

	/**
	 * Generates a string which, if executed, will return the ObjectStyle.
	 */
	toSource(): string;

}

/**
 * A mapping object that maps an object export type to an export tag.
 */
declare class ObjectStyleExportTagMap {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The attributes to map.
	 */
	exportAttributes: string;

	/**
	 * The class to map.
	 */
	exportClass: string;

	/**
	 * The tag to map.
	 */
	exportTag: string;

	/**
	 * The type of export.
	 */
	readonly exportType: string;

	/**
	 * The index of the ObjectStyleExportTagMap within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the ObjectStyleExportTagMap (a ObjectStyle).
	 */
	readonly parent: ObjectStyle;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ObjectStyleExportTagMap[];

	/**
	 * Deletes the ObjectStyleExportTagMap.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the ObjectStyleExportTagMap.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of object style export tag maps.
 */
declare class ObjectStyleExportTagMaps {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ObjectStyleExportTagMap with the specified index.
	 * @param index The index.
	 */
	[index: number]: ObjectStyleExportTagMap;

	/**
	 * Create a new mapping
	 * @param exportType The type of export.
	 * @param exportTag The tag to map.
	 * @param exportClass The class to map.
	 * @param exportAttributes The attributes to map.
	 * @param withProperties Initial values for properties of the new ObjectStyleExportTagMap
	 */
	add(exportType: string, exportTag: string, exportClass: string, exportAttributes: string, withProperties: object): ObjectStyleExportTagMap;

	/**
	 * Returns any ObjectStyleExportTagMap in the collection.
	 */
	anyItem(): ObjectStyleExportTagMap;

	/**
	 * Displays the number of elements in the ObjectStyleExportTagMap.
	 */
	count(): number;

	/**
	 * Returns every ObjectStyleExportTagMap in the collection.
	 */
	everyItem(): ObjectStyleExportTagMap[];

	/**
	 * Returns the first ObjectStyleExportTagMap in the collection.
	 */
	firstItem(): ObjectStyleExportTagMap;

	/**
	 * Returns the ObjectStyleExportTagMap with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ObjectStyleExportTagMap;

	/**
	 * Returns the ObjectStyleExportTagMaps within the specified range.
	 * @param from The ObjectStyleExportTagMap, index, or name at the beginning of the range.
	 * @param to The ObjectStyleExportTagMap, index, or name at the end of the range.
	 */
	itemByRange(from: ObjectStyleExportTagMap | number | string, to: ObjectStyleExportTagMap | number | string): ObjectStyleExportTagMap[];

	/**
	 * Returns the last ObjectStyleExportTagMap in the collection.
	 */
	lastItem(): ObjectStyleExportTagMap;

	/**
	 * Returns the middle ObjectStyleExportTagMap in the collection.
	 */
	middleItem(): ObjectStyleExportTagMap;

	/**
	 * Returns the ObjectStyleExportTagMap whose index follows the specified ObjectStyleExportTagMap in the collection.
	 * @param obj The ObjectStyleExportTagMap whose index comes before the desired ObjectStyleExportTagMap.
	 */
	nextItem(obj: ObjectStyleExportTagMap): ObjectStyleExportTagMap;

	/**
	 * Returns the ObjectStyleExportTagMap with the index previous to the specified index.
	 * @param obj The index of the ObjectStyleExportTagMap that follows the desired ObjectStyleExportTagMap.
	 */
	previousItem(obj: ObjectStyleExportTagMap): ObjectStyleExportTagMap;

	/**
	 * Generates a string which, if executed, will return the ObjectStyleExportTagMap.
	 */
	toSource(): string;

}

/**
 * PDF comment object
 */
declare class PDFComment {
	/**
	 * The content of the comment
	 */
	readonly commentContent: string;

	/**
	 * The date of the comment
	 */
	readonly commentDate: Date;

	/**
	 * The file path of the comment
	 */
	readonly commentFilePath: string;

	/**
	 * Whether the comment has been applied
	 */
	readonly commentIsApplied: boolean;

	/**
	 * Whether the comment is an orphan
	 */
	readonly commentIsOrphan: boolean;

	/**
	 * Path geometry of the comment. Can return: Ordered array containing pathPointArray:Array of Ordered array containing anchor:Array of 2 Reals, leftDirection:Array of 2 Reals, rightDirection:Array of 2 Reals, pathOpen:Boolean.
	 */
	readonly commentPathGeometry: any[];

	/**
	 * The name of the reviewer who made the comment
	 */
	readonly commentReviewer: string;

	/**
	 * The status of the comment
	 */
	readonly commentStatus: CommentStatusEnum;

	/**
	 * The type of the comment
	 */
	readonly commentType: CommentTypeEnum;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the PDFComment.
	 */
	readonly id: number;

	/**
	 * The index of the PDFComment within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the PDFComment; this is an alias to the PDFComment's label property.
	 */
	name: string;

	/**
	 * The parent of the PDFComment (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of reply objects
	 */
	readonly replies: Replies;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Change the status of a comment
	 * @param commentStatus The new status of the comment
	 * @param withProperties Initial values for properties of the new PDFComment
	 */
	changeStatus(commentStatus: CommentStatusEnum, withProperties: object): void;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PDFComment[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the PDFComment.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the PDFComment.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of PDF comment objects
 */
declare class PDFComments {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PDFComment with the specified index.
	 * @param index The index.
	 */
	[index: number]: PDFComment;

	/**
	 * Returns any PDFComment in the collection.
	 */
	anyItem(): PDFComment;

	/**
	 * Displays the number of elements in the PDFComment.
	 */
	count(): number;

	/**
	 * Returns every PDFComment in the collection.
	 */
	everyItem(): PDFComment[];

	/**
	 * Returns the first PDFComment in the collection.
	 */
	firstItem(): PDFComment;

	/**
	 * Returns the PDFComment with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PDFComment;

	/**
	 * Returns the PDFComment with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PDFComment;

	/**
	 * Returns the PDFComment with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PDFComment;

	/**
	 * Returns the PDFComments within the specified range.
	 * @param from The PDFComment, index, or name at the beginning of the range.
	 * @param to The PDFComment, index, or name at the end of the range.
	 */
	itemByRange(from: PDFComment | number | string, to: PDFComment | number | string): PDFComment[];

	/**
	 * Returns the last PDFComment in the collection.
	 */
	lastItem(): PDFComment;

	/**
	 * Returns the middle PDFComment in the collection.
	 */
	middleItem(): PDFComment;

	/**
	 * Returns the PDFComment whose index follows the specified PDFComment in the collection.
	 * @param obj The PDFComment whose index comes before the desired PDFComment.
	 */
	nextItem(obj: PDFComment): PDFComment;

	/**
	 * Returns the PDFComment with the index previous to the specified index.
	 * @param obj The index of the PDFComment that follows the desired PDFComment.
	 */
	previousItem(obj: PDFComment): PDFComment;

	/**
	 * Generates a string which, if executed, will return the PDFComment.
	 */
	toSource(): string;

}

/**
 * Reply object.
 */
declare class Reply {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the Reply.
	 */
	readonly id: number;

	/**
	 * The index of the Reply within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the Reply; this is an alias to the Reply's label property.
	 */
	name: string;

	/**
	 * The parent of the Reply (a PDFComment).
	 */
	readonly parent: PDFComment;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The content of the reply
	 */
	readonly replyContent: string;

	/**
	 * The date of the reply
	 */
	readonly replyDate: Date;

	/**
	 * The name of the reviewer who made the reply
	 */
	readonly replyReviewer: string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Reply[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Reply.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of reply objects
 */
declare class Replies {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Reply with the specified index.
	 * @param index The index.
	 */
	[index: number]: Reply;

	/**
	 * Returns any Reply in the collection.
	 */
	anyItem(): Reply;

	/**
	 * Displays the number of elements in the Reply.
	 */
	count(): number;

	/**
	 * Returns every Reply in the collection.
	 */
	everyItem(): Reply[];

	/**
	 * Returns the first Reply in the collection.
	 */
	firstItem(): Reply;

	/**
	 * Returns the Reply with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Reply;

	/**
	 * Returns the Reply with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Reply;

	/**
	 * Returns the Reply with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Reply;

	/**
	 * Returns the Replies within the specified range.
	 * @param from The Reply, index, or name at the beginning of the range.
	 * @param to The Reply, index, or name at the end of the range.
	 */
	itemByRange(from: Reply | number | string, to: Reply | number | string): Reply[];

	/**
	 * Returns the last Reply in the collection.
	 */
	lastItem(): Reply;

	/**
	 * Returns the middle Reply in the collection.
	 */
	middleItem(): Reply;

	/**
	 * Returns the Reply whose index follows the specified Reply in the collection.
	 * @param obj The Reply whose index comes before the desired Reply.
	 */
	nextItem(obj: Reply): Reply;

	/**
	 * Returns the Reply with the index previous to the specified index.
	 * @param obj The index of the Reply that follows the desired Reply.
	 */
	previousItem(obj: Reply): Reply;

	/**
	 * Generates a string which, if executed, will return the Reply.
	 */
	toSource(): string;

}

/**
 * Story preferences.
 */
declare class StoryPreference extends Preference {
	/**
	 * The type of text frame.
	 */
	frameType: FrameTypes;

	/**
	 * If true, adjust the position of characters at the edges of the frame to provide a better appearance.
	 */
	opticalMarginAlignment: boolean;

	/**
	 * The point size used as the basis for calculating optical margin alignment. (Range: 0.1 to 1296)
	 */
	opticalMarginSize: number | string;

	/**
	 * The direction of the story.
	 */
	storyDirection: StoryDirectionOptions;

	/**
	 * The orientation of the text in the story.
	 */
	storyOrientation: StoryHorizontalOrVertical;

}

/**
 * Text frame preferences.
 */
declare class TextFramePreference extends Preference {
	/**
	 * The reference point for auto sizing of text frame. Reference point is automatically adjusted to the suitable value depending on the auto-sizing type value. As an example, top left reference point becomes top center for height only dimension
	 */
	autoSizingReferencePoint: AutoSizingReferenceEnum;

	/**
	 * Auto-sizing type of text frame. Based on type, reference value is automatically adjusted. For example, for height only type, top-left reference point becomes top-center. Recommended to change auto-sizing type, after setting other auto-sizing attributes
	 */
	autoSizingType: AutoSizingTypeEnum;

	/**
	 * The distance between the baseline of the text and the top inset of the text frame or cell.
	 */
	firstBaselineOffset: FirstBaseline;

	/**
	 * If true, enable overrides to document footnote options.
	 */
	footnotesEnableOverrides: boolean;

	/**
	 * Minimum Spacing Before First Footnote
	 */
	footnotesMinimumSpacing: number | string;

	/**
	 * Space between footnotes.
	 */
	footnotesSpaceBetween: number | string;

	/**
	 * If true, enable straddling footnotes.
	 */
	footnotesSpanAcrossColumns: boolean;

	/**
	 * If true, ignores text wrap settings for drawn or placed objects in the text frame.
	 */
	ignoreWrap: boolean;

	/**
	 * The amount to offset text from the edges of the text frame, specified either as a single value applied uniformly to all sides of the text frame or as an array of 4 values in the format [top inset, left inset, bottom inset, right inset].
	 */
	insetSpacing: number | [number, number, number, number];

	/**
	 * The minimum distance between the baseline of the text and the top inset of the text frame or cell.
	 */
	minimumFirstBaselineOffset: number | string;

	/**
	 * The minimum height for auto-sizing of the text frame.
	 */
	minimumHeightForAutoSizing: number | string;

	/**
	 * The minimum width for auto-sizing of the text frame.
	 */
	minimumWidthForAutoSizing: number | string;

	/**
	 * The number of columns in the text frame. Note: Depending on the value of use fixed column width, the number of columns can change automatically when the text frame size changes.
	 */
	textColumnCount: number;

	/**
	 * The column width of the columns in the text frame.
	 */
	textColumnFixedWidth: number | string;

	/**
	 * The space between columns in the text frame.
	 */
	textColumnGutter: number | string;

	/**
	 * The maximum column width of the columns in the text frame. Use 0 to indicate no upper limit.
	 */
	textColumnMaxWidth: number | string;

	/**
	 * If true, maintains column width when the text frame is resized. If false, causes columns to resize when the text frame is resized. Note: When true, resizing the frame can change the number of columns in the frame.
	 */
	useFixedColumnWidth: boolean;

	/**
	 * If true, maintains column width between a min and max range when the text frame is resized. If false, causes columns to resize when the text frame is resized. Note: When true, resizing the frame can change the number of columns in the frame.
	 */
	useFlexibleColumnWidth: boolean;

	/**
	 * If true, minimum height value is used during the auto-sizing of text frame.
	 */
	useMinimumHeightForAutoSizing: boolean;

	/**
	 * If true, minimum width value is used during the auto-sizing of text frame.
	 */
	useMinimumWidthForAutoSizing: boolean;

	/**
	 * If true, line-breaks are not introduced after auto sizing.
	 */
	useNoLineBreaksForAutoSizing: boolean;

	/**
	 * Vertically justify balanced across all columns.
	 */
	verticalBalanceColumns: boolean;

	/**
	 * The vertical alignment of the text content.
	 */
	verticalJustification: VerticalJustification;

	/**
	 * The maximum amount of vertical space between two paragraphs. Note: Valid only when vertical justification is justified; the specified amount is applied in addition to the space before or space after values defined for the paragraph.
	 */
	verticalThreshold: number | string;

}

/**
 * Text preferences.
 */
declare class TextPreference extends Preference {
	/**
	 * If true, moves wrapped text to the next available leading increment below the text wrap objects (skip by leading).
	 */
	abutTextToTextWrap: boolean;

	/**
	 * Specifies where to insert new pages in response to overset text.
	 */
	addPages: AddPageOptions;

	/**
	 * The amount that the baseline shift increases each time the user presses the option/alt-shift-up arrow keys or decreases each time the user presses the option/alt-shift-down arrow keys. (Range: .001 to 100)
	 */
	baselineShiftKeyIncrement: number | string;

	/**
	 * Enable auto-deletion of pages containing empty threaded text frames.
	 */
	deleteEmptyPages: boolean;

	/**
	 * If true, highlights character and paragraph styles with colored backgrounds.
	 */
	enableStylePreviewMode: boolean;

	/**
	 * If true, highlights custom kerned or tracked characters.
	 */
	highlightCustomSpacing: boolean;

	/**
	 * If true, highlights hyphenation and justification rule violations in the text.
	 */
	highlightHjViolations: boolean;

	/**
	 * If true, highlights paragraphs that violate keep options.
	 */
	highlightKeeps: boolean;

	/**
	 * If true, uses on-screen highlighting to identify kinsoku.
	 */
	highlightKinsoku: boolean;

	/**
	 * If true, highlights missing fonts.
	 */
	highlightSubstitutedFonts: boolean;

	/**
	 * If true, highlights substituted glyphs.
	 */
	highlightSubstitutedGlyphs: boolean;

	/**
	 * If true, justifies text around text wrap objects.
	 */
	justifyTextWraps: boolean;

	/**
	 * The amount the kerning value per 1000 ems increases each time the user presses of the option/alt-right arrow keys or decreases each time the user presses the option/alt-left arrow keys. (Range: 1 to 100)
	 */
	kerningKeyIncrement: number;

	/**
	 * The amount that leading increases each time the user presses the option/alt-up arrow keys or decreases each time the user presses the option/alt-down arrow keys. (Range: .001 to 100)
	 */
	leadingKeyIncrement: number | string;

	/**
	 * Restrict the adding of pages during smart text reflow to overridden master text frames.
	 */
	limitToMasterTextFrames: boolean;

	/**
	 * If true, links placed text files and spreadsheet files. If false, embeds the files.
	 */
	linkTextFilesWhenImporting: boolean;

	/**
	 * Preserve left-hand and right-and pages when facing pages are enabled during smart text reflow.
	 */
	preserveFacingPageSpreads: boolean;

	/**
	 * If true, Japanese composer treats quotes as half width and rotates them in vertical.
	 */
	quoteCharactersRotatedInVertical: boolean;

	/**
	 * If true, shows hidden characters.
	 */
	showInvisibles: boolean;

	/**
	 * The size of text formatted as small caps, specified as a percentage of the font size. (Range: 1 to 200)
	 */
	smallCap: number;

	/**
	 * If true, enable automatic adding and deleting of pages in response to text reflow.
	 */
	smartTextReflow: boolean;

	/**
	 * The position of subscript characters, specified as a percentage of the regular leading. (Range: -500 to 500)
	 */
	subscriptPosition: number;

	/**
	 * The size of subscript characters, specified as a percentage of the font size. (Range: 0 to 200)
	 */
	subscriptSize: number;

	/**
	 * The position of superscript characters, specified as a percentage of the regular leading. (Range: -500 to 500)
	 */
	superscriptPosition: number;

	/**
	 * The size of superscript characters, specified as a percentage of the font size. (Range: 0 to 200)
	 */
	superscriptSize: number;

	/**
	 * If true, converts straight quotes to typographic quotes.
	 */
	typographersQuotes: boolean;

	/**
	 * If true, uses the glyph CID to get the mojikumi class of the character.
	 */
	useCidMojikumi: boolean;

	/**
	 * If true, reverses X and Y scaling on Roman characters in vertical text.
	 */
	useNewVerticalScaling: boolean;

	/**
	 * If true, automatically selects the correct optical size.
	 */
	useOpticalSize: boolean;

	/**
	 * If true, applies the leading changes made to a text range to the entire paragraph. If false, applies leading changes only to the text range.
	 */
	useParagraphLeading: boolean;

	/**
	 * If true, text wrap does not affect text on layers above the layer that contains the text wrap object. If false, text wrap affects text on all visible layers.
	 */
	zOrderTextWrap: boolean;

}

/**
 * Text defaults.
 */
declare class TextDefault extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;

	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string;

	/**
	 * The font applied to the TextDefault, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string;

	/**
	 * The language of the text.
	 */
	appliedLanguage: LanguageWithVendors | Language | string;

	/**
	 * The named grid in use.
	 */
	appliedNamedGrid: NamedGrid;

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string;

	/**
	 * The paragraph style applied to the text.
	 */
	appliedParagraphStyle: ParagraphStyle | string;

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number;

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean;

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle;

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | string;

	/**
	 * Bullet character.
	 */
	readonly bulletChar: Bullet;

	/**
	 * The alignment of the bullet character.
	 */
	bulletsAlignment: ListAlignment;

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType;

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string;

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string;

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization;

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment;

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions;

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number;

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean;

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string;

	/**
	 * The desired width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;

	/**
	 * The desired letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500)
	 */
	desiredLetterSpacing: number;

	/**
	 * The desired word spacing, specified as a percentage of the font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions;

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions;

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number;

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number;

	/**
	 * The character style to apply to the drop cap.
	 */
	dropCapStyle: CharacterStyle | string;

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number;

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the TextDefault. .
	 */
	fillColor: Swatch | string;

	/**
	 * The tint (as a percentage) of the fill color of the TextDefault. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | string;

	/**
	 * The name of the font style.
	 */
	fontStyle: string;

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms;

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: (number | string)[];

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: (number | string)[];

	/**
	 * If true, aligns only the first line to the frame grid or baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment;

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number;

	/**
	 * The horizontal scaling applied to the TextDefault.
	 */
	horizontalScale: number;

	/**
	 * The relative desirability of better spacing vs. fewer hyphens. A lower value results in greater use of hyphens. (Range: 0 to 100)
	 */
	hyphenWeight: number;

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean;

	/**
	 * The mininum number of letters at the beginning of a word that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;

	/**
	 * The minimum number of letters at the end of a word that can be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;

	/**
	 * If true, allows hyphenation of capitalized words.
	 */
	hyphenateCapitalizedWords: boolean;

	/**
	 * The maximum number of hyphens that can appear on consecutive lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;

	/**
	 * The minimum number of letters a word must have in order to qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;

	/**
	 * If true, allows hyphenation.
	 */
	hyphenation: boolean;

	/**
	 * The amount of white space allowed at the end of a line of non-justified text before hypenation begins. Note: Valid when composer is single-line composer.
	 */
	hyphenationZone: number | string;

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean;

	/**
	 * The number of grid squares in which to arrange the text.
	 */
	jidori: number;

	/**
	 * The paragraph alignment.
	 */
	justification: Justification;

	/**
	 * Use of Kashidas for justification
	 */
	kashidas: KashidasOptions;

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number;

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number;

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean;

	/**
	 * The alignment of kenten characters relative to the parent characters.
	 */
	kentenAlignment: KentenAlignment;

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string;

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string;

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number;

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum;

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter;

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint;

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint;

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number;

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string;

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenStrokeTint: number;

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenTint: number;

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number;

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number;

	/**
	 * The vertical size of kenten charachers as a percent of the original size.
	 */
	kentenYScale: number;

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string;

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions;

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string;

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | string;

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading;

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number;

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel;

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | string;

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean;

	/**
	 * The maximum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;

	/**
	 * The maximum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;

	/**
	 * The maximum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;

	/**
	 * If true, consecutive para borders with completely similar properties are merged.
	 */
	mergeConsecutiveParaBorders: boolean;

	/**
	 * The minimum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;

	/**
	 * The minimum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;

	/**
	 * The minimum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number;

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults;

	/**
	 * A collection of nested GREP styles.
	 */
	readonly nestedGrepStyles: NestedGrepStyles;

	/**
	 * A collection of nested line styles.
	 */
	readonly nestedLineStyles: NestedLineStyles;

	/**
	 * A collection of nested styles.
	 */
	readonly nestedStyles: NestedStyles;

	/**
	 * If true, keeps the text on the same line.
	 */
	noBreak: boolean;

	/**
	 * The alignment of the number.
	 */
	numberingAlignment: ListAlignment;

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean;

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string;

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean;

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string;

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string;

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number;

	/**
	 * Numbering restart policies.
	 */
	readonly numberingRestartPolicies: NumberingRestartPolicy;

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number;

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean;

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean;

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle;

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean;

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean;

	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean;

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean;

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean;

	/**
	 * If true, use overlapping swash forms in OpenType fonts
	 */
	otfOverlapSwash: boolean;

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean;

	/**
	 * If true, applies italics to half-width alphanumerics.
	 */
	otfRomanItalics: boolean;

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean;

	/**
	 * If true, use stretched alternate forms in OpenType fonts
	 */
	otfStretchedAlternate: boolean;

	/**
	 * If true, use stylistic alternate forms in OpenType fonts
	 */
	otfStylisticAlternate: boolean;

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number;

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean;

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean;

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean;

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean;

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphBorderBottomLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphBorderBottomLeftCornerRadius: number | string;

	/**
	 * The bottom line weight of the border of paragraph.
	 */
	paragraphBorderBottomLineWeight: number | string;

	/**
	 * The distance to offset the bottom edge of the paragraph border.
	 */
	paragraphBorderBottomOffset: number | string;

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph border.
	 */
	paragraphBorderBottomOrigin: ParagraphBorderBottomOriginEnum;

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphBorderBottomRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphBorderBottomRightCornerRadius: number | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph stroke.
	 */
	paragraphBorderColor: Swatch | string;

	/**
	 * If true, then paragraph border is also displayed at the points where the paragraph splits across frames or columns.
	 */
	paragraphBorderDisplayIfSplits: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph border gap. Note: Valid only when the border type is not solid.
	 */
	paragraphBorderGapColor: Swatch | string;

	/**
	 * If true, the paragraph border gap will overprint. Note: Valid only when border type is not solid.
	 */
	paragraphBorderGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the paragraph border gap. Note: Valid only when the border type is not solid. (Range: 0 to 100)
	 */
	paragraphBorderGapTint: number;

	/**
	 * The left line weight of the border of paragraph.
	 */
	paragraphBorderLeftLineWeight: number | string;

	/**
	 * The distance to offset the left edge of the paragraph border.
	 */
	paragraphBorderLeftOffset: number | string;

	/**
	 * If true, the paragraph border is on.
	 */
	paragraphBorderOn: boolean;

	/**
	 * If true, the paragraph border will overprint.
	 */
	paragraphBorderOverprint: boolean;

	/**
	 * The right line weight of the border of paragraph.
	 */
	paragraphBorderRightLineWeight: number | string;

	/**
	 * The distance to offset the right edge of the paragraph border.
	 */
	paragraphBorderRightOffset: number | string;

	/**
	 * The end shape of an open path.
	 */
	paragraphBorderStrokeEndCap: EndCap;

	/**
	 * The corner join applied to the TextDefault.
	 */
	paragraphBorderStrokeEndJoin: EndJoin;

	/**
	 * The tint (as a percentage) of the paragraph stroke. (Range: 0 to 100)
	 */
	paragraphBorderTint: number;

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphBorderTopLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphBorderTopLeftCornerRadius: number | string;

	/**
	 * The top line weight of the border of paragraph.
	 */
	paragraphBorderTopLineWeight: number | string;

	/**
	 * The distance to offset the top edge of the paragraph border.
	 */
	paragraphBorderTopOffset: number | string;

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph border.
	 */
	paragraphBorderTopOrigin: ParagraphBorderTopOriginEnum;

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerRadius: number | string;

	/**
	 * The type of the border for the paragraph.
	 */
	paragraphBorderType: StrokeStyle | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph border.
	 */
	paragraphBorderWidth: ParagraphBorderEnum;

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions;

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean;

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions;

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long
	 */
	paragraphKashidaWidth: number;

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphShadingBottomLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphShadingBottomLeftCornerRadius: number | string;

	/**
	 * The distance to offset the bottom edge of the paragraph.
	 */
	paragraphShadingBottomOffset: number | string;

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphShadingBottomRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphShadingBottomRightCornerRadius: number | string;

	/**
	 * If true, forces the shading of the paragraph to be clipped with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph shading.
	 */
	paragraphShadingColor: Swatch | string;

	/**
	 * The distance to offset the left edge of the paragraph.
	 */
	paragraphShadingLeftOffset: number | string;

	/**
	 * If true, the paragraph shading is On.
	 */
	paragraphShadingOn: boolean;

	/**
	 * If true, the paragraph shading will overprint.
	 */
	paragraphShadingOverprint: boolean;

	/**
	 * The distance to offset the right edge of the paragraph.
	 */
	paragraphShadingRightOffset: number | string;

	/**
	 * If true, suppress printing of the shading of the paragraph.
	 */
	paragraphShadingSuppressPrinting: boolean;

	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 0 to 100)
	 */
	paragraphShadingTint: number;

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphShadingTopLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphShadingTopLeftCornerRadius: number | string;

	/**
	 * The distance to offset the top edge of the paragraph.
	 */
	paragraphShadingTopOffset: number | string;

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerRadius: number | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;

	/**
	 * The text size.
	 */
	pointSize: number | string;

	/**
	 * The text position relative to the baseline.
	 */
	position: Position;

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * The hyphenation style chosen for the provider.
	 */
	providerHyphenationStyle: HyphenationStyleEnum;

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | string;

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean;

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments;

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean;

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number;

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string;

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string;

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number;

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum;

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean;

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount.
	 */
	rubyOverhang: boolean;

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint;

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint;

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang;

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;

	/**
	 * The ruby spacing relative to the parent text.
	 */
	rubyParentSpacing: RubyParentSpacing;

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string;

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number;

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100)
	 */
	rubyTint: number;

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes;

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number;

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number;

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number;

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number;

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number;

	/**
	 * If true, places a rule above the paragraph.
	 */
	ruleAbove: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule above.
	 */
	ruleAboveColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule above. Note: Valid only when the paragraph rule above type is not solid.
	 */
	ruleAboveGapColor: Swatch | string;

	/**
	 * If true, the stroke gap of the paragraph rule above will overprint. Note: Valid only the rule above type is not solid.
	 */
	ruleAboveGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule. (Range: 0 to 100) Note: Valid only when the rule above type is not solid.
	 */
	ruleAboveGapTint: number;

	/**
	 * The distance to indent the left edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number | string;

	/**
	 * The line weight of the rule above.
	 */
	ruleAboveLineWeight: number | string;

	/**
	 * The amount to offset the paragraph rule above from the baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number | string;

	/**
	 * If true, the paragraph rule above will overprint.
	 */
	ruleAboveOverprint: boolean;

	/**
	 * The distance to indent the right edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveRightIndent: number | string;

	/**
	 * The tint (as a percentage) of the paragraph rule above. (Range: 0 to 100)
	 */
	ruleAboveTint: number;

	/**
	 * The stroke type of the rule above the paragraph.
	 */
	ruleAboveType: StrokeStyle | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;

	/**
	 * If true, applies a paragraph rule below.
	 */
	ruleBelow: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule below.
	 */
	ruleBelowColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule below. Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapColor: Swatch | string;

	/**
	 * If true, the gap color of the rule below will overprint.
	 */
	ruleBelowGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule below. (Range: 0 to 100) Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;

	/**
	 * The distance to indent the left edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number | string;

	/**
	 * The line weight of the rule below.
	 */
	ruleBelowLineWeight: number | string;

	/**
	 * The amount to offset the the paragraph rule below from the baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number | string;

	/**
	 * If true, the rule below will overprint.
	 */
	ruleBelowOverprint: boolean;

	/**
	 * The distance to indent the right edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowRightIndent: number | string;

	/**
	 * The tint (as a percentage) of the paragraph rule below. (Range: 0 to 100)
	 */
	ruleBelowTint: number;

	/**
	 * The stroke type of the rule below the paragraph.
	 */
	ruleBelowType: StrokeStyle | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing;

	/**
	 * If true, the line changes size when characters are scaled.
	 */
	scaleAffectsLineHeight: boolean;

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean;

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean;

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number;

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number;

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification;

	/**
	 * The skew angle of the TextDefault.
	 */
	skew: number;

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | string;

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | string;

	/**
	 * The minimum space after a span or a split column
	 */
	spanColumnMinSpaceAfter: number | string;

	/**
	 * The minimum space before a span or a split column
	 */
	spanColumnMinSpaceBefore: number | string;

	/**
	 * Whether a paragraph should be a single column, span columns or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions;

	/**
	 * The inside gutter if the paragraph splits columns
	 */
	splitColumnInsideGutter: number | string;

	/**
	 * The outside gutter if the paragraph splits columns
	 */
	splitColumnOutsideGutter: number | string;

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string;

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number;

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | string;

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean;

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100)
	 */
	strikeThroughTint: number;

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string;

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | string;

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean;

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the TextDefault.
	 */
	strokeColor: Swatch | string;

	/**
	 * The tint (as a percentage) of the stroke color of the TextDefault. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | string;

	/**
	 * A list of the tab stops in the paragraph. Can return: Array of Arrays of Property Name/Value Pairs.
	 */
	tabList: any[];

	/**
	 * A collection of tab stops.
	 */
	readonly tabStops: TabStops;

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean;

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number;

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number;

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number;

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number;

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number;

	/**
	 * If true, underlines the text.
	 */
	underline: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string;

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number;

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | string;

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean;

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100)
	 */
	underlineTint: number;

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string;

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | string;

	/**
	 * The vertical scaling applied to the TextDefault.
	 */
	verticalScale: number;

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean;

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment;

	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number;

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number;

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number;

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number;

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number;

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number;

}

/**
 * Document preferences.
 */
declare class DocumentPreference extends Preference {
	/**
	 * If true, guarantees that when pages are added to a spread it will contain a maximum of two pages. If false, allows pages to be added or moved into existing spreads. For override information, see preserve layout when shuffling.
	 */
	allowPageShuffle: boolean;

	/**
	 * The direction of text in the column.
	 */
	columnDirection: HorizontalOrVertical;

	/**
	 * The color of the column guides, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values,, or as a UI color.
	 */
	columnGuideColor: [number, number, number] | UIColors;

	/**
	 * If true, locks column guides.
	 */
	columnGuideLocked: boolean;

	/**
	 * If true, the document A-master has primary text frames when a new document is created.
	 */
	createPrimaryTextFrame: boolean;

	/**
	 * The amount to offset the bottom document bleed. Note: To set the bleed bottom offset, document bleed uniform size must be false.
	 */
	documentBleedBottomOffset: number | string;

	/**
	 * The amount to offset the inside or left document bleed. Note: To set the bleed inside or left offset, document bleed uniform size must be false.
	 */
	documentBleedInsideOrLeftOffset: number | string;

	/**
	 * The amount to offset the outside or right document bleed. Note: To set the bleed outside or right offset, document bleed uniform size must be false.
	 */
	documentBleedOutsideOrRightOffset: number | string;

	/**
	 * The amount to offset the top document bleed.
	 */
	documentBleedTopOffset: number | string;

	/**
	 * If true, uses the document bleed top offset value for bleed offset measurements on all sides of the document. The default setting is true.
	 */
	documentBleedUniformSize: boolean;

	/**
	 * If true, uses the slug top offset value for slug measurements on all sides of the document. The default value is false.
	 */
	documentSlugUniformSize: boolean;

	/**
	 * If true, the document has facing pages.
	 */
	facingPages: boolean;

	/**
	 * The intent for a document.
	 */
	intent: DocumentIntentOptions;

	/**
	 * The color of the margin guides, specified either as an array of three doubles, each in the range 0 to 255, representing R, G, and B values, or as a UI color.
	 */
	marginGuideColor: [number, number, number] | UIColors;

	/**
	 * If true, overprints black when saving the document.
	 */
	overprintBlack: boolean;

	/**
	 * The placement of the page binding.
	 */
	pageBinding: PageBindingOptions;

	/**
	 * The height of the page.
	 */
	pageHeight: number | string;

	/**
	 * The page orientation.
	 */
	pageOrientation: PageOrientation;

	/**
	 * The size of the page.
	 */
	pageSize: string;

	/**
	 * The width of the page.
	 */
	pageWidth: number | string;

	/**
	 * The number of pages in the document. (Range: 1 to 9999)
	 */
	pagesPerDocument: number;

	/**
	 * If true, preserves the layout of spreads that contained more than two pages when allow page shuffle was turned on. If false, changes multi-page spreads to two-page spreads if the spreads were created or changed since allow page shuffle was turned on.
	 */
	preserveLayoutWhenShuffling: boolean;

	/**
	 * The amount to offset the bottom slug. Note: To set the slug bottom offset, document slug uniform size must be false.
	 */
	slugBottomOffset: number | string;

	/**
	 * The amount to offset the inside or left slug. Note: To set the slug inside or left offset, document slug uniform size must be false.
	 */
	slugInsideOrLeftOffset: number | string;

	/**
	 * The amount to offset the outside or right slug. Note: To set the slug right or outside offset, document slug uniform size must be false.
	 */
	slugRightOrOutsideOffset: number | string;

	/**
	 * The amount to offset the top slug.
	 */
	slugTopOffset: number | string;

	/**
	 * If true, causes UI-based snippet import to use original location for page items.
	 */
	snippetImportUsesOriginalLocation: boolean;

	/**
	 * The starting page number for a document. This is the same as the starting page number for the first section of a document. Default value is 1.
	 */
	startPageNumber: number;

}

/**
 * Grid preferences.
 */
declare class GridPreference extends Preference {
	/**
	 * The color of the baseline grid, specified either as an array of three doubles, each in the range 0 to 255, representing R, G, and B values, or as a UI color. .
	 */
	baselineColor: [number, number, number] | UIColors;

	/**
	 * The amount of space between baseline grid lines.
	 */
	baselineDivision: number | string;

	/**
	 * The zero point for the baseline grid offset.
	 */
	baselineGridRelativeOption: BaselineGridRelativeOption;

	/**
	 * If true, displays the baseline grid.
	 */
	baselineGridShown: boolean;

	/**
	 * The amount to offset the baseline grid from the zero point.
	 */
	baselineStart: number | string;

	/**
	 * The magnification (as a percentage) less than which ruler guides do not appear. (Range: 5 to 4000)
	 */
	baselineViewThreshold: number;

	/**
	 * If true, displays the document grid.
	 */
	documentGridShown: boolean;

	/**
	 * If true, an object snaps to the nearest grid line when the object is created, moved, or resized.
	 */
	documentGridSnapto: boolean;

	/**
	 * The color of the document grid, specified either as an array of three doubles, each in the range 0 to 255, representing R, G, and B values, or as a UI color.
	 */
	gridColor: [number, number, number] | UIColors;

	/**
	 * If true, places grids behind all other objects on the spread.
	 */
	gridsInBack: boolean;

	/**
	 * The number of rows into which to subdivide the space between horizontal document grid lines.
	 */
	horizontalGridSubdivision: number;

	/**
	 * The amount of space between major horizontal lines in the document grid.
	 */
	horizontalGridlineDivision: number | string;

	/**
	 * The number of columns into which to subdivide the space between vertical document grid lines.
	 */
	verticalGridSubdivision: number;

	/**
	 * The amount of space between major vertical lines in the document grid.
	 */
	verticalGridlineDivision: number | string;

}

/**
 * Guide preferences.
 */
declare class GuidePreference extends Preference {
	/**
	 * If true, places guides behind all other objects on the spread.
	 */
	guidesInBack: boolean;

	/**
	 * If true, guides cannot be moved, added, or deleted.
	 */
	guidesLocked: boolean;

	/**
	 * If true, displays the guides.
	 */
	guidesShown: boolean;

	/**
	 * If true, an object within the specified range snaps to the nearest guide when the object is created, moved, or resized. For range information, see guide snapto zone.
	 */
	guidesSnapto: boolean;

	/**
	 * The color of the guide, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. .
	 */
	rulerGuidesColor: [number, number, number] | UIColors;

	/**
	 * The magnification (as a percentage) less than which ruler guides do not appear. (Range: 5 to 4000)
	 */
	rulerGuidesViewThreshold: number;

}

/**
 * Margin preferences.
 */
declare class MarginPreference extends Preference {
	/**
	 * The bottom edge of the MarginPreference.
	 */
	bottom: number | string;

	/**
	 * The number of columns to place on the page.
	 */
	columnCount: number;

	/**
	 * The direction of text in the column.
	 */
	columnDirection: HorizontalOrVertical;

	/**
	 * The distance between columns.
	 */
	columnGutter: number | string;

	/**
	 * The distance that each column guide is placed from the left margin, formatted as an array in the format [guide1, guide2, guide3].
	 */
	columnsPositions: (number | string)[];

	/**
	 * If false, columns are evenly spaced. If true, columns can have custom widths.
	 */
	readonly customColumns: boolean;

	/**
	 * The left edge of the MarginPreference.
	 */
	left: number | string;

	/**
	 * The right edge of the MarginPreference.
	 */
	right: number | string;

	/**
	 * The top edge of the MarginPreference.
	 */
	top: number | string;

}

/**
 * Pasteboard preferences.
 */
declare class PasteboardPreference extends Preference {
	/**
	 * The color of bleed guides, specified either as an array of three doubles, each in the range 0 to 255, representing R, G, and B values, or as a UI color.
	 */
	bleedGuideColor: [number, number, number] | UIColors;

	/**
	 * If true, match the Preview Background color to Theme Color, else use the color-value specified in Preview Background color drop down.
	 */
	matchPreviewBackgroundToThemeColor: boolean;

	/**
	 * The minimum horizontal and vertical pasteboard margins. A horizontal margin of -1 means one document page width
	 */
	pasteboardMargins: (number | string)[];

	/**
	 * The color of the preview background, specified either as an array of three doubles, each in the range 0 to 255, representing R, G, and B values, or as a UI color.
	 */
	previewBackgroundColor: [number, number, number] | UIColors;

	/**
	 * The color of slug guides, specified either as an array of three doubles, each in the range 0 to 255, representing R, G, and B values, or as a UI color.
	 */
	slugGuideColor: [number, number, number] | UIColors;

}

/**
 * View preferences.
 */
declare class ViewPreference extends Preference {
	/**
	 * The distance to move a specified object when an arrow key is pressed. (Range depends on the measurement unit. For points: 0.001 to 100; picas: 0p0.001 to 8p4; mm: 0 to 35.278; cm: 0 to 3.5278; inches: 0 to 1.3889; ciceros: 0c0.001 to 7c9.839)
	 */
	cursorKeyIncrement: number | string;

	/**
	 * The range (in pixels) within which an object snaps to guides. (Range: 1 to 36) Note: Snapping occurs only when guides are shown.
	 */
	guideSnaptoZone: number;

	/**
	 * The distance (in points) between major tick marks on the horizontal ruler. (Range: 4 to 256) Valid only when horizontal measurement units is custom.
	 */
	horizontalCustomPoints: number;

	/**
	 * The measurement unit for the horizontal ruler and other horizontally-measured spaces such as grid columns, horizontal offsets, column gutters, or others.
	 */
	horizontalMeasurementUnits: MeasurementUnits;

	/**
	 * The number of points per inch, typically 72. (Range: 60 to 80)
	 */
	pointsPerInch: number;

	/**
	 * The measurement unit for the print dialog.
	 */
	printDialogMeasurementUnits: MeasurementUnits;

	/**
	 * The default zero point at the intersection of the vertical and horizontal rulers and the scope of the horizontal ruler.
	 */
	rulerOrigin: RulerOrigin;

	/**
	 * If true, displays borders of unselected frames and the diagonal lines in empty unselected frames.
	 */
	showFrameEdges: boolean;

	/**
	 * If true, notes are displayed.
	 */
	showNotes: boolean;

	/**
	 * If true, displays the horizontal and vertical rulers.
	 */
	showRulers: boolean;

	/**
	 * The measurement unit for stroke measurements.
	 */
	strokeMeasurementUnits: MeasurementUnits;

	/**
	 * The measurement unit for text size measurements.
	 */
	textSizeMeasurementUnits: MeasurementUnits;

	/**
	 * The measurement units for typography.
	 */
	typographicMeasurementUnits: MeasurementUnits;

	/**
	 * The distance (in points) between major tick marks on the vertical ruler. (Range: 4 to 256) Valid only when vertical measurement units is custom.
	 */
	verticalCustomPoints: number;

	/**
	 * The measurement unit for the vertical ruler and other vertically-measured spaces such as grid rows, vertical offsets, row heights, or others.
	 */
	verticalMeasurementUnits: MeasurementUnits;

}

/**
 * A preset that contains all of the new document settings.
 */
declare class DocumentPreset {
	/**
	 * The bottom edge of the DocumentPreset.
	 */
	bottom: number | string;

	/**
	 * The number of columns to place on the page.
	 */
	columnCount: number;

	/**
	 * The distance between columns.
	 */
	columnGutter: number | string;

	/**
	 * If true, the document A-master has primary text frames when a new document is created.
	 */
	createPrimaryTextFrame: boolean;

	/**
	 * The amount to offset the bottom document bleed. Note: To set the bleed bottom offset, document bleed uniform size must be false.
	 */
	documentBleedBottomOffset: number | string;

	/**
	 * The amount to offset the inside or left document bleed. Note: To set the bleed inside or left offset, document bleed uniform size must be false.
	 */
	documentBleedInsideOrLeftOffset: number | string;

	/**
	 * The amount to offset the outside or right document bleed. Note: To set the bleed outside or right offset, document bleed uniform size must be false.
	 */
	documentBleedOutsideOrRightOffset: number | string;

	/**
	 * The amount to offset the top document bleed.
	 */
	documentBleedTopOffset: number | string;

	/**
	 * If true, uses the document bleed top offset value for bleed offset measurements on all sides of the document. The default setting is true.
	 */
	documentBleedUniformSize: boolean;

	/**
	 * If true, uses the slug top offset value for slug measurements on all sides of the document. The default value is false.
	 */
	documentSlugUniformSize: boolean;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, the document has facing pages.
	 */
	facingPages: boolean;

	/**
	 * The unique ID of the DocumentPreset.
	 */
	readonly id: number;

	/**
	 * The index of the DocumentPreset within its containing object.
	 */
	readonly index: number;

	/**
	 * The intent for a document.
	 */
	intent: DocumentIntentOptions;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The left edge of the DocumentPreset.
	 */
	left: number | string;

	/**
	 * The name of the DocumentPreset.
	 */
	name: string;

	/**
	 * The height of the page.
	 */
	pageHeight: number | string;

	/**
	 * The page orientation.
	 */
	pageOrientation: PageOrientation;

	/**
	 * The size of the page.
	 */
	pageSize: string;

	/**
	 * The width of the page.
	 */
	pageWidth: number | string;

	/**
	 * The number of pages in the document. (Range: 1 to 9999)
	 */
	pagesPerDocument: number;

	/**
	 * The parent of the DocumentPreset (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The right edge of the DocumentPreset.
	 */
	right: number | string;

	/**
	 * The amount to offset the bottom slug. Note: To set the slug bottom offset, document slug uniform size must be false.
	 */
	slugBottomOffset: number | string;

	/**
	 * The amount to offset the inside or left slug. Note: To set the slug inside or left offset, document slug uniform size must be false.
	 */
	slugInsideOrLeftOffset: number | string;

	/**
	 * The amount to offset the outside or right slug. Note: To set the slug right or outside offset, document slug uniform size must be false.
	 */
	slugRightOrOutsideOffset: number | string;

	/**
	 * The amount to offset the top slug.
	 */
	slugTopOffset: number | string;

	/**
	 * The starting page number for a document. This is the same as the starting page number for the first section of a document. Default value is 1.
	 */
	startPageNumber: number;

	/**
	 * The top edge of the DocumentPreset.
	 */
	top: number | string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the DocumentPreset.
	 */
	duplicate(): DocumentPreset;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DocumentPreset[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the DocumentPreset.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the DocumentPreset.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of document presets.
 */
declare class DocumentPresets {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the DocumentPreset with the specified index.
	 * @param index The index.
	 */
	[index: number]: DocumentPreset;

	/**
	 * Creates a new DocumentPreset.
	 * @param withProperties Initial values for properties of the new DocumentPreset
	 */
	add(withProperties: object): DocumentPreset;

	/**
	 * Returns any DocumentPreset in the collection.
	 */
	anyItem(): DocumentPreset;

	/**
	 * Displays the number of elements in the DocumentPreset.
	 */
	count(): number;

	/**
	 * Returns every DocumentPreset in the collection.
	 */
	everyItem(): DocumentPreset[];

	/**
	 * Returns the first DocumentPreset in the collection.
	 */
	firstItem(): DocumentPreset;

	/**
	 * Returns the DocumentPreset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DocumentPreset;

	/**
	 * Returns the DocumentPreset with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): DocumentPreset;

	/**
	 * Returns the DocumentPreset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): DocumentPreset;

	/**
	 * Returns the DocumentPresets within the specified range.
	 * @param from The DocumentPreset, index, or name at the beginning of the range.
	 * @param to The DocumentPreset, index, or name at the end of the range.
	 */
	itemByRange(from: DocumentPreset | number | string, to: DocumentPreset | number | string): DocumentPreset[];

	/**
	 * Returns the last DocumentPreset in the collection.
	 */
	lastItem(): DocumentPreset;

	/**
	 * Returns the middle DocumentPreset in the collection.
	 */
	middleItem(): DocumentPreset;

	/**
	 * Returns the DocumentPreset whose index follows the specified DocumentPreset in the collection.
	 * @param obj The DocumentPreset whose index comes before the desired DocumentPreset.
	 */
	nextItem(obj: DocumentPreset): DocumentPreset;

	/**
	 * Returns the DocumentPreset with the index previous to the specified index.
	 * @param obj The index of the DocumentPreset that follows the desired DocumentPreset.
	 */
	previousItem(obj: DocumentPreset): DocumentPreset;

	/**
	 * Generates a string which, if executed, will return the DocumentPreset.
	 */
	toSource(): string;

}

/**
 * Print preferences.
 */
declare class PrintPreference extends Preference {
	/**
	 * The current printer preset type.
	 */
	activePrinterPreset: PrinterPresetTypes | PrinterPreset;

	/**
	 * If true, prints all printer marks. If false, prints specified printer marks.
	 */
	allPrinterMarks: boolean;

	/**
	 * If true, uses bitmap printing.
	 */
	bitmapPrinting: boolean;

	/**
	 * The resolution for bitmap printing. (Range: 72 to 1200) Note: Valid when bitmap printing is true.
	 */
	bitmapResolution: number;

	/**
	 * The angle override for black ink. (Range: 0 to 360)
	 */
	blackAngle: number;

	/**
	 * The frequency override for black ink. (Range: 1 to 500)
	 */
	blackFrequency: number;

	/**
	 * The height of the bleed area at the bottom of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number | string;

	/**
	 * If true, forces all bleed area settings to be the same, using the most recent bleed measurement setting. If false, allows bleed top, bleed bottom, bleed inside, and bleed outside to have different measurements.
	 */
	bleedChain: boolean;

	/**
	 * The width of the bleed area at the inside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedInside: number | string;

	/**
	 * If true, print bleed marks.
	 */
	bleedMarks: boolean;

	/**
	 * The width of the bleed area at the outside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number | string;

	/**
	 * The height of the bleed area at the top of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedTop: number | string;

	/**
	 * If true, collate printed copies.
	 */
	collating: boolean;

	/**
	 * If true, add small squares of color representing the CMYK inks and tints of gray in 10% increments.
	 */
	colorBars: boolean;

	/**
	 * The color output mode for composites. Note: Not valid when a device-independent PPD is specified.
	 */
	colorOutput: ColorOutputModes;

	/**
	 * The screen angle to use when printing composites. (Range: 0 to 360) Note: Valid only for PostScript or PDF files that use custom screening.
	 */
	compositeAngle: number;

	/**
	 * The screen frequency to use when printing composites. (Range: 1 to 500) Note: Valid only for PostScript or PDF files that use custom screening.
	 */
	compositeFrequency: number;

	/**
	 * The number of copies to print. Note: Not valid when printer is PostScript File.
	 */
	copies: number;

	/**
	 * The color-rendering dictionary (CRD), specified as a CRD name or an enumeration value. Note: Valid only when use color management is true.
	 */
	crd: ColorRenderingDictionary | string;

	/**
	 * Prints crop marks that define where the page should be trimmed.
	 */
	cropMarks: boolean;

	/**
	 * The angle override for cyan ink. (Range: 0 to 360)
	 */
	cyanAngle: number;

	/**
	 * The frequency override for cyan ink. (Range: 1 to 500)
	 */
	cyanFrequency: number;

	/**
	 * The format in which to send image data to the printer.
	 */
	dataFormat: DataFormat;

	/**
	 * If true, downloads all fonts listed in the selected PPD. Valid only when font downloading is complete or subset.
	 */
	downloadPPDFonts: boolean;

	/**
	 * The name of the transparency flattener preset.
	 */
	flattenerPresetName: string;

	/**
	 * The direction in which to flip the printed image.
	 */
	flip: Flip;

	/**
	 * Controls how fonts are downloaded to the printer.
	 */
	fontDownloading: FontDownloading;

	/**
	 * If true, ignores flattener spread overrides.
	 */
	ignoreSpreadOverrides: boolean;

	/**
	 * If true, includes the slug area in the printed document.
	 */
	includeSlugToPrint: boolean;

	/**
	 * The rendering intent. Note: Valid only when use color management is true.
	 */
	intent: RenderingIntent;

	/**
	 * The angle override for magenta ink. (Range: 0 to 360)
	 */
	magentaAngle: number;

	/**
	 * The frequency override for magenta ink. (Range: 1 to 500)
	 */
	magentaFrequency: number;

	/**
	 * The stroke weight (in points) for printer marks.
	 */
	markLineWeight: MarkLineWeight;

	/**
	 * The distance to offset the page marks from the edge of the page.
	 */
	markOffset: number | string;

	/**
	 * The type of printer marks, either an enum value or the name of a custom marks file.
	 */
	markType: MarkTypes | string;

	/**
	 * If true, prints the document as a negative.
	 */
	negative: boolean;

	/**
	 * If true, replaces bitmap images with OPI links.
	 */
	omitBitmaps: boolean;

	/**
	 * If true, replaces EPS images with OPI links.
	 */
	omitEPS: boolean;

	/**
	 * If true, replaces PDF images with OPI links.
	 */
	omitPDF: boolean;

	/**
	 * If true, prints graphics that are either OPI comments stored in imported EPS files or linked using OPI comments. For information on linking files using OPI comments, see omit EPS, omit PDF, or omit bitmaps.
	 */
	opiImageReplacement: boolean;

	/**
	 * If true, prints the filename, page number, current date and time, and color separation name.
	 */
	pageInformationMarks: boolean;

	/**
	 * The position of the page on the printing medium. Note: Valid only when tile is false.
	 */
	pagePosition: PagePositions;

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string;

	/**
	 * The space between document pages on the printing medium.
	 */
	paperGap: number | string;

	/**
	 * The paper height. Note: Valid only when paper size is custom or scale mode is scale width height.
	 */
	paperHeight: PaperSize | number;

	/**
	 * The amount of space to offset the page from the left edge of the imageable area.
	 */
	paperOffset: number | string;

	/**
	 * The paper size, specified as either a string or an enumeration. For information on paper size names, see paper size list.
	 */
	paperSize: PaperSizes | string;

	/**
	 * A list of the available paper sizes.
	 */
	readonly paperSizeList: string[];

	/**
	 * If true, uses transverse orientation.
	 */
	paperTransverse: boolean;

	/**
	 * The paper width. Note: Valid only when paper size is custom or scale mode is scale width height.
	 */
	paperWidth: PaperSize | number;

	/**
	 * If true, doing pdf passthrough.
	 */
	readonly pdfPassthrough: boolean;

	/**
	 * The PostScript level of the printer.
	 */
	postscriptLevel: PostScriptLevels;

	/**
	 * The PPD, specified as a PPD name or an enumeration.
	 */
	ppd: PPDValues | string;

	/**
	 * Available PPDs.
	 */
	readonly ppdList: string[];

	/**
	 * If true, preserves uncalibrated color numbers.
	 */
	preserveColorNumbers: boolean;

	/**
	 * If true, prints the black ink. Note: Valid only when trapping is off.
	 */
	printBlack: boolean;

	/**
	 * If true, prints blank pages. Note: Valid only when trapping is off.
	 */
	printBlankPages: boolean;

	/**
	 * If true, prints the cyan ink. Note: Valid only when trapping is off.
	 */
	printCyan: boolean;

	/**
	 * The PostScript file to print to. Note: Valid only when the current printer is defined as postscript file.
	 */
	printFile: File;

	/**
	 * If true, prints visible guides and baseline grids. Note: Valid only when trapping is off.
	 */
	printGuidesGrids: boolean;

	/**
	 * The layers to print.
	 */
	printLayers: PrintLayerOptions;

	/**
	 * If true, prints the magenta ink. Note: Valid only when trapping is off.
	 */
	printMagenta: boolean;

	/**
	 * If true, prints master pages.
	 */
	printMasterPages: boolean;

	/**
	 * If true, prints non-printing objects. Note: Valid only when trapping is off.
	 */
	printNonprinting: boolean;

	/**
	 * The orientation of the printed page.
	 */
	printPageOrientation: PrintPageOrientation;

	/**
	 * If true, prints each spread with all spread pages on a single sheet. If false, prints spread pages as separate pages.
	 */
	printSpreads: boolean;

	/**
	 * If true, prints the yellow ink. Note: Valid only when trapping is off.
	 */
	printYellow: boolean;

	/**
	 * The current printer.
	 */
	printer: Printer | string;

	/**
	 * Available printers.
	 */
	readonly printerList: string[];

	/**
	 * The color profile.
	 */
	profile: Profile | string;

	/**
	 * If true, prints small targets outside the page area for aligning color separations.
	 */
	registrationMarks: boolean;

	/**
	 * If true, prints pages in reverse order.
	 */
	reverseOrder: boolean;

	/**
	 * The amount (as a percentage) that the page height is scaled during printing. (Range: 0 to 1000) Note: Valid only when scale mode is scale width height.
	 */
	scaleHeight: number;

	/**
	 * The policy for scaling the page. Note: Valid only when printing from Layout view.
	 */
	scaleMode: ScaleModes;

	/**
	 * If true, constrains the proportions of the scaling; uses the most recent value for either scale width or scale height to define both values. Note: Valid only when scale mode is scale width height.
	 */
	scaleProportional: boolean;

	/**
	 * The amount (as a percentage)that the page width is scaled during printing. (Range: 0 to 1000) Note: Valid only when scale mode is scale width height.
	 */
	scaleWidth: number;

	/**
	 * The ink screening settings for composite gray output in PostScript or PDF format. .
	 */
	screening: Screeening | string;

	/**
	 * Lists the ink screenings available in the PPD. Note: Valid only when color output is separations or in rip separations.
	 */
	readonly screeningList: string[];

	/**
	 * The image data sent to the printer or file.
	 */
	sendImageData: ImageDataTypes;

	/**
	 * The sequence of pages to print.
	 */
	sequence: Sequences;

	/**
	 * If true, simulates the effects of overprinting spot inks with different neutral density values by converting spot colors to process colors for printing. Note: Not valid when the color output mode is defined to leave color profiles unchanged.
	 */
	simulateOverprint: boolean;

	/**
	 * The source of the color management system. Note: Valid only when use color management is true.
	 */
	sourceSpace: SourceSpaces;

	/**
	 * If true, prints all text as black unless text has the color None or Paper or a color value that equals white. If false, prints colored text, such as blue hyperlinks, in halftone patterns. Note: Valid only when trapping is off.
	 */
	textAsBlack: boolean;

	/**
	 * If true, prints thumbnails. Note: Valid only when trapping is off and tile is false.
	 */
	thumbnails: boolean;

	/**
	 * The number of thumbnails per page.
	 */
	thumbnailsPerPage: ThumbsPerPage;

	/**
	 * If true, tiles pages.
	 */
	tile: boolean;

	/**
	 * The amount of tiling overlap. Note: Valid only when tiling is true and tiling type is not manual.
	 */
	tilingOverlap: number;

	/**
	 * The tiling type. Note: Valid only when tiling is true.
	 */
	tilingType: TilingTypes;

	/**
	 * The type of trapping.
	 */
	trapping: Trapping;

	/**
	 * If true, uses the bleed area set for the document.
	 */
	useDocumentBleedToPrint: boolean;

	/**
	 * The angle override for yellow ink. (Range: 0 to 360)
	 */
	yellowAngle: number;

	/**
	 * The frequency override for yellow ink. (Range: 1 to 500)
	 */
	yellowFrequency: number;

}

/**
 * Print booklet options.
 */
declare class PrintBookletOption extends Preference {
	/**
	 * If true, automatically adjust margins to fit the specified printer's marks and bleed area.
	 */
	autoAdjustMargins: boolean;

	/**
	 * The amount of bleed between pages.
	 */
	bleedBetweenPages: number | string;

	/**
	 * The type of booklet.
	 */
	bookletType: BookletTypeOptions;

	/**
	 * Bottom margin of the printed booklet.
	 */
	bottomMargin: number | string;

	/**
	 * The amount of creep (binding adjustment based on paper thickness) to add.
	 */
	creep: number | string;

	/**
	 * Left margin of the printed booklet.
	 */
	leftMargin: number | string;

	/**
	 * If true, make all margins equal to the top margin.
	 */
	marginsUniformSize: boolean;

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string;

	/**
	 * If true, print blank spreads.
	 */
	printBlankPrinterSpreads: boolean;

	/**
	 * Right margin of the printed booklet.
	 */
	rightMargin: number | string;

	/**
	 * The signature size of booklet (for perfect binding).
	 */
	signatureSize: SignatureSizeOptions;

	/**
	 * The amount of space between pages.
	 */
	spaceBetweenPages: number | string;

	/**
	 * Top margin of the printed booklet.
	 */
	topMargin: number | string;

}

/**
 * Print booklet preferences.
 */
declare class PrintBookletPrintPreference extends Preference {
	/**
	 * The current printer preset type.
	 */
	activePrinterPreset: PrinterPresetTypes | PrinterPreset;

	/**
	 * If true, prints all printer marks. If false, prints specified printer marks.
	 */
	allPrinterMarks: boolean;

	/**
	 * If true, uses bitmap printing.
	 */
	bitmapPrinting: boolean;

	/**
	 * The resolution for bitmap printing. (Range: 72 to 1200) Note: Valid when bitmap printing is true.
	 */
	bitmapResolution: number;

	/**
	 * The angle override for black ink. (Range: 0 to 360)
	 */
	blackAngle: number;

	/**
	 * The frequency override for black ink. (Range: 1 to 500)
	 */
	blackFrequency: number;

	/**
	 * The height of the bleed area at the bottom of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number | string;

	/**
	 * If true, forces all bleed area settings to be the same, using the most recent bleed measurement setting. If false, allows bleed top, bleed bottom, bleed inside, and bleed outside to have different measurements.
	 */
	bleedChain: boolean;

	/**
	 * The width of the bleed area at the inside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedInside: number | string;

	/**
	 * If true, print bleed marks.
	 */
	bleedMarks: boolean;

	/**
	 * The width of the bleed area at the outside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number | string;

	/**
	 * The height of the bleed area at the top of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedTop: number | string;

	/**
	 * If true, collate printed copies.
	 */
	collating: boolean;

	/**
	 * If true, add small squares of color representing the CMYK inks and tints of gray in 10% increments.
	 */
	colorBars: boolean;

	/**
	 * The color output mode for composites. Note: Not valid when a device-independent PPD is specified.
	 */
	colorOutput: ColorOutputModes;

	/**
	 * The screen angle to use when printing composites. (Range: 0 to 360) Note: Valid only for PostScript or PDF files that use custom screening.
	 */
	compositeAngle: number;

	/**
	 * The screen frequency to use when printing composites. (Range: 1 to 500) Note: Valid only for PostScript or PDF files that use custom screening.
	 */
	compositeFrequency: number;

	/**
	 * The number of copies to print. Note: Not valid when printer is PostScript File.
	 */
	copies: number;

	/**
	 * The color-rendering dictionary (CRD), specified as a CRD name or an enumeration value. Note: Valid only when use color management is true.
	 */
	crd: ColorRenderingDictionary | string;

	/**
	 * Prints crop marks that define where the page should be trimmed.
	 */
	cropMarks: boolean;

	/**
	 * The angle override for cyan ink. (Range: 0 to 360)
	 */
	cyanAngle: number;

	/**
	 * The frequency override for cyan ink. (Range: 1 to 500)
	 */
	cyanFrequency: number;

	/**
	 * The format in which to send image data to the printer.
	 */
	dataFormat: DataFormat;

	/**
	 * If true, downloads all fonts listed in the selected PPD. Valid only when font downloading is complete or subset.
	 */
	downloadPPDFonts: boolean;

	/**
	 * The name of the transparency flattener preset.
	 */
	flattenerPresetName: string;

	/**
	 * The direction in which to flip the printed image.
	 */
	flip: Flip;

	/**
	 * Controls how fonts are downloaded to the printer.
	 */
	fontDownloading: FontDownloading;

	/**
	 * If true, ignores flattener spread overrides.
	 */
	ignoreSpreadOverrides: boolean;

	/**
	 * The rendering intent. Note: Valid only when use color management is true.
	 */
	intent: RenderingIntent;

	/**
	 * The angle override for magenta ink. (Range: 0 to 360)
	 */
	magentaAngle: number;

	/**
	 * The frequency override for magenta ink. (Range: 1 to 500)
	 */
	magentaFrequency: number;

	/**
	 * The stroke weight (in points) for printer marks.
	 */
	markLineWeight: MarkLineWeight;

	/**
	 * The distance to offset the page marks from the edge of the page.
	 */
	markOffset: number | string;

	/**
	 * The type of printer marks, either an enum value or the name of a custom marks file.
	 */
	markType: MarkTypes | string;

	/**
	 * If true, prints the document as a negative.
	 */
	negative: boolean;

	/**
	 * If true, replaces bitmap images with OPI links.
	 */
	omitBitmaps: boolean;

	/**
	 * If true, replaces EPS images with OPI links.
	 */
	omitEPS: boolean;

	/**
	 * If true, replaces PDF images with OPI links.
	 */
	omitPDF: boolean;

	/**
	 * If true, prints graphics that are either OPI comments stored in imported EPS files or linked using OPI comments. For information on linking files using OPI comments, see omit EPS, omit PDF, or omit bitmaps.
	 */
	opiImageReplacement: boolean;

	/**
	 * If true, prints the filename, page number, current date and time, and color separation name.
	 */
	pageInformationMarks: boolean;

	/**
	 * The position of the page on the printing medium. Note: Valid only when tile is false.
	 */
	pagePosition: PagePositions;

	/**
	 * The space between document pages on the printing medium.
	 */
	paperGap: number | string;

	/**
	 * The paper height. Note: Valid only when paper size is custom or scale mode is scale width height.
	 */
	paperHeight: PaperSize | number;

	/**
	 * The amount of space to offset the page from the left edge of the imageable area.
	 */
	paperOffset: number | string;

	/**
	 * The paper size, specified as either a string or an enumeration. For information on paper size names, see paper size list.
	 */
	paperSize: PaperSizes | string;

	/**
	 * A list of the available paper sizes.
	 */
	readonly paperSizeList: string[];

	/**
	 * If true, uses transverse orientation.
	 */
	paperTransverse: boolean;

	/**
	 * The paper width. Note: Valid only when paper size is custom or scale mode is scale width height.
	 */
	paperWidth: PaperSize | number;

	/**
	 * If true, doing pdf passthrough.
	 */
	readonly pdfPassthrough: boolean;

	/**
	 * The PostScript level of the printer.
	 */
	postscriptLevel: PostScriptLevels;

	/**
	 * The PPD, specified as a PPD name or an enumeration.
	 */
	ppd: PPDValues | string;

	/**
	 * Available PPDs.
	 */
	readonly ppdList: string[];

	/**
	 * If true, preserves uncalibrated color numbers.
	 */
	preserveColorNumbers: boolean;

	/**
	 * If true, prints the black ink. Note: Valid only when trapping is off.
	 */
	printBlack: boolean;

	/**
	 * If true, prints blank pages. Note: Valid only when trapping is off.
	 */
	printBlankPages: boolean;

	/**
	 * If true, prints the cyan ink. Note: Valid only when trapping is off.
	 */
	printCyan: boolean;

	/**
	 * The PostScript file to print to. Note: Valid only when the current printer is defined as postscript file.
	 */
	printFile: File;

	/**
	 * If true, prints visible guides and baseline grids. Note: Valid only when trapping is off.
	 */
	printGuidesGrids: boolean;

	/**
	 * The layers to print.
	 */
	printLayers: PrintLayerOptions;

	/**
	 * If true, prints the magenta ink. Note: Valid only when trapping is off.
	 */
	printMagenta: boolean;

	/**
	 * If true, prints non-printing objects. Note: Valid only when trapping is off.
	 */
	printNonprinting: boolean;

	/**
	 * The orientation of the printed page.
	 */
	printPageOrientation: PrintPageOrientation;

	/**
	 * If true, prints the yellow ink. Note: Valid only when trapping is off.
	 */
	printYellow: boolean;

	/**
	 * The current printer.
	 */
	printer: Printer | string;

	/**
	 * Available printers.
	 */
	readonly printerList: string[];

	/**
	 * The color profile.
	 */
	profile: Profile | string;

	/**
	 * If true, prints small targets outside the page area for aligning color separations.
	 */
	registrationMarks: boolean;

	/**
	 * If true, prints pages in reverse order.
	 */
	reverseOrder: boolean;

	/**
	 * The amount (as a percentage) that the page height is scaled during printing. (Range: 0 to 1000) Note: Valid only when scale mode is scale width height.
	 */
	scaleHeight: number;

	/**
	 * The policy for scaling the page. Note: Valid only when printing from Layout view.
	 */
	scaleMode: ScaleModes;

	/**
	 * If true, constrains the proportions of the scaling; uses the most recent value for either scale width or scale height to define both values. Note: Valid only when scale mode is scale width height.
	 */
	scaleProportional: boolean;

	/**
	 * The amount (as a percentage)that the page width is scaled during printing. (Range: 0 to 1000) Note: Valid only when scale mode is scale width height.
	 */
	scaleWidth: number;

	/**
	 * The ink screening settings for composite gray output in PostScript or PDF format. .
	 */
	screening: Screeening | string;

	/**
	 * Lists the ink screenings available in the PPD. Note: Valid only when color output is separations or in rip separations.
	 */
	readonly screeningList: string[];

	/**
	 * The image data sent to the printer or file.
	 */
	sendImageData: ImageDataTypes;

	/**
	 * If true, simulates the effects of overprinting spot inks with different neutral density values by converting spot colors to process colors for printing. Note: Not valid when the color output mode is defined to leave color profiles unchanged.
	 */
	simulateOverprint: boolean;

	/**
	 * The source of the color management system. Note: Valid only when use color management is true.
	 */
	sourceSpace: SourceSpaces;

	/**
	 * If true, prints all text as black unless text has the color None or Paper or a color value that equals white. If false, prints colored text, such as blue hyperlinks, in halftone patterns. Note: Valid only when trapping is off.
	 */
	textAsBlack: boolean;

	/**
	 * The type of trapping.
	 */
	trapping: Trapping;

	/**
	 * If true, uses the bleed area set for the document.
	 */
	useDocumentBleedToPrint: boolean;

	/**
	 * The angle override for yellow ink. (Range: 0 to 360)
	 */
	yellowAngle: number;

	/**
	 * The frequency override for yellow ink. (Range: 1 to 500)
	 */
	yellowFrequency: number;

}

/**
 * EPS export preferences.
 */
declare class EPSExportPreference extends Preference {
	/**
	 * The transparency flattener preset to use.
	 */
	appliedFlattenerPreset: FlattenerPreset;

	/**
	 * The height of the bleed area at the bottom of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number | string;

	/**
	 * The width of the bleed area at the inside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedInside: number | string;

	/**
	 * The width of the bleed area at the outside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number | string;

	/**
	 * The height of the bleed area at the top of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedTop: number | string;

	/**
	 * The format in which to send image data to the printer.
	 */
	dataFormat: DataFormat;

	/**
	 * The color space for representing color in the exported EPS.
	 */
	epsColor: EPSColorSpace;

	/**
	 * If true, exports facing pages as a single page that has the width of the spread. If false, exports spread pages as separate pages.
	 */
	epsSpreads: boolean;

	/**
	 * Controls how fonts are embedded in the exported EPS.
	 */
	fontEmbedding: FontEmbedding;

	/**
	 * If true, ignores flattener spread overrides.
	 */
	ignoreSpreadOverrides: boolean;

	/**
	 * The image data to export to the EPS document.
	 */
	imageData: EPSImageData;

	/**
	 * If true, replaces bitmap images with OPI links.
	 */
	omitBitmaps: boolean;

	/**
	 * If true, replaces EPS images with OPI links.
	 */
	omitEPS: boolean;

	/**
	 * If true, replaces PDF images with OPI links.
	 */
	omitPDF: boolean;

	/**
	 * If true, prints graphics that are either OPI comments stored in imported EPS files or linked using OPI comments. For information on linking files using OPI comments, see omit EPS, omit PDF, or omit bitmaps.
	 */
	opiImageReplacement: boolean;

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string;

	/**
	 * The PostScript level of the printer.
	 */
	postscriptLevel: PostScriptLevels;

	/**
	 * The file format of the preview image saved with the exported EPS file.
	 */
	preview: PreviewTypes;

}

/**
 * Tool box tools
 */
declare class ToolBox extends Preference {
	/**
	 * Dispatched when the value of a property changes on this ToolBox. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_ATTRIBUTE_CHANGED: string;

	/**
	 * The currently active tool.
	 */
	currentTool: UITools;

	/**
	 * The currently active tool's hint.
	 */
	readonly currentToolHint: string;

	/**
	 * The currently active tool's icon resource file.
	 */
	readonly currentToolIconFile: File;

	/**
	 * The currently active tool's name.
	 */
	readonly currentToolName: string;

}

/**
 * Image preferences.
 */
declare class ImagePreference extends Preference {
	/**
	 * If true, preserve image bounds when relinking.
	 */
	preserveBounds: boolean;

}

/**
 * Image I/O preferences.
 */
declare class ImageIOPreference extends Preference {
	/**
	 * If true, allows auto embedding.
	 */
	allowAutoEmbedding: boolean;

	/**
	 * The name of the alpha channel.
	 */
	alphaChannelName: string;

	/**
	 * If true, applies clipping paths defined in Photoshop to placed images.
	 */
	applyPhotoshopClippingPath: boolean;

	/**
	 * The image resolution in ppi, set when the graphic is imported.
	 */
	readonly previewResolution: number;

}

/**
 * Clipping path settings.
 */
declare class ClippingPathSettings extends Preference {
	/**
	 * A list of the alpha channels stored in the graphic.
	 */
	readonly alphaChannelPathNames: string[];

	/**
	 * The name of the Photoshop path or alpha channel to use as a clipping path.
	 */
	appliedPathName: string;

	/**
	 * The clipping path type.
	 */
	clippingType: ClippingPathType;

	/**
	 * If true, creates interior clipping paths within the surrounding clipping path. Note: Valid only when clipping type is alpha channel or detect edges.
	 */
	includeInsideEdges: boolean;

	/**
	 * Shrinks the area enclosed by the clipping path by the specified amount. (Range depends on the unit. For points: -10000 to 10000; picas: -833p4 to 833p4; inches: -138.8889 to 138.8889; mm: -3527.778 to 3527.778; cm: -352.7778 to 352.7778; ciceros: -781c11.889 to 781c11.889)
	 */
	insetFrame: number | string;

	/**
	 * If true, inverts the clipping path.
	 */
	invertPath: boolean;

	/**
	 * A collection of paths.
	 */
	readonly paths: Paths;

	/**
	 * A list of the clipping paths stored in the graphic.
	 */
	readonly photoshopPathNames: string[];

	/**
	 * If true, truncates the clipping path at the edge of the frame containing the graphic. Note: Valid only when clipping type is alpha channel or detect edges.
	 */
	restrictToFrame: boolean;

	/**
	 * The lowest value (darkest) pixel to allow in the image. All pixels in the image whose values are greater than (lighter than) the threshold value are clipped (obscured). (Range: 0 to 255) Note: Valid only when clipping type is detect edges or alpha channel.
	 */
	threshold: number;

	/**
	 * Specifies how similar a pixel's intensity value can be to the threshold value before the pixel is obscured by the clipping path. (Range: 0 to 10) Note: Valid only when clipping type is detect edges or alpha channel.
	 */
	tolerance: number;

	/**
	 * If true, uses the high-resolution version of the graphic to create the clipping path. If false, calculates the clipping path based on screen-display resolution. Note: Valid only when clipping type is detect edges.
	 */
	useHighResolutionImage: boolean;

	/**
	 * Converts the clipping path to a frame.
	 */
	convertToFrame(): PageItem;

}

/**
 * Graphic layer option.
 */
declare class GraphicLayerOption extends Preference {
	/**
	 * A collection of graphic layers.
	 */
	readonly graphicLayers: GraphicLayers;

	/**
	 * Options for updating a graphic link after the visibility settings for the graphic layer have been modified in a different application.
	 */
	updateLinkOption: UpdateLinkOptions;

}

/**
 * A layer in a PSD image or PDF file.
 */
declare class GraphicLayer {
	/**
	 * If true, the layer is an adjustment layer. Note: Must occur in the script before overriding the visibility state of the layer with a current visibility statement.
	 */
	readonly adjustmentLayer: boolean;

	/**
	 * If true, the layer is visible in the document.
	 */
	currentVisibility: boolean;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, the export state is on.
	 */
	readonly exportState: boolean;

	/**
	 * If true, layer effects have been applied to the layer. Note: Must occur in the script before overriding the visibility state of the layer with a current visibility statement.
	 */
	readonly fxLayer: boolean;

	/**
	 * A collection of graphic layers.
	 */
	readonly graphicLayers: GraphicLayers;

	/**
	 * If true, the layer has an export state.
	 */
	readonly hasExportState: boolean;

	/**
	 * If true, the layer has a print state.
	 */
	readonly hasPrintState: boolean;

	/**
	 * If true, the layer has a view state.
	 */
	readonly hasViewState: boolean;

	/**
	 * The unique ID of the GraphicLayer.
	 */
	readonly id: number;

	/**
	 * The index of the GraphicLayer within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * If true, the GraphicLayer is locked.
	 */
	readonly locked: boolean;

	/**
	 * The name of the GraphicLayer.
	 */
	readonly name: string;

	/**
	 * Returns the visibility setting set for the layer before the graphic file was imported. Note: Must occur in the script before overriding the visibility state with a current visibility statement.
	 */
	readonly originalVisibility: boolean;

	/**
	 * The parent of the GraphicLayer (a GraphicLayerOption or GraphicLayer).
	 */
	readonly parent: any;

	/**
	 * If true, the print state is on.
	 */
	readonly printState: boolean;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * If true, the layer is a section divider layer.
	 */
	readonly sectionDividerLayer: boolean;

	/**
	 * If true, the layer is a separator layer.
	 */
	readonly separatorLayer: boolean;

	/**
	 * If true, the view state is on.
	 */
	readonly viewState: boolean;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): GraphicLayer[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the GraphicLayer.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of graphic layers.
 */
declare class GraphicLayers {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the GraphicLayer with the specified index.
	 * @param index The index.
	 */
	[index: number]: GraphicLayer;

	/**
	 * Returns any GraphicLayer in the collection.
	 */
	anyItem(): GraphicLayer;

	/**
	 * Displays the number of elements in the GraphicLayer.
	 */
	count(): number;

	/**
	 * Returns every GraphicLayer in the collection.
	 */
	everyItem(): GraphicLayer[];

	/**
	 * Returns the first GraphicLayer in the collection.
	 */
	firstItem(): GraphicLayer;

	/**
	 * Returns the GraphicLayer with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GraphicLayer;

	/**
	 * Returns the GraphicLayer with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GraphicLayer;

	/**
	 * Returns the GraphicLayer with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GraphicLayer;

	/**
	 * Returns the GraphicLayers within the specified range.
	 * @param from The GraphicLayer, index, or name at the beginning of the range.
	 * @param to The GraphicLayer, index, or name at the end of the range.
	 */
	itemByRange(from: GraphicLayer | number | string, to: GraphicLayer | number | string): GraphicLayer[];

	/**
	 * Returns the last GraphicLayer in the collection.
	 */
	lastItem(): GraphicLayer;

	/**
	 * Returns the middle GraphicLayer in the collection.
	 */
	middleItem(): GraphicLayer;

	/**
	 * Returns the GraphicLayer whose index follows the specified GraphicLayer in the collection.
	 * @param obj The GraphicLayer whose index comes before the desired GraphicLayer.
	 */
	nextItem(obj: GraphicLayer): GraphicLayer;

	/**
	 * Returns the GraphicLayer with the index previous to the specified index.
	 * @param obj The index of the GraphicLayer that follows the desired GraphicLayer.
	 */
	previousItem(obj: GraphicLayer): GraphicLayer;

	/**
	 * Generates a string which, if executed, will return the GraphicLayer.
	 */
	toSource(): string;

}

/**
 * Input method editor (IME) preferences.
 */
declare class IMEPreference extends Preference {
	/**
	 * If true, allows inline input for non-Latin text.
	 */
	inlineInput: boolean;

	/**
	 * If true, use native digits for Arabic languages.
	 */
	useNativeDigits: boolean;

}

/**
 * PDF export settings for the application object.
 */
declare class PDFExportPreference extends Preference {
	/**
	 * The exported PDF document's Acrobat compatibility.
	 */
	acrobatCompatibility: AcrobatCompatibility;

	/**
	 * The transparency flattener preset to use.
	 */
	appliedFlattenerPreset: FlattenerPreset;

	/**
	 * The height of the bleed area at the bottom of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number | string;

	/**
	 * The width of the bleed area at the inside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedInside: number | string;

	/**
	 * If true, print bleed marks.
	 */
	bleedMarks: boolean;

	/**
	 * The width of the bleed area at the outside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number | string;

	/**
	 * The height of the bleed area at the top of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedTop: number | string;

	/**
	 * Changes the open document password to the specified string. Valid only when use security is true. Note: A script can set but not get this value.
	 */
	changeSecurityPassword: string;

	/**
	 * If true, add small squares of color representing the CMYK inks and tints of gray in 10% increments.
	 */
	colorBars: boolean;

	/**
	 * The amount of bitmap compression to use.
	 */
	colorBitmapCompression: BitmapCompression;

	/**
	 * The compression option to apply to color images.
	 */
	colorBitmapQuality: CompressionQuality;

	/**
	 * The sampling option to apply to color bitmap images in the PDF document.
	 */
	colorBitmapSampling: Sampling;

	/**
	 * The ppi of the resampled image. (Range: 9 to 2400)
	 */
	colorBitmapSamplingDPI: number;

	/**
	 * The tile size for color images. Valid only when color bitmap compression is JPEG 2000. (Range: 128 to 2048)
	 */
	colorTileSize: number;

	/**
	 * If true, compresses text and line art using ZIP compression.
	 */
	compressTextAndLineArt: boolean;

	/**
	 * The objects to compress in the PDF document.
	 */
	compressionType: PDFCompressionType;

	/**
	 * If true, image data that falls outside the visible portion of an image's frame is not exported to the PDF document.
	 */
	cropImagesToFrames: boolean;

	/**
	 * Prints crop marks that define where the page should be trimmed.
	 */
	cropMarks: boolean;

	/**
	 * Sets the default document language in the exported PDF. The correct ISO code of the language must be provided.
	 */
	defaultDocumentLanguage: string;

	/**
	 * If true, users cannot fill in forms, sign, extract pages, or add comments in the PDF document. Valid only when use security is true.
	 */
	disallowChanging: boolean;

	/**
	 * If true, users cannot copy and paste text, images, or other content from the PDF document. Valid only when use security is true.
	 */
	disallowCopying: boolean;

	/**
	 * If true, users cannot insert, delete, or rotate pages in the PDF document. Valid only when use security is true.
	 */
	disallowDocumentAssembly: boolean;

	/**
	 * If true, users cannot extract content from the PDF document using software tools for the visually impaired. Valid only when use security is true.
	 */
	disallowExtractionForAccessibility: boolean;

	/**
	 * If true, users cannot change form fields in the PDF document. Valid only when use security is true.
	 */
	disallowFormFillIn: boolean;

	/**
	 * If true, users cannot print high-resolution copies of the PDF document. Valid only when use security is true.
	 */
	disallowHiResPrinting: boolean;

	/**
	 * If true, users cannot add or change notes, edit text, or fill in form fields in the PDF document. Valid only when use security is true.
	 */
	disallowNotes: boolean;

	/**
	 * If true and acrobat compatibility is Acrobat 6 or higher, storage systems and search engines cannot access metadata stored in the PDF document. If true and acrobat compatibility is acrobat 5 or higher, users cannot copy and extract content from the document. Valid only when use security is true.
	 */
	disallowPlaintextMetadata: boolean;

	/**
	 * If true, users cannot print the PDF document. Valid only when use security is true.
	 */
	disallowPrinting: boolean;

	/**
	 * Effective PDF/X OC Registry.
	 */
	readonly effectiveOCRegistry: string;

	/**
	 * Effective PDF/X output condition.
	 */
	readonly effectiveOutputCondition: string;

	/**
	 * Effective destination color profile.
	 */
	readonly effectivePDFDestinationProfile: PDFProfileSelector | string;

	/**
	 * Effective PDF X color profile.
	 */
	readonly effectivePDFXProfile: PDFProfileSelector | string;

	/**
	 * Export each page or spread as a separate PDF file.
	 */
	exportAsSinglePages: boolean;

	/**
	 * If true, includes visible guides and baseline grids in the PDF document.
	 */
	exportGuidesAndGrids: boolean;

	/**
	 * If true, saves each layer as an Acrobat layer within the PDF document.
	 */
	exportLayers: boolean;

	/**
	 * If true, makes non-printing objects visible in the PDF document.
	 */
	exportNonprintingObjects: boolean;

	/**
	 * If true, each spread in the exported document is combined into a single page that has spread's original width.
	 */
	exportReaderSpreads: boolean;

	/**
	 * Which layers to export.
	 */
	exportWhichLayers: ExportLayerOptions;

	/**
	 * If true, generates thumbnail images for each page or spread.
	 */
	generateThumbnails: boolean;

	/**
	 * The tile size for grayscale images. Valid only when grayscale bitmap compression is JPEG 2000. (Range: 128 to 2048)
	 */
	grayTileSize: number;

	/**
	 * The bitmap compression option to apply to grayscale bitmap images.
	 */
	grayscaleBitmapCompression: BitmapCompression;

	/**
	 * The compression option to apply to grayscale bitmap images.
	 */
	grayscaleBitmapQuality: CompressionQuality;

	/**
	 * The sampling option to apply to grayscale bitmap images.
	 */
	grayscaleBitmapSampling: Sampling;

	/**
	 * The ppi of the resampled image. (Range: 9 to 2400)
	 */
	grayscaleBitmapSamplingDPI: number;

	/**
	 * If true, ignores flattener spread overrides.
	 */
	ignoreSpreadOverrides: boolean;

	/**
	 * If true, displays bookmarks and table of contents entries as links in the bookmarks pane in the PDF document. If false, no bookmarks are exported.
	 */
	includeBookmarks: boolean;

	/**
	 * If true, includes hyperlinks when exporting the document.
	 */
	includeHyperlinks: boolean;

	/**
	 * The ICC Profiles to include in the exported PDF document.
	 */
	includeICCProfiles: ICCProfiles | boolean;

	/**
	 * If true, includes the document's slug area in the PDF document.
	 */
	includeSlugWithPDF: boolean;

	/**
	 * If true, creates a tagged PDF file. Note: If acrobat compatibility is acrobat 6 or higher, tags are visible only when the PDF is opened in Acrobat 6 or higher.
	 */
	includeStructure: boolean;

	/**
	 * How to draw interactive elements.
	 */
	interactiveElementsOption: InteractiveElementsOptions;

	/**
	 * The bitmap compression option to apply to monochrome bitmap images.
	 */
	monochromeBitmapCompression: MonoBitmapCompression;

	/**
	 * The sampling option to apply to monochrome bitmap images.
	 */
	monochromeBitmapSampling: Sampling;

	/**
	 * The ppi of the resampled image. (Range: 9 to 2400)
	 */
	monochromeBitmapSamplingDPI: number;

	/**
	 * The web address for the output condition registry. Not valid when PDF/X-3 is the compliance standard or PDF export preset.
	 */
	ocRegistry: string;

	/**
	 * If true, replaces bitmap images with OPI links.
	 */
	omitBitmaps: boolean;

	/**
	 * If true, replaces EPS images with OPI links.
	 */
	omitEPS: boolean;

	/**
	 * If true, replaces PDF images with OPI links.
	 */
	omitPDF: boolean;

	/**
	 * The password to enter when opening the PDF document. Valid only when use security is true. Note: A script can set but not get this value.
	 */
	openDocumentPassword: string;

	/**
	 * Open PDF in full screen mode.
	 */
	openInFullScreen: boolean;

	/**
	 * If true, optimizes the exported PDF document for faster viewing in a web browser. Note: Compresses text and line art, regardless of specified compression settings.
	 */
	optimizePDF: boolean;

	/**
	 * The name of the intended printing condition. Valid only when a PDF/X compliance standard has been defined for the document. Not valid when PDF/X-3 is the compliance standard or PDF export preset. For information on compliance standards, see standards compliance and PDF X standards.
	 */
	outputCondition: string;

	/**
	 * The name of the output condition. Valid only when a PDF/X standard has been defined for the document.
	 */
	outputConditionName: string;

	/**
	 * If true, prints the filename, page number, current date and time, and color separation name.
	 */
	pageInformationMarks: boolean;

	/**
	 * The offset from the edge of the page for page marks.
	 */
	pageMarksOffset: number | string;

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string;

	/**
	 * The color space to use to represent color information in the exported PDF document.
	 */
	pdfColorSpace: PDFColorSpace;

	/**
	 * The gamut of the final RGB or CMYK device.
	 */
	pdfDestinationProfile: PDFProfileSelector | string;

	/**
	 * The export PDF display title.
	 */
	pdfDisplayTitle: PdfDisplayTitleOptions;

	/**
	 * The export PDF magnification options.
	 */
	pdfMagnification: PdfMagnificationOptions;

	/**
	 * The type of printer marks, either an enum value or the name of a custom marks file.
	 */
	pdfMarkType: MarkTypes | string;

	/**
	 * The export PDF page layout.
	 */
	pdfPageLayout: PageLayoutOptions;

	/**
	 * The PDF X color profile to use for the PDF document. .
	 */
	pdfXProfile: PDFProfileSelector | string;

	/**
	 * The stroke weight for printer's marks.
	 */
	printerMarkWeight: PDFMarkWeight;

	/**
	 * If true, prints small targets outside the page area for aligning color separations.
	 */
	registrationMarks: boolean;

	/**
	 * If true, simulates the effects of overprinting spot inks with different neutral density values by converting spot colors to process colors for printing. Note: Not valid when the color output mode is defined to leave color profiles unchanged.
	 */
	simulateOverprint: boolean;

	/**
	 * Suffix to be used at the end of each file when pages are exported as separate PDF files.
	 */
	singlePagesPDFSuffix: string;

	/**
	 * The PDF/X standards compliance to test against.
	 */
	standardsCompliance: PDFXStandards;

	/**
	 * Sets the threshold for embedding complete fonts based on how many of the fonts' characters are used in the document. If the percentage of characters used in the document for any given font exceeds the specified value, the font is completely embedded; otherwise, the font is subsetted. (Range: 0 to 100) Notes: Embedding complete fonts increases file size. To completely embed all fonts, use 0 (zero).
	 */
	subsetFontsBelow: number;

	/**
	 * The minimum dpi at which color compression is applied. (Range: 1 to 10 times the value specified for color bitmap sampling DPI.)
	 */
	thresholdToCompressColor: number;

	/**
	 * The minimum dpi at which grayscale compression is applied. (Range: 1 to 10 times the value specified for grayscale bitmap sampling DPI.)
	 */
	thresholdToCompressGray: number;

	/**
	 * The minimum dpi at which monochrome compression is applied. (Range: 1 to 10 times the value specified for monochrome bitmap sampling DPI.)
	 */
	thresholdToCompressMonochrome: number;

	/**
	 * If true, uses the document's bleed settings in the PDF document.
	 */
	useDocumentBleedWithPDF: boolean;

	/**
	 * If true, activates security controls for the PDF document.
	 */
	useSecurity: boolean;

	/**
	 * If true, automatically opens the PDF file after exporting.
	 */
	viewPDF: boolean;

}

/**
 * PDF export settings for the document object.
 */
declare class PDFExportPreset {
	/**
	 * The exported PDF document's Acrobat compatibility.
	 */
	acrobatCompatibility: AcrobatCompatibility;

	/**
	 * The transparency flattener preset to use.
	 */
	appliedFlattenerPreset: FlattenerPreset;

	/**
	 * The height of the bleed area at the bottom of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number | string;

	/**
	 * The width of the bleed area at the inside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedInside: number | string;

	/**
	 * If true, print bleed marks.
	 */
	bleedMarks: boolean;

	/**
	 * The width of the bleed area at the outside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number | string;

	/**
	 * The height of the bleed area at the top of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedTop: number | string;

	/**
	 * If true, add small squares of color representing the CMYK inks and tints of gray in 10% increments.
	 */
	colorBars: boolean;

	/**
	 * The amount of bitmap compression to use.
	 */
	colorBitmapCompression: BitmapCompression;

	/**
	 * The compression option to apply to color images.
	 */
	colorBitmapQuality: CompressionQuality;

	/**
	 * The sampling option to apply to color bitmap images in the PDF document.
	 */
	colorBitmapSampling: Sampling;

	/**
	 * The ppi of the resampled image. (Range: 9 to 2400)
	 */
	colorBitmapSamplingDPI: number;

	/**
	 * The tile size for color images. Valid only when color bitmap compression is JPEG 2000. (Range: 128 to 2048)
	 */
	colorTileSize: number;

	/**
	 * If true, compresses text and line art using ZIP compression.
	 */
	compressTextAndLineArt: boolean;

	/**
	 * The objects to compress in the PDF document.
	 */
	compressionType: PDFCompressionType;

	/**
	 * If true, image data that falls outside the visible portion of an image's frame is not exported to the PDF document.
	 */
	cropImagesToFrames: boolean;

	/**
	 * Prints crop marks that define where the page should be trimmed.
	 */
	cropMarks: boolean;

	/**
	 * Sets the default document language in the exported PDF. The correct ISO code of the language must be provided.
	 */
	defaultDocumentLanguage: string;

	/**
	 * Effective PDF/X OC Registry.
	 */
	readonly effectiveOCRegistry: string;

	/**
	 * Effective PDF/X output condition.
	 */
	readonly effectiveOutputCondition: string;

	/**
	 * Effective destination color profile.
	 */
	readonly effectivePDFDestinationProfile: PDFProfileSelector | string;

	/**
	 * Effective PDF X color profile.
	 */
	readonly effectivePDFXProfile: PDFProfileSelector | string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * Export each page or spread as a separate PDF file.
	 */
	exportAsSinglePages: boolean;

	/**
	 * If true, includes visible guides and baseline grids in the PDF document.
	 */
	exportGuidesAndGrids: boolean;

	/**
	 * If true, saves each layer as an Acrobat layer within the PDF document.
	 */
	exportLayers: boolean;

	/**
	 * If true, makes non-printing objects visible in the PDF document.
	 */
	exportNonprintingObjects: boolean;

	/**
	 * If true, each spread in the exported document is combined into a single page that has spread's original width.
	 */
	exportReaderSpreads: boolean;

	/**
	 * Which layers to export.
	 */
	exportWhichLayers: ExportLayerOptions;

	/**
	 * The full path to the PDFExportPreset, including the name of the PDFExportPreset.
	 */
	readonly fullName: File;

	/**
	 * If true, generates thumbnail images for each page or spread.
	 */
	generateThumbnails: boolean;

	/**
	 * The tile size for grayscale images. Valid only when grayscale bitmap compression is JPEG 2000. (Range: 128 to 2048)
	 */
	grayTileSize: number;

	/**
	 * The bitmap compression option to apply to grayscale bitmap images.
	 */
	grayscaleBitmapCompression: BitmapCompression;

	/**
	 * The compression option to apply to grayscale bitmap images.
	 */
	grayscaleBitmapQuality: CompressionQuality;

	/**
	 * The sampling option to apply to grayscale bitmap images.
	 */
	grayscaleBitmapSampling: Sampling;

	/**
	 * The ppi of the resampled image. (Range: 9 to 2400)
	 */
	grayscaleBitmapSamplingDPI: number;

	/**
	 * If true, ignores flattener spread overrides.
	 */
	ignoreSpreadOverrides: boolean;

	/**
	 * If true, displays bookmarks and table of contents entries as links in the bookmarks pane in the PDF document. If false, no bookmarks are exported.
	 */
	includeBookmarks: boolean;

	/**
	 * If true, includes hyperlinks when exporting the document.
	 */
	includeHyperlinks: boolean;

	/**
	 * The ICC Profiles to include in the exported PDF document.
	 */
	includeICCProfiles: ICCProfiles | boolean;

	/**
	 * If true, includes the document's slug area in the PDF document.
	 */
	includeSlugWithPDF: boolean;

	/**
	 * If true, creates a tagged PDF file. Note: If acrobat compatibility is acrobat 6 or higher, tags are visible only when the PDF is opened in Acrobat 6 or higher.
	 */
	includeStructure: boolean;

	/**
	 * The index of the PDFExportPreset within its containing object.
	 */
	readonly index: number;

	/**
	 * How to draw interactive elements.
	 */
	interactiveElementsOption: InteractiveElementsOptions;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The bitmap compression option to apply to monochrome bitmap images.
	 */
	monochromeBitmapCompression: MonoBitmapCompression;

	/**
	 * The sampling option to apply to monochrome bitmap images.
	 */
	monochromeBitmapSampling: Sampling;

	/**
	 * The ppi of the resampled image. (Range: 9 to 2400)
	 */
	monochromeBitmapSamplingDPI: number;

	/**
	 * The name of the PDFExportPreset.
	 */
	name: string;

	/**
	 * The web address for the output condition registry. Not valid when PDF/X-3 is the compliance standard or PDF export preset.
	 */
	ocRegistry: string;

	/**
	 * If true, replaces bitmap images with OPI links.
	 */
	omitBitmaps: boolean;

	/**
	 * If true, replaces EPS images with OPI links.
	 */
	omitEPS: boolean;

	/**
	 * If true, replaces PDF images with OPI links.
	 */
	omitPDF: boolean;

	/**
	 * Open PDF in full screen mode.
	 */
	openInFullScreen: boolean;

	/**
	 * If true, optimizes the exported PDF document for faster viewing in a web browser. Note: Compresses text and line art, regardless of specified compression settings.
	 */
	optimizePDF: boolean;

	/**
	 * The name of the intended printing condition. Valid only when a PDF/X compliance standard has been defined for the document. Not valid when PDF/X-3 is the compliance standard or PDF export preset. For information on compliance standards, see standards compliance and PDF X standards.
	 */
	outputCondition: string;

	/**
	 * The name of the output condition. Valid only when a PDF/X standard has been defined for the document.
	 */
	outputConditionName: string;

	/**
	 * If true, prints the filename, page number, current date and time, and color separation name.
	 */
	pageInformationMarks: boolean;

	/**
	 * The offset from the edge of the page for page marks.
	 */
	pageMarksOffset: number | string;

	/**
	 * The parent of the PDFExportPreset (a Application).
	 */
	readonly parent: Application;

	/**
	 * The color space to use to represent color information in the exported PDF document.
	 */
	pdfColorSpace: PDFColorSpace;

	/**
	 * The gamut of the final RGB or CMYK device.
	 */
	pdfDestinationProfile: PDFProfileSelector | string;

	/**
	 * The export PDF display title.
	 */
	pdfDisplayTitle: PdfDisplayTitleOptions;

	/**
	 * The export PDF magnification options.
	 */
	pdfMagnification: PdfMagnificationOptions;

	/**
	 * The type of printer marks, either an enum value or the name of a custom marks file.
	 */
	pdfMarkType: MarkTypes | string;

	/**
	 * The export PDF page layout.
	 */
	pdfPageLayout: PageLayoutOptions;

	/**
	 * The PDF X color profile to use for the PDF document. .
	 */
	pdfXProfile: PDFProfileSelector | string;

	/**
	 * The stroke weight for printer's marks.
	 */
	printerMarkWeight: PDFMarkWeight;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * If true, prints small targets outside the page area for aligning color separations.
	 */
	registrationMarks: boolean;

	/**
	 * If true, simulates the effects of overprinting spot inks with different neutral density values by converting spot colors to process colors for printing. Note: Not valid when the color output mode is defined to leave color profiles unchanged.
	 */
	simulateOverprint: boolean;

	/**
	 * Suffix to be used at the end of each file when pages are exported as separate PDF files.
	 */
	singlePagesPDFSuffix: string;

	/**
	 * The PDF/X standards compliance to test against.
	 */
	standardsCompliance: PDFXStandards;

	/**
	 * Sets the threshold for embedding complete fonts based on how many of the fonts' characters are used in the document. If the percentage of characters used in the document for any given font exceeds the specified value, the font is completely embedded; otherwise, the font is subsetted. (Range: 0 to 100) Notes: Embedding complete fonts increases file size. To completely embed all fonts, use 0 (zero).
	 */
	subsetFontsBelow: number;

	/**
	 * The minimum dpi at which color compression is applied. (Range: 1 to 10 times the value specified for color bitmap sampling DPI.)
	 */
	thresholdToCompressColor: number;

	/**
	 * The minimum dpi at which grayscale compression is applied. (Range: 1 to 10 times the value specified for grayscale bitmap sampling DPI.)
	 */
	thresholdToCompressGray: number;

	/**
	 * The minimum dpi at which monochrome compression is applied. (Range: 1 to 10 times the value specified for monochrome bitmap sampling DPI.)
	 */
	thresholdToCompressMonochrome: number;

	/**
	 * If true, uses the document's bleed settings in the PDF document.
	 */
	useDocumentBleedWithPDF: boolean;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the PDFExportPreset.
	 */
	duplicate(): PDFExportPreset;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PDFExportPreset[];

	/**
	 * Deletes the PDFExportPreset.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the PDFExportPreset.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of PDF export presets.
 */
declare class PDFExportPresets {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PDFExportPreset with the specified index.
	 * @param index The index.
	 */
	[index: number]: PDFExportPreset;

	/**
	 * Creates a new PDFExportPreset.
	 * @param withProperties Initial values for properties of the new PDFExportPreset
	 */
	add(withProperties: object): PDFExportPreset;

	/**
	 * Returns any PDFExportPreset in the collection.
	 */
	anyItem(): PDFExportPreset;

	/**
	 * Displays the number of elements in the PDFExportPreset.
	 */
	count(): number;

	/**
	 * Returns every PDFExportPreset in the collection.
	 */
	everyItem(): PDFExportPreset[];

	/**
	 * Returns the first PDFExportPreset in the collection.
	 */
	firstItem(): PDFExportPreset;

	/**
	 * Returns the PDFExportPreset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PDFExportPreset;

	/**
	 * Returns the PDFExportPreset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PDFExportPreset;

	/**
	 * Returns the PDFExportPresets within the specified range.
	 * @param from The PDFExportPreset, index, or name at the beginning of the range.
	 * @param to The PDFExportPreset, index, or name at the end of the range.
	 */
	itemByRange(from: PDFExportPreset | number | string, to: PDFExportPreset | number | string): PDFExportPreset[];

	/**
	 * Returns the last PDFExportPreset in the collection.
	 */
	lastItem(): PDFExportPreset;

	/**
	 * Returns the middle PDFExportPreset in the collection.
	 */
	middleItem(): PDFExportPreset;

	/**
	 * Returns the PDFExportPreset whose index follows the specified PDFExportPreset in the collection.
	 * @param obj The PDFExportPreset whose index comes before the desired PDFExportPreset.
	 */
	nextItem(obj: PDFExportPreset): PDFExportPreset;

	/**
	 * Returns the PDFExportPreset with the index previous to the specified index.
	 * @param obj The index of the PDFExportPreset that follows the desired PDFExportPreset.
	 */
	previousItem(obj: PDFExportPreset): PDFExportPreset;

	/**
	 * Generates a string which, if executed, will return the PDFExportPreset.
	 */
	toSource(): string;

}

/**
 * PDF place preferences.
 */
declare class PDFPlacePreference extends Preference {
	/**
	 * The password to enter when opening the PDF document. Valid only when use security is true. Note: A script can set but not get this value.
	 */
	openDocumentPassword: string;

	/**
	 * The page number of the PDF document page to place.
	 */
	pageNumber: number;

	/**
	 * The type of cropping to apply.
	 */
	pdfCrop: PDFCrop;

	/**
	 * If true, the background of the PDF is transparent.
	 */
	transparentBackground: boolean;

}

/**
 * Interactive PDF export settings for the application object.
 */
declare class InteractivePDFExportPreference extends Preference {
	/**
	 * Sets the default document language in the exported PDF. The correct ISO code of the language must be provided.
	 */
	defaultDocumentLanguage: string;

	/**
	 * Export each page or spread as a separate PDF file.
	 */
	exportAsSinglePages: boolean;

	/**
	 * If true, saves each layer as an Acrobat layer within the PDF document.
	 */
	exportLayers: boolean;

	/**
	 * If true, each spread in the exported document is combined into a single page that has spread's original width.
	 */
	exportReaderSpreads: boolean;

	/**
	 * Automatically flip pages in the exported PDF.
	 */
	flipPages: boolean;

	/**
	 * The speed that the pages flip.
	 */
	flipPagesSpeed: number;

	/**
	 * If true, generates thumbnail images for each page or spread.
	 */
	generateThumbnails: boolean;

	/**
	 * If true, creates a tagged PDF file. Note: If acrobat compatibility is acrobat 6 or higher, tags are visible only when the PDF is opened in Acrobat 6 or higher.
	 */
	includeStructure: boolean;

	/**
	 * How to draw interactive elements.
	 */
	interactivePDFInteractiveElementsOption: InteractivePDFInteractiveElementsOptions;

	/**
	 * Open PDF in full screen mode.
	 */
	openInFullScreen: boolean;

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string;

	/**
	 * The name of the page transition to use for all pages.
	 */
	pageTransitionOverride: PageTransitionOverrideOptions;

	/**
	 * The export PDF display title.
	 */
	pdfDisplayTitle: PdfDisplayTitleOptions;

	/**
	 * The PDF JPEG quality options.
	 */
	pdfJPEGQuality: PDFJPEGQualityOptions;

	/**
	 * The export PDF magnification options.
	 */
	pdfMagnification: PdfMagnificationOptions;

	/**
	 * The export PDF page layout.
	 */
	pdfPageLayout: PageLayoutOptions;

	/**
	 * The PDF raster compression options.
	 */
	pdfRasterCompression: PDFRasterCompressionOptions;

	/**
	 * The raster resolution.
	 */
	rasterResolution: RasterResolutionOptions | number;

	/**
	 * Suffix to be used at the end of each file when pages are exported as separate PDF files.
	 */
	singlePagesPDFSuffix: string;

	/**
	 * Use tagged PDF structure for interactive elements tab order.
	 */
	usePDFStructureForTabOrder: boolean;

	/**
	 * If true, automatically opens the PDF file after exporting.
	 */
	viewPDF: boolean;

}

/**
 * Tagged PDF preferences.
 */
declare class TaggedPDFPreference extends Preference {
	/**
	 * Tagged PDF structure order preference.
	 */
	structureOrder: TaggedPDFStructureOrderOptions;

}

/**
 * Options for specifying default endnote formatting.
 */
declare class EndnoteOption extends Preference {
	/**
	 * The position of endnote reference numbers in the main text.
	 */
	endnoteMarkerPositioning: FootnoteMarkerPositioning | string;

	/**
	 * The character style to apply to endnote reference numbers in the main text.
	 */
	endnoteMarkerStyle: CharacterStyle;

	/**
	 * The endnote numbering style.
	 */
	endnoteNumberingStyle: FootnoteNumberingStyle | string;

	/**
	 * The prefix text of the endnote. (Limit: 0 to 100 characters)
	 */
	endnotePrefix: string;

	/**
	 * The text to insert between the endnote marker number and the endnote text. (Range: 0 to 100 characters)
	 */
	endnoteSeparatorText: string;

	/**
	 * The suffix text of the endnote. (Limit: 0 to 100 characters)
	 */
	endnoteSuffix: string;

	/**
	 * The paragraph style to apply to endnote text.
	 */
	endnoteTextStyle: ParagraphStyle;

	/**
	 * Title of the endnotes. (Limit: 0 to 100 characters)
	 */
	endnoteTitle: string;

	/**
	 * The paragraph style to apply to endnote title.
	 */
	endnoteTitleStyle: ParagraphStyle;

	/**
	 * Frame creation of the endnotes.
	 */
	frameCreateOption: EndnoteFrameCreate | string;

	/**
	 * The point at which to restart endnote numbering.
	 */
	restartEndnoteNumbering: EndnoteRestarting | string;

	/**
	 * Scope value of the endnotes.
	 */
	scopeValue: EndnoteScope | string;

	/**
	 * The position of the endnote prefix and/or suffix.
	 */
	showEndnotePrefixSuffix: FootnotePrefixSuffix | string;

	/**
	 * The number at which to start endnote numbering.
	 */
	startEndnoteNumberAt: number;

}

/**
 * Default page item formatting properties.
 */
declare class PageItemDefault extends Preference {
	/**
	 * The default graphic object style applied to the PageItemDefault.
	 */
	appliedGraphicObjectStyle: ObjectStyle | string;

	/**
	 * The default frame grid object style applied to the PageItemDefault.
	 */
	appliedGridObjectStyle: ObjectStyle | string;

	/**
	 * The default text object style applied to the PageItemDefault.
	 */
	appliedTextObjectStyle: ObjectStyle | string;

	/**
	 * The arrowhead alignment applied to the PageItemDefault.
	 */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number | string;

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number | string;

	/**
	 * Transparency settings for the content of the PageItemDefault.
	 */
	readonly contentTransparencySettings: ContentTransparencySetting;

	/**
	 * The end shape of an open path.
	 */
	endCap: EndCap;

	/**
	 * The corner join applied to the PageItemDefault.
	 */
	endJoin: EndJoin;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the PageItemDefault. .
	 */
	fillColor: Swatch | string;

	/**
	 * The percent of tint to use in the PageItemDefault's fill color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;

	/**
	 * Transparency settings for the fill applied to the PageItemDefault.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of a dashed, dotted, or striped stroke. For information, see stroke type.
	 */
	gapColor: Swatch;

	/**
	 * The tint as a percentage of the gap color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	gapTint: number;

	/**
	 * The angle of a linear gradient applied to the fill of the PageItemDefault. (Range: -180 to 180)
	 */
	gradientFillAngle: number;

	/**
	 * The angle of a linear gradient applied to the stroke of the PageItemDefault. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;

	/**
	 * The scaling applied to the arrowhead at the start of the path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;

	/**
	 * The arrowhead applied to the start of the path.
	 */
	leftLineEnd: ArrowHead;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number;

	/**
	 * If true, the PageItemDefault does not print.
	 */
	nonprinting: boolean;

	/**
	 * If true, the PageItemDefault's fill color overprints any underlying objects. If false, the fill color knocks out the underlying colors.
	 */
	overprintFill: boolean;

	/**
	 * If true, the gap color overprints any underlying colors. If false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;

	/**
	 * If true, the PageItemDefault's stroke color overprints any underlying objects. If false, the stroke color knocks out theunderlying colors.
	 */
	overprintStroke: boolean;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * The scaling applied to the arrowhead at the end of the path. (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;

	/**
	 * The arrowhead applied to the end of the path.
	 */
	rightLineEnd: ArrowHead;

	/**
	 * The stroke alignment applied to the PageItemDefault.
	 */
	strokeAlignment: StrokeAlignment;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the PageItemDefault.
	 */
	strokeColor: Swatch | string;

	/**
	 * The percent of tint to use in object's stroke color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;

	/**
	 * Transparency settings for the stroke.
	 */
	readonly strokeTransparencySettings: StrokeTransparencySetting;

	/**
	 * The name of the stroke style to apply.
	 */
	strokeType: StrokeStyle | string;

	/**
	 * The weight (in points) to apply to the PageItemDefault's stroke.
	 */
	strokeWeight: number | string;

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	topLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	topLeftCornerRadius: number | string;

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	topRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number | string;

	/**
	 * Transparency settings.
	 */
	readonly transparencySettings: TransparencySetting;

	/**
	 * Applies the specified object style.
	 * @param using The object style to apply.
	 * @param clearingOverrides If true, clears the PageItemDefault's existing attributes before applying the style.
	 * @param clearingOverridesThroughRootObjectStyle If true, clears attributes and formatting applied to the PageItemDefault that are not defined in the object style.
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;

	/**
	 * Clear overrides for object style
	 */
	clearObjectStyleOverrides(): void;

}

/**
 * Export options for the object
 */
declare class ObjectExportOption extends Preference {
	/**
	 * The metadata property to use as source of actual text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String.
	 */
	actualMetadataProperty: any;

	/**
	 * The source type of actual text
	 */
	actualTextSourceType: SourceType;

	/**
	 * The metadata property to use as source of alternate text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String.
	 */
	altMetadataProperty: any;

	/**
	 * The source type of alternate text
	 */
	altTextSourceType: SourceType;

	/**
	 * The tag type of page item
	 */
	applyTagType: TagType;

	/**
	 * The custom actual text entered by the user
	 */
	customActualText: string;

	/**
	 * The custom alternate text entered by the user
	 */
	customAltText: string;

	/**
	 * If true, custom layout is enabled for object
	 */
	customLayout: boolean;

	/**
	 * Custom Layout settings to be used for object
	 */
	customLayoutType: CustomLayoutTypeEnum;

	/**
	 * Custom size applied to the object
	 */
	customSize: string;

	/**
	 * The epub type as recommended by IDPF
	 */
	epubType: string;

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean;

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;

	/**
	 * Alignment applied to images
	 */
	imageAlignment: ImageAlignmentType;

	/**
	 * Allows user to select the image format for conversion
	 */
	imageConversionType: ImageFormat;

	/**
	 * The export resolution
	 */
	imageExportResolution: ImageResolution;

	/**
	 * Image page break settings to be used with objects
	 */
	imagePageBreak: ImagePageBreakType;

	/**
	 * Space After applied to images
	 */
	imageSpaceAfter: number;

	/**
	 * Space Before applied to images
	 */
	imageSpaceBefore: number;

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat;

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;

	/**
	 * Preserve Appearance from Layout
	 */
	preserveAppearanceFromLayout: PreserveAppearanceFromLayoutEnum;

	/**
	 * size settings to be used for the object
	 */
	sizeType: SizeTypeEnum;

	/**
	 * If true, image page break settings will be used in objects
	 */
	useImagePageBreak: boolean;

	/**
	 * Provides the actual text for the object
	 */
	actualText(): string;

	/**
	 * Provides the alternate text for the object
	 */
	altText(): string;

}

/**
 * Text editing preferences.
 */
declare class TextEditingPreference extends Preference {
	/**
	 * If true, allows text to be dragged and dropped in the story editor or galley view.
	 */
	allowDragAndDropTextInStory: boolean;

	/**
	 * If true, allows text to be dragged and dropped on a layout page.
	 */
	dragAndDropTextInLayout: boolean;

	/**
	 * If true, a single click (with the Type tool) converts non-text frames to text frames.
	 */
	singleClickConvertsFramesToTextFrames: boolean;

	/**
	 * If true, automatically adjusts spacing among words and between words and punctuation marks when cutting and pasting text.
	 */
	smartCutAndPaste: boolean;

	/**
	 * If true, a triple click selects a line of text. If false, a triple click selects a paragraph.
	 */
	tripleClickSelectsLine: boolean;

}

/**
 * Mojikumi UI preferences.
 */
declare class MojikumiUiPreference extends Preference {
	/**
	 * If true, uses full-width spacing for all characters.
	 */
	lineEndAllOneEm: boolean;

	/**
	 * If true, uses half-width spacing for all characters.
	 */
	lineEndAllOneHalfEm: boolean;

	/**
	 * If true, uses full-width spacing for punctuation and for the last character in the line.
	 */
	lineEndPeriodOneEm: boolean;

	/**
	 * If true, uses line end uke no float.
	 */
	lineEndUkeNoFloat: boolean;

	/**
	 * If true, indents lines one full space and uses no float for all characters.
	 */
	oneEmIndentLineEndAllNoFloat: boolean;

	/**
	 * If true, indents lines one full space and uses full-width spacing for all characters.
	 */
	oneEmIndentLineEndAllOneEm: boolean;

	/**
	 * If true, indents lines one full space and uses half-width spacing for all characters.
	 */
	oneEmIndentLineEndAllOneHalfEm: boolean;

	/**
	 * If true, indents lines one space and uses full-width spacing for punctuation and for the last character in the line.
	 */
	oneEmIndentLineEndPeriodOneEm: boolean;

	/**
	 * If true, indents lines one full space and uses line end uke no float.
	 */
	oneEmIndentLineEndUkeNoFloat: boolean;

	/**
	 * If true, indents lines one space and uses line end uke one half space.
	 */
	oneEmIndentLineEndUkeOneHalfEm: boolean;

	/**
	 * If true, Uses full-witdh spacing for all characters except the last character in the line, which uses either full- or half-width spacing.
	 */
	oneOrOneHalfEmIndentLineEndAllOneEm: boolean;

	/**
	 * If true, indents lines one or one-half space and uses full-width spacing for punctuation and for the last character in the line.
	 */
	oneOrOneHalfEmIndentLineEndPeriodOneEm: boolean;

	/**
	 * If true, indents lines one half space or one full space and uses line end uke no float.
	 */
	oneOrOneHalfEmIndentLineEndUkeNoFloat: boolean;

	/**
	 * If true, indents lines one full or half space and uses line end uke one half space.
	 */
	oneOrOneHalfEmIndentLineEndUkeOneHalfEm: boolean;

	/**
	 * If true, displays table for mojikumi tsume and aki optimized for Simplified Chinese punctuation glyphs.
	 */
	showSimpChineseDefault: boolean;

	/**
	 * If true, displays table for mojikumi tsume and aki optimized for Traditional Chinese centered punctuation glyphs.
	 */
	showTradChineseDefault: boolean;

}

/**
 * Font locking preferences.
 */
declare class FontLockingPreference extends Preference {
	/**
	 * If true, turns on missing glyph protection during font change.
	 */
	fontChangeLocking: boolean;

	/**
	 * If true, turns on missing glyph protection during typing.
	 */
	fontInputLocking: boolean;

}

/**
 * User dictionary preferences.
 */
declare class DictionaryPreference extends Preference {
	/**
	 * The hyphenation exception list to use when composing text.
	 */
	composition: ComposeUsing;

	/**
	 * If true, merges the spelling and hyphenation exceptions lists in the external user dictionary with the lists stored within the document.
	 */
	mergeUserDictionary: boolean;

	/**
	 * If true, recomposes all stories when the compose using settings are changed, or when words are added to or removed from the user dictionary.
	 */
	recomposeWhenChanged: boolean;

}

/**
 * Default settings to use when creating a polygon.
 */
declare class PolygonPreference extends Preference {
	/**
	 * The star inset percentage for the sides of a polygon. (Range: 0 to 100)
	 */
	insetPercentage: number;

	/**
	 * The number of sides for a polygon. (Range: 3 to 100)
	 */
	numberOfSides: number;

}

/**
 * Spell-check preferences.
 */
declare class SpellPreference extends Preference {
	/**
	 * If true, checks for uncapitalized first words in sentences.
	 */
	checkCapitalizedSentences: boolean;

	/**
	 * If true, checks for uncapitalized proper nouns.
	 */
	checkCapitalizedWords: boolean;

	/**
	 * If true, checks for misspelled words.
	 */
	checkMisspelledWords: boolean;

	/**
	 * If true, checks for repeated words.
	 */
	checkRepeatedWords: boolean;

	/**
	 * If true, underlines misspelled and repeated words, uncapitalized proper nouns, and uncapitalized first words in sentences. Note: Valid only when the corresponding properties are true. For information, see check misspelled words, check repeated words, check capitalized words, and check capitalized sentences.
	 */
	dynamicSpellCheck: boolean;

	/**
	 * The underline color for misspelled words, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Note: Valid only when both dynamic spell check and check misspelled words are true.
	 */
	misspelledWordColor: [number, number, number] | UIColors;

	/**
	 * The underline color for repeated words, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Note: Valid only when both dynamic spell check and check repeated words are true. .
	 */
	repeatedWordColor: [number, number, number] | UIColors;

	/**
	 * The underline color for the first word in sentences that do not begin with a capital letter, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Note: Valid when both dynamic spell check and check capitalized sentences are true.
	 */
	uncapitalizedSentenceColor: [number, number, number] | UIColors;

	/**
	 * The underline color for uncapitalized proper nouns, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Note: Valid only when both dynamic spell check and check capitalized words are true. .
	 */
	uncapitalizedWordColor: [number, number, number] | UIColors;

}

/**
 * Auto-correct preferences.
 */
declare class AutoCorrectPreference extends Preference {
	/**
	 * If true, automatically corrects misspelled words listed in the auto-correct table.
	 */
	autoCorrect: boolean;

	/**
	 * If true, automatically corrects capitalization errors listed in the auto-correct table.
	 */
	autoCorrectCapitalizationErrors: boolean;

}

/**
 * Smart Guide preferences.
 */
declare class SmartGuidePreference extends Preference {
	/**
	 * If true, smart alignment to object centers is enabled.
	 */
	alignToObjectCenter: boolean;

	/**
	 * If true, smart alignment to object edges is enabled.
	 */
	alignToObjectEdges: boolean;

	/**
	 * If true, smart guides are enabled.
	 */
	enabled: boolean;

	/**
	 * The color of the guide, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	guideColor: [number, number, number] | UIColors;

	/**
	 * If true, smart dimensions guides are enabled.
	 */
	smartDimensions: boolean;

	/**
	 * If true, smart spacing guides are enabled.
	 */
	smartSpacing: boolean;

}

/**
 * EPS import preferences.
 */
declare class EPSImportPreference extends Preference {
	/**
	 * If true, applies clipping paths stored in the EPS file.
	 */
	epsFrames: boolean;

	/**
	 * Indicates when to create preview images.
	 */
	epsProxy: CreateProxy;

	/**
	 * If true, reads OPI image links in the imported EPS file. If false, preserves the OPI links but does not read them.
	 */
	opiComments: boolean;

}

/**
 * Placed InDesign page attribute.
 */
declare class ImportedPageAttribute extends Preference {
	/**
	 * Specifies the cropping of the imported InDesign page. Read only for page items.
	 */
	importedPageCrop: ImportedPageCropOptions;

	/**
	 * Which page of the InDesign document should be imported. Read only for page items.
	 */
	pageNumber: number;

}

/**
 * Stroke/fill proxy settings.
 */
declare class StrokeFillProxySetting extends Preference {
	/**
	 * Which part of the stroke/fill proxy is currently active.
	 */
	active: StrokeFillProxyOptions;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the StrokeFillProxySetting. .
	 */
	fillColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the StrokeFillProxySetting.
	 */
	strokeColor: Swatch | string;

	/**
	 * Which target is affected by changes to the stroke/fill proxy.
	 */
	target: StrokeFillTargetOptions;

}

/**
 * Adjust layout preferences.
 */
declare class AdjustLayoutPreference extends Preference {
	/**
	 * If true, allows font sizes and leading to adjust.
	 */
	allowFontSizeAndLeadingAdjustment: boolean;

	/**
	 * If true, allows locked objects or objects on locked layers to be adjusted.
	 */
	allowLockedObjectsToAdjust: boolean;

	/**
	 * If true, adjust layout is enabled.
	 */
	enableAdjustLayout: boolean;

	/**
	 * If true, margins are adjusted automatically if page size is changed.
	 */
	enableAutoAdjustMargins: boolean;

	/**
	 * If true, imposes the font size restriction during the adjustment.
	 */
	imposeFontSizeRestriction: boolean;

	/**
	 * maximum font size after adjustment in points
	 */
	maximumFontSize: number;

	/**
	 * minimum font size after adjustment in points
	 */
	minimumFontSize: number;

}

/**
 * A preferences object.
 */
declare class Preference {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the Preference (a Application, Document, XmlStory, Spread, FindChangeTransparencySetting, FindChangeStrokeTransparencySetting, FindChangeFillTransparencySetting, FindChangeContentTransparencySetting, HtmlItem, SignatureField, TextBox, RadioButton, ListBox, ComboBox, CheckBox, MultiStateObject, Button, FormField, Sound, Movie, MediaItem, EPSText, Polygon, GraphicLine, Rectangle, Oval, SplineItem, ImportedPage, PICT, WMF, PDF, EPS, Image, Graphic, Group, EndnoteTextFrame, TextFrame, PageItem, PageItemDefault, TransparencySetting, StrokeTransparencySetting, FillTransparencySetting, ContentTransparencySetting, FindObjectPreference, ChangeObjectPreference, Story, TextVariable, TextWrapPreference, Page, Book, Link, ObjectStyle, MasterSpread, NamedGrid, TextDefault, ParagraphStyle, InsertionPoint, TextStyleRange, Paragraph, TextColumn, Line, Word, Character, Text, FindTextPreference, ChangeTextPreference, FindGrepPreference, ChangeGrepPreference, FindTransliteratePreference, ChangeTransliteratePreference or DataMerge).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Preference[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Preference.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of preferences objects.
 */
declare class Preferences {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Preference with the specified index.
	 * @param index The index.
	 */
	[index: number]: Preference;

	/**
	 * Returns any Preference in the collection.
	 */
	anyItem(): Preference;

	/**
	 * Displays the number of elements in the Preference.
	 */
	count(): number;

	/**
	 * Returns every Preference in the collection.
	 */
	everyItem(): Preference[];

	/**
	 * Returns the first Preference in the collection.
	 */
	firstItem(): Preference;

	/**
	 * Returns the Preference with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Preference;

	/**
	 * Returns the Preferences within the specified range.
	 * @param from The Preference, index, or name at the beginning of the range.
	 * @param to The Preference, index, or name at the end of the range.
	 */
	itemByRange(from: Preference | number | string, to: Preference | number | string): Preference[];

	/**
	 * Returns the last Preference in the collection.
	 */
	lastItem(): Preference;

	/**
	 * Returns the middle Preference in the collection.
	 */
	middleItem(): Preference;

	/**
	 * Returns the Preference whose index follows the specified Preference in the collection.
	 * @param obj The Preference whose index comes before the desired Preference.
	 */
	nextItem(obj: Preference): Preference;

	/**
	 * Returns the Preference with the index previous to the specified index.
	 * @param obj The index of the Preference that follows the desired Preference.
	 */
	previousItem(obj: Preference): Preference;

	/**
	 * Generates a string which, if executed, will return the Preference.
	 */
	toSource(): string;

}

/**
 * Scripting environment preferences.
 */
declare class ScriptPreference extends Preference {
	/**
	 * If true, enables redraw during script execution.
	 */
	enableRedraw: boolean;

	/**
	 * The measurement unit used during script processing.
	 */
	measurementUnit: AutoEnum | MeasurementUnits;

	/**
	 * The path to the Scripts folder for the application.
	 */
	readonly scriptsFolder: File;

	/**
	 * A list of the scripts in the Scripts folder. Can return: Array of Array of 2 Strings or Files.
	 */
	readonly scriptsList: any[];

	/**
	 * Controls the display of dialogs and alerts during script processing.
	 */
	userInteractionLevel: UserInteractionLevels;

	/**
	 * The version of the scripting environment.
	 */
	version: string | number;

}

/**
 * Color management settings.
 */
declare class ColorSetting extends Preference {
	/**
	 * If true, uses LAB alternates for spot colors when available.
	 */
	accurateLABSpots: boolean;

	/**
	 * The current color management system settings configuration. Note: For information on possible values, see CMS settings list.
	 */
	cmsSettings: string;

	/**
	 * A list of valid color management system settings configurations.
	 */
	readonly cmsSettingsList: string[];

	/**
	 * The file path of the CSF file to use.
	 */
	cmsSettingsPath: File;

	/**
	 * The policy for handling colors in a CMYK color model, including reading and embedding color profiles, resolving mismatches between embedded color profiles and the working space, and moving colors between documents.
	 */
	cmykPolicy: ColorSettingsPolicy;

	/**
	 * If true, enables color management.
	 */
	enableColorManagement: boolean;

	/**
	 * The color management module (CMM) for mapping color space gamuts between documents.
	 */
	engine: string;

	/**
	 * The available color engines.
	 */
	readonly engineList: string[];

	/**
	 * If true, uses idealized black for CMYK-to-RGB or CMYK-to-Gray conversions to print or export.
	 */
	idealizedBlackToExport: boolean;

	/**
	 * If true, uses idealized black for CMYK-to-RGB or CMYK-to-Gray conversions to the screen.
	 */
	idealizedBlackToScreen: boolean;

	/**
	 * The default rendering intent.
	 */
	intent: DefaultRenderingIntent;

	/**
	 * If true, displays a prompt when opening a file whose embedded color profile does not match the current working space. The prompt provides the option to override the default mismatch behavior.
	 */
	mismatchAskWhenOpening: boolean;

	/**
	 * If true, displays a prompt when importing an object (via pasting, drag-and-drop, or other similar methods) whose colors do not match the current working space. The prompt provides the option to override the default mismatch behavior.
	 */
	mismatchAskWhenPasting: boolean;

	/**
	 * If true, displays a prompt when opening a file that does not have an embedded color profile. The prompt provides the option to assign a color profile.
	 */
	missingAskWhenOpening: boolean;

	/**
	 * The policy for handling colors in an RGB color model, including reading and embedding color profiles, handling mismatches between embedded color profiles and the working space, and moving colors from one document to another.
	 */
	rgbPolicy: ColorSettingsPolicy;

	/**
	 * If true, uses black point compensation to ensure that shadow detail is preserved by simulating the full dynamic range of the output device.
	 */
	useBPC: boolean;

	/**
	 * The current CMYK profile.
	 */
	workingSpaceCMYK: string;

	/**
	 * A list of valid CMYK color profiles.
	 */
	readonly workingSpaceCMYKList: string[];

	/**
	 * The current RGB profile.
	 */
	workingSpaceRGB: string;

	/**
	 * A list of valid RGB color profiles.
	 */
	readonly workingSpaceRGBList: string[];

}

/**
 * Find/change text options.
 */
declare class FindChangeTextOption extends Preference {
	/**
	 * If true, finds strings whose use of case matches the find text string. If false, finds strings that match the find text string regardless of case.
	 */
	caseSensitive: boolean;

	/**
	 * If true, ignore diacs in the find/change query.
	 */
	ignoreDiacritics: boolean;

	/**
	 * If true, ignore kashidas in the find/change query.
	 */
	ignoreKashidas: boolean;

	/**
	 * If true, includes footnotes in the find/change query.
	 */
	includeFootnotes: boolean;

	/**
	 * If true, includes hidden layers in the find/change query.
	 */
	includeHiddenLayers: boolean;

	/**
	 * If true, includes locked layers in the find query.
	 */
	includeLockedLayersForFind: boolean;

	/**
	 * If true, includes locked stories in the find query.
	 */
	includeLockedStoriesForFind: boolean;

	/**
	 * If true, includes master pages in the find/change query.
	 */
	includeMasterPages: boolean;

	/**
	 * If true, finds only text that matches the specified kana type.
	 */
	kanaSensitive: boolean;

	/**
	 * If true, search in the backward direction.
	 */
	searchBackwards: boolean;

	/**
	 * If true, finds only the complete find text string. If false, also finds strings that contain the find text string.
	 */
	wholeWord: boolean;

	/**
	 * If true, finds only text that matches the specified character width.
	 */
	widthSensitive: boolean;

}

/**
 * Find/change grep options.
 */
declare class FindChangeGrepOption extends Preference {
	/**
	 * If true, includes footnotes in the find/change query.
	 */
	includeFootnotes: boolean;

	/**
	 * If true, includes hidden layers in the find/change query.
	 */
	includeHiddenLayers: boolean;

	/**
	 * If true, includes locked layers in the find query.
	 */
	includeLockedLayersForFind: boolean;

	/**
	 * If true, includes locked stories in the find query.
	 */
	includeLockedStoriesForFind: boolean;

	/**
	 * If true, includes master pages in the find/change query.
	 */
	includeMasterPages: boolean;

	/**
	 * If true, finds only text that matches the specified kana type.
	 */
	kanaSensitive: boolean;

	/**
	 * If true, search in the backward direction.
	 */
	searchBackwards: boolean;

	/**
	 * If true, finds only text that matches the specified character width.
	 */
	widthSensitive: boolean;

}

/**
 * Find/change glyph options.
 */
declare class FindChangeGlyphOption extends Preference {
	/**
	 * If true, includes footnotes in the find/change query.
	 */
	includeFootnotes: boolean;

	/**
	 * If true, includes hidden layers in the find/change query.
	 */
	includeHiddenLayers: boolean;

	/**
	 * If true, includes locked layers in the find query.
	 */
	includeLockedLayersForFind: boolean;

	/**
	 * If true, includes locked stories in the find query.
	 */
	includeLockedStoriesForFind: boolean;

	/**
	 * If true, includes master pages in the find/change query.
	 */
	includeMasterPages: boolean;

	/**
	 * If true, search in the backward direction.
	 */
	searchBackwards: boolean;

}

/**
 * Find/change object options.
 */
declare class FindChangeObjectOption extends Preference {
	/**
	 * If true, includes footnotes in the find/change query.
	 */
	includeFootnotes: boolean;

	/**
	 * If true, includes hidden layers in the find/change query.
	 */
	includeHiddenLayers: boolean;

	/**
	 * If true, includes locked layers in the find query.
	 */
	includeLockedLayersForFind: boolean;

	/**
	 * If true, includes locked stories in the find query.
	 */
	includeLockedStoriesForFind: boolean;

	/**
	 * If true, includes master pages in the find/change query.
	 */
	includeMasterPages: boolean;

	/**
	 * The object type.
	 */
	objectType: ObjectTypes;

}

/**
 * Find/change transliterate options.
 */
declare class FindChangeTransliterateOption extends Preference {
	/**
	 * If true, finds strings whose use of case matches the find text string. If false, finds strings that match the find text string regardless of case.
	 */
	caseSensitive: boolean;

	/**
	 * If true, includes footnotes in the find/change query.
	 */
	includeFootnotes: boolean;

	/**
	 * If true, includes hidden layers in the find/change query.
	 */
	includeHiddenLayers: boolean;

	/**
	 * If true, includes locked layers in the find query.
	 */
	includeLockedLayersForFind: boolean;

	/**
	 * If true, includes locked stories in the find query.
	 */
	includeLockedStoriesForFind: boolean;

	/**
	 * If true, includes master pages in the find/change query.
	 */
	includeMasterPages: boolean;

	/**
	 * If true, finds only text that matches the specified kana type.
	 */
	kanaSensitive: boolean;

	/**
	 * If true, search in the backward direction.
	 */
	searchBackwards: boolean;

	/**
	 * If true, finds only the complete find text string. If false, also finds strings that contain the find text string.
	 */
	wholeWord: boolean;

	/**
	 * If true, finds only text that matches the specified character width.
	 */
	widthSensitive: boolean;

}

/**
 * Find text preferences.
 */
declare class FindTextPreference extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean | NothingEnum;

	/**
	 * The character style to search for or change to.
	 */
	appliedCharacterStyle: string | NothingEnum | CharacterStyle;

	/**
	 * The conditions to search for or change to. Specify the "nothing" enum for "Any" or an empty list for "[Unconditional]".
	 */
	appliedConditions: string[] | NothingEnum | Condition[];

	/**
	 * The font applied to the FindTextPreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum;

	/**
	 * The language to search for or change to.
	 */
	appliedLanguage: string | NothingEnum | Language | LanguageWithVendors;

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string | NothingEnum;

	/**
	 * The paragraph style to search for or change to.
	 */
	appliedParagraphStyle: string | NothingEnum | ParagraphStyle;

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number | NothingEnum;

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number | NothingEnum;

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean | NothingEnum;

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle | NothingEnum;

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum;

	/**
	 * Bullet character.
	 */
	readonly bulletChar: Bullet | NothingEnum;

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType | NothingEnum;

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string | NothingEnum;

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string | NothingEnum;

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean | NothingEnum;

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum;

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum;

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum;

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum;

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string | NothingEnum;

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum;

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum;

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number | NothingEnum;

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number | NothingEnum;

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number | NothingEnum;

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a fill color, to search for or change to.
	 */
	fillColor: string | NothingEnum | Swatch;

	/**
	 * The tint (as a percentage) of the fill color of the FindTextPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum;

	/**
	 * The FindTextPreference to find.
	 */
	findWhat: string | NothingEnum;

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | NothingEnum;

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum;

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum;

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment | NothingEnum;

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number | NothingEnum;

	/**
	 * The horizontal scaling applied to the FindTextPreference.
	 */
	horizontalScale: number | NothingEnum;

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean | NothingEnum;

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean | NothingEnum;

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean | NothingEnum;

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum;

	/**
	 * The paragraph alignment.
	 */
	justification: Justification | NothingEnum;

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum;

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean | NothingEnum;

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number | NothingEnum;

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number | NothingEnum;

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean | NothingEnum;

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean | NothingEnum;

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number | NothingEnum;

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean | NothingEnum;

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum;

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum;

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum;

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum;

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum;

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum;

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum;

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum;

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum;

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum;

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum;

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum;

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum;

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em. .
	 */
	kerningValue: number | NothingEnum;

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes | NothingEnum;

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string | NothingEnum;

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType | NothingEnum;

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | NothingEnum;

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum;

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum;

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel | NothingEnum;

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | NothingEnum;

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum;

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults | NothingEnum;

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum;

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean | NothingEnum;

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string | NothingEnum;

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean | NothingEnum;

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string | NothingEnum;

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string | NothingEnum;

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number | NothingEnum;

	/**
	 * Numbering restart policies.
	 */
	readonly numberingRestartPolicies: NumberingRestartPolicy | NothingEnum;

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number | NothingEnum;

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum;

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum;

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum;

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum;

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum;

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum;

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum;

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum;

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum;

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum;

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum;

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum;

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum;

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum;

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum;

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum;

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum;

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum;

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum;

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum;

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum;

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions | NothingEnum;

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean | NothingEnum;

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions | NothingEnum;

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long.
	 */
	paragraphKashidaWidth: number | NothingEnum;

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum;

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum;

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean | NothingEnum;

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | NothingEnum;

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean | NothingEnum;

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum;

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum;

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum;

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum;

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum;

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum;

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum;

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum;

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum;

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum;

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum;

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum;

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum;

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum;

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum;

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum;

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum;

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum;

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum;

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum;

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum;

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing | NothingEnum;

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum;

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum;

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum;

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum;

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum;

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification | NothingEnum;

	/**
	 * The skew angle of the FindTextPreference.
	 */
	skew: number | NothingEnum;

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | NothingEnum;

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | NothingEnum;

	/**
	 * The minimum space after a span or a split column.
	 */
	spanColumnMinSpaceAfter: number | NothingEnum;

	/**
	 * The minimum space before a span or a split column.
	 */
	spanColumnMinSpaceBefore: number | NothingEnum;

	/**
	 * Whether a paragraph should be a single column, span columns or split columns.
	 */
	spanColumnType: SpanColumnTypeOptions | NothingEnum;

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions | NothingEnum;

	/**
	 * The inside gutter if the paragraph splits columns.
	 */
	splitColumnInsideGutter: number | NothingEnum;

	/**
	 * The outside gutter if the paragraph splits columns.
	 */
	splitColumnOutsideGutter: number | NothingEnum;

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum;

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum;

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum;

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum;

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a stroke color, to search for or change to.
	 */
	strokeColor: string | NothingEnum | Swatch;

	/**
	 * The tint (as a percentage) of the stroke color of the FindTextPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum;

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum;

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum;

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum;

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum;

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum;

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum;

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean | NothingEnum;

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum;

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum;

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum;

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum;

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum;

	/**
	 * The vertical scaling applied to the FindTextPreference.
	 */
	verticalScale: number | NothingEnum;

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum;

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum;

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum;

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum;

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum;

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum;

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum;

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum;

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum;

}

/**
 * Find grep preferences.
 */
declare class FindGrepPreference extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean | NothingEnum;

	/**
	 * The character style to search for or change to.
	 */
	appliedCharacterStyle: string | NothingEnum | CharacterStyle;

	/**
	 * The conditions to search for or change to. Specify the "nothing" enum for "Any" or an empty list for "[Unconditional]".
	 */
	appliedConditions: string[] | NothingEnum | Condition[];

	/**
	 * The font applied to the FindGrepPreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum;

	/**
	 * The language to search for or change to.
	 */
	appliedLanguage: string | NothingEnum | Language | LanguageWithVendors;

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string | NothingEnum;

	/**
	 * The paragraph style to search for or change to.
	 */
	appliedParagraphStyle: string | NothingEnum | ParagraphStyle;

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number | NothingEnum;

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number | NothingEnum;

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean | NothingEnum;

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle | NothingEnum;

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum;

	/**
	 * Bullet character.
	 */
	readonly bulletChar: Bullet | NothingEnum;

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType | NothingEnum;

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string | NothingEnum;

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string | NothingEnum;

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean | NothingEnum;

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum;

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum;

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum;

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum;

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string | NothingEnum;

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum;

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum;

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number | NothingEnum;

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number | NothingEnum;

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number | NothingEnum;

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a fill color, to search for or change to.
	 */
	fillColor: string | NothingEnum | Swatch;

	/**
	 * The tint (as a percentage) of the fill color of the FindGrepPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum;

	/**
	 * The FindGrepPreference to find.
	 */
	findWhat: string | NothingEnum;

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | NothingEnum;

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum;

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum;

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment | NothingEnum;

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number | NothingEnum;

	/**
	 * The horizontal scaling applied to the FindGrepPreference.
	 */
	horizontalScale: number | NothingEnum;

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean | NothingEnum;

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean | NothingEnum;

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean | NothingEnum;

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum;

	/**
	 * The paragraph alignment.
	 */
	justification: Justification | NothingEnum;

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum;

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean | NothingEnum;

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number | NothingEnum;

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number | NothingEnum;

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean | NothingEnum;

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean | NothingEnum;

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number | NothingEnum;

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean | NothingEnum;

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum;

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum;

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum;

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum;

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum;

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum;

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum;

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum;

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum;

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum;

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum;

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum;

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum;

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em. .
	 */
	kerningValue: number | NothingEnum;

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes | NothingEnum;

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string | NothingEnum;

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType | NothingEnum;

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | NothingEnum;

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum;

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum;

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel | NothingEnum;

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | NothingEnum;

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum;

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults | NothingEnum;

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum;

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean | NothingEnum;

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string | NothingEnum;

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean | NothingEnum;

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string | NothingEnum;

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string | NothingEnum;

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number | NothingEnum;

	/**
	 * Numbering restart policies.
	 */
	readonly numberingRestartPolicies: NumberingRestartPolicy | NothingEnum;

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number | NothingEnum;

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum;

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum;

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum;

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum;

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum;

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum;

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum;

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum;

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum;

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum;

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum;

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum;

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum;

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum;

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum;

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum;

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum;

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum;

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum;

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum;

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum;

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions | NothingEnum;

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean | NothingEnum;

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions | NothingEnum;

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long.
	 */
	paragraphKashidaWidth: number | NothingEnum;

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum;

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum;

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean | NothingEnum;

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | NothingEnum;

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean | NothingEnum;

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum;

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum;

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum;

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum;

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum;

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum;

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum;

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum;

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum;

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum;

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum;

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum;

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum;

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum;

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum;

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum;

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum;

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum;

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum;

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum;

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum;

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing | NothingEnum;

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum;

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum;

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum;

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum;

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum;

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification | NothingEnum;

	/**
	 * The skew angle of the FindGrepPreference.
	 */
	skew: number | NothingEnum;

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | NothingEnum;

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | NothingEnum;

	/**
	 * The minimum space after a span or a split column.
	 */
	spanColumnMinSpaceAfter: number | NothingEnum;

	/**
	 * The minimum space before a span or a split column.
	 */
	spanColumnMinSpaceBefore: number | NothingEnum;

	/**
	 * Whether a paragraph should be a single column, span columns or split columns.
	 */
	spanColumnType: SpanColumnTypeOptions | NothingEnum;

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions | NothingEnum;

	/**
	 * The inside gutter if the paragraph splits columns.
	 */
	splitColumnInsideGutter: number | NothingEnum;

	/**
	 * The outside gutter if the paragraph splits columns.
	 */
	splitColumnOutsideGutter: number | NothingEnum;

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum;

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum;

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum;

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum;

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a stroke color, to search for or change to.
	 */
	strokeColor: string | NothingEnum | Swatch;

	/**
	 * The tint (as a percentage) of the stroke color of the FindGrepPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum;

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum;

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum;

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum;

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum;

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum;

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum;

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean | NothingEnum;

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum;

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum;

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum;

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum;

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum;

	/**
	 * The vertical scaling applied to the FindGrepPreference.
	 */
	verticalScale: number | NothingEnum;

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum;

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum;

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum;

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum;

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum;

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum;

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum;

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum;

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum;

}

/**
 * Find glyph preferences.
 */
declare class FindGlyphPreference extends Preference {
	/**
	 * The font applied to the FindGlyphPreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum;

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum;

	/**
	 * The GID/CID of the glyph.
	 */
	glyphID: number | NothingEnum;

	/**
	 * The Registry Ordered font group.
	 */
	rosFontGroup: [string, string] | NothingEnum;

}

/**
 * Find object preferences.
 */
declare class FindObjectPreference extends Preference {
	/**
	 * The metadata property to use as source of actual text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String or NothingEnum enumerator.
	 */
	actualMetadataProperty: any;

	/**
	 * The source type of actual text.
	 */
	actualTextSourceType: SourceType | NothingEnum;

	/**
	 * The metadata property to use as source of alternate text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String or NothingEnum enumerator.
	 */
	altMetadataProperty: any;

	/**
	 * The source type of alternate text.
	 */
	altTextSourceType: SourceType | NothingEnum;

	/**
	 * The point in the anchored object to position.
	 */
	anchorPoint: AnchorPoint | NothingEnum;

	/**
	 * The space above an above-line anchored object.
	 */
	anchorSpaceAbove: number | NothingEnum;

	/**
	 * The horizontal (x) offset of the anchored object.
	 */
	anchorXoffset: number | NothingEnum;

	/**
	 * The vertical (y) offset of the anchored object. Corresponds to the space after property for above line positioning.
	 */
	anchorYoffset: number | NothingEnum;

	/**
	 * The position of the anchored object relative to the anchor.
	 */
	anchoredPosition: AnchorPosition | NothingEnum;

	/**
	 * The applied object style(s).
	 */
	appliedObjectStyles: string | NothingEnum | ObjectStyle;

	/**
	 * The tag type of page item.
	 */
	applyTagType: TagType | NothingEnum;

	/**
	 * If true, text wraps on the master spread apply to that spread only, and not to any pages the master spread has been applied to.
	 */
	applyToMasterPageOnly: boolean | NothingEnum;

	/**
	 * The arrowhead alignment applied to the FindObjectPreference.
	 */
	arrowHeadAlignment: ArrowHeadAlignmentEnum | NothingEnum;

	/**
	 * The reference point for auto sizing of text frame. Reference point is automatically adjusted to the suitable value depending on the auto-sizing type value. As an example, top left reference point becomes top center for height only dimension.
	 */
	autoSizingReferencePoint: AutoSizingReferenceEnum | NothingEnum;

	/**
	 * Auto-sizing type of text frame. Based on type, reference value is automatically adjusted. For example, for height only type, top-left reference point becomes top-center. Recommended to change auto-sizing type, after setting other auto-sizing attributes.
	 */
	autoSizingType: AutoSizingTypeEnum | NothingEnum;

	/**
	 * The grid line color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	baselineFrameGridColor: [number, number, number] | UIColors | NothingEnum;

	/**
	 * The distance between grid lines.
	 */
	baselineFrameGridIncrement: number | NothingEnum;

	/**
	 * The location (top of page, top margin, top of frame, or frame inset) on which to base the custom baseline grid.
	 */
	baselineFrameGridRelativeOption: BaselineFrameGridRelativeOption | NothingEnum;

	/**
	 * The amount in measurement units to crop the bottom edge of a graphic.
	 */
	bottomCrop: number | NothingEnum;

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerOption: CornerOptions | NothingEnum;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerRadius: number | NothingEnum;

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerOption: CornerOptions | NothingEnum;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerRadius: number | NothingEnum;

	/**
	 * Transparency settings for the content of the FindObjectPreference.
	 */
	readonly contentTransparencySettings: FindChangeContentTransparencySetting | NothingEnum;

	/**
	 * The contour type.
	 */
	contourType: ContourOptionsTypes | NothingEnum;

	/**
	 * The custom actual text entered by the user.
	 */
	customActualText: string | NothingEnum;

	/**
	 * The custom alternate text entered by the user.
	 */
	customAltText: string | NothingEnum;

	/**
	 * The end shape of an open path.
	 */
	endCap: EndCap | NothingEnum;

	/**
	 * The corner join applied to the FindObjectPreference.
	 */
	endJoin: EndJoin | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the FindObjectPreference. .
	 */
	fillColor: Swatch | NothingEnum | string;

	/**
	 * The percent of tint to use in the FindObjectPreference's fill color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum;

	/**
	 * Transparency settings for the fill applied to the FindObjectPreference.
	 */
	readonly fillTransparencySettings: FindChangeFillTransparencySetting | NothingEnum;

	/**
	 * The distance between the baseline of the text and the top inset of the text frame or cell.
	 */
	firstBaselineOffset: FirstBaseline | NothingEnum;

	/**
	 * The point with which to align the image empty when fitting in a frame. For information, see frame fitting options.
	 */
	fittingAlignment: AnchorPoint | NothingEnum;

	/**
	 * The frame fitting option to apply to placed or pasted content if the frame is empty. Can be applied to a frame, object style, or document or to the application.
	 */
	fittingOnEmptyFrame: EmptyFrameFittingOptions | NothingEnum;

	/**
	 * If true, enable overrides to document footnote options.
	 */
	footnotesEnableOverrides: boolean | NothingEnum;

	/**
	 * Minimum Spacing Before First Footnote.
	 */
	footnotesMinimumSpacing: number | NothingEnum;

	/**
	 * Space between footnotes.
	 */
	footnotesSpaceBetween: number | NothingEnum;

	/**
	 * If true, enable straddling footnotes.
	 */
	footnotesSpanAcrossColumns: boolean | NothingEnum;

	/**
	 * The type of text frame.
	 */
	frameType: FrameTypes | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of a dashed, dotted, or striped stroke. For information, see stroke type.
	 */
	gapColor: Swatch | NothingEnum;

	/**
	 * The tint as a percentage of the gap color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	gapTint: number | NothingEnum;

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean | NothingEnum;

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG. .
	 */
	gifOptionsPalette: GIFOptionsPalette | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the fill of the FindObjectPreference. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the stroke of the FindObjectPreference. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum;

	/**
	 * The horizontal reference point on the page. Valid only when anchored position is custom.
	 */
	horizontalReferencePoint: AnchoredRelativeTo | NothingEnum;

	/**
	 * If true, ignores text wrap settings for drawn or placed objects in the text frame. .
	 */
	ignoreWrap: boolean | NothingEnum;

	/**
	 * Alignment applied to images.
	 */
	imageAlignment: ImageAlignmentType | NothingEnum;

	/**
	 * Allows user to select the image format for conversion.
	 */
	imageConversionType: ImageFormat | NothingEnum;

	/**
	 * The export resolution.
	 */
	imageExportResolution: ImageResolution | NothingEnum;

	/**
	 * Image page break settings to be used with objects.
	 */
	imagePageBreak: ImagePageBreakType | NothingEnum;

	/**
	 * Space After applied to images.
	 */
	imageSpaceAfter: number | NothingEnum;

	/**
	 * Space Before applied to images.
	 */
	imageSpaceBefore: number | NothingEnum;

	/**
	 * If true, creates interior clipping paths within the surrounding clipping path. Note: Valid only when clipping type is alpha channel or detect edges. .
	 */
	includeInsideEdges: boolean | NothingEnum;

	/**
	 * The amount to offset text from the edges of the text frame, specified either as a single value applied uniformly to all sides of the text frame or as an array of 4 values in the format [top inset, left inset, bottom inset, right inset].
	 */
	insetSpacing: number | [number, number, number, number] | NothingEnum;

	/**
	 * If true, inverts the text wrap.
	 */
	inverse: boolean | NothingEnum;

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat | NothingEnum;

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF. .
	 */
	jpegOptionsQuality: JPEGOptionsQuality | NothingEnum;

	/**
	 * The scaling applied to the arrowhead at the start of the path. (Range: 1 to 1000).
	 */
	leftArrowHeadScale: number | NothingEnum;

	/**
	 * The amount in measurement units to crop the left edge of a graphic.
	 */
	leftCrop: number | NothingEnum;

	/**
	 * The arrowhead applied to the start of the path. .
	 */
	leftLineEnd: ArrowHead | NothingEnum;

	/**
	 * If true, prevents manual positioning of the anchored object.
	 */
	lockPosition: boolean | NothingEnum;

	/**
	 * The minimum distance between the baseline of the text and the top inset of the text frame or cell.
	 */
	minimumFirstBaselineOffset: number | NothingEnum;

	/**
	 * The minimum height for auto-sizing of the text frame.
	 */
	minimumHeightForAutoSizing: number | NothingEnum;

	/**
	 * The minimum width for auto-sizing of the text frame.
	 */
	minimumWidthForAutoSizing: number | NothingEnum;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum;

	/**
	 * If true, the FindObjectPreference does not print.
	 */
	nonprinting: boolean | NothingEnum;

	/**
	 * If true, adjust the position of characters at the edges of the frame to provide a better appearance.
	 */
	opticalMarginAlignment: boolean | NothingEnum;

	/**
	 * The point size used as the basis for calculating optical margin alignment. (Range: 0.1 to 1296).
	 */
	opticalMarginSize: number | NothingEnum;

	/**
	 * If true, the FindObjectPreference's fill color overprints any underlying objects. If false, the fill color knocks out the underlying colors.
	 */
	overprintFill: boolean | NothingEnum;

	/**
	 * If true, the gap color overprints any underlying colors. If false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean | NothingEnum;

	/**
	 * If true, the FindObjectPreference's stroke color overprints any underlying objects. If false, the stroke color knocks out theunderlying colors.
	 */
	overprintStroke: boolean | NothingEnum;

	/**
	 * If true, pins the position of the anchored object within the text frame top and bottom.
	 */
	pinPosition: boolean | NothingEnum;

	/**
	 * The point in the referenced object relative to which to position the anchored object. Notes: Valid only when anchored position is custom.
	 */
	positionReferencePoint: AnchorPoint | NothingEnum;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Preserve Appearance from Layout.
	 */
	preserveAppearanceFromLayout: PreserveAppearanceFromLayoutEnum | NothingEnum;

	/**
	 * The scaling applied to the arrowhead at the end of the path. (Range: 1 to 1000).
	 */
	rightArrowHeadScale: number | NothingEnum;

	/**
	 * The amount in measurement units to crop the right edge of a graphic.
	 */
	rightCrop: number | NothingEnum;

	/**
	 * The arrowhead applied to the end of the path.
	 */
	rightLineEnd: ArrowHead | NothingEnum;

	/**
	 * If true, the position of the anchored object is relative to the binding spine of the page or spread.
	 */
	spineRelative: boolean | NothingEnum;

	/**
	 * The amount to offset the baseline grid.
	 */
	startingOffsetForBaselineFrameGrid: number | NothingEnum;

	/**
	 * The direction of the story.
	 */
	storyDirection: StoryDirectionOptions | NothingEnum;

	/**
	 * The orientation of the text in the story.
	 */
	storyOrientation: StoryHorizontalOrVertical | NothingEnum;

	/**
	 * The stroke alignment applied to the FindObjectPreference.
	 */
	strokeAlignment: StrokeAlignment | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the FindObjectPreference.
	 */
	strokeColor: Swatch | NothingEnum | string;

	/**
	 * The corner adjustment applied to the FindObjectPreference.
	 */
	strokeCornerAdjustment: StrokeCornerAdjustment | NothingEnum;

	/**
	 * The dash and gap measurements that define the pattern of a custom dashed line. Define up to six values (in points) in the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number[] | NothingEnum;

	/**
	 * The percent of tint to use in object's stroke color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum;

	/**
	 * Transparency settings for the stroke.
	 */
	readonly strokeTransparencySettings: FindChangeStrokeTransparencySetting | NothingEnum;

	/**
	 * The name of the stroke style to apply.
	 */
	strokeType: StrokeStyle | NothingEnum | string;

	/**
	 * The weight (in points) to apply to the FindObjectPreference's stroke.
	 */
	strokeWeight: number | NothingEnum;

	/**
	 * The number of columns in the text frame. Note: Depending on the value of use fixed column width, the number of columns can change automatically when the text frame size changes.
	 */
	textColumnCount: number | NothingEnum;

	/**
	 * The column width of the columns in the text frame.
	 */
	textColumnFixedWidth: number | NothingEnum;

	/**
	 * The space between columns in the text frame.
	 */
	textColumnGutter: number | NothingEnum;

	/**
	 * The text wrap mode. .
	 */
	textWrapMode: TextWrapModes | NothingEnum;

	/**
	 * The minimum space between text and the edges of the wrapped object. Specify four values in the format [top, left, bottom, right]. . Can return: Ordered array containing top:Unit, left:Unit, bottom:Unit, right:Unit or NothingEnum enumerator.
	 */
	textWrapOffset: any;

	/**
	 * Text wrap side options.
	 */
	textWrapSide: TextWrapSideOptions | NothingEnum;

	/**
	 * The amount in measurement units to crop the top edge of a graphic.
	 */
	topCrop: number | NothingEnum;

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	topLeftCornerOption: CornerOptions | NothingEnum;

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.
	 */
	topLeftCornerRadius: number | NothingEnum;

	/**
	 * The shape to apply to the top right corner of rectangular shapes.
	 */
	topRightCornerOption: CornerOptions | NothingEnum;

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes.
	 */
	topRightCornerRadius: number | NothingEnum;

	/**
	 * Transparency settings.
	 */
	readonly transparencySettings: FindChangeTransparencySetting | NothingEnum;

	/**
	 * If true, uses a custom baseline frame grid.
	 */
	useCustomBaselineFrameGrid: boolean | NothingEnum;

	/**
	 * If true, maintains column width when the text frame is resized. If false, causes columns to resize when the text frame is resized. Note: When true, resizing the frame can change the number of columns in the frame.
	 */
	useFixedColumnWidth: boolean | NothingEnum;

	/**
	 * If true, image page break settings will be used in objects.
	 */
	useImagePageBreak: boolean | NothingEnum;

	/**
	 * If true, minimum height value is used during the auto-sizing of text frame. .
	 */
	useMinimumHeightForAutoSizing: boolean | NothingEnum;

	/**
	 * If true, minimum width value is used during the auto-sizing of text frame. .
	 */
	useMinimumWidthForAutoSizing: boolean | NothingEnum;

	/**
	 * If true, line-breaks are not introduced after auto sizing. .
	 */
	useNoLineBreaksForAutoSizing: boolean | NothingEnum;

	/**
	 * If true, the text wrap path has been explicitly modified by the user.
	 */
	readonly userModifiedWrap: boolean | NothingEnum;

	/**
	 * The vertical alignment of the text content. .
	 */
	verticalJustification: VerticalJustification | NothingEnum;

	/**
	 * The vertical reference point on the page. Valid when anchored position is custom.
	 */
	verticalReferencePoint: VerticallyRelativeTo | NothingEnum;

	/**
	 * The maximum amount of vertical space between two paragraphs. Note: Valid only when vertical justification is justified; the specified amount is applied in addition to the space before or space after values defined for the paragraph.
	 */
	verticalThreshold: number | NothingEnum;

	/**
	 * Provides the actual text for the object
	 */
	actualText(): string;

	/**
	 * Provides the alternate text for the object
	 */
	altText(): string;

}

/**
 * Find transliterate preferences.
 */
declare class FindTransliteratePreference extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean | NothingEnum;

	/**
	 * The character style to search for or change to.
	 */
	appliedCharacterStyle: string | NothingEnum | CharacterStyle;

	/**
	 * The conditions to search for or change to. Specify the "nothing" enum for "Any" or an empty list for "[Unconditional]".
	 */
	appliedConditions: string[] | NothingEnum | Condition[];

	/**
	 * The font applied to the FindTransliteratePreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum;

	/**
	 * The language to search for or change to.
	 */
	appliedLanguage: string | NothingEnum | Language | LanguageWithVendors;

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string | NothingEnum;

	/**
	 * The paragraph style to search for or change to.
	 */
	appliedParagraphStyle: string | NothingEnum | ParagraphStyle;

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number | NothingEnum;

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number | NothingEnum;

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean | NothingEnum;

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle | NothingEnum;

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum;

	/**
	 * Bullet character.
	 */
	readonly bulletChar: Bullet | NothingEnum;

	/**
	 * The alignment of the bullet character.
	 */
	bulletsAlignment: ListAlignment | NothingEnum;

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType | NothingEnum;

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string | NothingEnum;

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string | NothingEnum;

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean | NothingEnum;

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum;

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum;

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum;

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum;

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string | NothingEnum;

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum;

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum;

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number | NothingEnum;

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number | NothingEnum;

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number | NothingEnum;

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a fill color, to search for or change to.
	 */
	fillColor: string | NothingEnum | Swatch;

	/**
	 * The tint (as a percentage) of the fill color of the FindTransliteratePreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum;

	/**
	 * The character type to find.
	 */
	findCharacterType: FindChangeTransliterateCharacterTypes | NothingEnum;

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | NothingEnum;

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum;

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum;

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment | NothingEnum;

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number | NothingEnum;

	/**
	 * The horizontal scaling applied to the FindTransliteratePreference.
	 */
	horizontalScale: number | NothingEnum;

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean | NothingEnum;

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean | NothingEnum;

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean | NothingEnum;

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum;

	/**
	 * The paragraph alignment.
	 */
	justification: Justification | NothingEnum;

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum;

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean | NothingEnum;

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number | NothingEnum;

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number | NothingEnum;

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean | NothingEnum;

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean | NothingEnum;

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number | NothingEnum;

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean | NothingEnum;

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum;

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum;

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum;

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum;

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum;

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum;

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum;

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum;

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum;

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum;

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum;

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum;

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum;

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em. .
	 */
	kerningValue: number | NothingEnum;

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes | NothingEnum;

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string | NothingEnum;

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType | NothingEnum;

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | NothingEnum;

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum;

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum;

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel | NothingEnum;

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | NothingEnum;

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum;

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults | NothingEnum;

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum;

	/**
	 * The alignment of the number.
	 */
	numberingAlignment: ListAlignment | NothingEnum;

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean | NothingEnum;

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string | NothingEnum;

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean | NothingEnum;

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string | NothingEnum;

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string | NothingEnum;

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number | NothingEnum;

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number | NothingEnum;

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum;

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum;

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum;

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum;

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum;

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum;

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum;

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum;

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum;

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum;

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum;

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum;

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum;

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum;

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum;

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum;

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum;

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum;

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum;

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum;

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum;

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions | NothingEnum;

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean | NothingEnum;

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions | NothingEnum;

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum;

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum;

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean | NothingEnum;

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | NothingEnum;

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean | NothingEnum;

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum;

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum;

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum;

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum;

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum;

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum;

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum;

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum;

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum;

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum;

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum;

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum;

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum;

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum;

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum;

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum;

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum;

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum;

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum;

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum;

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum;

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing | NothingEnum;

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum;

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum;

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum;

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum;

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum;

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification | NothingEnum;

	/**
	 * The skew angle of the FindTransliteratePreference.
	 */
	skew: number | NothingEnum;

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | NothingEnum;

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | NothingEnum;

	/**
	 * The minimum space after a span or a split column.
	 */
	spanColumnMinSpaceAfter: number | NothingEnum;

	/**
	 * The minimum space before a span or a split column.
	 */
	spanColumnMinSpaceBefore: number | NothingEnum;

	/**
	 * Whether a paragraph should be a single column, span columns or split columns.
	 */
	spanColumnType: SpanColumnTypeOptions | NothingEnum;

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions | NothingEnum;

	/**
	 * The inside gutter if the paragraph splits columns.
	 */
	splitColumnInsideGutter: number | NothingEnum;

	/**
	 * The outside gutter if the paragraph splits columns.
	 */
	splitColumnOutsideGutter: number | NothingEnum;

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum;

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum;

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum;

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum;

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a stroke color, to search for or change to.
	 */
	strokeColor: string | NothingEnum | Swatch;

	/**
	 * The tint (as a percentage) of the stroke color of the FindTransliteratePreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum;

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum;

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum;

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum;

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum;

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum;

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum;

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean | NothingEnum;

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum;

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum;

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum;

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum;

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum;

	/**
	 * The vertical scaling applied to the FindTransliteratePreference.
	 */
	verticalScale: number | NothingEnum;

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum;

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum;

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum;

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum;

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum;

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum;

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum;

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum;

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum;

}

/**
 * Change text preferences.
 */
declare class ChangeTextPreference extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean | NothingEnum;

	/**
	 * The character style to search for or change to.
	 */
	appliedCharacterStyle: string | NothingEnum | CharacterStyle;

	/**
	 * The conditions to search for or change to. Specify the "nothing" enum for "Any" or an empty list for "[Unconditional]".
	 */
	appliedConditions: string[] | NothingEnum | Condition[];

	/**
	 * The font applied to the ChangeTextPreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum;

	/**
	 * The language to search for or change to.
	 */
	appliedLanguage: string | NothingEnum | Language | LanguageWithVendors;

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string | NothingEnum;

	/**
	 * The paragraph style to search for or change to.
	 */
	appliedParagraphStyle: string | NothingEnum | ParagraphStyle;

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number | NothingEnum;

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number | NothingEnum;

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean | NothingEnum;

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle | NothingEnum;

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum;

	/**
	 * Bullet character.
	 */
	readonly bulletChar: Bullet | NothingEnum;

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType | NothingEnum;

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string | NothingEnum;

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string | NothingEnum;

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean | NothingEnum;

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum;

	/**
	 * The change conditions mode, change either replaces applied conditions or adds to applied conditions.
	 */
	changeConditionsMode: ChangeConditionsModes | NothingEnum;

	/**
	 * The replacement ChangeTextPreference.
	 */
	changeTo: string | NothingEnum;

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum;

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum;

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum;

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string | NothingEnum;

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum;

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum;

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number | NothingEnum;

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number | NothingEnum;

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number | NothingEnum;

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a fill color, to search for or change to.
	 */
	fillColor: string | NothingEnum | Swatch;

	/**
	 * The tint (as a percentage) of the fill color of the ChangeTextPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum;

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | NothingEnum;

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum;

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum;

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment | NothingEnum;

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number | NothingEnum;

	/**
	 * The horizontal scaling applied to the ChangeTextPreference.
	 */
	horizontalScale: number | NothingEnum;

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean | NothingEnum;

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean | NothingEnum;

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean | NothingEnum;

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum;

	/**
	 * The paragraph alignment.
	 */
	justification: Justification | NothingEnum;

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum;

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean | NothingEnum;

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number | NothingEnum;

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number | NothingEnum;

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean | NothingEnum;

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean | NothingEnum;

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number | NothingEnum;

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean | NothingEnum;

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum;

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum;

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum;

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum;

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum;

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum;

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum;

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum;

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum;

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum;

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum;

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum;

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum;

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em. .
	 */
	kerningValue: number | NothingEnum;

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes | NothingEnum;

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string | NothingEnum;

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType | NothingEnum;

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | NothingEnum;

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum;

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum;

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel | NothingEnum;

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | NothingEnum;

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum;

	/**
	 * The XML tag applied to the element.
	 */
	markupTag: string | NothingEnum | XMLTag;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum;

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults | NothingEnum;

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum;

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean | NothingEnum;

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string | NothingEnum;

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean | NothingEnum;

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string | NothingEnum;

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string | NothingEnum;

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number | NothingEnum;

	/**
	 * Numbering restart policies.
	 */
	readonly numberingRestartPolicies: NumberingRestartPolicy | NothingEnum;

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number | NothingEnum;

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum;

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum;

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum;

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum;

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum;

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum;

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum;

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum;

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum;

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum;

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum;

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum;

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum;

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum;

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum;

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum;

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum;

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum;

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum;

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum;

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum;

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions | NothingEnum;

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean | NothingEnum;

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions | NothingEnum;

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long.
	 */
	paragraphKashidaWidth: number | NothingEnum;

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum;

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum;

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean | NothingEnum;

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | NothingEnum;

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean | NothingEnum;

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum;

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum;

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum;

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum;

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum;

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum;

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum;

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum;

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum;

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum;

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum;

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum;

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum;

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum;

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum;

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum;

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum;

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum;

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum;

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum;

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum;

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing | NothingEnum;

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum;

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum;

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum;

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum;

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum;

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification | NothingEnum;

	/**
	 * The skew angle of the ChangeTextPreference.
	 */
	skew: number | NothingEnum;

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | NothingEnum;

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | NothingEnum;

	/**
	 * The minimum space after a span or a split column.
	 */
	spanColumnMinSpaceAfter: number | NothingEnum;

	/**
	 * The minimum space before a span or a split column.
	 */
	spanColumnMinSpaceBefore: number | NothingEnum;

	/**
	 * Whether a paragraph should be a single column, span columns or split columns.
	 */
	spanColumnType: SpanColumnTypeOptions | NothingEnum;

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions | NothingEnum;

	/**
	 * The inside gutter if the paragraph splits columns.
	 */
	splitColumnInsideGutter: number | NothingEnum;

	/**
	 * The outside gutter if the paragraph splits columns.
	 */
	splitColumnOutsideGutter: number | NothingEnum;

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum;

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum;

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum;

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum;

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a stroke color, to search for or change to.
	 */
	strokeColor: string | NothingEnum | Swatch;

	/**
	 * The tint (as a percentage) of the stroke color of the ChangeTextPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum;

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum;

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum;

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum;

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum;

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum;

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum;

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean | NothingEnum;

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum;

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum;

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum;

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum;

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum;

	/**
	 * The vertical scaling applied to the ChangeTextPreference.
	 */
	verticalScale: number | NothingEnum;

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum;

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum;

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum;

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum;

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum;

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum;

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum;

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum;

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum;

}

/**
 * Change grep preferences.
 */
declare class ChangeGrepPreference extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean | NothingEnum;

	/**
	 * The character style to search for or change to.
	 */
	appliedCharacterStyle: string | NothingEnum | CharacterStyle;

	/**
	 * The conditions to search for or change to. Specify the "nothing" enum for "Any" or an empty list for "[Unconditional]".
	 */
	appliedConditions: string[] | NothingEnum | Condition[];

	/**
	 * The font applied to the ChangeGrepPreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum;

	/**
	 * The language to search for or change to.
	 */
	appliedLanguage: string | NothingEnum | Language | LanguageWithVendors;

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string | NothingEnum;

	/**
	 * The paragraph style to search for or change to.
	 */
	appliedParagraphStyle: string | NothingEnum | ParagraphStyle;

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number | NothingEnum;

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number | NothingEnum;

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean | NothingEnum;

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle | NothingEnum;

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum;

	/**
	 * Bullet character.
	 */
	readonly bulletChar: Bullet | NothingEnum;

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType | NothingEnum;

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string | NothingEnum;

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string | NothingEnum;

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean | NothingEnum;

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum;

	/**
	 * The change conditions mode, change either replaces applied conditions or adds to applied conditions.
	 */
	changeConditionsMode: ChangeConditionsModes | NothingEnum;

	/**
	 * The replacement ChangeGrepPreference.
	 */
	changeTo: string | NothingEnum;

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum;

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum;

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum;

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string | NothingEnum;

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum;

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum;

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number | NothingEnum;

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number | NothingEnum;

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number | NothingEnum;

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a fill color, to search for or change to.
	 */
	fillColor: string | NothingEnum | Swatch;

	/**
	 * The tint (as a percentage) of the fill color of the ChangeGrepPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum;

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | NothingEnum;

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum;

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum;

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment | NothingEnum;

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number | NothingEnum;

	/**
	 * The horizontal scaling applied to the ChangeGrepPreference.
	 */
	horizontalScale: number | NothingEnum;

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean | NothingEnum;

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean | NothingEnum;

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean | NothingEnum;

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum;

	/**
	 * The paragraph alignment.
	 */
	justification: Justification | NothingEnum;

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum;

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean | NothingEnum;

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number | NothingEnum;

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number | NothingEnum;

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean | NothingEnum;

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean | NothingEnum;

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number | NothingEnum;

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean | NothingEnum;

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum;

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum;

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum;

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum;

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum;

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum;

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum;

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum;

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum;

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum;

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum;

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum;

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum;

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em. .
	 */
	kerningValue: number | NothingEnum;

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes | NothingEnum;

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string | NothingEnum;

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType | NothingEnum;

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | NothingEnum;

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum;

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum;

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel | NothingEnum;

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | NothingEnum;

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum;

	/**
	 * The XML tag applied to the element.
	 */
	markupTag: string | NothingEnum | XMLTag;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum;

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults | NothingEnum;

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum;

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean | NothingEnum;

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string | NothingEnum;

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean | NothingEnum;

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string | NothingEnum;

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string | NothingEnum;

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number | NothingEnum;

	/**
	 * Numbering restart policies.
	 */
	readonly numberingRestartPolicies: NumberingRestartPolicy | NothingEnum;

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number | NothingEnum;

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum;

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum;

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum;

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum;

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum;

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum;

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum;

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum;

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum;

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum;

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum;

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum;

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum;

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum;

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum;

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum;

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum;

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum;

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum;

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum;

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum;

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions | NothingEnum;

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean | NothingEnum;

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions | NothingEnum;

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long.
	 */
	paragraphKashidaWidth: number | NothingEnum;

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum;

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum;

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean | NothingEnum;

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | NothingEnum;

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean | NothingEnum;

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum;

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum;

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum;

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum;

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum;

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum;

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum;

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum;

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum;

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum;

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum;

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum;

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum;

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum;

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum;

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum;

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum;

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum;

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum;

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum;

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum;

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing | NothingEnum;

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum;

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum;

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum;

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum;

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum;

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification | NothingEnum;

	/**
	 * The skew angle of the ChangeGrepPreference.
	 */
	skew: number | NothingEnum;

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | NothingEnum;

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | NothingEnum;

	/**
	 * The minimum space after a span or a split column.
	 */
	spanColumnMinSpaceAfter: number | NothingEnum;

	/**
	 * The minimum space before a span or a split column.
	 */
	spanColumnMinSpaceBefore: number | NothingEnum;

	/**
	 * Whether a paragraph should be a single column, span columns or split columns.
	 */
	spanColumnType: SpanColumnTypeOptions | NothingEnum;

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions | NothingEnum;

	/**
	 * The inside gutter if the paragraph splits columns.
	 */
	splitColumnInsideGutter: number | NothingEnum;

	/**
	 * The outside gutter if the paragraph splits columns.
	 */
	splitColumnOutsideGutter: number | NothingEnum;

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum;

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum;

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum;

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum;

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a stroke color, to search for or change to.
	 */
	strokeColor: string | NothingEnum | Swatch;

	/**
	 * The tint (as a percentage) of the stroke color of the ChangeGrepPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum;

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum;

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum;

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum;

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum;

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum;

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum;

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean | NothingEnum;

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum;

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum;

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum;

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum;

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum;

	/**
	 * The vertical scaling applied to the ChangeGrepPreference.
	 */
	verticalScale: number | NothingEnum;

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum;

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum;

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum;

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum;

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum;

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum;

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum;

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum;

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum;

}

/**
 * Change glyph preferences.
 */
declare class ChangeGlyphPreference extends Preference {
	/**
	 * The font applied to the ChangeGlyphPreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum;

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum;

	/**
	 * The GID/CID of the glyph.
	 */
	glyphID: number | NothingEnum;

}

/**
 * Change object preferences.
 */
declare class ChangeObjectPreference extends Preference {
	/**
	 * The metadata property to use as source of actual text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String or NothingEnum enumerator.
	 */
	actualMetadataProperty: any;

	/**
	 * The source type of actual text.
	 */
	actualTextSourceType: SourceType | NothingEnum;

	/**
	 * The metadata property to use as source of alternate text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String or NothingEnum enumerator.
	 */
	altMetadataProperty: any;

	/**
	 * The source type of alternate text.
	 */
	altTextSourceType: SourceType | NothingEnum;

	/**
	 * The point in the anchored object to position.
	 */
	anchorPoint: AnchorPoint | NothingEnum;

	/**
	 * The space above an above-line anchored object.
	 */
	anchorSpaceAbove: number | NothingEnum;

	/**
	 * The horizontal (x) offset of the anchored object.
	 */
	anchorXoffset: number | NothingEnum;

	/**
	 * The vertical (y) offset of the anchored object. Corresponds to the space after property for above line positioning.
	 */
	anchorYoffset: number | NothingEnum;

	/**
	 * The position of the anchored object relative to the anchor.
	 */
	anchoredPosition: AnchorPosition | NothingEnum;

	/**
	 * The applied object style(s).
	 */
	appliedObjectStyles: string | NothingEnum | ObjectStyle;

	/**
	 * The tag type of page item.
	 */
	applyTagType: TagType | NothingEnum;

	/**
	 * If true, text wraps on the master spread apply to that spread only, and not to any pages the master spread has been applied to.
	 */
	applyToMasterPageOnly: boolean | NothingEnum;

	/**
	 * The arrowhead alignment applied to the ChangeObjectPreference.
	 */
	arrowHeadAlignment: ArrowHeadAlignmentEnum | NothingEnum;

	/**
	 * The reference point for auto sizing of text frame. Reference point is automatically adjusted to the suitable value depending on the auto-sizing type value. As an example, top left reference point becomes top center for height only dimension.
	 */
	autoSizingReferencePoint: AutoSizingReferenceEnum | NothingEnum;

	/**
	 * Auto-sizing type of text frame. Based on type, reference value is automatically adjusted. For example, for height only type, top-left reference point becomes top-center. Recommended to change auto-sizing type, after setting other auto-sizing attributes.
	 */
	autoSizingType: AutoSizingTypeEnum | NothingEnum;

	/**
	 * The grid line color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	baselineFrameGridColor: [number, number, number] | UIColors | NothingEnum;

	/**
	 * The distance between grid lines.
	 */
	baselineFrameGridIncrement: number | NothingEnum;

	/**
	 * The location (top of page, top margin, top of frame, or frame inset) on which to base the custom baseline grid.
	 */
	baselineFrameGridRelativeOption: BaselineFrameGridRelativeOption | NothingEnum;

	/**
	 * The amount in measurement units to crop the bottom edge of a graphic.
	 */
	bottomCrop: number | NothingEnum;

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerOption: CornerOptions | NothingEnum;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerRadius: number | NothingEnum;

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerOption: CornerOptions | NothingEnum;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerRadius: number | NothingEnum;

	/**
	 * Transparency settings for the content of the ChangeObjectPreference.
	 */
	readonly contentTransparencySettings: FindChangeContentTransparencySetting | NothingEnum;

	/**
	 * The contour type.
	 */
	contourType: ContourOptionsTypes | NothingEnum;

	/**
	 * The custom actual text entered by the user.
	 */
	customActualText: string | NothingEnum;

	/**
	 * The custom alternate text entered by the user.
	 */
	customAltText: string | NothingEnum;

	/**
	 * The end shape of an open path.
	 */
	endCap: EndCap | NothingEnum;

	/**
	 * The corner join applied to the ChangeObjectPreference.
	 */
	endJoin: EndJoin | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the ChangeObjectPreference. .
	 */
	fillColor: Swatch | NothingEnum | string;

	/**
	 * The percent of tint to use in the ChangeObjectPreference's fill color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum;

	/**
	 * Transparency settings for the fill applied to the ChangeObjectPreference.
	 */
	readonly fillTransparencySettings: FindChangeFillTransparencySetting | NothingEnum;

	/**
	 * The distance between the baseline of the text and the top inset of the text frame or cell.
	 */
	firstBaselineOffset: FirstBaseline | NothingEnum;

	/**
	 * The point with which to align the image empty when fitting in a frame. For information, see frame fitting options.
	 */
	fittingAlignment: AnchorPoint | NothingEnum;

	/**
	 * The frame fitting option to apply to placed or pasted content if the frame is empty. Can be applied to a frame, object style, or document or to the application.
	 */
	fittingOnEmptyFrame: EmptyFrameFittingOptions | NothingEnum;

	/**
	 * If true, enable overrides to document footnote options.
	 */
	footnotesEnableOverrides: boolean | NothingEnum;

	/**
	 * Minimum Spacing Before First Footnote.
	 */
	footnotesMinimumSpacing: number | NothingEnum;

	/**
	 * Space between footnotes.
	 */
	footnotesSpaceBetween: number | NothingEnum;

	/**
	 * If true, enable straddling footnotes.
	 */
	footnotesSpanAcrossColumns: boolean | NothingEnum;

	/**
	 * The type of text frame.
	 */
	frameType: FrameTypes | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of a dashed, dotted, or striped stroke. For information, see stroke type.
	 */
	gapColor: Swatch | NothingEnum;

	/**
	 * The tint as a percentage of the gap color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	gapTint: number | NothingEnum;

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean | NothingEnum;

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG. .
	 */
	gifOptionsPalette: GIFOptionsPalette | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the fill of the ChangeObjectPreference. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the stroke of the ChangeObjectPreference. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum;

	/**
	 * The horizontal reference point on the page. Valid only when anchored position is custom.
	 */
	horizontalReferencePoint: AnchoredRelativeTo | NothingEnum;

	/**
	 * If true, ignores text wrap settings for drawn or placed objects in the text frame. .
	 */
	ignoreWrap: boolean | NothingEnum;

	/**
	 * Alignment applied to images.
	 */
	imageAlignment: ImageAlignmentType | NothingEnum;

	/**
	 * Allows user to select the image format for conversion.
	 */
	imageConversionType: ImageFormat | NothingEnum;

	/**
	 * The export resolution.
	 */
	imageExportResolution: ImageResolution | NothingEnum;

	/**
	 * Image page break settings to be used with objects.
	 */
	imagePageBreak: ImagePageBreakType | NothingEnum;

	/**
	 * Space After applied to images.
	 */
	imageSpaceAfter: number | NothingEnum;

	/**
	 * Space Before applied to images.
	 */
	imageSpaceBefore: number | NothingEnum;

	/**
	 * If true, creates interior clipping paths within the surrounding clipping path. Note: Valid only when clipping type is alpha channel or detect edges. .
	 */
	includeInsideEdges: boolean | NothingEnum;

	/**
	 * The amount to offset text from the edges of the text frame, specified either as a single value applied uniformly to all sides of the text frame or as an array of 4 values in the format [top inset, left inset, bottom inset, right inset].
	 */
	insetSpacing: number | [number, number, number, number] | NothingEnum;

	/**
	 * If true, inverts the text wrap.
	 */
	inverse: boolean | NothingEnum;

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat | NothingEnum;

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF. .
	 */
	jpegOptionsQuality: JPEGOptionsQuality | NothingEnum;

	/**
	 * The scaling applied to the arrowhead at the start of the path. (Range: 1 to 1000).
	 */
	leftArrowHeadScale: number | NothingEnum;

	/**
	 * The amount in measurement units to crop the left edge of a graphic.
	 */
	leftCrop: number | NothingEnum;

	/**
	 * The arrowhead applied to the start of the path. .
	 */
	leftLineEnd: ArrowHead | NothingEnum;

	/**
	 * If true, prevents manual positioning of the anchored object.
	 */
	lockPosition: boolean | NothingEnum;

	/**
	 * The minimum distance between the baseline of the text and the top inset of the text frame or cell.
	 */
	minimumFirstBaselineOffset: number | NothingEnum;

	/**
	 * The minimum height for auto-sizing of the text frame.
	 */
	minimumHeightForAutoSizing: number | NothingEnum;

	/**
	 * The minimum width for auto-sizing of the text frame.
	 */
	minimumWidthForAutoSizing: number | NothingEnum;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum;

	/**
	 * If true, the ChangeObjectPreference does not print.
	 */
	nonprinting: boolean | NothingEnum;

	/**
	 * If true, adjust the position of characters at the edges of the frame to provide a better appearance.
	 */
	opticalMarginAlignment: boolean | NothingEnum;

	/**
	 * The point size used as the basis for calculating optical margin alignment. (Range: 0.1 to 1296).
	 */
	opticalMarginSize: number | NothingEnum;

	/**
	 * If true, the ChangeObjectPreference's fill color overprints any underlying objects. If false, the fill color knocks out the underlying colors.
	 */
	overprintFill: boolean | NothingEnum;

	/**
	 * If true, the gap color overprints any underlying colors. If false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean | NothingEnum;

	/**
	 * If true, the ChangeObjectPreference's stroke color overprints any underlying objects. If false, the stroke color knocks out theunderlying colors.
	 */
	overprintStroke: boolean | NothingEnum;

	/**
	 * If true, pins the position of the anchored object within the text frame top and bottom.
	 */
	pinPosition: boolean | NothingEnum;

	/**
	 * The point in the referenced object relative to which to position the anchored object. Notes: Valid only when anchored position is custom.
	 */
	positionReferencePoint: AnchorPoint | NothingEnum;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Preserve Appearance from Layout.
	 */
	preserveAppearanceFromLayout: PreserveAppearanceFromLayoutEnum | NothingEnum;

	/**
	 * The scaling applied to the arrowhead at the end of the path. (Range: 1 to 1000).
	 */
	rightArrowHeadScale: number | NothingEnum;

	/**
	 * The amount in measurement units to crop the right edge of a graphic.
	 */
	rightCrop: number | NothingEnum;

	/**
	 * The arrowhead applied to the end of the path.
	 */
	rightLineEnd: ArrowHead | NothingEnum;

	/**
	 * If true, the position of the anchored object is relative to the binding spine of the page or spread.
	 */
	spineRelative: boolean | NothingEnum;

	/**
	 * The amount to offset the baseline grid.
	 */
	startingOffsetForBaselineFrameGrid: number | NothingEnum;

	/**
	 * The direction of the story.
	 */
	storyDirection: StoryDirectionOptions | NothingEnum;

	/**
	 * The orientation of the text in the story.
	 */
	storyOrientation: StoryHorizontalOrVertical | NothingEnum;

	/**
	 * The stroke alignment applied to the ChangeObjectPreference.
	 */
	strokeAlignment: StrokeAlignment | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the ChangeObjectPreference.
	 */
	strokeColor: Swatch | NothingEnum | string;

	/**
	 * The corner adjustment applied to the ChangeObjectPreference.
	 */
	strokeCornerAdjustment: StrokeCornerAdjustment | NothingEnum;

	/**
	 * The dash and gap measurements that define the pattern of a custom dashed line. Define up to six values (in points) in the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number[] | NothingEnum;

	/**
	 * The percent of tint to use in object's stroke color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum;

	/**
	 * Transparency settings for the stroke.
	 */
	readonly strokeTransparencySettings: FindChangeStrokeTransparencySetting | NothingEnum;

	/**
	 * The name of the stroke style to apply.
	 */
	strokeType: StrokeStyle | NothingEnum | string;

	/**
	 * The weight (in points) to apply to the ChangeObjectPreference's stroke.
	 */
	strokeWeight: number | NothingEnum;

	/**
	 * The number of columns in the text frame. Note: Depending on the value of use fixed column width, the number of columns can change automatically when the text frame size changes.
	 */
	textColumnCount: number | NothingEnum;

	/**
	 * The column width of the columns in the text frame.
	 */
	textColumnFixedWidth: number | NothingEnum;

	/**
	 * The space between columns in the text frame.
	 */
	textColumnGutter: number | NothingEnum;

	/**
	 * The text wrap mode. .
	 */
	textWrapMode: TextWrapModes | NothingEnum;

	/**
	 * The minimum space between text and the edges of the wrapped object. Specify four values in the format [top, left, bottom, right]. . Can return: Ordered array containing top:Unit, left:Unit, bottom:Unit, right:Unit or NothingEnum enumerator.
	 */
	textWrapOffset: any;

	/**
	 * Text wrap side options.
	 */
	textWrapSide: TextWrapSideOptions | NothingEnum;

	/**
	 * The amount in measurement units to crop the top edge of a graphic.
	 */
	topCrop: number | NothingEnum;

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	topLeftCornerOption: CornerOptions | NothingEnum;

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.
	 */
	topLeftCornerRadius: number | NothingEnum;

	/**
	 * The shape to apply to the top right corner of rectangular shapes.
	 */
	topRightCornerOption: CornerOptions | NothingEnum;

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes.
	 */
	topRightCornerRadius: number | NothingEnum;

	/**
	 * Transparency settings.
	 */
	readonly transparencySettings: FindChangeTransparencySetting | NothingEnum;

	/**
	 * If true, uses a custom baseline frame grid.
	 */
	useCustomBaselineFrameGrid: boolean | NothingEnum;

	/**
	 * If true, maintains column width when the text frame is resized. If false, causes columns to resize when the text frame is resized. Note: When true, resizing the frame can change the number of columns in the frame.
	 */
	useFixedColumnWidth: boolean | NothingEnum;

	/**
	 * If true, image page break settings will be used in objects.
	 */
	useImagePageBreak: boolean | NothingEnum;

	/**
	 * If true, minimum height value is used during the auto-sizing of text frame. .
	 */
	useMinimumHeightForAutoSizing: boolean | NothingEnum;

	/**
	 * If true, minimum width value is used during the auto-sizing of text frame. .
	 */
	useMinimumWidthForAutoSizing: boolean | NothingEnum;

	/**
	 * If true, line-breaks are not introduced after auto sizing. .
	 */
	useNoLineBreaksForAutoSizing: boolean | NothingEnum;

	/**
	 * If true, the text wrap path has been explicitly modified by the user.
	 */
	readonly userModifiedWrap: boolean | NothingEnum;

	/**
	 * The vertical alignment of the text content. .
	 */
	verticalJustification: VerticalJustification | NothingEnum;

	/**
	 * The vertical reference point on the page. Valid when anchored position is custom.
	 */
	verticalReferencePoint: VerticallyRelativeTo | NothingEnum;

	/**
	 * The maximum amount of vertical space between two paragraphs. Note: Valid only when vertical justification is justified; the specified amount is applied in addition to the space before or space after values defined for the paragraph.
	 */
	verticalThreshold: number | NothingEnum;

	/**
	 * Provides the actual text for the object
	 */
	actualText(): string;

	/**
	 * Provides the alternate text for the object
	 */
	altText(): string;

}

/**
 * Change transliterate preferences.
 */
declare class ChangeTransliteratePreference extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean | NothingEnum;

	/**
	 * The character style to search for or change to.
	 */
	appliedCharacterStyle: string | NothingEnum | CharacterStyle;

	/**
	 * The conditions to search for or change to. Specify the "nothing" enum for "Any" or an empty list for "[Unconditional]".
	 */
	appliedConditions: string[] | NothingEnum | Condition[];

	/**
	 * The font applied to the ChangeTransliteratePreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum;

	/**
	 * The language to search for or change to.
	 */
	appliedLanguage: string | NothingEnum | Language | LanguageWithVendors;

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string | NothingEnum;

	/**
	 * The paragraph style to search for or change to.
	 */
	appliedParagraphStyle: string | NothingEnum | ParagraphStyle;

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number | NothingEnum;

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number | NothingEnum;

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean | NothingEnum;

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle | NothingEnum;

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum;

	/**
	 * Bullet character.
	 */
	readonly bulletChar: Bullet | NothingEnum;

	/**
	 * The alignment of the bullet character.
	 */
	bulletsAlignment: ListAlignment | NothingEnum;

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType | NothingEnum;

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string | NothingEnum;

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string | NothingEnum;

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean | NothingEnum;

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum;

	/**
	 * The character type to which to change the found character type.
	 */
	changeCharacterType: FindChangeTransliterateCharacterTypes | NothingEnum;

	/**
	 * The change conditions mode, change either replaces applied conditions or adds to applied conditions.
	 */
	changeConditionsMode: ChangeConditionsModes | NothingEnum;

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum;

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum;

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum;

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string | NothingEnum;

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum;

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum;

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number | NothingEnum;

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number | NothingEnum;

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number | NothingEnum;

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a fill color, to search for or change to.
	 */
	fillColor: string | NothingEnum | Swatch;

	/**
	 * The tint (as a percentage) of the fill color of the ChangeTransliteratePreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum;

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | NothingEnum;

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum;

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum;

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment | NothingEnum;

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number | NothingEnum;

	/**
	 * The horizontal scaling applied to the ChangeTransliteratePreference.
	 */
	horizontalScale: number | NothingEnum;

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean | NothingEnum;

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean | NothingEnum;

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean | NothingEnum;

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum;

	/**
	 * The paragraph alignment.
	 */
	justification: Justification | NothingEnum;

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum;

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean | NothingEnum;

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number | NothingEnum;

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number | NothingEnum;

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean | NothingEnum;

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean | NothingEnum;

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number | NothingEnum;

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean | NothingEnum;

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum;

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum;

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum;

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum;

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum;

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum;

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum;

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum;

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum;

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum;

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum;

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum;

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum;

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em. .
	 */
	kerningValue: number | NothingEnum;

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes | NothingEnum;

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string | NothingEnum;

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType | NothingEnum;

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | NothingEnum;

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum;

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum;

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel | NothingEnum;

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | NothingEnum;

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum;

	/**
	 * The XML tag applied to the element.
	 */
	markupTag: string | NothingEnum | XMLTag;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum;

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults | NothingEnum;

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum;

	/**
	 * The alignment of the number.
	 */
	numberingAlignment: ListAlignment | NothingEnum;

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean | NothingEnum;

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string | NothingEnum;

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean | NothingEnum;

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string | NothingEnum;

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string | NothingEnum;

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number | NothingEnum;

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number | NothingEnum;

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum;

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum;

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum;

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum;

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum;

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum;

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum;

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum;

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum;

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum;

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum;

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum;

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum;

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum;

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum;

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum;

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum;

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum;

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum;

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum;

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum;

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions | NothingEnum;

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean | NothingEnum;

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions | NothingEnum;

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum;

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum;

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean | NothingEnum;

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | NothingEnum;

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean | NothingEnum;

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum;

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum;

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum;

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum;

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum;

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum;

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum;

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum;

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum;

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum;

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum;

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum;

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum;

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum;

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum;

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum;

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum;

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum;

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum;

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum;

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum;

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing | NothingEnum;

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum;

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum;

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum;

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum;

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum;

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification | NothingEnum;

	/**
	 * The skew angle of the ChangeTransliteratePreference.
	 */
	skew: number | NothingEnum;

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | NothingEnum;

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | NothingEnum;

	/**
	 * The minimum space after a span or a split column.
	 */
	spanColumnMinSpaceAfter: number | NothingEnum;

	/**
	 * The minimum space before a span or a split column.
	 */
	spanColumnMinSpaceBefore: number | NothingEnum;

	/**
	 * Whether a paragraph should be a single column, span columns or split columns.
	 */
	spanColumnType: SpanColumnTypeOptions | NothingEnum;

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions | NothingEnum;

	/**
	 * The inside gutter if the paragraph splits columns.
	 */
	splitColumnInsideGutter: number | NothingEnum;

	/**
	 * The outside gutter if the paragraph splits columns.
	 */
	splitColumnOutsideGutter: number | NothingEnum;

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum;

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum;

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum;

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum;

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a stroke color, to search for or change to.
	 */
	strokeColor: string | NothingEnum | Swatch;

	/**
	 * The tint (as a percentage) of the stroke color of the ChangeTransliteratePreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum;

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum;

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum;

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum;

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum;

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum;

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum;

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean | NothingEnum;

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum;

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum;

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum;

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum;

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum;

	/**
	 * The vertical scaling applied to the ChangeTransliteratePreference.
	 */
	verticalScale: number | NothingEnum;

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum;

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum;

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum;

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum;

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum;

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum;

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum;

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum;

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum;

}

/**
 * Linking preferences.
 */
declare class LinkingPreference extends Preference {
	/**
	 * If true, link states will be checked at document open time
	 */
	checkLinksAtOpen: boolean;

	/**
	 * If true, missing links will be searched for at document open time
	 */
	findMissingLinksAtOpen: boolean;

	/**
	 * Experimental: The preference for enabling auto tagging of items created through http based links.
	 */
	httpLinksAutoTagAssetsPreference: boolean;

	/**
	 * Experimental: The rendition type for http link.
	 */
	httpLinksRenditionType: LinkResourceRenditionType;

}

/**
 * Export options for InCopy INCX document format.
 */
declare class InCopyExportOption extends Preference {
	/**
	 * If true, export all resources (styles etc), otherwise export resources used by the story.
	 */
	includeAllResources: boolean;

	/**
	 * If true, include graphic proxy data.
	 */
	includeGraphicProxies: boolean;

}

/**
 * A preset that contains all of the print settings.
 */
declare class PrinterPreset {
	/**
	 * If true, prints all printer marks. If false, prints specified printer marks.
	 */
	allPrinterMarks: boolean;

	/**
	 * If true, uses bitmap printing.
	 */
	bitmapPrinting: boolean;

	/**
	 * The resolution for bitmap printing. (Range: 72 to 1200) Note: Valid when bitmap printing is true.
	 */
	bitmapResolution: number;

	/**
	 * The angle override for black ink. (Range: 0 to 360)
	 */
	blackAngle: number;

	/**
	 * The frequency override for black ink. (Range: 1 to 500)
	 */
	blackFrequency: number;

	/**
	 * The height of the bleed area at the bottom of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number | string;

	/**
	 * If true, forces all bleed area settings to be the same, using the most recent bleed measurement setting. If false, allows bleed top, bleed bottom, bleed inside, and bleed outside to have different measurements.
	 */
	bleedChain: boolean;

	/**
	 * The width of the bleed area at the inside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedInside: number | string;

	/**
	 * If true, print bleed marks.
	 */
	bleedMarks: boolean;

	/**
	 * The width of the bleed area at the outside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number | string;

	/**
	 * The height of the bleed area at the top of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedTop: number | string;

	/**
	 * If true, collate printed copies.
	 */
	collating: boolean;

	/**
	 * If true, add small squares of color representing the CMYK inks and tints of gray in 10% increments.
	 */
	colorBars: boolean;

	/**
	 * The color output mode for composites. Note: Not valid when a device-independent PPD is specified.
	 */
	colorOutput: ColorOutputModes;

	/**
	 * The screen angle to use when printing composites. (Range: 0 to 360) Note: Valid only for PostScript or PDF files that use custom screening.
	 */
	compositeAngle: number;

	/**
	 * The screen frequency to use when printing composites. (Range: 1 to 500) Note: Valid only for PostScript or PDF files that use custom screening.
	 */
	compositeFrequency: number;

	/**
	 * The number of copies to print. Note: Not valid when printer is PostScript File.
	 */
	copies: number;

	/**
	 * The color-rendering dictionary (CRD), specified as a CRD name or an enumeration value. Note: Valid only when use color management is true.
	 */
	crd: ColorRenderingDictionary | string;

	/**
	 * Prints crop marks that define where the page should be trimmed.
	 */
	cropMarks: boolean;

	/**
	 * The angle override for cyan ink. (Range: 0 to 360)
	 */
	cyanAngle: number;

	/**
	 * The frequency override for cyan ink. (Range: 1 to 500)
	 */
	cyanFrequency: number;

	/**
	 * The format in which to send image data to the printer.
	 */
	dataFormat: DataFormat;

	/**
	 * If true, downloads all fonts listed in the selected PPD. Valid only when font downloading is complete or subset.
	 */
	downloadPPDFonts: boolean;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The name of the transparency flattener preset.
	 */
	flattenerPresetName: string;

	/**
	 * The direction in which to flip the printed image.
	 */
	flip: Flip;

	/**
	 * Controls how fonts are downloaded to the printer.
	 */
	fontDownloading: FontDownloading;

	/**
	 * If true, ignores flattener spread overrides.
	 */
	ignoreSpreadOverrides: boolean;

	/**
	 * If true, includes the slug area in the printed document.
	 */
	includeSlugToPrint: boolean;

	/**
	 * The index of the PrinterPreset within its containing object.
	 */
	readonly index: number;

	/**
	 * The rendering intent. Note: Valid only when use color management is true.
	 */
	intent: RenderingIntent;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The angle override for magenta ink. (Range: 0 to 360)
	 */
	magentaAngle: number;

	/**
	 * The frequency override for magenta ink. (Range: 1 to 500)
	 */
	magentaFrequency: number;

	/**
	 * The stroke weight (in points) for printer marks.
	 */
	markLineWeight: MarkLineWeight;

	/**
	 * The distance to offset the page marks from the edge of the page.
	 */
	markOffset: number | string;

	/**
	 * The type of printer marks, either an enum value or the name of a custom marks file.
	 */
	markType: MarkTypes | string;

	/**
	 * The name of the PrinterPreset.
	 */
	name: string;

	/**
	 * If true, prints the document as a negative.
	 */
	negative: boolean;

	/**
	 * If true, replaces bitmap images with OPI links.
	 */
	omitBitmaps: boolean;

	/**
	 * If true, replaces EPS images with OPI links.
	 */
	omitEPS: boolean;

	/**
	 * If true, replaces PDF images with OPI links.
	 */
	omitPDF: boolean;

	/**
	 * If true, prints graphics that are either OPI comments stored in imported EPS files or linked using OPI comments. For information on linking files using OPI comments, see omit EPS, omit PDF, or omit bitmaps.
	 */
	opiImageReplacement: boolean;

	/**
	 * If true, prints the filename, page number, current date and time, and color separation name.
	 */
	pageInformationMarks: boolean;

	/**
	 * The position of the page on the printing medium. Note: Valid only when tile is false.
	 */
	pagePosition: PagePositions;

	/**
	 * The space between document pages on the printing medium.
	 */
	paperGap: number | string;

	/**
	 * The paper height. Note: Valid only when paper size is custom or scale mode is scale width height.
	 */
	paperHeight: PaperSize | number;

	/**
	 * The amount of space to offset the page from the left edge of the imageable area.
	 */
	paperOffset: number | string;

	/**
	 * The paper size, specified as either a string or an enumeration. For information on paper size names, see paper size list.
	 */
	paperSize: PaperSizes | string;

	/**
	 * A list of the available paper sizes.
	 */
	readonly paperSizeList: string[];

	/**
	 * If true, uses transverse orientation.
	 */
	paperTransverse: boolean;

	/**
	 * The paper width. Note: Valid only when paper size is custom or scale mode is scale width height.
	 */
	paperWidth: PaperSize | number;

	/**
	 * The parent of the PrinterPreset (a Application).
	 */
	readonly parent: Application;

	/**
	 * The PostScript level of the printer.
	 */
	postscriptLevel: PostScriptLevels;

	/**
	 * The PPD, specified as a PPD name or an enumeration.
	 */
	ppd: PPDValues | string;

	/**
	 * Available PPDs.
	 */
	readonly ppdList: string[];

	/**
	 * If true, prints the black ink. Note: Valid only when trapping is off.
	 */
	printBlack: boolean;

	/**
	 * If true, prints blank pages. Note: Valid only when trapping is off.
	 */
	printBlankPages: boolean;

	/**
	 * If true, prints the cyan ink. Note: Valid only when trapping is off.
	 */
	printCyan: boolean;

	/**
	 * The PostScript file to print to. Note: Valid only when the current printer is defined as postscript file.
	 */
	printFile: File;

	/**
	 * If true, prints visible guides and baseline grids. Note: Valid only when trapping is off.
	 */
	printGuidesGrids: boolean;

	/**
	 * The layers to print.
	 */
	printLayers: PrintLayerOptions;

	/**
	 * If true, prints the magenta ink. Note: Valid only when trapping is off.
	 */
	printMagenta: boolean;

	/**
	 * If true, prints master pages.
	 */
	printMasterPages: boolean;

	/**
	 * If true, prints non-printing objects. Note: Valid only when trapping is off.
	 */
	printNonprinting: boolean;

	/**
	 * The orientation of the printed page.
	 */
	printPageOrientation: PrintPageOrientation;

	/**
	 * If true, prints each spread with all spread pages on a single sheet. If false, prints spread pages as separate pages.
	 */
	printSpreads: boolean;

	/**
	 * If true, prints the yellow ink. Note: Valid only when trapping is off.
	 */
	printYellow: boolean;

	/**
	 * The current printer.
	 */
	printer: Printer | string;

	/**
	 * Available printers.
	 */
	readonly printerList: string[];

	/**
	 * The color profile.
	 */
	profile: Profile | string;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * If true, prints small targets outside the page area for aligning color separations.
	 */
	registrationMarks: boolean;

	/**
	 * If true, prints pages in reverse order.
	 */
	reverseOrder: boolean;

	/**
	 * The amount (as a percentage) that the page height is scaled during printing. (Range: 0 to 1000) Note: Valid only when scale mode is scale width height.
	 */
	scaleHeight: number;

	/**
	 * The policy for scaling the page. Note: Valid only when printing from Layout view.
	 */
	scaleMode: ScaleModes;

	/**
	 * If true, constrains the proportions of the scaling; uses the most recent value for either scale width or scale height to define both values. Note: Valid only when scale mode is scale width height.
	 */
	scaleProportional: boolean;

	/**
	 * The amount (as a percentage)that the page width is scaled during printing. (Range: 0 to 1000) Note: Valid only when scale mode is scale width height.
	 */
	scaleWidth: number;

	/**
	 * The ink screening settings for composite gray output in PostScript or PDF format. .
	 */
	screening: Screeening | string;

	/**
	 * Lists the ink screenings available in the PPD. Note: Valid only when color output is separations or in rip separations.
	 */
	readonly screeningList: string[];

	/**
	 * The image data sent to the printer or file.
	 */
	sendImageData: ImageDataTypes;

	/**
	 * The sequence of pages to print.
	 */
	sequence: Sequences;

	/**
	 * If true, simulates the effects of overprinting spot inks with different neutral density values by converting spot colors to process colors for printing. Note: Not valid when the color output mode is defined to leave color profiles unchanged.
	 */
	simulateOverprint: boolean;

	/**
	 * The source of the color management system. Note: Valid only when use color management is true.
	 */
	sourceSpace: SourceSpaces;

	/**
	 * If true, prints all text as black unless text has the color None or Paper or a color value that equals white. If false, prints colored text, such as blue hyperlinks, in halftone patterns. Note: Valid only when trapping is off.
	 */
	textAsBlack: boolean;

	/**
	 * If true, prints thumbnails. Note: Valid only when trapping is off and tile is false.
	 */
	thumbnails: boolean;

	/**
	 * The number of thumbnails per page.
	 */
	thumbnailsPerPage: ThumbsPerPage;

	/**
	 * If true, tiles pages.
	 */
	tile: boolean;

	/**
	 * The amount of tiling overlap. Note: Valid only when tiling is true and tiling type is not manual.
	 */
	tilingOverlap: number;

	/**
	 * The tiling type. Note: Valid only when tiling is true.
	 */
	tilingType: TilingTypes;

	/**
	 * The type of trapping.
	 */
	trapping: Trapping;

	/**
	 * If true, uses the bleed area set for the document.
	 */
	useDocumentBleedToPrint: boolean;

	/**
	 * The angle override for yellow ink. (Range: 0 to 360)
	 */
	yellowAngle: number;

	/**
	 * The frequency override for yellow ink. (Range: 1 to 500)
	 */
	yellowFrequency: number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the PrinterPreset.
	 */
	duplicate(): PrinterPreset;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PrinterPreset[];

	/**
	 * Deletes the PrinterPreset.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the PrinterPreset.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of printer presets.
 */
declare class PrinterPresets {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PrinterPreset with the specified index.
	 * @param index The index.
	 */
	[index: number]: PrinterPreset;

	/**
	 * Creates a new PrinterPreset.
	 * @param withProperties Initial values for properties of the new PrinterPreset
	 */
	add(withProperties: object): PrinterPreset;

	/**
	 * Returns any PrinterPreset in the collection.
	 */
	anyItem(): PrinterPreset;

	/**
	 * Displays the number of elements in the PrinterPreset.
	 */
	count(): number;

	/**
	 * Returns every PrinterPreset in the collection.
	 */
	everyItem(): PrinterPreset[];

	/**
	 * Returns the first PrinterPreset in the collection.
	 */
	firstItem(): PrinterPreset;

	/**
	 * Returns the PrinterPreset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PrinterPreset;

	/**
	 * Returns the PrinterPreset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PrinterPreset;

	/**
	 * Returns the PrinterPresets within the specified range.
	 * @param from The PrinterPreset, index, or name at the beginning of the range.
	 * @param to The PrinterPreset, index, or name at the end of the range.
	 */
	itemByRange(from: PrinterPreset | number | string, to: PrinterPreset | number | string): PrinterPreset[];

	/**
	 * Returns the last PrinterPreset in the collection.
	 */
	lastItem(): PrinterPreset;

	/**
	 * Returns the middle PrinterPreset in the collection.
	 */
	middleItem(): PrinterPreset;

	/**
	 * Returns the PrinterPreset whose index follows the specified PrinterPreset in the collection.
	 * @param obj The PrinterPreset whose index comes before the desired PrinterPreset.
	 */
	nextItem(obj: PrinterPreset): PrinterPreset;

	/**
	 * Returns the PrinterPreset with the index previous to the specified index.
	 * @param obj The index of the PrinterPreset that follows the desired PrinterPreset.
	 */
	previousItem(obj: PrinterPreset): PrinterPreset;

	/**
	 * Generates a string which, if executed, will return the PrinterPreset.
	 */
	toSource(): string;

}

/**
 * XML import preferences.
 */
declare class XMLImportPreference extends Preference {
	/**
	 * If true, transforms the XML using an XSLT file.
	 */
	allowTransform: boolean;

	/**
	 * If true, creates a link to the imported XML file. If false, embeds the file.
	 */
	createLinkToXML: boolean;

	/**
	 * If true, ignores elements that do not match the existing structure. Note: Valid only when import style is merge.
	 */
	ignoreUnmatchedIncoming: boolean;

	/**
	 * If true, leaves existing content in place if the matching XML content contains only whitespace characters such as a carriage return or a tab character. Note: Valid only when import style is merge.
	 */
	ignoreWhitespace: boolean;

	/**
	 * If true, imports CALS tables as InDesign tables.
	 */
	importCALSTables: boolean;

	/**
	 * The style of incorporating imported XML content into the document.
	 */
	importStyle: XMLImportStyles;

	/**
	 * If true, imports text into tables if tags match placeholder tables and their cells. Note: Valid only when import style is merge.
	 */
	importTextIntoTables: boolean;

	/**
	 * If true, imports into the selected XML element. If false, imports at the root element.
	 */
	importToSelected: boolean;

	/**
	 * If true, deletes existing elements or placeholders in the document that do not have matches in the XML file. Note: Valid only when import style is merge.
	 */
	removeUnmatchedExisting: boolean;

	/**
	 * If true, repeating text elements inherit the formatting applied to placeholder text. Note: Valid only when import style is merge.
	 */
	repeatTextElements: boolean;

	/**
	 * The name of the XSLT file. Note: Valid when allow transform is true.
	 */
	transformFilename: File | XMLTransformFile;

	/**
	 * Stylesheet parameters as a list of name/value pairs in the format [[name, value], [name, value], ...]. Can return: Ordered array containing name:String, value:String.
	 */
	transformParameters: any[];

}

/**
 * XML export preferences.
 */
declare class XMLExportPreference extends Preference {
	/**
	 * If true, transforms the XML using an XSLT file.
	 */
	allowTransform: boolean;

	/**
	 * If true, replaces special characters with character references.
	 */
	characterReferences: boolean;

	/**
	 * If true, copies formatted images to the images subfolder.
	 */
	copyFormattedImages: boolean;

	/**
	 * If true, copies optimized images to the images subfolder.
	 */
	copyOptimizedImages: boolean;

	/**
	 * If true, copies original images to the images subfolder.
	 */
	copyOriginalImages: boolean;

	/**
	 * If true, excludes the DTD from the exported XML content.
	 */
	excludeDtd: boolean;

	/**
	 * If true, exports XML content from the selected XML element. If false, exports the entire document.
	 */
	exportFromSelected: boolean;

	/**
	 * The export format for untagged tables in tagged stories.
	 */
	exportUntaggedTablesFormat: XMLExportUntaggedTablesFormat;

	/**
	 * The file encoding type for exporting XML content.
	 */
	fileEncoding: XMLFileEncoding;

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean;

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;

	/**
	 * The file format to use for converted images. Note: Valid only when copy optimized images and/or copy formatted images is true.
	 */
	imageConversion: ImageConversion;

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat;

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;

	/**
	 * The preferred browser for viewing XML.
	 */
	preferredBrowser: File | NothingEnum;

	/**
	 * If true, includes Ruby text in the exported XML content.
	 */
	ruby: boolean;

	/**
	 * The name of the XSLT file. Note: Valid when allow transform is true.
	 */
	transformFilename: File | XMLTransformFile;

	/**
	 * If true, displays exported XML content in a specified viewer.
	 */
	viewAfterExport: boolean;

}

/**
 * XML preferences.
 */
declare class XMLPreference extends Preference {
	/**
	 * The color of the default cell tag, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Note: Valid only when default cell tag name value creates a new tag. Does not update the color of an existing tag. .
	 */
	defaultCellTagColor: [number, number, number] | UIColors;

	/**
	 * The name of the default tag to use for new table cell elements. Note: Either specifies an existing tag or creates a new tag.
	 */
	defaultCellTagName: string;

	/**
	 * The color to give a new image tag, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Note: Used only when the tag needs to be created.
	 */
	defaultImageTagColor: [number, number, number] | UIColors;

	/**
	 * The default name for new image elements created automatically.
	 */
	defaultImageTagName: string;

	/**
	 * The color of the default story tag, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Notes: Valid only when default story tag name value creates a new tag. Does not update the color of an existing tag.
	 */
	defaultStoryTagColor: [number, number, number] | UIColors;

	/**
	 * The name of the default tag to use for new story elements. Note: Either specifies an existing tag or creates a new tag.
	 */
	defaultStoryTagName: string;

	/**
	 * The color of the default table tag, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Notes: Valid only when default table tag name value creates a new tag. Does not update the color of an existing tag. .
	 */
	defaultTableTagColor: [number, number, number] | UIColors;

	/**
	 * The name of the default tag to use for new table elements. Note: Either specifies an existing tag or creates a new tag.
	 */
	defaultTableTagName: string;

	/**
	 * The preference for deleting the element when deleting the associated content like a page item or a text fragment.
	 */
	deleteElementOnContentDeletion: boolean;

}

/**
 * Export for web preferences.
 */
declare class ExportForWebPreference extends Preference {
	/**
	 * If true, copies formatted images to the images subfolder.
	 */
	copyFormattedImages: boolean;

	/**
	 * If true, copies optimized images to the images subfolder.
	 */
	copyOptimizedImages: boolean;

	/**
	 * If true, copies original images to the images subfolder.
	 */
	copyOriginalImages: boolean;

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean;

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;

	/**
	 * The file format to use for converted images. Note: Valid only when copy optimized images and/or copy formatted images is true.
	 */
	imageConversion: ImageConversion;

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat;

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;

}

/**
 * Anchored object default settings.
 */
declare class AnchoredObjectDefault extends Preference {
	/**
	 * The initial frame type of a new anchored object.
	 */
	anchorContent: ContentType;

	/**
	 * The initial object style of a new anchored object.
	 */
	anchoredObjectStyle: ObjectStyle;

	/**
	 * The initial paragraph style of a new anchored object. Note: Valid when anchor content is text.
	 */
	anchoredParagraphStyle: ParagraphStyle;

	/**
	 * The initial height of a new anchored object.
	 */
	initialAnchorHeight: number | string;

	/**
	 * The initial width of a new anchored object.
	 */
	initialAnchorWidth: number | string;

}

/**
 * The settings for an anchored object.
 */
declare class AnchoredObjectSetting extends Preference {
	/**
	 * The point in the anchored object to position.
	 */
	anchorPoint: AnchorPoint;

	/**
	 * The space above an above-line anchored object.
	 */
	anchorSpaceAbove: number | string;

	/**
	 * The horizontal (x) offset of the anchored object.
	 */
	anchorXoffset: number | string;

	/**
	 * The vertical (y) offset of the anchored object. Corresponds to the space after property for above line positioning.
	 */
	anchorYoffset: number | string;

	/**
	 * The position of the anchored object relative to the anchor.
	 */
	anchoredPosition: AnchorPosition;

	/**
	 * When anchored position is above line, the position of the anchored object is relative to the text area. When anchored position is custom, the horizontal alignment of the anchored object is set by the horizontal reference point. Note: Not valid when anchored position is inline.
	 */
	horizontalAlignment: HorizontalAlignment;

	/**
	 * The horizontal reference point on the page. Valid only when anchored position is custom.
	 */
	horizontalReferencePoint: AnchoredRelativeTo;

	/**
	 * If true, prevents manual positioning of the anchored object.
	 */
	lockPosition: boolean;

	/**
	 * If true, pins the position of the anchored object within the text frame top and bottom.
	 */
	pinPosition: boolean;

	/**
	 * If true, the position of the anchored object is relative to the binding spine of the page or spread.
	 */
	spineRelative: boolean;

	/**
	 * The vertical alignment of the anchored object reference point with the vertical reference point on the page. Notes: Valid only when anchored position is custom.
	 */
	verticalAlignment: VerticalAlignment;

	/**
	 * The vertical reference point on the page. Valid when anchored position is custom.
	 */
	verticalReferencePoint: VerticallyRelativeTo;

	/**
	 * Inserts the anchored object into specified story.
	 * @param storyOffset The location within the story, specified as an insertion point.
	 * @param anchoredPosition The position of the anchored object relative to the anchor.
	 */
	insertAnchoredObject(storyOffset: InsertionPoint, anchoredPosition: AnchorPosition): void;

	/**
	 * Releases the anchored object from its associated text.
	 */
	releaseAnchoredObject(): void;

}

/**
 * Baseline frame grid options.
 */
declare class BaselineFrameGridOption extends Preference {
	/**
	 * The grid line color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	baselineFrameGridColor: [number, number, number] | UIColors;

	/**
	 * The distance between grid lines.
	 */
	baselineFrameGridIncrement: number | string;

	/**
	 * The location (top of page, top margin, top of frame, or frame inset) on which to base the custom baseline grid.
	 */
	baselineFrameGridRelativeOption: BaselineFrameGridRelativeOption;

	/**
	 * The amount to offset the baseline grid.
	 */
	startingOffsetForBaselineFrameGrid: number | string;

	/**
	 * If true, uses a custom baseline frame grid.
	 */
	useCustomBaselineFrameGrid: boolean;

}

/**
 * Options for specifying default footnote formatting.
 */
declare class FootnoteOption extends Preference {
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the rule above continued footnote text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the rule above continued footnote text. Note: Valid when continuing rule type is not solid.
	 */
	continuingRuleGapColor: Swatch | string;

	/**
	 * If true, overprints the gap color of the rule above continued footnote text. Note: Valid when continuing rule type is not solid.
	 */
	continuingRuleGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the rule above continued footnote text. (Range: 0 to 100) Note: Valid when continuing rule type is not solid.
	 */
	continuingRuleGapTint: number;

	/**
	 * The amount to left indent the rule above continued footnote text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleLeftIndent: number | string;

	/**
	 * The stroke weight of the rule above continued footnote text. (Range: 0 to 1000) Note: Valid when continuing rule on is true.
	 */
	continuingRuleLineWeight: number | string;

	/**
	 * The vertical offset of the rule above continued footnote text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleOffset: number | string;

	/**
	 * If true, draws a rule above footnote text that continues from a previous column. Note: Valid when no splitting is false or undefined.
	 */
	continuingRuleOn: boolean;

	/**
	 * If true, overprints the rule above continued footnote text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleOverprint: boolean;

	/**
	 * The tint (as a percentage) of the rule above continued footnote text. (Range: 0 to 100) Note: Valid when continuing rule type is not solid.
	 */
	continuingRuleTint: number;

	/**
	 * The stroke type of the rule above continued footnote text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleType: StrokeStyle | string;

	/**
	 * The length of the rule above continued footnote text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleWidth: number | string;

	/**
	 * If true, document will have straddling footnotes. If false, document will not have straddling footnotes.
	 */
	enableStraddling: boolean;

	/**
	 * If true, footnotes at the end of the story are placed just below the text. If false, footnotes at the end of the story are placed at the bottom of the column.
	 */
	eosPlacement: boolean;

	/**
	 * The distance between the top of the footnote container and the footnote text.
	 */
	footnoteFirstBaselineOffset: FootnoteFirstBaseline;

	/**
	 * The character style to apply to footnote reference numbers in the main text.
	 */
	footnoteMarkerStyle: CharacterStyle;

	/**
	 * The minimum distance between the baseline of the text and the top of the footnote container.
	 */
	footnoteMinimumFirstBaselineOffset: number | string;

	/**
	 * The footnote numbering style.
	 */
	footnoteNumberingStyle: FootnoteNumberingStyle | string;

	/**
	 * The paragraph style to apply to footnotes. Note: The space before and after the paragraph defined in the paragraph style is ignored for footnotes. To define space above and between footnotes, see spacer and space between.
	 */
	footnoteTextStyle: ParagraphStyle;

	/**
	 * The position of footnote reference numbers in the main text.
	 */
	markerPositioning: FootnoteMarkerPositioning | string;

	/**
	 * If true, footnotes cannot split across columns. If false, footnotes flow into succeeding columns when the footnote text causes the footnote area to expand upward to reach the footnote reference number in the main text.
	 */
	noSplitting: boolean;

	/**
	 * The prefix text of the footnote. (Limit: 0 to 100 characters)
	 */
	prefix: string;

	/**
	 * The point at which to restart footnote numbering.
	 */
	restartNumbering: FootnoteRestarting | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the rule above the first footnote in the column. Note: Valid when rule on is true.
	 */
	ruleColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the rule above the first footnote in the column. Note: Valid when rule type is not solid.
	 */
	ruleGapColor: Swatch | string;

	/**
	 * If true, overprints the gap color of the rule above the first footnote in the column. Note: Valid when rule type is not solid.
	 */
	ruleGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the rule above the first footnote in the column. (Range: 0 to 100) Note: Valid when rule type is not solid.
	 */
	ruleGapTint: number;

	/**
	 * The amount to left indent the rule above the first footnote in the column. Note: Valid when rule on is true.
	 */
	ruleLeftIndent: number | string;

	/**
	 * The stroke weight of the rule above the first footnote in the column. (Range: 0 to 1000) Note: Valid when rule on is true.
	 */
	ruleLineWeight: number | string;

	/**
	 * The vertical offset of the rule above the first footnote in the column. Note: Valid when rule on is true.
	 */
	ruleOffset: number | string;

	/**
	 * If true, draws a rule between the text and the first footnote in the column.
	 */
	ruleOn: boolean;

	/**
	 * If true, overprints the rule above the first footnote in the column. Note: Valid when rule on is true.
	 */
	ruleOverprint: boolean;

	/**
	 * The tint (as a percentage) of the rule above the first footnote in the column. (Range: 0 to 100) Note: Valid when rule on is true.
	 */
	ruleTint: number;

	/**
	 * The stroke type of the rule above the first footnote in a column. Note: Valid when rule on is true.
	 */
	ruleType: StrokeStyle | string;

	/**
	 * The length of the rule above the first footnote in the column. Note: Valid when rule on is true.
	 */
	ruleWidth: number | string;

	/**
	 * The text to insert between the footnote marker number and the footnote text. (Range: 0 to 100 characters)
	 */
	separatorText: string;

	/**
	 * The position of the footnote prefix and/or suffix.
	 */
	showPrefixSuffix: FootnotePrefixSuffix | string;

	/**
	 * The amount of vertical space between footnotes. Note: The space before and space after defined for the paragraph style applied to the footnote is ignored.
	 */
	spaceBetween: number | string;

	/**
	 * The minimum amount of vertical space between the bottom of the text column and the first footnote. Note: The space before amount defined in the paragraph style applied to the footnote is ignored for the first footnote.
	 */
	spacer: number | string;

	/**
	 * The number at which to start footnote numbering.
	 */
	startAt: number;

	/**
	 * The suffix text of the footnote. (Limit: 0 to 100 characters)
	 */
	suffix: string;

}

/**
 * The preferences for a page number variable.
 */
declare class PageNumberVariablePreference extends Preference {
	/**
	 * The format for the variable.
	 */
	format: VariableNumberingStyles;

	/**
	 * The scope or range of the pages to include.
	 */
	scope: VariableScopes;

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string;

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string;

}

/**
 * The preferences for a chapter number variable.
 */
declare class ChapterNumberVariablePreference extends Preference {
	/**
	 * The format for the variable.
	 */
	format: VariableNumberingStyles;

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string;

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string;

}

/**
 * The preferences for a date variable.
 */
declare class DateVariablePreference extends Preference {
	/**
	 * The date format.
	 */
	format: string;

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string;

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string;

}

/**
 * The preferences for a file name variable.
 */
declare class FileNameVariablePreference extends Preference {
	/**
	 * If true, includes the file extension.
	 */
	includeExtension: boolean;

	/**
	 * If true, includes the entire path of the file.
	 */
	includePath: boolean;

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string;

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string;

}

/**
 * The preferences for a running header/footer (match character style) variable.
 */
declare class MatchCharacterStylePreference extends Preference {
	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string;

	/**
	 * The case of the matched text.
	 */
	changeCase: ChangeCaseOptions;

	/**
	 * If true, deletes end punctuation from the matched text.
	 */
	deleteEndPunctuation: boolean;

	/**
	 * The starting point and direction in which the search will be conducted.
	 */
	searchStrategy: SearchStrategies;

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string;

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string;

}

/**
 * The preferences for a running header/footer (match paragraph style) variable.
 */
declare class MatchParagraphStylePreference extends Preference {
	/**
	 * The paragraph style applied to the text.
	 */
	appliedParagraphStyle: ParagraphStyle | string;

	/**
	 * The case of the matched text.
	 */
	changeCase: ChangeCaseOptions;

	/**
	 * If true, deletes end punctuation from the matched text.
	 */
	deleteEndPunctuation: boolean;

	/**
	 * The starting point and direction in which the search will be conducted.
	 */
	searchStrategy: SearchStrategies;

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string;

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string;

}

/**
 * The preferences for a custom text variable.
 */
declare class CustomTextVariablePreference extends Preference {
	/**
	 * The contents of the text.
	 */
	contents: string | SpecialCharacters;

}

/**
 * The preferences for a caption metadata variable.
 */
declare class CaptionMetadataVariablePreference extends Preference {
	/**
	 * Name of the metadata provider.
	 */
	metadataProviderName: string;

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string;

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string;

}

/**
 * Grid defaults. Note: Applies to named, layout, and frame (story) grids.
 */
declare class GridDataInformation extends Preference {
	/**
	 * The font applied to the GridDataInformation, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string;

	/**
	 * The amount of white space between characters.
	 */
	characterAki: number;

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment;

	/**
	 * The character count location. Note: Valid when show character count is true.
	 */
	characterCountLocation: CharacterCountLocation;

	/**
	 * The character size for the character count display.
	 */
	characterCountSize: number;

	/**
	 * The name of the font style.
	 */
	fontStyle: string;

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment;

	/**
	 * The grid view setting.
	 */
	gridView: GridViewSettings;

	/**
	 * The horizontal scaling applied to the GridDataInformation.
	 */
	horizontalScale: number;

	/**
	 * The amount of white space between lines.
	 */
	lineAki: number;

	/**
	 * The line justification.
	 */
	lineAlignment: LineAlignment;

	/**
	 * The text size.
	 */
	pointSize: number | string;

	/**
	 * The vertical scaling applied to the GridDataInformation.
	 */
	verticalScale: number;

}

/**
 * Default properties specific to layout grids.
 */
declare class LayoutGridDataInformation extends Preference {
	/**
	 * The font applied to the LayoutGridDataInformation, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string;

	/**
	 * The amount of white space between characters.
	 */
	characterAki: number;

	/**
	 * The name of the font style.
	 */
	fontStyle: string;

	/**
	 * The horizontal scaling applied to the LayoutGridDataInformation.
	 */
	horizontalScale: number;

	/**
	 * The amount of white space between lines.
	 */
	lineAki: number;

	/**
	 * The text size.
	 */
	pointSize: number | string;

	/**
	 * The vertical scaling applied to the LayoutGridDataInformation.
	 */
	verticalScale: number;

}

/**
 * Default properties specific to frame grids.
 */
declare class StoryGridDataInformation extends Preference {
	/**
	 * The font applied to the StoryGridDataInformation, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string;

	/**
	 * The amount of white space between characters.
	 */
	characterAki: number;

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment;

	/**
	 * The character count location. Note: Valid when show character count is true.
	 */
	characterCountLocation: CharacterCountLocation;

	/**
	 * The character size for the character count display.
	 */
	characterCountSize: number;

	/**
	 * The name of the font style.
	 */
	fontStyle: string;

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment;

	/**
	 * The grid view setting.
	 */
	gridView: GridViewSettings;

	/**
	 * The horizontal scaling applied to the StoryGridDataInformation.
	 */
	horizontalScale: number;

	/**
	 * The amount of white space between lines.
	 */
	lineAki: number;

	/**
	 * The line justification.
	 */
	lineAlignment: LineAlignment;

	/**
	 * The text size.
	 */
	pointSize: number | string;

	/**
	 * The vertical scaling applied to the StoryGridDataInformation.
	 */
	verticalScale: number;

}

/**
 * Character grid preferences.
 */
declare class CjkGridPreference extends Preference {
	/**
	 * Applies the grid color to every nth cell, where n is the value of this property.
	 */
	colorEveryNthCell: number;

	/**
	 * If true, uses ICF mode for grid cells. If false, uses virtual body mode.
	 */
	icfMode: boolean;

	/**
	 * The layout grid color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	layoutGridColorIndex: [number, number, number] | UIColors;

	/**
	 * The view magnification (as a percentage) less than which grids do not appear. (Range: 5 to 4000)
	 */
	minimumScale: number;

	/**
	 * If true, displays the frame (story) grids.
	 */
	showAllFrameGrids: boolean;

	/**
	 * If true, displays the layout grids.
	 */
	showAllLayoutGrids: boolean;

	/**
	 * If true, displays the character count for the frame.
	 */
	showCharacterCount: boolean;

	/**
	 * If true, applies the grid color from the the edge of the line. If false, applies the grid color from the corner of the frame.
	 */
	singleLineColorMode: boolean;

	/**
	 * If true, objects snap to the layout grid.
	 */
	snapToLayoutGrid: boolean;

	/**
	 * If true, cell shape is circular. If false, cell shape is rectangular.
	 */
	useCircularCells: boolean;

}

/**
 * Grid printing and exporting preferences.
 */
declare class GridPrintingPreference extends Preference {
	/**
	 * If true, displays frame (story) grids in the printed or exported document.
	 */
	frameGridPrinting: boolean;

	/**
	 * The stroke weight (in points) of the frame grid.
	 */
	frameGridStrokeWeight: number;

	/**
	 * If true, displays layout grids in the printed or exported document.
	 */
	layoutGridPrinting: boolean;

	/**
	 * The stroke weight (in points) of the layout grid.
	 */
	layoutGridStrokeWeight: number;

	/**
	 * If true, displays page items other than text, frame grids, and layout grids in the printed or exported document. For information on printing and exporting text and grids, see text printing, frame grid printing, and layout grid printing.
	 */
	pageItemPrinting: boolean;

	/**
	 * If true, displays text in the printed or exported document.
	 */
	textPrinting: boolean;

}

/**
 * Galley preferences.
 */
declare class GalleyPreference extends Preference {
	/**
	 * The type of text anti-aliasing to use in story and galley views.
	 */
	antiAliasType: AntiAliasType;

	/**
	 * The background color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as an InCopy UI color. .
	 */
	backgroundColor: [number, number, number] | InCopyUIColors;

	/**
	 * If true, the cursor blinks.
	 */
	blinkCursor: boolean;

	/**
	 * The cursor type for galley and story views.
	 */
	cursorType: CursorTypes;

	/**
	 * Font family name to use for text display.
	 */
	displayFont: string;

	/**
	 * Size to use for text display.
	 */
	displayFontSize: number | string;

	/**
	 * Info column width.
	 */
	infoColumnWidth: number | string;

	/**
	 * Amount of spacing between lines.
	 */
	lineSpacingValue: LineSpacingType;

	/**
	 * If true, displays the depth ruler.
	 */
	showDepthRuler: boolean;

	/**
	 * If true, display the Info column.
	 */
	showInfoColumn: boolean;

	/**
	 * If true, show paragraph break marks.
	 */
	showParagraphBreakMarks: boolean;

	/**
	 * If true, show paragraph style names.
	 */
	showParagraphStyleNames: boolean;

	/**
	 * If true, galley text is anti-aliased.
	 */
	smoothText: boolean;

	/**
	 * The text color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as an InCopy UI color.
	 */
	textColor: [number, number, number] | InCopyUIColors;

}

/**
 * A preset that contains transparency flattener properties.
 */
declare class FlattenerPreset {
	/**
	 * If true, ensures that the boundaries between vector and rasterized artwork fall along object paths.
	 */
	clipComplexRegions: boolean;

	/**
	 * If true, converts all strokes to outlines and ensures that stroke widths remain constant during flattening. Note: Can cause thin strokes to appear slightly thicker than their original width. Affects all strokes, not only strokes involved in the transparency.
	 */
	convertAllStrokesToOutlines: boolean;

	/**
	 * If true, converts all text to outlines and discards all type glyph information on spreads with transparency; ensures that the width of text strokes remains constant during flattening. Note: Can cause small fonts to appear slightly thicker when viewed in Acrobat or printed on low-quality desktop printers, but does not affect type quality when printed on high-resolution printers or imagesetters.
	 */
	convertAllTextToOutlines: boolean;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The resolution for gradients rasterized as a result of flattening and for drop shadow and feathers when printed or exported. (Range: 0 to 1200) Note: Resolutions higher than 300 ppi increase file size and printing time but generally do not improve the image quality.
	 */
	gradientAndMeshResolution: number;

	/**
	 * The unique ID of the FlattenerPreset.
	 */
	readonly id: number;

	/**
	 * The index of the FlattenerPreset within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The resolution for vector objects rasterized as a result of flattening. (Range: 1 to 9600) For information, see raster vector balance.
	 */
	lineArtAndTextResolution: number;

	/**
	 * The name of the FlattenerPreset.
	 */
	name: string;

	/**
	 * The parent of the FlattenerPreset (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The amount of vector artwork to rasterize during flattening, specified as an enumerator or as a percentage in the range 0 to 100.
	 */
	rasterVectorBalance: FlattenerLevel | number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the FlattenerPreset.
	 */
	duplicate(): FlattenerPreset;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): FlattenerPreset[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the FlattenerPreset.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the FlattenerPreset.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of transparency flattener presets.
 */
declare class FlattenerPresets {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the FlattenerPreset with the specified index.
	 * @param index The index.
	 */
	[index: number]: FlattenerPreset;

	/**
	 * Creates a new FlattenerPreset.
	 * @param withProperties Initial values for properties of the new FlattenerPreset
	 */
	add(withProperties: object): FlattenerPreset;

	/**
	 * Returns any FlattenerPreset in the collection.
	 */
	anyItem(): FlattenerPreset;

	/**
	 * Displays the number of elements in the FlattenerPreset.
	 */
	count(): number;

	/**
	 * Returns every FlattenerPreset in the collection.
	 */
	everyItem(): FlattenerPreset[];

	/**
	 * Returns the first FlattenerPreset in the collection.
	 */
	firstItem(): FlattenerPreset;

	/**
	 * Returns the FlattenerPreset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): FlattenerPreset;

	/**
	 * Returns the FlattenerPreset with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): FlattenerPreset;

	/**
	 * Returns the FlattenerPreset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): FlattenerPreset;

	/**
	 * Returns the FlattenerPresets within the specified range.
	 * @param from The FlattenerPreset, index, or name at the beginning of the range.
	 * @param to The FlattenerPreset, index, or name at the end of the range.
	 */
	itemByRange(from: FlattenerPreset | number | string, to: FlattenerPreset | number | string): FlattenerPreset[];

	/**
	 * Returns the last FlattenerPreset in the collection.
	 */
	lastItem(): FlattenerPreset;

	/**
	 * Returns the middle FlattenerPreset in the collection.
	 */
	middleItem(): FlattenerPreset;

	/**
	 * Returns the FlattenerPreset whose index follows the specified FlattenerPreset in the collection.
	 * @param obj The FlattenerPreset whose index comes before the desired FlattenerPreset.
	 */
	nextItem(obj: FlattenerPreset): FlattenerPreset;

	/**
	 * Returns the FlattenerPreset with the index previous to the specified index.
	 * @param obj The index of the FlattenerPreset that follows the desired FlattenerPreset.
	 */
	previousItem(obj: FlattenerPreset): FlattenerPreset;

	/**
	 * Generates a string which, if executed, will return the FlattenerPreset.
	 */
	toSource(): string;

}

/**
 * Transparency flattener preferences.
 */
declare class FlattenerPreference extends Preference {
	/**
	 * If true, ensures that the boundaries between vector and rasterized artwork fall along object paths.
	 */
	clipComplexRegions: boolean;

	/**
	 * If true, converts all strokes to outlines and ensures that stroke widths remain constant during flattening. Note: Can cause thin strokes to appear slightly thicker than their original width. Affects all strokes, not only strokes involved in the transparency.
	 */
	convertAllStrokesToOutlines: boolean;

	/**
	 * If true, converts all text to outlines and discards all type glyph information on spreads with transparency; ensures that the width of text strokes remains constant during flattening. Note: Can cause small fonts to appear slightly thicker when viewed in Acrobat or printed on low-quality desktop printers, but does not affect type quality when printed on high-resolution printers or imagesetters.
	 */
	convertAllTextToOutlines: boolean;

	/**
	 * The resolution for gradients rasterized as a result of flattening and for drop shadow and feathers when printed or exported. (Range: 0 to 1200) Note: Resolutions higher than 300 ppi increase file size and printing time but generally do not improve the image quality.
	 */
	gradientAndMeshResolution: number;

	/**
	 * The resolution for vector objects rasterized as a result of flattening. (Range: 1 to 9600) For information, see raster vector balance.
	 */
	lineArtAndTextResolution: number;

	/**
	 * The amount of vector artwork to rasterize during flattening, specified as an enumerator or as a percentage in the range 0 to 100.
	 */
	rasterVectorBalance: FlattenerLevel | number;

}

/**
 * Transparency preferences.
 */
declare class TransparencyPreference extends Preference {
	/**
	 * The color space used for blending the colors of transparent objects.
	 */
	blendingSpace: BlendingSpace;

	/**
	 * The altitude of the global light. (Range: 0 to 90)
	 */
	globalLightAltitude: number;

	/**
	 * The angle of the global light. (Range: -360 to 360)
	 */
	globalLightAngle: number;

}

/**
 * Transparency settings.
 */
declare class TransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	readonly bevelAndEmbossSettings: BevelAndEmbossSetting;

	/**
	 * Blending mode settings.
	 */
	readonly blendingSettings: BlendingSetting;

	/**
	 * Settings related to the directional feather effect.
	 */
	readonly directionalFeatherSettings: DirectionalFeatherSetting;

	/**
	 * Settings related to the drop shadow effect.
	 */
	readonly dropShadowSettings: DropShadowSetting;

	/**
	 * Settings related to the feather effect.
	 */
	readonly featherSettings: FeatherSetting;

	/**
	 * Settings related to the gradient feather effect.
	 */
	readonly gradientFeatherSettings: GradientFeatherSetting;

	/**
	 * Settings related to the inner glow effect.
	 */
	readonly innerGlowSettings: InnerGlowSetting;

	/**
	 * Settings related to the inner shadow effect.
	 */
	readonly innerShadowSettings: InnerShadowSetting;

	/**
	 * Settings related to the outer glow effect.
	 */
	readonly outerGlowSettings: OuterGlowSetting;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Settings related to the satin effect
	 */
	readonly satinSettings: SatinSetting;

}

/**
 * Transparency settings for the stroke of the parent object.
 */
declare class StrokeTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	readonly bevelAndEmbossSettings: BevelAndEmbossSetting;

	/**
	 * Blending mode settings.
	 */
	readonly blendingSettings: BlendingSetting;

	/**
	 * Settings related to the directional feather effect.
	 */
	readonly directionalFeatherSettings: DirectionalFeatherSetting;

	/**
	 * Settings related to the drop shadow effect.
	 */
	readonly dropShadowSettings: DropShadowSetting;

	/**
	 * Settings related to the feather effect.
	 */
	readonly featherSettings: FeatherSetting;

	/**
	 * Settings related to the gradient feather effect.
	 */
	readonly gradientFeatherSettings: GradientFeatherSetting;

	/**
	 * Settings related to the inner glow effect.
	 */
	readonly innerGlowSettings: InnerGlowSetting;

	/**
	 * Settings related to the inner shadow effect.
	 */
	readonly innerShadowSettings: InnerShadowSetting;

	/**
	 * Settings related to the outer glow effect.
	 */
	readonly outerGlowSettings: OuterGlowSetting;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Settings related to the satin effect
	 */
	readonly satinSettings: SatinSetting;

}

/**
 * Transparency settings for the fill applied to the parent object.
 */
declare class FillTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	readonly bevelAndEmbossSettings: BevelAndEmbossSetting;

	/**
	 * Blending mode settings.
	 */
	readonly blendingSettings: BlendingSetting;

	/**
	 * Settings related to the directional feather effect.
	 */
	readonly directionalFeatherSettings: DirectionalFeatherSetting;

	/**
	 * Settings related to the drop shadow effect.
	 */
	readonly dropShadowSettings: DropShadowSetting;

	/**
	 * Settings related to the feather effect.
	 */
	readonly featherSettings: FeatherSetting;

	/**
	 * Settings related to the gradient feather effect.
	 */
	readonly gradientFeatherSettings: GradientFeatherSetting;

	/**
	 * Settings related to the inner glow effect.
	 */
	readonly innerGlowSettings: InnerGlowSetting;

	/**
	 * Settings related to the inner shadow effect.
	 */
	readonly innerShadowSettings: InnerShadowSetting;

	/**
	 * Settings related to the outer glow effect.
	 */
	readonly outerGlowSettings: OuterGlowSetting;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Settings related to the satin effect
	 */
	readonly satinSettings: SatinSetting;

}

/**
 * Basic object blending settings.
 */
declare class BlendingSetting extends Preference {
	/**
	 * The blending mode for controlling how the base color interacts with the color of the BlendingSetting.
	 */
	blendMode: BlendMode;

	/**
	 * If true, blending is applied only to the group. If false, blending includes all objects beneath the group.
	 */
	isolateBlending: boolean;

	/**
	 * If true, the BlendingSetting is a knockout group.
	 */
	knockoutGroup: boolean;

	/**
	 * The fill opacity of the BlendingSetting (as a percentage). (Range: 0 to 100)
	 */
	opacity: number;

}

/**
 * Drop shadow settings.
 */
declare class DropShadowSetting extends Preference {
	/**
	 * The angle at which the shadow is thrown
	 */
	angle: number;

	/**
	 * The blending mode for the drop shadow effect.
	 */
	blendMode: BlendMode;

	/**
	 * The distance between the item and its shadow
	 */
	distance: number | string;

	/**
	 * The color applied to the drop shadow, specified as a swatch (color, gradient, tint, or mixed ink), or as an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127.
	 */
	effectColor: Swatch;

	/**
	 * If true, the drop shadow will take into account other non-shadow effects.
	 */
	honorOtherEffects: boolean;

	/**
	 * If true, the layer will knock out the drop shadow.
	 */
	knockedOut: boolean;

	/**
	 * The shadow mode.
	 */
	mode: ShadowMode;

	/**
	 * The amount (as a percentage) of noise applied to the shadow. (Range: 0 to 100)
	 */
	noise: number;

	/**
	 * The opacity of the drop shadow (as a percentage). (Range: 0 to 100)
	 */
	opacity: number;

	/**
	 * The radius (in pixels) of the blur applied to the drop shadow. (Range depends on the unit type. For points: 0 to 144; for picas: 0p0 to 12p0; for inches: 0 to 2; for mm: 0 to 50.08; for cm: 0 to 5.08; for ciceros: 0c0 to 11c3.128.)
	 */
	size: number | string;

	/**
	 * The amount (as a percentage of the blur width) to spread the footprint of the drop shadow and reduce the radius of the blur. (Range: 0 to 100)
	 */
	spread: number;

	/**
	 * If true, uses the global light angle.
	 */
	useGlobalLight: boolean;

	/**
	 * The horizontal offset of the drop shadow. Range depends on the unit type. For points: -1000 to 1000; for picas: -83p4 to 83p4; for inches: -13.8889 to 13.8889; for mm: -352.778 to 352.778; for cm: -35.277 to 35.277; for ciceros: -78c2.389 to 78c2.389.
	 */
	xOffset: number | string;

	/**
	 * The vertical offset of the drop shadow. (Range depends on the unit type. For points: -1000 to 1000; for picas: -83p4 to 83p4; for inches: -13.8889 to 13.8889; for mm: -352.778 to 352.778; for cm: -35.277 to 35.277; for ciceros: -78c2.389 to 78c2.389)
	 */
	yOffset: number | string;

}

/**
 * Feather effect settings.
 */
declare class FeatherSetting extends Preference {
	/**
	 * The amount to choke the feather (as a percentage of the feather width). (Range: 0 to 100)
	 */
	chokeAmount: number;

	/**
	 * The corner effect applied to the feather.
	 */
	cornerType: FeatherCornerType;

	/**
	 * The feather mode.
	 */
	mode: FeatherMode;

	/**
	 * The amount (as a percentage) of noise applied to the feather. (Range: 0 to 100)
	 */
	noise: number;

	/**
	 * The feather width. (Range depends on the unit type. For points: 0 to 1000; for picas: 0 to 83p4; for inches: 0 to 13.8889; for mm: 0 to 352.778; for cm: 0 to 35.277; for ciceros: 0 to 78c2.389.)
	 */
	width: number | string;

}

/**
 * Inner shadow effect settings.
 */
declare class InnerShadowSetting extends Preference {
	/**
	 * The angle at which the inner shadow is thrown. (Range: -360 to 360)
	 */
	angle: number;

	/**
	 * If true, the inner shadow effect is applied.
	 */
	applied: boolean;

	/**
	 * The blending mode for the inner shadow effect.
	 */
	blendMode: BlendMode;

	/**
	 * The amount to choke the inner shadow (as a percentage of shadow size). (Range: 0 to 100)
	 */
	chokeAmount: number;

	/**
	 * The distance between the InnerShadowSetting and the shadow.
	 */
	distance: number | string;

	/**
	 * The color applied to the inner shadow, specified as a swatch (color, gradient, tint, or mixed ink), or as an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127.
	 */
	effectColor: Swatch;

	/**
	 * The amount (as a percentage) of noise to add to the shadow. (Range: 0 to 100)
	 */
	noise: number;

	/**
	 * The opacity (as a percentage) of the inner shadow. (Range: 0 to 100)
	 */
	opacity: number;

	/**
	 * The size of the inner shadow.
	 */
	size: number | string;

	/**
	 * If true, the global light angle is used.
	 */
	useGlobalLight: boolean;

	/**
	 * The horizontal offset of the shadow
	 */
	xOffset: number | string;

	/**
	 * The vertical offset of the shadow
	 */
	yOffset: number | string;

}

/**
 * Outer glow effect settings.
 */
declare class OuterGlowSetting extends Preference {
	/**
	 * If true, the outer glow effect is applied.
	 */
	applied: boolean;

	/**
	 * The blending mode for the outer glow effect.
	 */
	blendMode: BlendMode;

	/**
	 * The color applied to the outer glow, specified as a swatch (color, gradient, tint, or mixed ink), or an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127.
	 */
	effectColor: Swatch;

	/**
	 * The amount (as a percentage) of noise applied to the outer glow. (Range: 0 to 100)
	 */
	noise: number;

	/**
	 * The opacity of the outer glow (as a percentage). (Range: 0 to 100)
	 */
	opacity: number;

	/**
	 * The size of the outer glow.
	 */
	size: number | string;

	/**
	 * The amount of spread (as a percentage of the outer glow size). (Range: 0 to 100)
	 */
	spread: number;

	/**
	 * The technique applied to the outer glow.
	 */
	technique: GlowTechnique;

}

/**
 * Inner glow effect settings.
 */
declare class InnerGlowSetting extends Preference {
	/**
	 * If true, the inner glow effect is applied.
	 */
	applied: boolean;

	/**
	 * The blending mode for the inner glow effect.
	 */
	blendMode: BlendMode;

	/**
	 * The color applied to the inner glow, specified as a swatch (color, gradient, tint, or mixed ink), or as an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127.
	 */
	effectColor: Swatch;

	/**
	 * The amount (as a percentage) of noise applied to the inner glow. (Range: 0 to 100)
	 */
	noise: number;

	/**
	 * The opacity of the inner glow (as a percentage). (Range: 0 to 100)
	 */
	opacity: number;

	/**
	 * The size of the inner glow.
	 */
	size: number | string;

	/**
	 * The light source of the inner glow effect.
	 */
	source: InnerGlowSource;

	/**
	 * The amount of spread (as a percentage of the inner glow size). (Range: 0 to 100)
	 */
	spread: number;

	/**
	 * The technique used for the inner glow.
	 */
	technique: GlowTechnique;

}

/**
 * Bevel and emboss effect settings.
 */
declare class BevelAndEmbossSetting extends Preference {
	/**
	 * The altitude of the light source. (Range: 0 to 90)
	 */
	altitude: number;

	/**
	 * The angle of the light source. (Range: -180 to 180)
	 */
	angle: number;

	/**
	 * If true, the bevel or emboss effect is applied.
	 */
	applied: boolean;

	/**
	 * The depth of the bevel or emboss (as a percentage). (Range: 0 to 1000)
	 */
	depth: number;

	/**
	 * The direction of the bevel or emboss.
	 */
	direction: BevelAndEmbossDirection;

	/**
	 * The blending mode for the highlight portion of the effect.
	 */
	highlightBlendMode: BlendMode;

	/**
	 * The color applied to the highlight portion of the effect, specified as a swatch (color, gradient, tint, or mixed ink), a color library color, a hex value, or as an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127; for HSB, specify three colors in the format [H,S,B], with H in the range 0 to 360 and S and B as percentages in the range 0 to 100.
	 */
	highlightColor: Swatch;

	/**
	 * The opacity of the highlight portion of the effect (as a percentage). (Range: 0 to 100)
	 */
	highlightOpacity: number;

	/**
	 * The blending mode for the shadow portion of the effect.
	 */
	shadowBlendMode: BlendMode;

	/**
	 * The color applied to the shadow portion of the effect, specified as a swatch (color, gradient, tint, or mixed ink), a color library color, a hex value, or as an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127; for HSB, specify three colors in the format [H,S,B], with H in the range 0 to 360 and S and B as percentages in the range 0 to 100.
	 */
	shadowColor: Swatch;

	/**
	 * The opacity of the shadow portion of the effect (as a percentage). (Range: 0 to 100)
	 */
	shadowOpacity: number;

	/**
	 * The size of the bevel or emboss.
	 */
	size: number | string;

	/**
	 * The amount (in pixels) of softening.
	 */
	soften: number | string;

	/**
	 * The style of bevel or emboss.
	 */
	style: BevelAndEmbossStyle;

	/**
	 * The edging technique of the bevel or emboss.
	 */
	technique: BevelAndEmbossTechnique;

	/**
	 * If true, the global light source is used.
	 */
	useGlobalLight: boolean;

}

/**
 * Satin effect settings.
 */
declare class SatinSetting extends Preference {
	/**
	 * The light angle of the satin effect. (Range: -360 to 360)
	 */
	angle: number;

	/**
	 * If true, applies the satin effect.
	 */
	applied: boolean;

	/**
	 * The blending mode for the satin effect.
	 */
	blendMode: BlendMode;

	/**
	 * The distance (in pixels) from the SatinSetting to the satin effect.
	 */
	distance: number | string;

	/**
	 * The color applied to the satin effect, specified as a swatch (color, gradient, tint, or mixed ink), a color library color, a hex value, or as an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127; for HSB, specify three colors in the format [H,S,B], with H in the range 0 to 360 and S and B as percentages in the range 0 to 100.
	 */
	effectColor: Swatch;

	/**
	 * If true, inverts the satin effect.
	 */
	invertEffect: boolean;

	/**
	 * The opacity of the satin effect (as a percentage). (Range: 0 to 100)
	 */
	opacity: number;

	/**
	 * The width (in pixels) of the satin effect.
	 */
	size: number | string;

}

/**
 * Transparency settings for the content of the parent object.
 */
declare class ContentTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	readonly bevelAndEmbossSettings: BevelAndEmbossSetting;

	/**
	 * Blending mode settings.
	 */
	readonly blendingSettings: BlendingSetting;

	/**
	 * Settings related to the directional feather effect.
	 */
	readonly directionalFeatherSettings: DirectionalFeatherSetting;

	/**
	 * Settings related to the drop shadow effect.
	 */
	readonly dropShadowSettings: DropShadowSetting;

	/**
	 * Settings related to the feather effect.
	 */
	readonly featherSettings: FeatherSetting;

	/**
	 * Settings related to the gradient feather effect.
	 */
	readonly gradientFeatherSettings: GradientFeatherSetting;

	/**
	 * Settings related to the inner glow effect.
	 */
	readonly innerGlowSettings: InnerGlowSetting;

	/**
	 * Settings related to the inner shadow effect.
	 */
	readonly innerShadowSettings: InnerShadowSetting;

	/**
	 * Settings related to the outer glow effect.
	 */
	readonly outerGlowSettings: OuterGlowSetting;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Settings related to the satin effect
	 */
	readonly satinSettings: SatinSetting;

}

/**
 * Directional feather effect settings.
 */
declare class DirectionalFeatherSetting extends Preference {
	/**
	 * The angle of the feather. (Range: 180 to -180)
	 */
	angle: number;

	/**
	 * If true, the directional feather effect is applied.
	 */
	applied: boolean;

	/**
	 * The feather width (in pixels) on the bottom side of the object DirectionalFeatherSetting. (Range: .2 to 250)
	 */
	bottomWidth: number | string;

	/**
	 * The amount to choke the directional feather (as a percentage of the feather width). (Range: 0 to 100)
	 */
	chokeAmount: number;

	/**
	 * The shape-following algorithm applied to the feather.
	 */
	followShapeMode: FollowShapeModeOptions;

	/**
	 * The feather width (in pixels) on the left side of the DirectionalFeatherSetting.
	 */
	leftWidth: number | string;

	/**
	 * The amount of noise (as a percentage) applied to the feather region. (Range: 0 to 100)
	 */
	noise: number;

	/**
	 * The feather width (in pixels) on the right side of the DirectionalFeatherSetting. (Range: .2 to 250)
	 */
	rightWidth: number | string;

	/**
	 * The feather width (in pixels) on the top side of the object DirectionalFeatherSetting. (Range: .2 to 250)
	 */
	topWidth: number | string;

}

/**
 * Gradient feather effect settings.
 */
declare class GradientFeatherSetting extends Preference {
	/**
	 * The angle of the gradient feather.
	 */
	angle: number;

	/**
	 * If true, the gradient feather effect is applied.
	 */
	applied: boolean;

	/**
	 * The center point (for a radial gradient) or starting point (for a linear gradient) applied to the fill, as page coordinates in the format [x, y].
	 */
	gradientStart: (number | string)[];

	/**
	 * The hilite angle of the radial gradient feather.
	 */
	hiliteAngle: number;

	/**
	 * The hilite length of the radial gradient feather.
	 */
	hiliteLength: number | string;

	/**
	 * The length of the axial gradient, or radius of the radial gradient.
	 */
	length: number | string;

	/**
	 * A collection of opacity gradient stops.
	 */
	readonly opacityGradientStops: OpacityGradientStops;

	/**
	 * The type of gradient.
	 */
	type: GradientType;

}

/**
 * Transparency settings.
 */
declare class FindChangeTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	readonly bevelAndEmbossSettings: FindChangeBevelAndEmbossSetting;

	/**
	 * Blending mode settings.
	 */
	readonly blendingSettings: FindChangeBlendingSetting;

	/**
	 * Settings related to the directional feather effect.
	 */
	readonly directionalFeatherSettings: FindChangeDirectionalFeatherSetting;

	/**
	 * Settings related to the drop shadow effect.
	 */
	readonly dropShadowSettings: FindChangeDropShadowSetting;

	/**
	 * Settings related to the feather effect.
	 */
	readonly featherSettings: FindChangeFeatherSetting;

	/**
	 * Settings related to the gradient feather effect.
	 */
	readonly gradientFeatherSettings: FindChangeGradientFeatherSetting;

	/**
	 * Settings related to the inner glow effect.
	 */
	readonly innerGlowSettings: FindChangeInnerGlowSetting;

	/**
	 * Settings related to the inner shadow effect.
	 */
	readonly innerShadowSettings: FindChangeInnerShadowSetting;

	/**
	 * Settings related to the outer glow effect.
	 */
	readonly outerGlowSettings: FindChangeOuterGlowSetting;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Settings related to the satin effect
	 */
	readonly satinSettings: FindChangeSatinSetting;

}

/**
 * Transparency settings for the stroke of the parent object.
 */
declare class FindChangeStrokeTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	readonly bevelAndEmbossSettings: FindChangeBevelAndEmbossSetting;

	/**
	 * Blending mode settings.
	 */
	readonly blendingSettings: FindChangeBlendingSetting;

	/**
	 * Settings related to the directional feather effect.
	 */
	readonly directionalFeatherSettings: FindChangeDirectionalFeatherSetting;

	/**
	 * Settings related to the drop shadow effect.
	 */
	readonly dropShadowSettings: FindChangeDropShadowSetting;

	/**
	 * Settings related to the feather effect.
	 */
	readonly featherSettings: FindChangeFeatherSetting;

	/**
	 * Settings related to the gradient feather effect.
	 */
	readonly gradientFeatherSettings: FindChangeGradientFeatherSetting;

	/**
	 * Settings related to the inner glow effect.
	 */
	readonly innerGlowSettings: FindChangeInnerGlowSetting;

	/**
	 * Settings related to the inner shadow effect.
	 */
	readonly innerShadowSettings: FindChangeInnerShadowSetting;

	/**
	 * Settings related to the outer glow effect.
	 */
	readonly outerGlowSettings: FindChangeOuterGlowSetting;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Settings related to the satin effect
	 */
	readonly satinSettings: FindChangeSatinSetting;

}

/**
 * Transparency settings for the fill applied to the parent object.
 */
declare class FindChangeFillTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	readonly bevelAndEmbossSettings: FindChangeBevelAndEmbossSetting;

	/**
	 * Blending mode settings.
	 */
	readonly blendingSettings: FindChangeBlendingSetting;

	/**
	 * Settings related to the directional feather effect.
	 */
	readonly directionalFeatherSettings: FindChangeDirectionalFeatherSetting;

	/**
	 * Settings related to the drop shadow effect.
	 */
	readonly dropShadowSettings: FindChangeDropShadowSetting;

	/**
	 * Settings related to the feather effect.
	 */
	readonly featherSettings: FindChangeFeatherSetting;

	/**
	 * Settings related to the gradient feather effect.
	 */
	readonly gradientFeatherSettings: FindChangeGradientFeatherSetting;

	/**
	 * Settings related to the inner glow effect.
	 */
	readonly innerGlowSettings: FindChangeInnerGlowSetting;

	/**
	 * Settings related to the inner shadow effect.
	 */
	readonly innerShadowSettings: FindChangeInnerShadowSetting;

	/**
	 * Settings related to the outer glow effect.
	 */
	readonly outerGlowSettings: FindChangeOuterGlowSetting;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Settings related to the satin effect
	 */
	readonly satinSettings: FindChangeSatinSetting;

}

/**
 * Transparency settings for the content of the parent object.
 */
declare class FindChangeContentTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	readonly bevelAndEmbossSettings: FindChangeBevelAndEmbossSetting;

	/**
	 * Blending mode settings.
	 */
	readonly blendingSettings: FindChangeBlendingSetting;

	/**
	 * Settings related to the directional feather effect.
	 */
	readonly directionalFeatherSettings: FindChangeDirectionalFeatherSetting;

	/**
	 * Settings related to the drop shadow effect.
	 */
	readonly dropShadowSettings: FindChangeDropShadowSetting;

	/**
	 * Settings related to the feather effect.
	 */
	readonly featherSettings: FindChangeFeatherSetting;

	/**
	 * Settings related to the gradient feather effect.
	 */
	readonly gradientFeatherSettings: FindChangeGradientFeatherSetting;

	/**
	 * Settings related to the inner glow effect.
	 */
	readonly innerGlowSettings: FindChangeInnerGlowSetting;

	/**
	 * Settings related to the inner shadow effect.
	 */
	readonly innerShadowSettings: FindChangeInnerShadowSetting;

	/**
	 * Settings related to the outer glow effect.
	 */
	readonly outerGlowSettings: FindChangeOuterGlowSetting;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Settings related to the satin effect
	 */
	readonly satinSettings: FindChangeSatinSetting;

}

/**
 * Basic object blending settings.
 */
declare class FindChangeBlendingSetting extends BlendingSetting {
}

/**
 * Drop shadow settings.
 */
declare class FindChangeDropShadowSetting extends DropShadowSetting {
}

/**
 * Feather effect settings.
 */
declare class FindChangeFeatherSetting extends FeatherSetting {
}

/**
 * Inner shadow effect settings.
 */
declare class FindChangeInnerShadowSetting extends InnerShadowSetting {
}

/**
 * Outer glow effect settings.
 */
declare class FindChangeOuterGlowSetting extends OuterGlowSetting {
}

/**
 * Inner glow effect settings.
 */
declare class FindChangeInnerGlowSetting extends InnerGlowSetting {
}

/**
 * Bevel and emboss effect settings.
 */
declare class FindChangeBevelAndEmbossSetting extends BevelAndEmbossSetting {
}

/**
 * Satin effect settings.
 */
declare class FindChangeSatinSetting extends SatinSetting {
}

/**
 * Directional feather effect settings.
 */
declare class FindChangeDirectionalFeatherSetting extends DirectionalFeatherSetting {
}

/**
 * Gradient feather effect settings.
 */
declare class FindChangeGradientFeatherSetting extends GradientFeatherSetting {
}

/**
 * Text import preferences.
 */
declare class TextImportPreference extends Preference {
	/**
	 * The computer language character set used to create the text file.
	 */
	characterSet: TextImportCharacterSet;

	/**
	 * If true, converts the specified number of spaces into a tab. For information on specifying the number of spaces, see spaces into tabs count.
	 */
	convertSpacesIntoTabs: boolean;

	/**
	 * The dictionary to use for the imported text.
	 */
	dictionary: string;

	/**
	 * The platform used to create the imported text file.
	 */
	platform: ImportPlatform;

	/**
	 * The number of spaces to convert to a tab. Note: Valid when convert spaces into tabs is true.
	 */
	spacesIntoTabsCount: number;

	/**
	 * If true, the import filter removes extra carriage returns at the ends of lines.
	 */
	stripReturnsBetweenLines: boolean;

	/**
	 * If true, the import filter removes extra carriage returns between paragraphs.
	 */
	stripReturnsBetweenParagraphs: boolean;

	/**
	 * If true, convert straight quotes and apostrophes in the imported text to typographic quotation marks and apostrophes.
	 */
	useTypographersQuotes: boolean;

}

/**
 * Text export preferences.
 */
declare class TextExportPreference extends Preference {
	/**
	 * The character set.
	 */
	characterSet: TextExportCharacterSet;

	/**
	 * The platform on which the text file will be used.
	 */
	platform: ImportPlatform;

}

/**
 * Word RTF import preferences.
 */
declare class WordRTFImportPreference extends Preference {
	/**
	 * If true, bullets and numbers will be converted to embedded characters during import. If false, bullets and numbers will be rendered by InDesign.
	 */
	convertBulletsAndNumbersToText: boolean;

	/**
	 * The option for handling manual page breaks.
	 */
	convertPageBreaks: ConvertPageBreaks;

	/**
	 * The policy for converting tables whose formatting has been removed. Note: Valid when remove formatting is true.
	 */
	convertTablesTo: ConvertTablesOptions;

	/**
	 * If true, imports endnotes as static text. Else live endnotes
	 */
	importAsStaticEndnotes: boolean;

	/**
	 * If true, imports endnotes.
	 */
	importEndnotes: boolean;

	/**
	 * If true, imports footnotes.
	 */
	importFootnotes: boolean;

	/**
	 * If true, imports the index.
	 */
	importIndex: boolean;

	/**
	 * If true, imports the table of contents.
	 */
	importTOC: boolean;

	/**
	 * If true, imports unused styles.
	 */
	importUnusedStyles: boolean;

	/**
	 * If true, preserves inline graphics.
	 */
	preserveGraphics: boolean;

	/**
	 * If true, maintains character formatting in text whose formatting has been removed. Note: Valid when remove formatting is true.
	 */
	preserveLocalOverrides: boolean;

	/**
	 * If true, preserves comments and edits in the imported file.
	 */
	preserveTrackChanges: boolean;

	/**
	 * If true, removes text and table formatting.
	 */
	removeFormatting: boolean;

	/**
	 * The option for handling style name conflicts.
	 */
	resolveCharacterStyleClash: ResolveStyleClash;

	/**
	 * The option for resolving conflicts that arise when paragraph styles have matching names.
	 */
	resolveParagraphStyleClash: ResolveStyleClash;

	/**
	 * If true, convert straight quotes and apostrophes in the imported text to typographic quotation marks and apostrophes.
	 */
	useTypographersQuotes: boolean;

}

/**
 * Tagged text export preferences.
 */
declare class TaggedTextExportPreference extends Preference {
	/**
	 * The character set.
	 */
	characterSet: TagTextExportCharacterSet;

	/**
	 * The form for tags in the exported text.
	 */
	tagForm: TagTextForm;

}

/**
 * Tagged text import preferences.
 */
declare class TaggedTextImportPreference extends Preference {
	/**
	 * If true, removes text formatting.
	 */
	removeTextFormatting: boolean;

	/**
	 * The policy for resolving conflicts when style names in the imported tagged text file match style names the current publication.
	 */
	styleConflict: StyleConflict;

	/**
	 * If true, convert straight quotes and apostrophes in the imported text to typographic quotation marks and apostrophes.
	 */
	useTypographersQuotes: boolean;

}

/**
 * Excel import preferences.
 */
declare class ExcelImportPreference extends Preference {
	/**
	 * The cell alignment for the imported document.
	 */
	alignmentStyle: AlignmentStyleOptions;

	/**
	 * The number of decimal places to include. Note: Valid only when alignment style is decimal.
	 */
	decimalPlaces: number;

	/**
	 * The import error code. (Key: 0=Success; 1=Empty Sheet; 2=Invalid sheet; 3=Invalid range; 4=Invalid View; 5=Misc. Error)
	 */
	errorCode: number;

	/**
	 * If true, preserves inline graphics.
	 */
	preserveGraphics: boolean;

	/**
	 * The range of cells to import. Note: Use a colon (:) to separate the start and end cell names in the range.
	 */
	rangeName: string;

	/**
	 * The worksheet's index. For information, see sheet name.
	 */
	sheetIndex: number;

	/**
	 * The worksheet to import.
	 */
	sheetName: string;

	/**
	 * If true, shows hidden cells.
	 */
	showHiddenCells: boolean;

	/**
	 * The format for imported spreadsheets.
	 */
	tableFormatting: TableFormattingOptions;

	/**
	 * If true, convert straight quotes and apostrophes in the imported text to typographic quotation marks and apostrophes.
	 */
	useTypographersQuotes: boolean;

	/**
	 * The stored custom or personal view(s) to import with the file.
	 */
	viewName: string;

}

/**
 * Metadata preferences.
 */
declare class MetadataPreference extends Preference {
	/**
	 * The author of the document.
	 */
	author: string;

	/**
	 * The URL of the file that contains the linked copyright statement.
	 */
	copyrightInfoURL: string;

	/**
	 * The text to use as a copyright notice.
	 */
	copyrightNotice: string;

	/**
	 * The copyright status of the document.
	 */
	copyrightStatus: CopyrightStatus;

	/**
	 * The creation date of the document.
	 */
	readonly creationDate: Date;

	/**
	 * The name of the application used to create the document.
	 */
	readonly creator: string;

	/**
	 * The description of the MetadataPreference.
	 */
	description: string;

	/**
	 * The title of the document.
	 */
	documentTitle: string;

	/**
	 * The format of the document.
	 */
	readonly format: string;

	/**
	 * The job name.
	 */
	jobName: string;

	/**
	 * The list of keywords associated with the document.
	 */
	keywords: string[];

	/**
	 * The most recent modification date of the document.
	 */
	readonly modificationDate: Date;

	/**
	 * The location of the document on the asset management server.
	 */
	readonly serverURL: string;

	/**
	 * Uses metadata from the specified external file to define any undefined metadata properties in the document.
	 * @param from The path to the external file that contains the metadata.
	 * @param affectAll If true, also replaces existing metadata with data from the external file. If false, does not replace existing metadata. Note: Defaults to false.
	 */
	append(from: File, affectAll?: boolean): void;

	/**
	 * Counts the number of items in the container.
	 * @param namespace The namespace of the container.
	 * @param path The path to the container.
	 */
	countContainer(namespace: string, path: string): number;

	/**
	 * Creates an empty container.
	 * @param namespace The namespace of the container.
	 * @param path The path to the container.
	 * @param index The index of the item within the container. Specified values must be 1 or greater. To append the item to the end of the index and allow the next available value to be assigned, use 0.
	 * @param container The container type. Note: Required when the new item is the first item added to the container.
	 */
	createContainerItem(namespace: string, path: string, index?: number, container?: ContainerType): void;

	/**
	 * Gets the XMP property value associated with the specified path.
	 * @param namespace The namespace of the property.
	 * @param path The specified path.
	 */
	getProperty(namespace: string, path: string): string;

	/**
	 * Replaces the current metadata in the document with metadata from the specified file.
	 * @param using The full path to the file that contains the replacement metadata.
	 * @param affectAll If true, treats all properties as external. Note: Defaults to false.
	 */
	replace(using: File, affectAll?: boolean): void;

	/**
	 * Saves the metadata in the document to an external file.
	 * @param to The path to the external file.
	 */
	save(to: File): void;

	/**
	 * Sets the XMP property associated with the specified path.
	 * @param namespace The namespace of the property.
	 * @param path The specified path(s).
	 * @param value The value to assign to the property. Note: To remove the property, pass an empty string.
	 */
	setProperty(namespace: string, path: string, value: string): void;

}

/**
 * Default display performance settings for the application.
 */
declare class DisplayPerformancePreference extends Preference {
	/**
	 * Object-level default display performance settings. Note: The settings do not apply to graphics that are already placed in the document.
	 */
	defaultDisplaySettings: ViewDisplaySettings;

	/**
	 * If true, ignores object-level default display performance settings and uses the application-level default display settings; also prevents setting object-level settings.
	 */
	ignoreLocalSettings: boolean;

	/**
	 * If true, sets application-level preferences to preserve object-level display settings.
	 */
	persistLocalSettings: boolean;

}

/**
 * Object-level display settings.
 */
declare class DisplaySetting {
	/**
	 * If true, uses anti-aliasing for text and bitmap images.
	 */
	antialiasing: boolean;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The point size below which text is greeked.
	 */
	greekBelow: number;

	/**
	 * The index of the DisplaySetting within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the DisplaySetting (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The display method for raster images.
	 */
	raster: TagRaster;

	/**
	 * The display setting for transparencies.
	 */
	transparency: TagTransparency;

	/**
	 * The display method for vector images.
	 */
	vector: TagVector;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DisplaySetting[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the DisplaySetting.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * Display setting properties.
 */
declare class DisplaySettings {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the DisplaySetting with the specified index.
	 * @param index The index.
	 */
	[index: number]: DisplaySetting;

	/**
	 * Returns any DisplaySetting in the collection.
	 */
	anyItem(): DisplaySetting;

	/**
	 * Displays the number of elements in the DisplaySetting.
	 */
	count(): number;

	/**
	 * Returns every DisplaySetting in the collection.
	 */
	everyItem(): DisplaySetting[];

	/**
	 * Returns the first DisplaySetting in the collection.
	 */
	firstItem(): DisplaySetting;

	/**
	 * Returns the DisplaySetting with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DisplaySetting;

	/**
	 * Returns the DisplaySettings within the specified range.
	 * @param from The DisplaySetting, index, or name at the beginning of the range.
	 * @param to The DisplaySetting, index, or name at the end of the range.
	 */
	itemByRange(from: DisplaySetting | number | string, to: DisplaySetting | number | string): DisplaySetting[];

	/**
	 * Returns the last DisplaySetting in the collection.
	 */
	lastItem(): DisplaySetting;

	/**
	 * Returns the middle DisplaySetting in the collection.
	 */
	middleItem(): DisplaySetting;

	/**
	 * Returns the DisplaySetting whose index follows the specified DisplaySetting in the collection.
	 * @param obj The DisplaySetting whose index comes before the desired DisplaySetting.
	 */
	nextItem(obj: DisplaySetting): DisplaySetting;

	/**
	 * Returns the DisplaySetting with the index previous to the specified index.
	 * @param obj The index of the DisplaySetting that follows the desired DisplaySetting.
	 */
	previousItem(obj: DisplaySetting): DisplaySetting;

	/**
	 * Generates a string which, if executed, will return the DisplaySetting.
	 */
	toSource(): string;

}

/**
 * GPU performance settings for the application.
 */
declare class GpuPerformancePreference extends Preference {
	/**
	 * If true, enables animated zoom.
	 */
	enableAnimatedZoom: boolean;

	/**
	 * If true, enables GPU performance.
	 */
	enableGpuPerformance: boolean;

}

/**
 * XML view preferences
 */
declare class XMLViewPreference extends Preference {
	/**
	 * If true, displays attributes as well as elements in the structure view. Note: Valid only when show structure is true.
	 */
	showAttributes: boolean;

	/**
	 * If true, displays the structure view.
	 */
	showStructure: boolean;

	/**
	 * If true, displays XML tags.
	 */
	showTagMarkers: boolean;

	/**
	 * If true, displays the tag options dialog when tagging any item whose parent is not tagged.
	 */
	readonly showTagOptions: boolean;

	/**
	 * If true, displays XML tags in tagged frames.
	 */
	showTaggedFrames: boolean;

	/**
	 * If true, the structure view displays text snippets of element content. Note: Valid only when show structure is true.
	 */
	showTextSnippets: boolean;

}

/**
 * Preflight options.
 */
declare class PreflightOption extends Preference {
	/**
	 * If true, embed working profile when creating new document.
	 */
	preflightEmbedWorkingProfile: boolean;

	/**
	 * If true, include objects that do not print when preflighting.
	 */
	preflightIncludeNonprintingObjects: boolean;

	/**
	 * If true, include objects on pasteboard when preflighting.
	 */
	preflightIncludeObjectsOnPasteboard: boolean;

	/**
	 * If true, preflight is turned off for all documents or for this document.
	 */
	preflightOff: boolean;

	/**
	 * The policy for preflighting applied when opening a document or book, whether to use embedded profile or the another profile when the preflight is turned on.
	 */
	preflightProfilePolicy: PreflightProfileOptions;

	/**
	 * The pages or documents to preflight, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	preflightScope: PreflightScopeOptions | string;

	/**
	 * Which layers to preflight.
	 */
	preflightWhichLayers: PreflightLayerOptions;

	/**
	 * The working preflight profile.
	 */
	preflightWorkingProfile: PreflightProfile | string;

}

/**
 * Preflight book options.
 */
declare class PreflightBookOption extends Preference {
	/**
	 * If true, include objects that do not print when preflighting.
	 */
	preflightIncludeNonprintingObjects: boolean;

	/**
	 * If true, include objects on pasteboard when preflighting.
	 */
	preflightIncludeObjectsOnPasteboard: boolean;

	/**
	 * The policy for preflighting applied when opening a document or book, whether to use embedded profile or the another profile when the preflight is turned on.
	 */
	preflightProfilePolicy: PreflightProfileOptions;

	/**
	 * The pages or documents to preflight, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	preflightScope: PreflightScopeOptions | string;

	/**
	 * Which layers to preflight.
	 */
	preflightWhichLayers: PreflightLayerOptions;

	/**
	 * The working preflight profile.
	 */
	preflightWorkingProfile: PreflightProfile | string;

}

/**
 * PNG export preferences.
 */
declare class PNGExportPreference extends Preference {
	/**
	 * If true, use anti-aliasing for text and vectors during export.
	 */
	antiAlias: boolean;

	/**
	 * The export resolution expressed as a real number instead of an integer. (Range: 1.0 to 2400.0)
	 */
	exportResolution: number;

	/**
	 * If true, exports each spread as a single PNG file. If false, exports facing pages as separate files and appends sequential numbers to each file name.
	 */
	exportingSpread: boolean;

	/**
	 * The page(s) to export, specified as a page number or an array of page numbers. Note: Valid when PNG export range is not all.
	 */
	pageString: string;

	/**
	 * RGB or Gray
	 */
	pngColorSpace: PNGColorSpaceEnum;

	/**
	 * The page range to export.
	 */
	pngExportRange: PNGExportRangeEnum;

	/**
	 * The compression quality.
	 */
	pngQuality: PNGQualityEnum;

	/**
	 * If true, simulates the effects of overprinting spot and process colors in the same way they would occur when printing.
	 */
	simulateOverprint: boolean;

	/**
	 * If true, use a transparent background for the exported PNG.
	 */
	transparentBackground: boolean;

	/**
	 * If true, uses the document's bleed settings in the exported PNG.
	 */
	useDocumentBleeds: boolean;

}

/**
 * Button preferences.
 */
declare class ButtonPreference extends Preference {
	/**
	 * The name of the ButtonPreference.
	 */
	name: string;

}

/**
 * Watermark preference
 */
declare class WatermarkPreference extends Preference {
	/**
	 * Watermark do print for a document
	 */
	watermarkDoPrint: boolean;

	/**
	 * Watermark draw in back for a document
	 */
	watermarkDrawInBack: boolean;

	/**
	 * Watermark font color for a document.
	 */
	watermarkFontColor: [number, number, number] | UIColors;

	/**
	 * Watermark font family display name
	 */
	watermarkFontFamily: string;

	/**
	 * Watermark font point size for a document
	 */
	watermarkFontPointSize: number;

	/**
	 * Watermark font style name
	 */
	watermarkFontStyle: string;

	/**
	 * Watermark horizontal offset for a document
	 */
	watermarkHorizontalOffset: number | string;

	/**
	 * Watermark horizontal position enum for a document
	 */
	watermarkHorizontalPosition: WatermarkHorizontalPositionEnum;

	/**
	 * Watermark opacity (as a percentage). (Range: 0 to 100)
	 */
	watermarkOpacity: number;

	/**
	 * Watermark rotation for a document
	 */
	watermarkRotation: number;

	/**
	 * Watermark text for a document
	 */
	watermarkText: string;

	/**
	 * Watermark vertical offset for a document
	 */
	watermarkVerticalOffset: number | string;

	/**
	 * Watermark vertical position enum for a document
	 */
	watermarkVerticalPosition: WatermarkVerticalPositionEnum;

	/**
	 * Watermark visibility for a document
	 */
	watermarkVisibility: boolean;

}

/**
 * General application preferences.
 */
declare class GeneralPreference extends Preference {
	/**
	 * If true, application bar is shown.
	 */
	applicationBarShown: boolean;

	/**
	 * If true, on creating new char style through the new char style dialog, it will be exported to CC Libraries as well
	 */
	autoAddCharStyleToCCLibraries: boolean;

	/**
	 * If true, on creating new para style through the new para style dialog, it will be exported to CC Libraries as well
	 */
	autoAddParaStyleToCCLibraries: boolean;

	/**
	 * If true, on creating new swatch through the new swatch dialog, it will be exported to CC Libraries as well
	 */
	autoAddSwatchToCCLibraries: boolean;

	/**
	 * If true, panel drawers close automatically.
	 */
	autoCollapseIconPanels: boolean;

	/**
	 * If true, vertical reveal strips appear when palette UI is hidden.
	 */
	autoShowHiddenPanels: boolean;

	/**
	 * The threshold at which to trigger font subsetting based on the number of glyphs the font contains.
	 */
	completeFontDownloadGlyphLimit: number;

	/**
	 * Enable the creation of links on content place
	 */
	createLinksOnContentPlace: boolean;

	/**
	 * When using a custom monitor resolution, what is the value of that resolution in pixels per inch
	 */
	customMonitorPpi: number;

	/**
	 * If true, enable content-aware fit as default while placing items
	 */
	enableContentAwareFit: boolean;

	/**
	 * If true, floating windows can be docked by user as tabs.
	 */
	enableFloatingWindowDocking: boolean;

	/**
	 * Controls whether or not multi-touch gestures are enabled.
	 */
	enableMultiTouchGestures: boolean;

	/**
	 * Controls whether or not to greek vector graphics when dragging at high quality.
	 */
	greekVectorGraphicsOnDrag: boolean;

	/**
	 * Controls whether or not to highlight object under selection tool.
	 */
	highlightObjectUnderSelectionTool: boolean;

	/**
	 * If true, includes a preview in saved documents.
	 */
	includePreview: boolean;

	/**
	 * The value of the system reported main monitor resolution
	 */
	readonly mainMonitorPpi: number;

	/**
	 * Enable the mapping of styles on content place
	 */
	mapStylesOnContentPlace: boolean;

	/**
	 * Controls whether page items move when a page is repositioned from the UI. The option/alt key temporarily reverses this property
	 */
	objectsMoveWithPage: boolean;

	/**
	 * If true, documents open as tabs.
	 */
	openDocumentsAsTabs: boolean;

	/**
	 * Number of items to show in the Open Recent menu list. Range: 0 to 30
	 */
	openRecentLength: number;

	/**
	 * The page numbering method.
	 */
	pageNumbering: PageNumberingOptions;

	/**
	 * If true, Large Tabs are shown for panels else Smaller tabs are shown
	 */
	panelTabHeightPreference: boolean;

	/**
	 * Specify the Pasteboard color preference (0 or 1). Specify 0 to set preference to Default White, and 1 to set preference to Match with Theme Color.
	 */
	pasteboardColorPreference: number;

	/**
	 * Controls whether or not to show thumbnails of imported files in the Place icon.
	 */
	placeCursorUsesThumbnails: boolean;

	/**
	 * Controls whether or not you can select and interact with a locked item. When this is off, only position is locked.
	 */
	preventSelectingLockedItems: boolean;

	/**
	 * The pages to create preview images for. Note: Valid when include preview is true.
	 */
	previewPages: PreviewPagesOptions;

	/**
	 * The preview size. Note: Valid when include preview is true.
	 */
	previewSize: PreviewSizeOptions;

	/**
	 * Controls whether or not the anchor object adornment is shown.
	 */
	showAnchorObjectAdornment: boolean;

	/**
	 * Controls whether or not the content grabber adornment is shown.
	 */
	showContentGrabber: boolean;

	/**
	 * Show the conveyor on content collector or content placer tool activation
	 */
	showConveyor: boolean;

	/**
	 * If true, legacy new document dialog will be shown when Ctrl/Cmd + N are pressed.
	 */
	showLegacyNewDocumentDialog: boolean;

	/**
	 * Controls whether or not the live corners grabber adornment is shown.
	 */
	showLiveCorners: boolean;

	/**
	 * Controls whether or not to show the master page overlay when a page is selected using the Page Tool.
	 */
	showMasterPageOverlay: boolean;

	/**
	 * If true, show start workspace when no documents are open
	 */
	showStartWorkspace: boolean;

	/**
	 * If true, show stock cart adornment on unlicensed stock images
	 */
	showStockPurchaseAdornment: boolean;

	/**
	 * Controls whether or not to dynamically display transformation information as part of the cursor while manipulating page items.
	 */
	showTransformationValues: boolean;

	/**
	 * If true, show What's New dialog on startup.
	 */
	showWhatsNewOnStartup: boolean;

	/**
	 * The location in which to store temporary files.
	 */
	temporaryFolder: File;

	/**
	 * Tool tip behavior.
	 */
	toolTips: ToolTipOptions;

	/**
	 * Controls the appearance of the Tools panel.
	 */
	toolsPanel: ToolsPanelOptions;

	/**
	 * Specify the Application User Interface brightness preference (from 0.0 to 1.0). To use color theme brightness preset values, specify 0.0 for Dark, 0.50 for Medium Dark, 0.51 for Medium Bright, and 1.0 for Bright. Any value between 0.0 and 1.0 will automatically be mapped to closest preset.
	 */
	uiBrightnessPreference: number;

	/**
	 * If true, objects after ungrouping go back to their original layers.
	 */
	ungroupRemembersLayers: boolean;

	/**
	 * If true, application lives in a frame.
	 */
	useApplicationFrame: boolean;

	/**
	 * Enable the use of a custom monitor resolution in pixels per inch as opposed to querying the system settings
	 */
	useCustomMonitorResolution: boolean;

	/**
	 * If true, use incoming spot color definition in case of conflict, when placing or pasting content
	 */
	useIncomingSpotUponConflict: boolean;

}

/**
 * Clipboard preferences.
 */
declare class ClipboardPreference extends Preference {
	/**
	 * If true, copies PDF to the clipboard.
	 */
	copyPDFToClipboard: boolean;

	/**
	 * If true, objects cut or copied from different layers retain their layer assignment when pasted.
	 */
	pasteRemembersLayers: boolean;

	/**
	 * If true, pastes PDF if available.
	 */
	preferPDFWhenPasting: boolean;

	/**
	 * If true, includes text attributes when pasting text.
	 */
	preferStyledTextWhenPasting: boolean;

	/**
	 * If true, preserves PDF data on the system clipboard when the application exits.
	 */
	preservePdfClipboardAtQuit: boolean;

}

/**
 * Transform preferences.
 */
declare class TransformPreference extends Preference {
	/**
	 * If true, transparency effects are scaled when objects are scaled.
	 */
	adjustEffectsWhenScaling: boolean;

	/**
	 * If true, strokes are scaled when objects are scaled.
	 */
	adjustStrokeWeightWhenScaling: boolean;

	/**
	 * If true, includes the stroke weight when displaying object dimensions. If false, measures objects from the path or frame.
	 */
	dimensionsIncludeStrokeWeight: boolean;

	/**
	 * If true, measures the x and y values of the object relative to the containing frame. If false, measures the x and y values relative to the rulers.
	 */
	showContentOffset: boolean;

	/**
	 * If true, transformation values are relative to the parent object. If false, the transformation values are absolute values.
	 */
	transformationsAreTotals: boolean;

	/**
	 * The method used to scale a page item.
	 */
	whenScaling: WhenScalingOptions;

}

/**
 * Note preferences.
 */
declare class NotePreference extends Preference {
	/**
	 * If true, includes inline notes content when using Find/Change commands (in Galley and Story views only).
	 */
	findAndReplaceNoteContents: boolean;

	/**
	 * The background color for notes.
	 */
	noteBackgroundColor: NoteBackgrounds;

	/**
	 * The note color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as an InCopy UI color.
	 */
	noteColor: [number, number, number] | InCopyUIColors;

	/**
	 * The color to use for notes.
	 */
	noteColorChoices: NoteColorChoices;

	/**
	 * If true, displays note information and some note content when the mouse pointer hovers over a note anchor in layout view or a note bookend in galley or story view.
	 */
	showNoteTips: boolean;

	/**
	 * If true, includes inline notes content when using Spell Check (in Galley and Story views only).
	 */
	spellCheckNotes: boolean;

}

/**
 * Track changes preferences.
 */
declare class TrackChangesPreference extends Preference {
	/**
	 * The background color option for added text.
	 */
	addedBackgroundColorChoice: ChangeBackgroundColorChoices;

	/**
	 * The color option for added text.
	 */
	addedTextColorChoice: ChangeTextColorChoices;

	/**
	 * The background color for added text, specified as an InCopy UI color. Note: Valid only when added background color choice is change background uses change pref color.
	 */
	backgroundColorForAddedText: [number, number, number] | InCopyUIColors;

	/**
	 * The background color for deleted text, specified as an InCopy UI color. Note: Valid only when deleted background color choice is change background uses change pref color.
	 */
	backgroundColorForDeletedText: [number, number, number] | InCopyUIColors;

	/**
	 * The background color for moved text, specified as an InCopy UI color. Note: Valid only when moved background color choice is change background uses change pref color.
	 */
	backgroundColorForMovedText: [number, number, number] | InCopyUIColors;

	/**
	 * The change bar color, specified as an InCopy UI color.
	 */
	changeBarColor: [number, number, number] | InCopyUIColors;

	/**
	 * The background color option for deleted text.
	 */
	deletedBackgroundColorChoice: ChangeBackgroundColorChoices;

	/**
	 * The color option for deleted text.
	 */
	deletedTextColorChoice: ChangeTextColorChoices;

	/**
	 * The change bar location.
	 */
	locationForChangeBar: ChangebarLocations;

	/**
	 * The marking that identifies added text.
	 */
	markingForAddedText: ChangeMarkings;

	/**
	 * The marking that identifies deleted text.
	 */
	markingForDeletedText: ChangeMarkings;

	/**
	 * The marking that identifies moved text.
	 */
	markingForMovedText: ChangeMarkings;

	/**
	 * The background color option for moved text.
	 */
	movedBackgroundColorChoice: ChangeBackgroundColorChoices;

	/**
	 * The color option for moved text.
	 */
	movedTextColorChoice: ChangeTextColorChoices;

	/**
	 * If true, prevent duplicate user color for tracked changes background color.
	 */
	preventDuplicateColor: boolean;

	/**
	 * If true, displays added text.
	 */
	showAddedText: boolean;

	/**
	 * If true, displays change bars,
	 */
	showChangeBars: boolean;

	/**
	 * If true, displays deleted text.
	 */
	showDeletedText: boolean;

	/**
	 * If true, displays moved text.
	 */
	showMovedText: boolean;

	/**
	 * If true, includes deleted text when using the Spell Check command.
	 */
	spellCheckDeletedText: boolean;

	/**
	 * The color for added text, specified as an InCopy UI color. Note: Valid only when added text color choice is change uses change pref color.
	 */
	textColorForAddedText: [number, number, number] | InCopyUIColors;

	/**
	 * The color for deleted text, specified as an InCopy UI color. Note: Valid only when deleted text color choice is change uses change pref color.
	 */
	textColorForDeletedText: [number, number, number] | InCopyUIColors;

	/**
	 * The color for moved text, specified as an InCopy UI color. Note: Valid only when moved text color choice is change uses change pref color.
	 */
	textColorForMovedText: [number, number, number] | InCopyUIColors;

}

/**
 * JPEG export preferences.
 */
declare class JPEGExportPreference extends Preference {
	/**
	 * If true, use anti-aliasing for text and vectors during export.
	 */
	antiAlias: boolean;

	/**
	 * True to embed the color profile, false otherwise.
	 */
	embedColorProfile: boolean;

	/**
	 * The export	resolution expressed as a real number instead of an integer. (Range: 1.0 to 2400.0)
	 */
	exportResolution: number;

	/**
	 * If true, exports each spread as a single JPEG file. If false, exports facing pages as separate files and appends sequential numbers to each file name.
	 */
	exportingSpread: boolean;

	/**
	 * One of RGB, CMYK or Gray
	 */
	jpegColorSpace: JpegColorSpaceEnum;

	/**
	 * The page range to export.
	 */
	jpegExportRange: ExportRangeOrAllPages;

	/**
	 * The compression quality.
	 */
	jpegQuality: JPEGOptionsQuality;

	/**
	 * The rendering style.
	 */
	jpegRenderingStyle: JPEGOptionsFormat;

	/**
	 * The page(s) to export, specified as a page number or an array of page numbers. Note: Valid when JPEG export range is not all.
	 */
	pageString: string;

	/**
	 * If true, simulates the effects of overprinting spot and process colors in the same way they would occur when printing.
	 */
	simulateOverprint: boolean;

	/**
	 * If true, uses the document's bleed settings in the exported JPEG.
	 */
	useDocumentBleeds: boolean;

}

/**
 * Data merge preferences.
 */
declare class DataMergePreference extends Preference {
	/**
	 * The order in which to arrange multiple records on the page in the target document.
	 */
	arrangeBy: ArrangeBy;

	/**
	 * The offset value of the bottom margin in the target document.
	 */
	bottomMargin: number | string;

	/**
	 * The amount of space between columns of records in the target document.
	 */
	columnSpacing: number | string;

	/**
	 * The offset value of the left margin in the target document.
	 */
	leftMargin: number | string;

	/**
	 * The number of the record to merge. Note: Valid only when record selection is one record.
	 */
	recordNumber: number;

	/**
	 * The range of records to merge. Note: Valid only when record selection is range.
	 */
	recordRange: string;

	/**
	 * The records to merge.
	 */
	recordSelection: RecordSelection;

	/**
	 * The number of records to place on each page in the document.
	 */
	recordsPerPage: RecordsPerPage;

	/**
	 * The offset value of the right margin in the target document.
	 */
	rightMargin: number | string;

	/**
	 * The amount of space between rows of records in the target document.
	 */
	rowSpacing: number | string;

	/**
	 * The offset value of the top margin in the target document.
	 */
	topMargin: number | string;

	/**
	 * If true, lists missing images in the specified output file.
	 * @param outputMissingImagesReportFile The path to the output file.
	 */
	alertMissingImages(outputMissingImagesReportFile: File): boolean;

}

/**
 * Data merge options.
 */
declare class DataMergeOption extends Preference {
	/**
	 * If true, centers the image in the frame; preserves the frame size as well as content size and proportions. Note: If the content is larger than the frame, content around the edges is obscured by the bounding box of the frame. This doesn't work with fittingOption CONTENT_AWARE_FIT
	 */
	centerImage: boolean;

	/**
	 * If true, creates a new document when records are merged.
	 */
	createNewDocument: boolean;

	/**
	 * The maximum number of pages per document.
	 */
	documentSize: number;

	/**
	 * Instructions for fitting content in a frame.
	 */
	fittingOption: Fitting;

	/**
	 * If true, links images to the target document. If false, embeds images in the target document.
	 */
	linkImages: boolean;

	/**
	 * If true, removes blank lines caused by empty fields.
	 */
	removeBlankLines: boolean;

}

/**
 * A data merge object.
 */
declare class DataMerge extends Preference {
	/**
	 * A collection of data merge fields.
	 */
	readonly dataMergeFields: DataMergeFields;

	/**
	 * The data merge preference properties that define the layout and content of the target page.
	 */
	readonly dataMergePreferences: DataMergePreference;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * Merges records and exports to PDF.
	 * @param to The path of exported PDF file.
	 * @param using The PDF export style to use.
	 * @param outputOversetReportFile The path to the file in which to store the overset report.
	 */
	exportFile(to: File, using: PDFExportPreset, outputOversetReportFile: File): void;

	/**
	 * Merges records and produces an optional overset report.
	 * @param outputOversetReportFile The path to the file in which to store the overset report.
	 */
	mergeRecords(outputOversetReportFile: File): void;

	/**
	 * Removes the data source.
	 */
	removeDataSource(): void;

	/**
	 * Specifies the file to use as the data source.
	 * @param dataSourceFile The path to the data source file.
	 */
	selectDataSource(dataSourceFile: File): void;

	/**
	 * Updates the data source file with the most current data.
	 */
	updateDataSource(): void;

}

/**
 * Chapter numbering preferences.
 */
declare class ChapterNumberPreference extends Preference {
	/**
	 * Chapter number.
	 */
	chapterNumber: number;

	/**
	 * Chapter number formatting options.
	 */
	chapterNumberFormat: NumberingStyle | string;

	/**
	 * Source for generating the chapter number.
	 */
	chapterNumberSource: ChapterNumberSources;

}

/**
 * Object style object effects category settings.
 */
declare class ObjectStyleObjectEffectsCategorySettings extends Preference {
	/**
	 * If true, the object style will apply bevel emboss.
	 */
	enableBevelEmboss: boolean;

	/**
	 * If true, the object style will apply directional feathering.
	 */
	enableDirectionalFeather: boolean;

	/**
	 * If true, the object style will apply drop shadows.
	 */
	enableDropShadow: boolean;

	/**
	 * If true, the object style will apply feathering.
	 */
	enableFeather: boolean;

	/**
	 * If true, the object style will apply gradient feathering.
	 */
	enableGradientFeather: boolean;

	/**
	 * If true, the object style will apply inner glow.
	 */
	enableInnerGlow: boolean;

	/**
	 * If true, the object style will apply inner shadows.
	 */
	enableInnerShadow: boolean;

	/**
	 * If true, the object style will apply outer glow.
	 */
	enableOuterGlow: boolean;

	/**
	 * If true, the object style will apply satin.
	 */
	enableSatin: boolean;

	/**
	 * If true, the object style will apply transparency settings.
	 */
	enableTransparency: boolean;

}

/**
 * Object style stroke effects category settings.
 */
declare class ObjectStyleStrokeEffectsCategorySettings extends Preference {
	/**
	 * If true, the object style will apply bevel emboss.
	 */
	enableBevelEmboss: boolean;

	/**
	 * If true, the object style will apply directional feathering.
	 */
	enableDirectionalFeather: boolean;

	/**
	 * If true, the object style will apply drop shadows.
	 */
	enableDropShadow: boolean;

	/**
	 * If true, the object style will apply feathering.
	 */
	enableFeather: boolean;

	/**
	 * If true, the object style will apply gradient feathering.
	 */
	enableGradientFeather: boolean;

	/**
	 * If true, the object style will apply inner glow.
	 */
	enableInnerGlow: boolean;

	/**
	 * If true, the object style will apply inner shadows.
	 */
	enableInnerShadow: boolean;

	/**
	 * If true, the object style will apply outer glow.
	 */
	enableOuterGlow: boolean;

	/**
	 * If true, the object style will apply satin.
	 */
	enableSatin: boolean;

	/**
	 * If true, the object style will apply transparency settings.
	 */
	enableTransparency: boolean;

}

/**
 * Object style fill effects category settings.
 */
declare class ObjectStyleFillEffectsCategorySettings extends Preference {
	/**
	 * If true, the object style will apply bevel emboss.
	 */
	enableBevelEmboss: boolean;

	/**
	 * If true, the object style will apply directional feathering.
	 */
	enableDirectionalFeather: boolean;

	/**
	 * If true, the object style will apply drop shadows.
	 */
	enableDropShadow: boolean;

	/**
	 * If true, the object style will apply feathering.
	 */
	enableFeather: boolean;

	/**
	 * If true, the object style will apply gradient feathering.
	 */
	enableGradientFeather: boolean;

	/**
	 * If true, the object style will apply inner glow.
	 */
	enableInnerGlow: boolean;

	/**
	 * If true, the object style will apply inner shadows.
	 */
	enableInnerShadow: boolean;

	/**
	 * If true, the object style will apply outer glow.
	 */
	enableOuterGlow: boolean;

	/**
	 * If true, the object style will apply satin.
	 */
	enableSatin: boolean;

	/**
	 * If true, the object style will apply transparency settings.
	 */
	enableTransparency: boolean;

}

/**
 * Object style content effects category settings.
 */
declare class ObjectStyleContentEffectsCategorySettings extends Preference {
	/**
	 * If true, the object style will apply bevel emboss.
	 */
	enableBevelEmboss: boolean;

	/**
	 * If true, the object style will apply directional feathering.
	 */
	enableDirectionalFeather: boolean;

	/**
	 * If true, the object style will apply drop shadows.
	 */
	enableDropShadow: boolean;

	/**
	 * If true, the object style will apply feathering.
	 */
	enableFeather: boolean;

	/**
	 * If true, the object style will apply gradient feathering.
	 */
	enableGradientFeather: boolean;

	/**
	 * If true, the object style will apply inner glow.
	 */
	enableInnerGlow: boolean;

	/**
	 * If true, the object style will apply inner shadows.
	 */
	enableInnerShadow: boolean;

	/**
	 * If true, the object style will apply outer glow.
	 */
	enableOuterGlow: boolean;

	/**
	 * If true, the object style will apply satin.
	 */
	enableSatin: boolean;

	/**
	 * If true, the object style will apply transparency settings.
	 */
	enableTransparency: boolean;

}

/**
 * Grabber preferences.
 */
declare class GrabberPreference extends Preference {
	/**
	 * The display performance quality setting to use when scrolling.
	 */
	grabberPanning: PanningTypes;

}

/**
 * Type Contextual UI Preference.
 */
declare class TypeContextualUiPreference extends Preference {
	/**
	 * Preference for showing contextual ui for alternates.
	 */
	showAlternatesUi: boolean;

	/**
	 * Preference for showing contextual ui for fractions.
	 */
	showFractionsUi: boolean;

}

/**
 * Preferences for alignment and distribution.
 */
declare class AlignDistributePreference extends Preference {
	/**
	 * The bounds to use as a basis for aligning or distributing page items.
	 */
	alignDistributeBounds: AlignDistributeBounds;

	/**
	 * If true, distribute space between page items and ignore the bounds setting.
	 */
	distributeAbsolute: boolean;

	/**
	 * The distance to use when distributing page items.
	 */
	distributeAbsoluteMeasurement: number | string;

	/**
	 * If true, distribute space between page items and ignore the bounds setting.
	 */
	distributeSpaceAbsolute: boolean;

	/**
	 * The distance to use when distributing page items.
	 */
	distributeSpaceAbsoluteMeasurement: number | string;

}

/**
 * SWF export settings for the application object.
 */
declare class SWFExportPreference extends Preference {
	/**
	 * The SWF curve quality.
	 */
	curveQuality: SWFCurveQualityValue;

	/**
	 * If true, each spread in the exported document is combined into a single page that has spread's original width.
	 */
	dynamicDocumentExportReaderSpreads: boolean;

	/**
	 * The dynamic media handling options.
	 */
	dynamicMediaHandling: DynamicMediaHandlingOptions;

	/**
	 * The fitting method to use.
	 */
	fitMethod: FitMethodSettings;

	/**
	 * The options for fitting to predefined dimension.
	 */
	fitOption: FitDimension;

	/**
	 * The size fits to given scale percentage.
	 */
	fitScale: number;

	/**
	 * The size fits to given width and height.
	 */
	fitWidthAndHeight: number[];

	/**
	 * Flatten transparency when exporting.
	 */
	flattenTransparency: boolean;

	/**
	 * The frame rate in frames per second.
	 */
	frameRate: number;

	/**
	 * Flag indicates whether to generate HTML.
	 */
	generateHTML: boolean;

	/**
	 * Flag indicates whether to include interactive page curl when export to SWF.
	 */
	includeInteractivePageCurl: boolean;

	/**
	 * The JPEG quality options.
	 */
	jpegQualityOptions: DynamicDocumentsJPEGQualityOptions;

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string;

	/**
	 * The name of the page transition to use for all pages.
	 */
	pageTransitionOverride: PageTransitionOverrideOptions;

	/**
	 * The SWF raster compression options.
	 */
	rasterCompression: RasterCompressionOptions;

	/**
	 * The raster resolution.
	 */
	rasterResolution: number;

	/**
	 * If true, all the pages in the exported document will be rasterized.
	 */
	rasterizePages: boolean;

	/**
	 * The resampling threshold.
	 */
	resamplingThreshold: number;

	/**
	 * The resampling type.
	 */
	resamplingType: Sampling;

	/**
	 * SWF background setting
	 */
	swfBackground: SWFBackgroundOptions;

	/**
	 * The text export policy.
	 */
	textExportPolicy: DynamicDocumentsTextExportPolicy;

	/**
	 * Flag indicates whether to allow to use network access when export to SWF.
	 */
	useNetworkAccess: boolean;

	/**
	 * Flag indicates to whether to view the SWF after exporting.
	 */
	viewSWFAfterExporting: boolean;

}

/**
 * XFL export preferences.
 */
declare class XFLExportPreference extends Preference {
	/**
	 * If true, each spread in the exported document is combined into a single page that has spread's original width.
	 */
	dynamicDocumentExportReaderSpreads: boolean;

	/**
	 * The dynamic media handling options.
	 */
	dynamicMediaHandling: DynamicMediaHandlingOptions;

	/**
	 * The fitting method to use.
	 */
	fitMethod: FitMethodSettings;

	/**
	 * The options for fitting to predefined dimension.
	 */
	fitOption: FitDimension;

	/**
	 * The size fits to given scale percentage.
	 */
	fitScale: number;

	/**
	 * The size fits to given width and height.
	 */
	fitWidthAndHeight: number[];

	/**
	 * Flatten transparency when exporting.
	 */
	flattenTransparency: boolean;

	/**
	 * If true, discretionary hyphenation points are inserted when TLF text is used.
	 */
	insertHyphens: boolean;

	/**
	 * The JPEG quality options.
	 */
	jpegQualityOptions: DynamicDocumentsJPEGQualityOptions;

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string;

	/**
	 * The raster format options.
	 */
	rasterFormat: XFLRasterizeFormatOptions;

	/**
	 * The raster resolution.
	 */
	rasterResolution: number;

	/**
	 * If true, all the pages in the exported document will be rasterized.
	 */
	rasterizePages: boolean;

	/**
	 * The resampling threshold.
	 */
	resamplingThreshold: number;

	/**
	 * The resampling type.
	 */
	resamplingType: Sampling;

	/**
	 * The text export policy.
	 */
	textExportPolicy: DynamicDocumentsTextExportPolicy;

}

/**
 * Animation settings.
 */
declare class AnimationSetting extends Preference {
	/**
	 * The animation design option.
	 */
	designOption: DesignOptions;

	/**
	 * The duration in second for this animation.
	 */
	duration: number;

	/**
	 * The ease type.
	 */
	easeType: AnimationEaseOptions;

	/**
	 * Determines if this animated object has custom settings.
	 */
	readonly hasCustomSettings: boolean;

	/**
	 * Determines if this object is hidden after its animation is played in an exported SWF file.
	 */
	hiddenAfter: boolean;

	/**
	 * Determines if this object is initially hidden when displayed in an exported SWF file.
	 */
	initiallyHidden: boolean;

	/**
	 * The list of motion path points and key frames for this animation. Can return: Ordered array containing keyFrame:Long Integer, pathPoint:Ordered array containing anchor:Array of 2 Reals, leftDirection:Array of 2 Reals, rightDirection:Array of 2 Reals.
	 */
	motionPath: any[];

	/**
	 * The list of motion path points for this animation. Can return: Ordered array containing pathPointArray:Array of Ordered array containing anchor:Array of 2 Reals, leftDirection:Array of 2 Reals, rightDirection:Array of 2 Reals, pathOpen:Boolean.
	 */
	motionPathPoints: any;

	/**
	 * The list of opacity key frames for this animation. Can return: Ordered array containing keyFrame:Long Integer, value:Real.
	 */
	opacityArray: any[];

	/**
	 * The number of times this animation plays.
	 */
	plays: number;

	/**
	 * Set to true if animation play loops.
	 */
	playsLoop: boolean;

	/**
	 * The base animation preset applied.
	 */
	preset: MotionPreset | string | NothingEnum;

	/**
	 * The list of rotation key frames for this animation. Can return: Ordered array containing keyFrame:Long Integer, value:Real.
	 */
	rotationArray: any[];

	/**
	 * The list of scale x key frames for this animation. Can return: Ordered array containing keyFrame:Long Integer, value:Real.
	 */
	scaleXArray: any[];

	/**
	 * The list of scale y key frames for this animation. Can return: Ordered array containing keyFrame:Long Integer, value:Real.
	 */
	scaleYArray: any[];

	/**
	 * The tranform offset percentage from the target object bounding box's left-top corner.
	 */
	transformOffsets: number[];

	/**
	 * Save this motion preset as custom preset.
	 * @param name The name for the new motion preset.
	 */
	save(name: string): MotionPreset;

	/**
	 * Save a copy of this motion preset to a InDesign motion preset file.
	 * @param to The Flash motion preset file to export to.
	 */
	saveACopy(to: File): void;

}

/**
 * Conditional text preferences.
 */
declare class ConditionalTextPreference extends Preference {
	/**
	 * The currently active condition set.
	 */
	activeConditionSet: ConditionSet;

	/**
	 * Shows or hides condition indicators.
	 */
	showConditionIndicators: ConditionIndicatorMode;

}

/**
 * EPub export preferences.
 */
declare class EPubExportPreference extends Preference {
	/**
	 * Bottom margin of the epub.
	 */
	bottomMargin: number;

	/**
	 * Iftrue, break InDesign document into smaller piece when generating epub.
	 */
	breakDocument: boolean;

	/**
	 * The bullet export option.
	 */
	bulletExportOption: BulletListExportOption;

	/**
	 * The epub cover image file path.
	 */
	coverImageFile: string;

	/**
	 * Allows user to select the image size option for conversion
	 */
	customImageSizeOption: ImageSizeOption;

	/**
	 * If true, embed font in epub.
	 */
	embedFont: boolean;

	/**
	 * The epub cover option.
	 */
	epubCover: EpubCover;

	/**
	 * The epub creator.
	 */
	epubCreator: string;

	/**
	 * The epub date.
	 */
	epubDate: string;

	/**
	 * The epub description.
	 */
	epubDescription: string;

	/**
	 * The epub publisher.
	 */
	epubPublisher: string;

	/**
	 * The epub rights.
	 */
	epubRights: string;

	/**
	 * The epub subject.
	 */
	epubSubject: string;

	/**
	 * The epub title.
	 */
	epubTitle: string;

	/**
	 * The export order.
	 */
	exportOrder: ExportOrder;

	/**
	 * The file path of external cascading style sheets.
	 */
	externalStyleSheets: string[];

	/**
	 * The placement of footnote for EPub export
	 */
	footnotePlacement: EPubFootnotePlacement;

	/**
	 * If true, InDesign will generate cascade style sheet.
	 */
	generateCascadeStyleSheet: boolean;

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean;

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;

	/**
	 * The epub unique identifier, like ISBN.
	 */
	id: string;

	/**
	 * ignore object level image conversion settings.
	 */
	ignoreObjectConversionSettings: boolean;

	/**
	 * Alignment applied to images
	 */
	imageAlignment: ImageAlignmentType;

	/**
	 * The file format to use for converted images. Note: Valid only when copy optimized images and/or copy formatted images is true.
	 */
	imageConversion: ImageConversion;

	/**
	 * The export resolution
	 */
	imageExportResolution: ImageResolution;

	/**
	 * Image page break settings to be used with objects
	 */
	imagePageBreak: ImagePageBreakType;

	/**
	 * Space After applied to images
	 */
	imageSpaceAfter: number;

	/**
	 * Space Before applied to images
	 */
	imageSpaceBefore: number;

	/**
	 * If true, InDesign will generate class attributes for elements in HTML, else will generate plain html without class attributes.
	 */
	includeClassesInHTML: boolean;

	/**
	 * The file path of external javascripts.
	 */
	javascripts: string[];

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat;

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;

	/**
	 * Left margin of the epub.
	 */
	leftMargin: number;

	/**
	 * The PNG compression level.
	 */
	readonly level: number;

	/**
	 * The numbered list export option.
	 */
	numberedListExportOption: NumberedListExportOption;

	/**
	 * The name of paragraph style to break InDesign document.
	 */
	paragraphStyleName: string;

	/**
	 * If true, format image based on layout appearence.
	 */
	preserveLayoutAppearence: boolean;

	/**
	 * If true, output local style override.
	 */
	preserveLocalOverride: boolean;

	/**
	 * Right margin of the epub.
	 */
	rightMargin: number;

	/**
	 * Iftrue, strip soft return.
	 */
	stripSoftReturn: boolean;

	/**
	 * The name of TOC style to generate epub TOC.
	 */
	tocStyleName: string;

	/**
	 * Top margin of the epub.
	 */
	topMargin: number;

	/**
	 * If true, InDesign will use existing image for graphic objects on export.
	 */
	useExistingImageOnExport: boolean;

	/**
	 * If true, image page break settings will be used in objects
	 */
	useImagePageBreak: boolean;

	/**
	 * The version of EPUB.
	 */
	version: EpubVersion;

}

/**
 * HTML export preferences.
 */
declare class HTMLExportPreference extends Preference {
	/**
	 * The bullet export option.
	 */
	bulletExportOption: BulletListExportOption;

	/**
	 * Allows user to select the image size option for conversion
	 */
	customImageSizeOption: ImageSizeOption;

	/**
	 * The export order.
	 */
	exportOrder: ExportOrder;

	/**
	 * If true and have selection, export selected content to HTML.
	 */
	exportSelection: boolean;

	/**
	 * The file path of external cascading style sheets.
	 */
	externalStyleSheets: string[];

	/**
	 * If true, InDesign will generate cascade style sheet.
	 */
	generateCascadeStyleSheet: boolean;

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean;

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;

	/**
	 * ignore object level image conversion settings.
	 */
	ignoreObjectConversionSettings: boolean;

	/**
	 * Alignment applied to images
	 */
	imageAlignment: ImageAlignmentType;

	/**
	 * The file format to use for converted images. Note: Valid only when copy optimized images and/or copy formatted images is true.
	 */
	imageConversion: ImageConversion;

	/**
	 * The export order.
	 */
	imageExportOption: ImageExportOption;

	/**
	 * The export resolution
	 */
	imageExportResolution: ImageResolution;

	/**
	 * The image extension on server.
	 */
	imageExtension: string;

	/**
	 * Space After applied to images
	 */
	imageSpaceAfter: number;

	/**
	 * Space Before applied to images
	 */
	imageSpaceBefore: number;

	/**
	 * If true, InDesign will generate class attributes for elements in HTML, else will generate plain html without class attributes.
	 */
	includeClassesInHTML: boolean;

	/**
	 * The file path of external javascripts.
	 */
	javascripts: string[];

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat;

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;

	/**
	 * The PNG compression level.
	 */
	level: number;

	/**
	 * The numbered list export option.
	 */
	numberedListExportOption: NumberedListExportOption;

	/**
	 * If true, format image based on layout appearence.
	 */
	preserveLayoutAppearence: boolean;

	/**
	 * If true, output local style override.
	 */
	preserveLocalOverride: boolean;

	/**
	 * The server path for image .
	 */
	serverPath: string;

	/**
	 * If true, open docuemnt in viewer after export.
	 */
	viewDocumentAfterExport: boolean;

}

/**
 * EPub fixed layout export preferences.
 */
declare class EPubFixedLayoutExportPreference extends Preference {
	/**
	 * The epub cover image file path.
	 */
	coverImageFile: string;

	/**
	 * The epub cover option.
	 */
	epubCover: EpubCover;

	/**
	 * The epub creator.
	 */
	epubCreator: string;

	/**
	 * The epub date.
	 */
	epubDate: string;

	/**
	 * The epub description.
	 */
	epubDescription: string;

	/**
	 * The epub navigation style.
	 */
	epubNavigationStyles: EpubNavigationStyle;

	/**
	 * The epub page range.
	 */
	epubPageRange: string;

	/**
	 * The epub page range format.
	 */
	epubPageRangeFormat: PageRangeFormat;

	/**
	 * The epub publisher.
	 */
	epubPublisher: string;

	/**
	 * The epub rights.
	 */
	epubRights: string;

	/**
	 * The control for spreads in fixed layout EPub.
	 */
	epubSpreadControlOptions: EpubFixedLayoutSpreadControl;

	/**
	 * The epub subject.
	 */
	epubSubject: string;

	/**
	 * The epub title.
	 */
	epubTitle: string;

	/**
	 * The file path of external cascading style sheets.
	 */
	externalStyleSheets: string[];

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean;

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;

	/**
	 * The epub unique identifier, like ISBN.
	 */
	id: string;

	/**
	 * The file format to use for converted images. Note: Valid only when copy optimized images and/or copy formatted images is true.
	 */
	imageConversion: ImageConversion;

	/**
	 * The export resolution
	 */
	imageExportResolution: ImageResolution;

	/**
	 * The file path of external javascripts.
	 */
	javascripts: string[];

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat;

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;

	/**
	 * The PNG compression level.
	 */
	readonly level: number;

	/**
	 * The name of TOC style to generate epub TOC.
	 */
	tocStyleName: string;

}

/**
 * EPub export preview app preferences.
 */
declare class EPubExportPreviewAppPreference extends Preference {
	/**
	 * If true, open docuemnt in viewer after export.
	 */
	viewDocumentAfterExport: boolean;

	/**
	 * Add a new preview application preference
	 * @param applicationPath The full path of the application to be added.
	 * @param selectedForReflowableEpub Check if the app is selected in Reflowable ePub export.
	 * @param selectedForFixedLayoutEpub Check if the app is selected in Fixed Layout ePub export.
	 * @param withProperties Initial values for properties of the new EPubExportPreviewAppPreference
	 */
	addApplication(applicationPath: string, selectedForReflowableEpub: boolean, selectedForFixedLayoutEpub: boolean, withProperties: object): void;

	/**
	 * Get the application at index.
	 * @param indexOfApp The index of the application to get information for.
	 * @param withProperties Initial values for properties of the new EPubExportPreviewAppPreference
	 */
	getApplicationAtIndex(indexOfApp: boolean, withProperties: object): any;

	/**
	 * Number of applications added for ePub Preview.
	 */
	getApplicationCount(): number;

	/**
	 * Remove an application at specified index.
	 * @param indexOfApp The index of the application to be removed.
	 * @param withProperties Initial values for properties of the new EPubExportPreviewAppPreference
	 */
	removeApplication(indexOfApp: number, withProperties: object): void;

}

/**
 * HTML FXL export preferences.
 */
declare class HTMLFXLExportPreference extends Preference {
	/**
	 * The epub page range.
	 */
	epubPageRange: string;

	/**
	 * The epub page range format.
	 */
	epubPageRangeFormat: PageRangeFormat;

}

/**
 * Publish export preferences.
 */
declare class PublishExportPreference extends Preference {
	/**
	 * The epub cover image file path.
	 */
	coverImageFile: string;

	/**
	 * The cover page.
	 */
	coverPage: string;

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;

	/**
	 * The file format to use for converted images. Note: Valid only when copy optimized images and/or copy formatted images is true.
	 */
	imageConversion: ImageConversion;

	/**
	 * The export resolution
	 */
	imageExportResolution: ImageResolution;

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;

	/**
	 * The publish cover option.
	 */
	publishCover: PublishCoverEnum;

	/**
	 * The publish description.
	 */
	publishDescription: string;

	/**
	 * The file name.
	 */
	publishFileName: string;

	/**
	 * the publish format.
	 */
	publishFormat: PublishFormatEnum;

	/**
	 * The publish page range.
	 */
	publishPageRange: string;

	/**
	 * The publish page range format.
	 */
	publishPageRangeFormat: PageRangeFormat;

	/**
	 * If PDF should be uploaded while publishing.
	 */
	publishPdf: boolean;

}

/**
 * The link options for a linked story.
 */
declare class LinkedStoryOption extends Preference {
	/**
	 * If true, style mappings will be applied during linked story creation or update.
	 */
	applyStyleMappings: boolean;

	/**
	 * If true, forced line breaks will be removed during story creation or update.
	 */
	removeForcedLineBreaks: boolean;

	/**
	 * If true, the linked story will be updated while saving.
	 */
	updateWhileSaving: boolean;

	/**
	 * If true, a warning will be shown if the update link operation will override local edits.
	 */
	warnOnUpdateOfEditedStory: boolean;

}

/**
 * A para style mapping.
 */
declare class ParaStyleMapping {
	/**
	 * The destination style name property.
	 */
	destinationStyleName: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the ParaStyleMapping within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The type of the mapping rule.
	 */
	mappingRuleType: MapType;

	/**
	 * The parent of the ParaStyleMapping (a Application, Document, Story or XmlStory).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The source style name property.
	 */
	sourceStyleName: string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ParaStyleMapping[];

	/**
	 * deletes a style mapping.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the ParaStyleMapping.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of para style mappings.
 */
declare class ParaStyleMappings {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ParaStyleMapping with the specified index.
	 * @param index The index.
	 */
	[index: number]: ParaStyleMapping;

	/**
	 * Adds a style mapping.
	 * @param sourceStyleName The source style name.
	 * @param destinationStyleName The destination style name.
	 * @param mappingRuleType The mapping type
	 * @param withProperties Initial values for properties of the new ParaStyleMapping
	 */
	add(sourceStyleName: string, destinationStyleName: string, mappingRuleType: MapType, withProperties: object): ParaStyleMapping;

	/**
	 * Returns any ParaStyleMapping in the collection.
	 */
	anyItem(): ParaStyleMapping;

	/**
	 * Displays the number of elements in the ParaStyleMapping.
	 */
	count(): number;

	/**
	 * Returns every ParaStyleMapping in the collection.
	 */
	everyItem(): ParaStyleMapping[];

	/**
	 * Returns the first ParaStyleMapping in the collection.
	 */
	firstItem(): ParaStyleMapping;

	/**
	 * Returns the ParaStyleMapping with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ParaStyleMapping;

	/**
	 * Returns the ParaStyleMappings within the specified range.
	 * @param from The ParaStyleMapping, index, or name at the beginning of the range.
	 * @param to The ParaStyleMapping, index, or name at the end of the range.
	 */
	itemByRange(from: ParaStyleMapping | number | string, to: ParaStyleMapping | number | string): ParaStyleMapping[];

	/**
	 * Returns the last ParaStyleMapping in the collection.
	 */
	lastItem(): ParaStyleMapping;

	/**
	 * Returns the middle ParaStyleMapping in the collection.
	 */
	middleItem(): ParaStyleMapping;

	/**
	 * Returns the ParaStyleMapping whose index follows the specified ParaStyleMapping in the collection.
	 * @param obj The ParaStyleMapping whose index comes before the desired ParaStyleMapping.
	 */
	nextItem(obj: ParaStyleMapping): ParaStyleMapping;

	/**
	 * Returns the ParaStyleMapping with the index previous to the specified index.
	 * @param obj The index of the ParaStyleMapping that follows the desired ParaStyleMapping.
	 */
	previousItem(obj: ParaStyleMapping): ParaStyleMapping;

	/**
	 * Generates a string which, if executed, will return the ParaStyleMapping.
	 */
	toSource(): string;

}

/**
 * A cell style mapping.
 */
declare class CellStyleMapping {
	/**
	 * The destination style name property.
	 */
	destinationStyleName: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the CellStyleMapping within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The type of the mapping rule.
	 */
	mappingRuleType: MapType;

	/**
	 * The parent of the CellStyleMapping (a Application, Document, Story or XmlStory).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The source style name property.
	 */
	sourceStyleName: string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CellStyleMapping[];

	/**
	 * deletes a style mapping.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the CellStyleMapping.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of cell style mappings.
 */
declare class CellStyleMappings {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the CellStyleMapping with the specified index.
	 * @param index The index.
	 */
	[index: number]: CellStyleMapping;

	/**
	 * Adds a style mapping.
	 * @param sourceStyleName The source style name.
	 * @param destinationStyleName The destination style name.
	 * @param mappingRuleType The mapping type
	 * @param withProperties Initial values for properties of the new CellStyleMapping
	 */
	add(sourceStyleName: string, destinationStyleName: string, mappingRuleType: MapType, withProperties: object): CellStyleMapping;

	/**
	 * Returns any CellStyleMapping in the collection.
	 */
	anyItem(): CellStyleMapping;

	/**
	 * Displays the number of elements in the CellStyleMapping.
	 */
	count(): number;

	/**
	 * Returns every CellStyleMapping in the collection.
	 */
	everyItem(): CellStyleMapping[];

	/**
	 * Returns the first CellStyleMapping in the collection.
	 */
	firstItem(): CellStyleMapping;

	/**
	 * Returns the CellStyleMapping with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CellStyleMapping;

	/**
	 * Returns the CellStyleMappings within the specified range.
	 * @param from The CellStyleMapping, index, or name at the beginning of the range.
	 * @param to The CellStyleMapping, index, or name at the end of the range.
	 */
	itemByRange(from: CellStyleMapping | number | string, to: CellStyleMapping | number | string): CellStyleMapping[];

	/**
	 * Returns the last CellStyleMapping in the collection.
	 */
	lastItem(): CellStyleMapping;

	/**
	 * Returns the middle CellStyleMapping in the collection.
	 */
	middleItem(): CellStyleMapping;

	/**
	 * Returns the CellStyleMapping whose index follows the specified CellStyleMapping in the collection.
	 * @param obj The CellStyleMapping whose index comes before the desired CellStyleMapping.
	 */
	nextItem(obj: CellStyleMapping): CellStyleMapping;

	/**
	 * Returns the CellStyleMapping with the index previous to the specified index.
	 * @param obj The index of the CellStyleMapping that follows the desired CellStyleMapping.
	 */
	previousItem(obj: CellStyleMapping): CellStyleMapping;

	/**
	 * Generates a string which, if executed, will return the CellStyleMapping.
	 */
	toSource(): string;

}

/**
 * A char style mapping.
 */
declare class CharStyleMapping {
	/**
	 * The destination style name property.
	 */
	destinationStyleName: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the CharStyleMapping within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The type of the mapping rule.
	 */
	mappingRuleType: MapType;

	/**
	 * The parent of the CharStyleMapping (a Application, Document, Story or XmlStory).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The source style name property.
	 */
	sourceStyleName: string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CharStyleMapping[];

	/**
	 * deletes a style mapping.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the CharStyleMapping.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of char style mappings.
 */
declare class CharStyleMappings {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the CharStyleMapping with the specified index.
	 * @param index The index.
	 */
	[index: number]: CharStyleMapping;

	/**
	 * Adds a style mapping.
	 * @param sourceStyleName The source style name.
	 * @param destinationStyleName The destination style name.
	 * @param mappingRuleType The mapping type
	 * @param withProperties Initial values for properties of the new CharStyleMapping
	 */
	add(sourceStyleName: string, destinationStyleName: string, mappingRuleType: MapType, withProperties: object): CharStyleMapping;

	/**
	 * Returns any CharStyleMapping in the collection.
	 */
	anyItem(): CharStyleMapping;

	/**
	 * Displays the number of elements in the CharStyleMapping.
	 */
	count(): number;

	/**
	 * Returns every CharStyleMapping in the collection.
	 */
	everyItem(): CharStyleMapping[];

	/**
	 * Returns the first CharStyleMapping in the collection.
	 */
	firstItem(): CharStyleMapping;

	/**
	 * Returns the CharStyleMapping with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CharStyleMapping;

	/**
	 * Returns the CharStyleMappings within the specified range.
	 * @param from The CharStyleMapping, index, or name at the beginning of the range.
	 * @param to The CharStyleMapping, index, or name at the end of the range.
	 */
	itemByRange(from: CharStyleMapping | number | string, to: CharStyleMapping | number | string): CharStyleMapping[];

	/**
	 * Returns the last CharStyleMapping in the collection.
	 */
	lastItem(): CharStyleMapping;

	/**
	 * Returns the middle CharStyleMapping in the collection.
	 */
	middleItem(): CharStyleMapping;

	/**
	 * Returns the CharStyleMapping whose index follows the specified CharStyleMapping in the collection.
	 * @param obj The CharStyleMapping whose index comes before the desired CharStyleMapping.
	 */
	nextItem(obj: CharStyleMapping): CharStyleMapping;

	/**
	 * Returns the CharStyleMapping with the index previous to the specified index.
	 * @param obj The index of the CharStyleMapping that follows the desired CharStyleMapping.
	 */
	previousItem(obj: CharStyleMapping): CharStyleMapping;

	/**
	 * Generates a string which, if executed, will return the CharStyleMapping.
	 */
	toSource(): string;

}

/**
 * A table style mapping.
 */
declare class TableStyleMapping {
	/**
	 * The destination style name property.
	 */
	destinationStyleName: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the TableStyleMapping within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The type of the mapping rule.
	 */
	mappingRuleType: MapType;

	/**
	 * The parent of the TableStyleMapping (a Application, Document, Story or XmlStory).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The source style name property.
	 */
	sourceStyleName: string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TableStyleMapping[];

	/**
	 * deletes a style mapping.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the TableStyleMapping.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of table style mappings.
 */
declare class TableStyleMappings {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TableStyleMapping with the specified index.
	 * @param index The index.
	 */
	[index: number]: TableStyleMapping;

	/**
	 * Adds a style mapping.
	 * @param sourceStyleName The source style name.
	 * @param destinationStyleName The destination style name.
	 * @param mappingRuleType The mapping type
	 * @param withProperties Initial values for properties of the new TableStyleMapping
	 */
	add(sourceStyleName: string, destinationStyleName: string, mappingRuleType: MapType, withProperties: object): TableStyleMapping;

	/**
	 * Returns any TableStyleMapping in the collection.
	 */
	anyItem(): TableStyleMapping;

	/**
	 * Displays the number of elements in the TableStyleMapping.
	 */
	count(): number;

	/**
	 * Returns every TableStyleMapping in the collection.
	 */
	everyItem(): TableStyleMapping[];

	/**
	 * Returns the first TableStyleMapping in the collection.
	 */
	firstItem(): TableStyleMapping;

	/**
	 * Returns the TableStyleMapping with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TableStyleMapping;

	/**
	 * Returns the TableStyleMappings within the specified range.
	 * @param from The TableStyleMapping, index, or name at the beginning of the range.
	 * @param to The TableStyleMapping, index, or name at the end of the range.
	 */
	itemByRange(from: TableStyleMapping | number | string, to: TableStyleMapping | number | string): TableStyleMapping[];

	/**
	 * Returns the last TableStyleMapping in the collection.
	 */
	lastItem(): TableStyleMapping;

	/**
	 * Returns the middle TableStyleMapping in the collection.
	 */
	middleItem(): TableStyleMapping;

	/**
	 * Returns the TableStyleMapping whose index follows the specified TableStyleMapping in the collection.
	 * @param obj The TableStyleMapping whose index comes before the desired TableStyleMapping.
	 */
	nextItem(obj: TableStyleMapping): TableStyleMapping;

	/**
	 * Returns the TableStyleMapping with the index previous to the specified index.
	 * @param obj The index of the TableStyleMapping that follows the desired TableStyleMapping.
	 */
	previousItem(obj: TableStyleMapping): TableStyleMapping;

	/**
	 * Generates a string which, if executed, will return the TableStyleMapping.
	 */
	toSource(): string;

}

/**
 * The link options for a linked Page Item.
 */
declare class LinkedPageItemOption extends Preference {
	/**
	 * If true, appearance edits will be preserved during update.
	 */
	preserveAppearance: boolean;

	/**
	 * If true, frame content edits will be preserved during update.
	 */
	preserveFrameContent: boolean;

	/**
	 * If true, interactivity edits will be preserved during update.
	 */
	preserveInteractivity: boolean;

	/**
	 * If true, text wrap, hyperLinks, text frame options, object export settings will be preserved during update.
	 */
	preserveOthers: boolean;

	/**
	 * If true, size and shape edits will be preserved during update.
	 */
	preserveSizeAndShape: boolean;

	/**
	 * If true, the linked Page Item will be updated while saving.
	 */
	updateLinkWhileSaving: boolean;

	/**
	 * If true, a warning will be shown if the update link operation will override local edits.
	 */
	warnOnUpdateOfEditedPageItem: boolean;

}

/**
 * A preflight rule
 */
declare class PreflightRule {
	/**
	 * The description of the PreflightRule.
	 */
	readonly description: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, the preflight rule is fully supported.
	 */
	fullFeature: boolean;

	/**
	 * The rule ID for this rule.
	 */
	readonly id: string;

	/**
	 * The index of the PreflightRule within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the PreflightRule.
	 */
	readonly name: string;

	/**
	 * The parent of the PreflightRule (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PreflightRule[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the PreflightRule.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of preflight rules.
 */
declare class PreflightRules {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PreflightRule with the specified index.
	 * @param index The index.
	 */
	[index: number]: PreflightRule;

	/**
	 * Returns any PreflightRule in the collection.
	 */
	anyItem(): PreflightRule;

	/**
	 * Displays the number of elements in the PreflightRule.
	 */
	count(): number;

	/**
	 * Returns every PreflightRule in the collection.
	 */
	everyItem(): PreflightRule[];

	/**
	 * Returns the first PreflightRule in the collection.
	 */
	firstItem(): PreflightRule;

	/**
	 * Returns the PreflightRule with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PreflightRule;

	/**
	 * Returns the PreflightRule with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PreflightRule;

	/**
	 * Returns the PreflightRule with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PreflightRule;

	/**
	 * Returns the PreflightRules within the specified range.
	 * @param from The PreflightRule, index, or name at the beginning of the range.
	 * @param to The PreflightRule, index, or name at the end of the range.
	 */
	itemByRange(from: PreflightRule | number | string, to: PreflightRule | number | string): PreflightRule[];

	/**
	 * Returns the last PreflightRule in the collection.
	 */
	lastItem(): PreflightRule;

	/**
	 * Returns the middle PreflightRule in the collection.
	 */
	middleItem(): PreflightRule;

	/**
	 * Returns the PreflightRule whose index follows the specified PreflightRule in the collection.
	 * @param obj The PreflightRule whose index comes before the desired PreflightRule.
	 */
	nextItem(obj: PreflightRule): PreflightRule;

	/**
	 * Returns the PreflightRule with the index previous to the specified index.
	 * @param obj The index of the PreflightRule that follows the desired PreflightRule.
	 */
	previousItem(obj: PreflightRule): PreflightRule;

	/**
	 * Generates a string which, if executed, will return the PreflightRule.
	 */
	toSource(): string;

}

/**
 * A preflight rule data object.
 */
declare class RuleDataObject {
	/**
	 * The type of data.
	 */
	readonly dataType: RuleDataType;

	/**
	 * The value for this data object. Can return: String, Real, Long Integer, Short Integer, Boolean, Object or Array of Strings, Reals, Long Integers, Short Integers, Booleans, Objects or Arrays of Array of Arrays of Array of Strings, Reals, Long Integers, Short Integers, Booleans or Objects.
	 */
	dataValue: any;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The ID for this rule data object.
	 */
	readonly id: string;

	/**
	 * The index of the RuleDataObject within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the RuleDataObject.
	 */
	readonly name: string;

	/**
	 * The parent of the RuleDataObject (a PreflightProfileRule or PreflightRuleInstance).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): RuleDataObject[];

	/**
	 * Deletes the RuleDataObject.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the RuleDataObject.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of prefight rule data objects.
 */
declare class RuleDataObjects {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the RuleDataObject with the specified index.
	 * @param index The index.
	 */
	[index: number]: RuleDataObject;

	/**
	 * Add a new preflight rule data to a preflight profile rule.
	 * @param name The name of the rule data to add
	 * @param dataType The type of data
	 * @param dataValue The value of data. Can accept: String, Real, Long Integer, Short Integer, Boolean, Object or Array of Strings, Reals, Long Integers, Short Integers, Booleans, Objects or Arrays of Array of Arrays of Array of Strings, Reals, Long Integers, Short Integers, Booleans or Objects.
	 * @param withProperties Initial values for properties of the new RuleDataObject
	 */
	add(name: string, dataType: RuleDataType, dataValue: any, withProperties: object): RuleDataObject;

	/**
	 * Returns any RuleDataObject in the collection.
	 */
	anyItem(): RuleDataObject;

	/**
	 * Displays the number of elements in the RuleDataObject.
	 */
	count(): number;

	/**
	 * Returns every RuleDataObject in the collection.
	 */
	everyItem(): RuleDataObject[];

	/**
	 * Returns the first RuleDataObject in the collection.
	 */
	firstItem(): RuleDataObject;

	/**
	 * Returns the RuleDataObject with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): RuleDataObject;

	/**
	 * Returns the RuleDataObject with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): RuleDataObject;

	/**
	 * Returns the RuleDataObject with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): RuleDataObject;

	/**
	 * Returns the RuleDataObjects within the specified range.
	 * @param from The RuleDataObject, index, or name at the beginning of the range.
	 * @param to The RuleDataObject, index, or name at the end of the range.
	 */
	itemByRange(from: RuleDataObject | number | string, to: RuleDataObject | number | string): RuleDataObject[];

	/**
	 * Returns the last RuleDataObject in the collection.
	 */
	lastItem(): RuleDataObject;

	/**
	 * Returns the middle RuleDataObject in the collection.
	 */
	middleItem(): RuleDataObject;

	/**
	 * Returns the RuleDataObject whose index follows the specified RuleDataObject in the collection.
	 * @param obj The RuleDataObject whose index comes before the desired RuleDataObject.
	 */
	nextItem(obj: RuleDataObject): RuleDataObject;

	/**
	 * Returns the RuleDataObject with the index previous to the specified index.
	 * @param obj The index of the RuleDataObject that follows the desired RuleDataObject.
	 */
	previousItem(obj: RuleDataObject): RuleDataObject;

	/**
	 * Generates a string which, if executed, will return the RuleDataObject.
	 */
	toSource(): string;

}

/**
 * A preflight rule instance.
 */
declare class PreflightRuleInstance extends PreflightProfileRule {
}

/**
 * A collection of preflight rule instances.
 */
declare class PreflightRuleInstances {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PreflightRuleInstance with the specified index.
	 * @param index The index.
	 */
	[index: number]: PreflightRuleInstance;

	/**
	 * Adds a new preflight rule to the profile.
	 * @param id The ID of the rule to be added
	 * @param withProperties Initial values for properties of the new PreflightRuleInstance
	 */
	add(id: string, withProperties: object): any;

	/**
	 * Returns any PreflightRuleInstance in the collection.
	 */
	anyItem(): PreflightRuleInstance;

	/**
	 * Displays the number of elements in the PreflightRuleInstance.
	 */
	count(): number;

	/**
	 * Returns every PreflightRuleInstance in the collection.
	 */
	everyItem(): PreflightRuleInstance[];

	/**
	 * Returns the first PreflightRuleInstance in the collection.
	 */
	firstItem(): PreflightRuleInstance;

	/**
	 * Returns the PreflightRuleInstance with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PreflightRuleInstance;

	/**
	 * Returns the PreflightRuleInstance with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PreflightRuleInstance;

	/**
	 * Returns the PreflightRuleInstance with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PreflightRuleInstance;

	/**
	 * Returns the PreflightRuleInstances within the specified range.
	 * @param from The PreflightRuleInstance, index, or name at the beginning of the range.
	 * @param to The PreflightRuleInstance, index, or name at the end of the range.
	 */
	itemByRange(from: PreflightRuleInstance | number | string, to: PreflightRuleInstance | number | string): PreflightRuleInstance[];

	/**
	 * Returns the last PreflightRuleInstance in the collection.
	 */
	lastItem(): PreflightRuleInstance;

	/**
	 * Returns the middle PreflightRuleInstance in the collection.
	 */
	middleItem(): PreflightRuleInstance;

	/**
	 * Returns the PreflightRuleInstance whose index follows the specified PreflightRuleInstance in the collection.
	 * @param obj The PreflightRuleInstance whose index comes before the desired PreflightRuleInstance.
	 */
	nextItem(obj: PreflightRuleInstance): PreflightRuleInstance;

	/**
	 * Returns the PreflightRuleInstance with the index previous to the specified index.
	 * @param obj The index of the PreflightRuleInstance that follows the desired PreflightRuleInstance.
	 */
	previousItem(obj: PreflightRuleInstance): PreflightRuleInstance;

	/**
	 * Generates a string which, if executed, will return the PreflightRuleInstance.
	 */
	toSource(): string;

}

/**
 * A preflight profile.
 */
declare class PreflightProfile {
	/**
	 * The description of the PreflightProfile.
	 */
	description: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the PreflightProfile.
	 */
	readonly id: number;

	/**
	 * The index of the PreflightProfile within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the PreflightProfile.
	 */
	name: string;

	/**
	 * The parent of the PreflightProfile (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * A collection of preflight profile rules.
	 */
	readonly preflightProfileRules: PreflightProfileRules;

	/**
	 * A collection of preflight rule instances.
	 */
	readonly preflightRuleInstances: PreflightRuleInstances;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the PreflightProfile.
	 */
	duplicate(): PreflightProfile;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PreflightProfile[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the PreflightProfile.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Saves this preflight profile to a InDesign preflight profile file.
	 * @param to The preflight profile file to save to.
	 */
	save(to: File): void;

	/**
	 * Generates a string which, if executed, will return the PreflightProfile.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Unembed this profile.
	 */
	unembed(): void;

	/**
	 * Update the preflight profile by copying from another profile.
	 * @param using The preflight profile to copy.
	 */
	update(using: string | PreflightProfile): void;

}

/**
 * A collection of preflight profiles.
 */
declare class PreflightProfiles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PreflightProfile with the specified index.
	 * @param index The index.
	 */
	[index: number]: PreflightProfile;

	/**
	 * Creates a new PreflightProfile.
	 * @param withProperties Initial values for properties of the new PreflightProfile
	 */
	add(withProperties: object): PreflightProfile;

	/**
	 * Returns any PreflightProfile in the collection.
	 */
	anyItem(): PreflightProfile;

	/**
	 * Displays the number of elements in the PreflightProfile.
	 */
	count(): number;

	/**
	 * Returns every PreflightProfile in the collection.
	 */
	everyItem(): PreflightProfile[];

	/**
	 * Returns the first PreflightProfile in the collection.
	 */
	firstItem(): PreflightProfile;

	/**
	 * Returns the PreflightProfile with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PreflightProfile;

	/**
	 * Returns the PreflightProfile with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PreflightProfile;

	/**
	 * Returns the PreflightProfile with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PreflightProfile;

	/**
	 * Returns the PreflightProfiles within the specified range.
	 * @param from The PreflightProfile, index, or name at the beginning of the range.
	 * @param to The PreflightProfile, index, or name at the end of the range.
	 */
	itemByRange(from: PreflightProfile | number | string, to: PreflightProfile | number | string): PreflightProfile[];

	/**
	 * Returns the last PreflightProfile in the collection.
	 */
	lastItem(): PreflightProfile;

	/**
	 * Returns the middle PreflightProfile in the collection.
	 */
	middleItem(): PreflightProfile;

	/**
	 * Returns the PreflightProfile whose index follows the specified PreflightProfile in the collection.
	 * @param obj The PreflightProfile whose index comes before the desired PreflightProfile.
	 */
	nextItem(obj: PreflightProfile): PreflightProfile;

	/**
	 * Returns the PreflightProfile with the index previous to the specified index.
	 * @param obj The index of the PreflightProfile that follows the desired PreflightProfile.
	 */
	previousItem(obj: PreflightProfile): PreflightProfile;

	/**
	 * Generates a string which, if executed, will return the PreflightProfile.
	 */
	toSource(): string;

}

/**
 * An active preflight process.
 */
declare class PreflightProcess {
	/**
	 * The aggregated results found by the process. Can return: Ordered array containing documentName:String, profileName:String, results:Array of Ordered array containing parentNodeID:Long Integer, errorName:String, pageNumber:String, errorInfo:String, errorDetail:Array of Ordered array containing label:String, description:String.
	 */
	readonly aggregatedResults: any;

	/**
	 * The preflight profile the process is using.
	 */
	readonly appliedProfile: PreflightProfile;

	/**
	 * The description of the PreflightProcess.
	 */
	readonly description: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the PreflightProcess within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the PreflightProcess (a Application).
	 */
	readonly parent: Application;

	/**
	 * A string containing a description of all elements visited by the process.
	 */
	readonly processInventory: string;

	/**
	 * The results found by the process as a large string.
	 */
	readonly processResults: string;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The target document the process is inspecting.
	 */
	readonly targetObject: Document;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PreflightProcess[];

	/**
	 * Deletes the PreflightProcess.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Saves a report of the completed preflight process.
	 * @param to The preflight report to save to.
	 * @param autoOpen If true, automatically open the report after creation.
	 */
	saveReport(to: File, autoOpen?: boolean): void;

	/**
	 * Generates a string which, if executed, will return the PreflightProcess.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Waits for the process to finish, up to an optional maximum amount of time. No other processes get cycles during this time.
	 * @param waitTime The maximum time to wait, in seconds; if omitted, waits until completion no matter how long it takes.
	 */
	waitForProcess(waitTime: number): boolean;

}

/**
 * A collection of preflight processes.
 */
declare class PreflightProcesses {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PreflightProcess with the specified index.
	 * @param index The index.
	 */
	[index: number]: PreflightProcess;

	/**
	 * Adds a new preflight process.
	 * @param targetObject The document the process should inspect.
	 * @param appliedProfile The preflight profile that should be used.
	 * @param preflightOptions The preflight options that should be used.
	 * @param withProperties Initial values for properties of the new PreflightProcess
	 */
	add(targetObject: Document, appliedProfile: PreflightProfile, preflightOptions: PreflightOption, withProperties: object): PreflightProcess;

	/**
	 * Returns any PreflightProcess in the collection.
	 */
	anyItem(): PreflightProcess;

	/**
	 * Displays the number of elements in the PreflightProcess.
	 */
	count(): number;

	/**
	 * Returns every PreflightProcess in the collection.
	 */
	everyItem(): PreflightProcess[];

	/**
	 * Returns the first PreflightProcess in the collection.
	 */
	firstItem(): PreflightProcess;

	/**
	 * Returns the PreflightProcess with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PreflightProcess;

	/**
	 * Returns the PreflightProcesses within the specified range.
	 * @param from The PreflightProcess, index, or name at the beginning of the range.
	 * @param to The PreflightProcess, index, or name at the end of the range.
	 */
	itemByRange(from: PreflightProcess | number | string, to: PreflightProcess | number | string): PreflightProcess[];

	/**
	 * Returns the last PreflightProcess in the collection.
	 */
	lastItem(): PreflightProcess;

	/**
	 * Returns the middle PreflightProcess in the collection.
	 */
	middleItem(): PreflightProcess;

	/**
	 * Returns the PreflightProcess whose index follows the specified PreflightProcess in the collection.
	 * @param obj The PreflightProcess whose index comes before the desired PreflightProcess.
	 */
	nextItem(obj: PreflightProcess): PreflightProcess;

	/**
	 * Returns the PreflightProcess with the index previous to the specified index.
	 * @param obj The index of the PreflightProcess that follows the desired PreflightProcess.
	 */
	previousItem(obj: PreflightProcess): PreflightProcess;

	/**
	 * Generates a string which, if executed, will return the PreflightProcess.
	 */
	toSource(): string;

}

/**
 * A preflight profile rule.
 */
declare class PreflightProfileRule {
	/**
	 * The description of the PreflightProfileRule.
	 */
	readonly description: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * Indicates whether or not the preflight rule is disabled, set for error, warning, or information level feedback.
	 */
	flag: PreflightRuleFlag;

	/**
	 * The rule ID for this rule.
	 */
	readonly id: string;

	/**
	 * The index of the PreflightProfileRule within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the PreflightProfileRule.
	 */
	readonly name: string;

	/**
	 * The parent of the PreflightProfileRule (a PreflightProfile).
	 */
	readonly parent: PreflightProfile;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of prefight rule data objects.
	 */
	readonly ruleDataObjects: RuleDataObjects;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PreflightProfileRule[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the PreflightProfileRule.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the PreflightProfileRule.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of preflight profile rules.
 */
declare class PreflightProfileRules {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PreflightProfileRule with the specified index.
	 * @param index The index.
	 */
	[index: number]: PreflightProfileRule;

	/**
	 * Adds a new preflight rule to the profile.
	 * @param id The ID of the rule to be added
	 * @param withProperties Initial values for properties of the new PreflightProfileRule
	 */
	add(id: string, withProperties: object): any;

	/**
	 * Returns any PreflightProfileRule in the collection.
	 */
	anyItem(): PreflightProfileRule;

	/**
	 * Displays the number of elements in the PreflightProfileRule.
	 */
	count(): number;

	/**
	 * Returns every PreflightProfileRule in the collection.
	 */
	everyItem(): PreflightProfileRule[];

	/**
	 * Returns the first PreflightProfileRule in the collection.
	 */
	firstItem(): PreflightProfileRule;

	/**
	 * Returns the PreflightProfileRule with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PreflightProfileRule;

	/**
	 * Returns the PreflightProfileRule with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PreflightProfileRule;

	/**
	 * Returns the PreflightProfileRule with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PreflightProfileRule;

	/**
	 * Returns the PreflightProfileRules within the specified range.
	 * @param from The PreflightProfileRule, index, or name at the beginning of the range.
	 * @param to The PreflightProfileRule, index, or name at the end of the range.
	 */
	itemByRange(from: PreflightProfileRule | number | string, to: PreflightProfileRule | number | string): PreflightProfileRule[];

	/**
	 * Returns the last PreflightProfileRule in the collection.
	 */
	lastItem(): PreflightProfileRule;

	/**
	 * Returns the middle PreflightProfileRule in the collection.
	 */
	middleItem(): PreflightProfileRule;

	/**
	 * Returns the PreflightProfileRule whose index follows the specified PreflightProfileRule in the collection.
	 * @param obj The PreflightProfileRule whose index comes before the desired PreflightProfileRule.
	 */
	nextItem(obj: PreflightProfileRule): PreflightProfileRule;

	/**
	 * Returns the PreflightProfileRule with the index previous to the specified index.
	 * @param obj The index of the PreflightProfileRule that follows the desired PreflightProfileRule.
	 */
	previousItem(obj: PreflightProfileRule): PreflightProfileRule;

	/**
	 * Generates a string which, if executed, will return the PreflightProfileRule.
	 */
	toSource(): string;

}

/**
 * A stroke style.
 */
declare class StrokeStyle {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the StrokeStyle.
	 */
	readonly id: number;

	/**
	 * The index of the StrokeStyle within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the StrokeStyle.
	 */
	name: string;

	/**
	 * The parent of the StrokeStyle (a Document or Application).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The stroke style type.
	 */
	readonly strokeStyleType: string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the StrokeStyle.
	 */
	duplicate(): StrokeStyle;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): StrokeStyle[];

	/**
	 * Deletes the stroke style.
	 * @param replacingWith The stroke style to apply in place of the deleted style. .
	 */
	remove(replacingWith: StrokeStyle | string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the StrokeStyle.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of stroke styles.
 */
declare class StrokeStyles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the StrokeStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: StrokeStyle;

	/**
	 * Returns any StrokeStyle in the collection.
	 */
	anyItem(): StrokeStyle;

	/**
	 * Displays the number of elements in the StrokeStyle.
	 */
	count(): number;

	/**
	 * Returns every StrokeStyle in the collection.
	 */
	everyItem(): StrokeStyle[];

	/**
	 * Returns the first StrokeStyle in the collection.
	 */
	firstItem(): StrokeStyle;

	/**
	 * Returns the StrokeStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): StrokeStyle;

	/**
	 * Returns the StrokeStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): StrokeStyle;

	/**
	 * Returns the StrokeStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): StrokeStyle;

	/**
	 * Returns the StrokeStyles within the specified range.
	 * @param from The StrokeStyle, index, or name at the beginning of the range.
	 * @param to The StrokeStyle, index, or name at the end of the range.
	 */
	itemByRange(from: StrokeStyle | number | string, to: StrokeStyle | number | string): StrokeStyle[];

	/**
	 * Returns the last StrokeStyle in the collection.
	 */
	lastItem(): StrokeStyle;

	/**
	 * Returns the middle StrokeStyle in the collection.
	 */
	middleItem(): StrokeStyle;

	/**
	 * Returns the StrokeStyle whose index follows the specified StrokeStyle in the collection.
	 * @param obj The StrokeStyle whose index comes before the desired StrokeStyle.
	 */
	nextItem(obj: StrokeStyle): StrokeStyle;

	/**
	 * Returns the StrokeStyle with the index previous to the specified index.
	 * @param obj The index of the StrokeStyle that follows the desired StrokeStyle.
	 */
	previousItem(obj: StrokeStyle): StrokeStyle;

	/**
	 * Generates a string which, if executed, will return the StrokeStyle.
	 */
	toSource(): string;

}

/**
 * A dashed stroke style.
 */
declare class DashedStrokeStyle extends StrokeStyle {
	/**
	 * The pattern of dashes and gaps, in the format [dash length1, gap length1, dash length2, gap length2]. Define up to ten values.
	 */
	dashArray: (number | string)[];

	/**
	 * The end shape of an open path.
	 */
	endCap: EndCap;

	/**
	 * The corner adjustment applied to the DashedStrokeStyle.
	 */
	strokeCornerAdjustment: StrokeCornerAdjustment;

}

/**
 * A collection of dashed stroke styles.
 */
declare class DashedStrokeStyles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the DashedStrokeStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: DashedStrokeStyle;

	/**
	 * Creates a new DashedStrokeStyle.
	 * @param withProperties Initial values for properties of the new DashedStrokeStyle
	 */
	add(withProperties: object): DashedStrokeStyle;

	/**
	 * Returns any DashedStrokeStyle in the collection.
	 */
	anyItem(): DashedStrokeStyle;

	/**
	 * Displays the number of elements in the DashedStrokeStyle.
	 */
	count(): number;

	/**
	 * Returns every DashedStrokeStyle in the collection.
	 */
	everyItem(): DashedStrokeStyle[];

	/**
	 * Returns the first DashedStrokeStyle in the collection.
	 */
	firstItem(): DashedStrokeStyle;

	/**
	 * Returns the DashedStrokeStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DashedStrokeStyle;

	/**
	 * Returns the DashedStrokeStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): DashedStrokeStyle;

	/**
	 * Returns the DashedStrokeStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): DashedStrokeStyle;

	/**
	 * Returns the DashedStrokeStyles within the specified range.
	 * @param from The DashedStrokeStyle, index, or name at the beginning of the range.
	 * @param to The DashedStrokeStyle, index, or name at the end of the range.
	 */
	itemByRange(from: DashedStrokeStyle | number | string, to: DashedStrokeStyle | number | string): DashedStrokeStyle[];

	/**
	 * Returns the last DashedStrokeStyle in the collection.
	 */
	lastItem(): DashedStrokeStyle;

	/**
	 * Returns the middle DashedStrokeStyle in the collection.
	 */
	middleItem(): DashedStrokeStyle;

	/**
	 * Returns the DashedStrokeStyle whose index follows the specified DashedStrokeStyle in the collection.
	 * @param obj The DashedStrokeStyle whose index comes before the desired DashedStrokeStyle.
	 */
	nextItem(obj: DashedStrokeStyle): DashedStrokeStyle;

	/**
	 * Returns the DashedStrokeStyle with the index previous to the specified index.
	 * @param obj The index of the DashedStrokeStyle that follows the desired DashedStrokeStyle.
	 */
	previousItem(obj: DashedStrokeStyle): DashedStrokeStyle;

	/**
	 * Generates a string which, if executed, will return the DashedStrokeStyle.
	 */
	toSource(): string;

}

/**
 * A dotted stroke style.
 */
declare class DottedStrokeStyle extends StrokeStyle {
	/**
	 * The length of gaps between dots. Define up to five values.
	 */
	dotArray: (number | string)[];

	/**
	 * The corner adjustment applied to the DottedStrokeStyle.
	 */
	strokeCornerAdjustment: StrokeCornerAdjustment;

}

/**
 * A collection of dotted stroke styles.
 */
declare class DottedStrokeStyles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the DottedStrokeStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: DottedStrokeStyle;

	/**
	 * Creates a new DottedStrokeStyle.
	 * @param withProperties Initial values for properties of the new DottedStrokeStyle
	 */
	add(withProperties: object): DottedStrokeStyle;

	/**
	 * Returns any DottedStrokeStyle in the collection.
	 */
	anyItem(): DottedStrokeStyle;

	/**
	 * Displays the number of elements in the DottedStrokeStyle.
	 */
	count(): number;

	/**
	 * Returns every DottedStrokeStyle in the collection.
	 */
	everyItem(): DottedStrokeStyle[];

	/**
	 * Returns the first DottedStrokeStyle in the collection.
	 */
	firstItem(): DottedStrokeStyle;

	/**
	 * Returns the DottedStrokeStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DottedStrokeStyle;

	/**
	 * Returns the DottedStrokeStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): DottedStrokeStyle;

	/**
	 * Returns the DottedStrokeStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): DottedStrokeStyle;

	/**
	 * Returns the DottedStrokeStyles within the specified range.
	 * @param from The DottedStrokeStyle, index, or name at the beginning of the range.
	 * @param to The DottedStrokeStyle, index, or name at the end of the range.
	 */
	itemByRange(from: DottedStrokeStyle | number | string, to: DottedStrokeStyle | number | string): DottedStrokeStyle[];

	/**
	 * Returns the last DottedStrokeStyle in the collection.
	 */
	lastItem(): DottedStrokeStyle;

	/**
	 * Returns the middle DottedStrokeStyle in the collection.
	 */
	middleItem(): DottedStrokeStyle;

	/**
	 * Returns the DottedStrokeStyle whose index follows the specified DottedStrokeStyle in the collection.
	 * @param obj The DottedStrokeStyle whose index comes before the desired DottedStrokeStyle.
	 */
	nextItem(obj: DottedStrokeStyle): DottedStrokeStyle;

	/**
	 * Returns the DottedStrokeStyle with the index previous to the specified index.
	 * @param obj The index of the DottedStrokeStyle that follows the desired DottedStrokeStyle.
	 */
	previousItem(obj: DottedStrokeStyle): DottedStrokeStyle;

	/**
	 * Generates a string which, if executed, will return the DottedStrokeStyle.
	 */
	toSource(): string;

}

/**
 * A striped stroke style.
 */
declare class StripedStrokeStyle extends StrokeStyle {
	/**
	 * The width and position of stripes in a striped stroke pattern. Each stripe is specified by a start-end pair in the format [start1, end1, start2, end2]; each value indicates a percentage of the stroke weight. Each value must be greater than the previous value. (Range: 0 to 100).
	 */
	stripeArray: number[];

}

/**
 * A collection of striped stroke styles.
 */
declare class StripedStrokeStyles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the StripedStrokeStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: StripedStrokeStyle;

	/**
	 * Creates a new StripedStrokeStyle.
	 * @param withProperties Initial values for properties of the new StripedStrokeStyle
	 */
	add(withProperties: object): StripedStrokeStyle;

	/**
	 * Returns any StripedStrokeStyle in the collection.
	 */
	anyItem(): StripedStrokeStyle;

	/**
	 * Displays the number of elements in the StripedStrokeStyle.
	 */
	count(): number;

	/**
	 * Returns every StripedStrokeStyle in the collection.
	 */
	everyItem(): StripedStrokeStyle[];

	/**
	 * Returns the first StripedStrokeStyle in the collection.
	 */
	firstItem(): StripedStrokeStyle;

	/**
	 * Returns the StripedStrokeStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): StripedStrokeStyle;

	/**
	 * Returns the StripedStrokeStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): StripedStrokeStyle;

	/**
	 * Returns the StripedStrokeStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): StripedStrokeStyle;

	/**
	 * Returns the StripedStrokeStyles within the specified range.
	 * @param from The StripedStrokeStyle, index, or name at the beginning of the range.
	 * @param to The StripedStrokeStyle, index, or name at the end of the range.
	 */
	itemByRange(from: StripedStrokeStyle | number | string, to: StripedStrokeStyle | number | string): StripedStrokeStyle[];

	/**
	 * Returns the last StripedStrokeStyle in the collection.
	 */
	lastItem(): StripedStrokeStyle;

	/**
	 * Returns the middle StripedStrokeStyle in the collection.
	 */
	middleItem(): StripedStrokeStyle;

	/**
	 * Returns the StripedStrokeStyle whose index follows the specified StripedStrokeStyle in the collection.
	 * @param obj The StripedStrokeStyle whose index comes before the desired StripedStrokeStyle.
	 */
	nextItem(obj: StripedStrokeStyle): StripedStrokeStyle;

	/**
	 * Returns the StripedStrokeStyle with the index previous to the specified index.
	 * @param obj The index of the StripedStrokeStyle that follows the desired StripedStrokeStyle.
	 */
	previousItem(obj: StripedStrokeStyle): StripedStrokeStyle;

	/**
	 * Generates a string which, if executed, will return the StripedStrokeStyle.
	 */
	toSource(): string;

}

/**
 * A TOC style definition.
 */
declare class TOCStyle {
	/**
	 * If true, creates bookmarks for TOC entries.
	 */
	createBookmarks: boolean;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the TOCStyle.
	 */
	readonly id: number;

	/**
	 * If true, includes the entire book in the TOC. If false, includes only the TOC entries in the current document. Note: Valid when the current document is part of a book.
	 */
	includeBookDocuments: boolean;

	/**
	 * If true, the TOC includes entries from text on hidden layers.
	 */
	includeHidden: boolean;

	/**
	 * The index of the TOCStyle within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * If true, make text anchor in source paragraph.
	 */
	makeAnchor: boolean;

	/**
	 * The name of the TOCStyle.
	 */
	name: string;

	/**
	 * The format for importing numbered paragraphs into the TOC.
	 */
	numberedParagraphs: NumberedParagraphsOptions;

	/**
	 * The parent of the TOCStyle (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * If true, remove forced line breaks.
	 */
	removeForcedLineBreak: boolean;

	/**
	 * If true, the lowest-level TOC entries are placed on the same line as the previous entry.
	 */
	runIn: boolean;

	/**
	 * The table of contents story direction.
	 */
	setStoryDirection: HorizontalOrVertical;

	/**
	 * The TOC title.
	 */
	title: string;

	/**
	 * The paragraph style applied to the TOC title.
	 */
	titleStyle: ParagraphStyle;

	/**
	 * A collection TOC style entries.
	 */
	readonly tocStyleEntries: TOCStyleEntries;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the TOCStyle.
	 */
	duplicate(): TOCStyle;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TOCStyle[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the TOCStyle.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the TOCStyle.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of TOC styles.
 */
declare class TOCStyles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TOCStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: TOCStyle;

	/**
	 * Creates a new TOCStyle.
	 * @param withProperties Initial values for properties of the new TOCStyle
	 */
	add(withProperties: object): TOCStyle;

	/**
	 * Returns any TOCStyle in the collection.
	 */
	anyItem(): TOCStyle;

	/**
	 * Displays the number of elements in the TOCStyle.
	 */
	count(): number;

	/**
	 * Returns every TOCStyle in the collection.
	 */
	everyItem(): TOCStyle[];

	/**
	 * Returns the first TOCStyle in the collection.
	 */
	firstItem(): TOCStyle;

	/**
	 * Returns the TOCStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TOCStyle;

	/**
	 * Returns the TOCStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TOCStyle;

	/**
	 * Returns the TOCStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TOCStyle;

	/**
	 * Returns the TOCStyles within the specified range.
	 * @param from The TOCStyle, index, or name at the beginning of the range.
	 * @param to The TOCStyle, index, or name at the end of the range.
	 */
	itemByRange(from: TOCStyle | number | string, to: TOCStyle | number | string): TOCStyle[];

	/**
	 * Returns the last TOCStyle in the collection.
	 */
	lastItem(): TOCStyle;

	/**
	 * Returns the middle TOCStyle in the collection.
	 */
	middleItem(): TOCStyle;

	/**
	 * Returns the TOCStyle whose index follows the specified TOCStyle in the collection.
	 * @param obj The TOCStyle whose index comes before the desired TOCStyle.
	 */
	nextItem(obj: TOCStyle): TOCStyle;

	/**
	 * Returns the TOCStyle with the index previous to the specified index.
	 * @param obj The index of the TOCStyle that follows the desired TOCStyle.
	 */
	previousItem(obj: TOCStyle): TOCStyle;

	/**
	 * Generates a string which, if executed, will return the TOCStyle.
	 */
	toSource(): string;

}

/**
 * A TOC entry definition.
 */
declare class TOCStyleEntry {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The paragraph style applied to the TOC entry.
	 */
	formatStyle: ParagraphStyle | string;

	/**
	 * The index of the TOCStyleEntry within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The indent level of the entry in the TOC.
	 */
	level: number;

	/**
	 * The name of the TOCStyleEntry.
	 */
	name: string;

	/**
	 * The page number placement for the TOC entry style.
	 */
	pageNumberPosition: PageNumberPosition;

	/**
	 * The character style applied to the page number of the entry.
	 */
	pageNumberStyle: CharacterStyle | string;

	/**
	 * The parent of the TOCStyleEntry (a TOCStyle).
	 */
	readonly parent: TOCStyle;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The string to insert between the entry text and the page numbers.
	 */
	separator: string;

	/**
	 * The character style applied to the string separating the TOC entry text and the page numbers.
	 */
	separatorStyle: CharacterStyle | string;

	/**
	 * If true, sorts the entries alphabetically.
	 */
	sortAlphabet: boolean;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TOCStyleEntry[];

	/**
	 * Deletes the TOCStyleEntry.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the TOCStyleEntry.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection TOC style entries.
 */
declare class TOCStyleEntries {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TOCStyleEntry with the specified index.
	 * @param index The index.
	 */
	[index: number]: TOCStyleEntry;

	/**
	 * Adds a TOC style entry.
	 * @param styleName The paragraph style to include as TOC entries in the TOC.
	 * @param withProperties Initial values for properties of the new TOCStyleEntry
	 */
	add(styleName: string, withProperties: object): TOCStyleEntry;

	/**
	 * Returns any TOCStyleEntry in the collection.
	 */
	anyItem(): TOCStyleEntry;

	/**
	 * Displays the number of elements in the TOCStyleEntry.
	 */
	count(): number;

	/**
	 * Returns every TOCStyleEntry in the collection.
	 */
	everyItem(): TOCStyleEntry[];

	/**
	 * Returns the first TOCStyleEntry in the collection.
	 */
	firstItem(): TOCStyleEntry;

	/**
	 * Returns the TOCStyleEntry with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TOCStyleEntry;

	/**
	 * Returns the TOCStyleEntry with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TOCStyleEntry;

	/**
	 * Returns the TOCStyleEntries within the specified range.
	 * @param from The TOCStyleEntry, index, or name at the beginning of the range.
	 * @param to The TOCStyleEntry, index, or name at the end of the range.
	 */
	itemByRange(from: TOCStyleEntry | number | string, to: TOCStyleEntry | number | string): TOCStyleEntry[];

	/**
	 * Returns the last TOCStyleEntry in the collection.
	 */
	lastItem(): TOCStyleEntry;

	/**
	 * Returns the middle TOCStyleEntry in the collection.
	 */
	middleItem(): TOCStyleEntry;

	/**
	 * Returns the TOCStyleEntry whose index follows the specified TOCStyleEntry in the collection.
	 * @param obj The TOCStyleEntry whose index comes before the desired TOCStyleEntry.
	 */
	nextItem(obj: TOCStyleEntry): TOCStyleEntry;

	/**
	 * Returns the TOCStyleEntry with the index previous to the specified index.
	 * @param obj The index of the TOCStyleEntry that follows the desired TOCStyleEntry.
	 */
	previousItem(obj: TOCStyleEntry): TOCStyleEntry;

	/**
	 * Generates a string which, if executed, will return the TOCStyleEntry.
	 */
	toSource(): string;

}

/**
 * A table cell.
 */
declare class Cell {
	/**
	 * Lists all graphics contained by the Cell.
	 */
	readonly allGraphics: Graphic[];

	/**
	 * Lists all page items contained by the Cell.
	 */
	readonly allPageItems: PageItem[];

	/**
	 * The cell style applied to the cell.
	 */
	appliedCellStyle: CellStyle | string;

	/**
	 * The XML element associated with the Cell.
	 */
	readonly associatedXMLElement: XMLItem;

	/**
	 * If true, the height of the cell or the cells in the Cell can increase or decrease automatically to fit cell content. Note: Allows cells to grow or shrink to the maximum or minimum height, if specified.
	 */
	autoGrow: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the bottom edge border stroke.
	 */
	bottomEdgeStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the bottom edge border stroke. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the bottom edge border stroke will overprint. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the bottom edge border stroke gap color. (Range: 0 to 100) Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapTint: number;

	/**
	 * If true, the bottom edge border stroke will overprint.
	 */
	bottomEdgeStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the bottom edge border stroke.
	 */
	bottomEdgeStrokeTint: number;

	/**
	 * The stroke type of the bottom edge.
	 */
	bottomEdgeStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the bottom edge border stroke.
	 */
	bottomEdgeStrokeWeight: number | string;

	/**
	 * The bottom inset of the cell.The API has been deprecated. Use TextBottomInset or GraphicBottomInset
	 */
	bottomInset: number | string;

	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * The content type of cell.
	 */
	cellType: CellTypeEnum;

	/**
	 * A collection of table cells.
	 */
	readonly cells: Cells;

	/**
	 * A collection of changes.
	 */
	readonly changes: Changes;

	/**
	 * A collection of characters.
	 */
	readonly characters: Characters;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * If true, clips the cell's content to width and height of the cell. The API has been deprecated. Use ClipContentsToTextCell or ClipContentsToPageItemCell
	 */
	clipContentToCell: boolean;

	/**
	 * If true, clips the graphic cell's content to width and height of the cell.
	 */
	clipContentToGraphicCell: boolean;

	/**
	 * If true, clips the text cell's content to width and height of the cell.
	 */
	clipContentToTextCell: boolean;

	/**
	 * The number of columns that the object spans.
	 */
	readonly columnSpan: number;

	/**
	 * A collection of table columns.
	 */
	readonly columns: Columns;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * The text contents. For rows or columns, when specified as a string, the sting populates each cell in the row or column; when specified as an array, the first value in the array populates the left-most cell in the row or the top-most cell in the column; the next value populates the next cell to the right (for rows) or the next lowest cell (for columns), and so on.
	 */
	contents: PageItem | string | SpecialCharacters | string[] | PageItems | NothingEnum;

	/**
	 * If true, draws the diagonal line in front of cell contents.
	 */
	diagonalLineInFront: boolean;

	/**
	 * The diagonal line color, specified as a swatch.
	 */
	diagonalLineStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the diagonal line stroke. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapColor: Swatch;

	/**
	 * If true, the stroke gap of the diagonal line will overprint. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the diagonal line stroke gap color. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapTint: number;

	/**
	 * If true, the diagonal line stroke will overprint.
	 */
	diagonalLineStrokeOverprint: boolean;

	/**
	 * The diagonal line tint (as a percentage). (Range: 0 to 100)
	 */
	diagonalLineStrokeTint: number;

	/**
	 * The stroke type of the diagonal line(s).
	 */
	diagonalLineStrokeType: StrokeStyle | string;

	/**
	 * The diagonal line stroke weight.
	 */
	diagonalLineStrokeWeight: number | string;

	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * A collection of endnotes.
	 */
	readonly endnotes: Endnotes;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the object.
	 */
	fillColor: Swatch | string;

	/**
	 * The tint (as a percentage) of the fill of the object.
	 */
	fillTint: number;

	/**
	 * The distance between the baseline of the text and the top inset of the cell.
	 */
	firstBaselineOffset: FirstBaseline;

	/**
	 * A collection of footnotes.
	 */
	readonly footnotes: Footnotes;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * The angle of a linear gradient applied to the fill of the object. (Range: -180 to 180)
	 */
	gradientFillAngle: number;

	/**
	 * The length (of a linear gradient) or radius (of a radial gradient) applied to the fill of the object.
	 */
	gradientFillLength: number;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the Cell, in the format [x, y].
	 */
	gradientFillStart: (number | string)[];

	/**
	 * The bottom inset of the graphic cell.
	 */
	graphicBottomInset: number | string;

	/**
	 * The left inset of the graphic cell.
	 */
	graphicLeftInset: number | string;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * The right inset of the graphic cell.
	 */
	graphicRightInset: number | string;

	/**
	 * The top inset of the graphic cell.
	 */
	graphicTopInset: number | string;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * The height of the Cell. For a table or column, specifies the sum of the row heights.
	 */
	height: number | string;

	/**
	 * A collection of hidden text objects.
	 */
	readonly hiddenTexts: HiddenTexts;

	/**
	 * The unique ID of the Cell.
	 */
	readonly id: number;

	/**
	 * The index of the Cell within its containing object.
	 */
	readonly index: number;

	/**
	 * The color, specified as a swatch, of the inner column border stroke.
	 */
	innerColumnStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the inner column border stroke. Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the inner column border stroke will overprint. Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the inner column border stroke gap color. (Range: 0 to 100) Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapTint: number;

	/**
	 * If true, the inner column border stroke will overprint.
	 */
	innerColumnStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the inner column border stroke. (Range: 0 to 100)
	 */
	innerColumnStrokeTint: number;

	/**
	 * The stroke type of the inner column.
	 */
	innerColumnStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the inner column border stroke.
	 */
	innerColumnStrokeWeight: number | string;

	/**
	 * The color, specified as a swatch, of the inner row border stroke.
	 */
	innerRowStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the inner row border stroke. Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the inner row border stroke will overprint. Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the inner row border stroke. (Range: 0 to 100) Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapTint: number;

	/**
	 * If true, the inner row border stroke will overprint.
	 */
	innerRowStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the inner row border stroke. (Range: 0 to 100)
	 */
	innerRowStrokeTint: number;

	/**
	 * The stroke type of the inner row.
	 */
	innerRowStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the inner row border strokes.
	 */
	innerRowStrokeWeight: number | string;

	/**
	 * A collection of insertion points.
	 */
	readonly insertionPoints: InsertionPoints;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * If true, keeps the row with the next row when the table is split across text frames or pages.
	 */
	keepWithNextRow: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the left edge border stroke.
	 */
	leftEdgeStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the left edge border stroke. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the left edge border stroke will overprint. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the left edge border stroke gap color. (Range: 0 to 100) Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapTint: number;

	/**
	 * If true, the left edge border stroke will overprint.
	 */
	leftEdgeStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the left edge border stroke. (Range: 0 to 100)
	 */
	leftEdgeStrokeTint: number;

	/**
	 * The stroke type of the left edge.
	 */
	leftEdgeStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the left edge border stroke.
	 */
	leftEdgeStrokeWeight: number | string;

	/**
	 * The left inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicLeftInset
	 */
	leftInset: number | string;

	/**
	 * A collection of lines.
	 */
	readonly lines: Lines;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * The maximum height to which cells in the Cell may grow. Note: The maximum height cannot be exceeded even when auto grow is set to true. Also, the maximum height can affect redistribution.
	 */
	maximumHeight: number | string;

	/**
	 * The space between the baseline of the text and the top inset of the frame or cell.
	 */
	minimumFirstBaselineOffset: number | string;

	/**
	 * The minimum height of the cells in the Cell. Note: When auto grow is true, cells can automatically grow larger than this amount when content is added. Also, the minimum height can affect redistribution.
	 */
	minimumHeight: number | string;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * The name of the Cell.
	 */
	readonly name: string;

	/**
	 * A collection of notes.
	 */
	readonly notes: Notes;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * If true, the story has overset text.
	 */
	readonly overflows: boolean;

	/**
	 * If true, the fill of the object will overprint.
	 */
	overprintFill: boolean;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * The maximum space that can be added between paragraphs in a cell. Note: Valid only when vertical justification is justified.
	 */
	paragraphSpacingLimit: number | string;

	/**
	 * A collection of paragraphs.
	 */
	readonly paragraphs: Paragraphs;

	/**
	 * The parent of the Cell (a XMLElement, Cell, Table, Column or Row).
	 */
	readonly parent: any;

	/**
	 * The parent column of the cell.
	 */
	readonly parentColumn: Column;

	/**
	 * The parent row of the cell.
	 */
	readonly parentRow: Row;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * The color, specified as a swatch, of the right edge border stroke.
	 */
	rightEdgeStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the right edge border stroke. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the right edge border stroke will overprint. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the right edge border stroke gap color. (Range: 0 to 100) Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapTint: number;

	/**
	 * If true, the right edge border stroke will overprint.
	 */
	rightEdgeStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the right edge border stroke. (Range: 0 to 100)
	 */
	rightEdgeStrokeTint: number;

	/**
	 * The stroke type of the right edge.
	 */
	rightEdgeStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the right edge border stroke.
	 */
	rightEdgeStrokeWeight: number | string;

	/**
	 * The right inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicRightInset
	 */
	rightInset: number | string;

	/**
	 * The rotation angle (in degrees) of the cell, specified as one of the following values: 0, 90, 180, or 270.
	 */
	rotationAngle: number;

	/**
	 * The number of rows that the object spans.
	 */
	readonly rowSpan: number;

	/**
	 * The row type.
	 */
	rowType: RowTypes;

	/**
	 * A collection of table rows.
	 */
	readonly rows: Rows;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * Indicates where to start the row.
	 */
	startRow: StartParagraph;

	/**
	 * A collection of tables.
	 */
	readonly tables: Tables;

	/**
	 * The bottom inset of the text cell.
	 */
	textBottomInset: number | string;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * A collection of text columns.
	 */
	readonly textColumns: TextColumns;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * The left inset of the text cell.
	 */
	textLeftInset: number | string;

	/**
	 * The right inset of the text cell.
	 */
	textRightInset: number | string;

	/**
	 * A collection of text style ranges.
	 */
	readonly textStyleRanges: TextStyleRanges;

	/**
	 * The top inset of the text cell.
	 */
	textTopInset: number | string;

	/**
	 * A collection of text variable instances.
	 */
	readonly textVariableInstances: TextVariableInstances;

	/**
	 * A collection of text objects.
	 */
	readonly texts: Texts;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the top edge border stroke.
	 */
	topEdgeStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the top edge border stroke. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the top edge border stroke will overprint. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the top edge border stroke gap color. (Range: 0 to 100) Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapTint: number;

	/**
	 * If true, the top edge border stroke will overprint.
	 */
	topEdgeStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the top edge border stroke. (Range: 0 to 100)
	 */
	topEdgeStrokeTint: number;

	/**
	 * The stroke type of the top edge.
	 */
	topEdgeStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the top edge border stroke.
	 */
	topEdgeStrokeWeight: number | string;

	/**
	 * The top inset of the cell. The API has been deprecated. Use TextTopInset or GraphicTopInset
	 */
	topInset: number | string;

	/**
	 * If true, draws a diagonal line starting from the top left.
	 */
	topLeftDiagonalLine: boolean;

	/**
	 * If true, draws a diagonal line starting from the top right.
	 */
	topRightDiagonalLine: boolean;

	/**
	 * The vertical alignment of cell.
	 */
	verticalJustification: VerticalJustification;

	/**
	 * The width of the Cell. For a table or row, specifies the sum of the column widths.
	 */
	width: number | string;

	/**
	 * A collection of words.
	 */
	readonly words: Words;

	/**
	 * The direction of the text in the cell.
	 */
	writingDirection: HorizontalOrVertical;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Tag the object or the parent story using default tags defined in XML preference.
	 */
	autoTag(): void;

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Clear Cell Style Overrides
	 * @param clearingOverridesThroughRootCellStyle If true, clears all overrides, whether or not they are defined in the underlying cell style
	 */
	clearCellStyleOverrides(clearingOverridesThroughRootCellStyle?: boolean): void;

	/**
	 * Convert bullets and numbering to text.
	 */
	convertBulletsAndNumberingToText(): void;

	/**
	 * Convert cell type. The new cell type parameter is required. Preserve data is optional
	 * @param finalCellType Cell Type to which the cell is to be converted
	 * @param flagToPreserveData If true then the data inside the cell is preserved. While converting graphic cell to text cell, page item becomes inline.
	 */
	convertCellType(finalCellType: CellTypeEnum, flagToPreserveData?: boolean): void;

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[];

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Cell[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Merges the cells.
	 * @param with_ The cell(s) to merge with.
	 */
	merge(with_: Cell | Row | Column): Cell;

	/**
	 * Recomposes the text in the Cell.
	 */
	recompose(): void;

	/**
	 * Deletes the Cell.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Cell in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void;

	/**
	 * Splits the cell along the specified axis.
	 * @param using The direction in which to split the cell.
	 */
	split(using: HorizontalOrVertical): void;

	/**
	 * Generates a string which, if executed, will return the Cell.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Unmerges all merged cells in the Cell.
	 */
	unmerge(): Cell[];

}

/**
 * A collection of table cells.
 */
declare class Cells {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Cell with the specified index.
	 * @param index The index.
	 */
	[index: number]: Cell;

	/**
	 * Returns any Cell in the collection.
	 */
	anyItem(): Cell;

	/**
	 * Displays the number of elements in the Cell.
	 */
	count(): number;

	/**
	 * Returns every Cell in the collection.
	 */
	everyItem(): Cell[];

	/**
	 * Returns the first Cell in the collection.
	 */
	firstItem(): Cell;

	/**
	 * Returns the Cell with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Cell;

	/**
	 * Returns the Cell with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Cell;

	/**
	 * Returns the Cell with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Cell;

	/**
	 * Returns the Cells within the specified range.
	 * @param from The Cell, index, or name at the beginning of the range.
	 * @param to The Cell, index, or name at the end of the range.
	 */
	itemByRange(from: Cell | number | string, to: Cell | number | string): Cell[];

	/**
	 * Returns the last Cell in the collection.
	 */
	lastItem(): Cell;

	/**
	 * Returns the middle Cell in the collection.
	 */
	middleItem(): Cell;

	/**
	 * Returns the Cell whose index follows the specified Cell in the collection.
	 * @param obj The Cell whose index comes before the desired Cell.
	 */
	nextItem(obj: Cell): Cell;

	/**
	 * Returns the Cell with the index previous to the specified index.
	 * @param obj The index of the Cell that follows the desired Cell.
	 */
	previousItem(obj: Cell): Cell;

	/**
	 * Generates a string which, if executed, will return the Cell.
	 */
	toSource(): string;

}

/**
 * A table.
 */
declare class Table {
	/**
	 * Lists all graphics contained by the Table.
	 */
	readonly allGraphics: Graphic[];

	/**
	 * Lists all page items contained by the Table.
	 */
	readonly allPageItems: PageItem[];

	/**
	 * The pattern for alternating fills.
	 */
	alternatingFills: AlternatingFillsTypes;

	/**
	 * The table style applied to the table.
	 */
	appliedTableStyle: TableStyle | string;

	/**
	 * The XML element associated with the Table.
	 */
	readonly associatedXMLElement: XMLItem;

	/**
	 * The number of body rows.
	 */
	bodyRowCount: number;

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the bottom border stroke.
	 */
	bottomBorderStrokeColor: Swatch;

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the bottom border stroke. Note: Valid only when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapColor: Swatch;

	/**
	 * If true, the gap of the bottom border stroke will overprint. Note: Valid only when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the bottom border stroke. (Range: 0 to 100) Note: Valid only when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapTint: number;

	/**
	 * If true, the bottom border stroke will overprint.
	 */
	bottomBorderStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the bottom border stroke. (Range: 0 to 100)
	 */
	bottomBorderStrokeTint: number;

	/**
	 * The stroke type of the bottom border.
	 */
	bottomBorderStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the bottom border stroke.
	 */
	bottomBorderStrokeWeight: number | string;

	/**
	 * The footer placement.
	 */
	breakFooters: HeaderFooterBreakTypes;

	/**
	 * The header placement.
	 */
	breakHeaders: HeaderFooterBreakTypes;

	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * A collection of table cells.
	 */
	readonly cells: Cells;

	/**
	 * A collection of changes.
	 */
	readonly changes: Changes;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * If true, clips the graphic cell's content to width and height of the cell.
	 */
	clipContentToGraphicCell: boolean;

	/**
	 * If true, clips the text cell's content to width and height of the cell.
	 */
	clipContentToTextCell: boolean;

	/**
	 * The number of columns.
	 */
	columnCount: number;

	/**
	 * If true, hides alternating row fills. If false, hides alternating column fills.
	 */
	columnFillsPriority: boolean;

	/**
	 * A collection of table columns.
	 */
	readonly columns: Columns;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * The contents to place in cells, specified as an array whose first item populates the top left cell and whose second item populates the next cell to the right, and so on until each cell in the top row is populated, at which point the next item populates the left-most cell in the second row, and so on. Note: If the array contains fewer strings than the table contains cells, the remaining cells are left blank.
	 */
	contents: string[] | SpecialCharacters | NothingEnum;

	/**
	 * If true, then the table will show collapsed in story and galley views.
	 */
	displayCollapsed: boolean;

	/**
	 * Specifies the order the table cells will display in when viewing in story and galley views.
	 */
	displayOrder: DisplayOrderOptions;

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of columns in the second alternating fill group. Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillColor: Swatch;

	/**
	 * The number of columns in the second alternating fills group. Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillCount: number;

	/**
	 * If true, the columns in the second alternating fills group will overprint. Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillOverprint: boolean;

	/**
	 * The tint (as a percentage) of the columns in the second alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillTint: number;

	/**
	 * The stroke type of columns in the second alternating strokes group.
	 */
	endColumnLineStyle: StrokeStyle | string;

	/**
	 * The stroke color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the second alternating column strokes group. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeColor: Swatch;

	/**
	 * The number of columns in the second alternating column strokes group.
	 */
	endColumnStrokeCount: number;

	/**
	 * The stroke gap color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the second alternating column strokes group. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapColor: Swatch;

	/**
	 * If true, the gap of the column border stroke in the second alternating column strokes group will overprint. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of column borders in the second alternating column strokes group. (Range: 0 to 100) Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapTint: number;

	/**
	 * If true, the column borders in the second alternating column strokes group will overprint. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of column borders in the second alternating column strokes group. (Range: 0 to 100) Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeTint: number;

	/**
	 * The stroke weight of column borders in the second alternating column strokes group. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeWeight: number | string;

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of rows in the second alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillColor: Swatch;

	/**
	 * The number of rows in the second alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillCount: number;

	/**
	 * If true, the rows in the second alternating fills group will overprint. Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillOverprint: boolean;

	/**
	 * The tint (as a percentage) of the rows in the second alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillTint: number;

	/**
	 * The stroke color, specified as a swatch (color, gradient, tint, or mixed ink), of row borders in the second alternating row strokes group. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeColor: Swatch;

	/**
	 * The number of rows in the second alternating row strokes group.
	 */
	endRowStrokeCount: number;

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of row borders in the second alternating rows group. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeGapColor: Swatch;

	/**
	 * If true, the gap of the row borders in the second alternating rows group will overprint. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of rows in the second alternating strokes group. (Range: 0 to 100) Note: Valid when end row stroke count is 1 or greater and end row stroke type is not solid.
	 */
	endRowStrokeGapTint: number;

	/**
	 * If true, the rows in the second alternating rows group will overprint. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the row borders in the second alternating strokes group. (Range: 0 to 100) Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeTint: number;

	/**
	 * The stroke type of rows in the second alternating strokes group.
	 */
	endRowStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of row borders in the second alternating row strokes group. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeWeight: number | string;

	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * A collection of endnotes.
	 */
	readonly endnotes: Endnotes;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The number of footer rows.
	 */
	footerRowCount: number;

	/**
	 * A collection of footnotes.
	 */
	readonly footnotes: Footnotes;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * The bottom inset of the graphic cell.
	 */
	graphicBottomInset: number | string;

	/**
	 * The left inset of the graphic cell.
	 */
	graphicLeftInset: number | string;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * The right inset of the graphic cell.
	 */
	graphicRightInset: number | string;

	/**
	 * The top inset of the graphic cell.
	 */
	graphicTopInset: number | string;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * The number of header rows.
	 */
	headerRowCount: number;

	/**
	 * The height of the Table. For a table or column, specifies the sum of the row heights.
	 */
	height: number | string;

	/**
	 * A collection of hidden text objects.
	 */
	readonly hiddenTexts: HiddenTexts;

	/**
	 * The unique ID of the Table.
	 */
	readonly id: number;

	/**
	 * The index of the Table within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the left border stroke.
	 */
	leftBorderStrokeColor: Swatch;

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the left border stroke. Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapColor: Swatch;

	/**
	 * If true, the gap of the left border stroke will overprint. Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the left border stroke. (Range: 0 to 100) Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapTint: number;

	/**
	 * If true, the left border stroke will overprint.
	 */
	leftBorderStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the left border stroke. (Range: 0 to 100)
	 */
	leftBorderStrokeTint: number;

	/**
	 * The stroke type of the left border.
	 */
	leftBorderStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the left border stroke.
	 */
	leftBorderStrokeWeight: number | string;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * The name of the Table; this is an alias to the Table's label property.
	 */
	name: string;

	/**
	 * A collection of notes.
	 */
	readonly notes: Notes;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * The parent of the Table (a XmlStory, XMLElement, TextFrame, EndnoteTextFrame, Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, Line, Word, Character, Story or Cell).
	 */
	readonly parent: any;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the right border stroke.
	 */
	rightBorderStrokeColor: Swatch;

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the right border stroke. Note: Valid only when right border stroke type is not solid.
	 */
	rightBorderStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the right border stroke will overprint. Note: Valid only when right border stroke type is not solid.
	 */
	rightBorderStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the right border stroke. (Range: 0 to 100) Note: Valid only when right border stroke type is not solid.
	 */
	rightBorderStrokeGapTint: number;

	/**
	 * If true, the right border stroke will overprint.
	 */
	rightBorderStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the right border stroke. (Range: 0 to 100)
	 */
	rightBorderStrokeTint: number;

	/**
	 * The stroke type of the right border.
	 */
	rightBorderStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the right border stroke.
	 */
	rightBorderStrokeWeight: number | string;

	/**
	 * A collection of table rows.
	 */
	readonly rows: Rows;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * The number of columns on the left side of the table to skip before applying the column fill color. Note: Valid when alternating fills are defined for table columns.
	 */
	skipFirstAlternatingFillColumns: number;

	/**
	 * The number of body rows at the beginning of the table to skip before applying the row fill color. Note: Valid when alternating fills are defined for table rows.
	 */
	skipFirstAlternatingFillRows: number;

	/**
	 * The number of columns on the left of the table in which to skip border stroke formatting. Note: Valid when start column stroke count is 1 or greater and/or end column stroke count is 1 or greater.
	 */
	skipFirstAlternatingStrokeColumns: number;

	/**
	 * The number of body rows at the beginning of the table in which to skip border stroke formatting. Note: Valid when start row stroke count is 1 or greater and/or end row stroke count is 1 or greater.
	 */
	skipFirstAlternatingStrokeRows: number;

	/**
	 * If true, skips the first occurrence of header rows.
	 */
	skipFirstHeader: boolean;

	/**
	 * The number columns on the right side of the table in which to not apply the column fill color. Note: Valid when alternating fills are defined for table columns.
	 */
	skipLastAlternatingFillColumns: number;

	/**
	 * The number of body rows at the end of the table in which to not apply the row fill color. Note: Valid when alternating fills are defined for table rows.
	 */
	skipLastAlternatingFillRows: number;

	/**
	 * The number of columns on the right side of the table in which to skip border stroke formatting. Note: Valid when start column stroke count is 1 or greater and/or end column stroke count is 1 or greater.
	 */
	skipLastAlternatingStrokeColumns: number;

	/**
	 * The number of body rows at the end of the table in which to skip border stroke formatting. Note: Valid when start row stroke count is 1 or greater and/or end row stroke count is 1 or greater.
	 */
	skipLastAlternatingStrokeRows: number;

	/**
	 * If true, skips the last occurrence of footer rows.
	 */
	skipLastFooter: boolean;

	/**
	 * The space below the table.
	 */
	spaceAfter: number | string;

	/**
	 * The space above the table.
	 */
	spaceBefore: number | string;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of columns in the first alternating fills group. Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillColor: Swatch;

	/**
	 * The number of columns in the first alternating fills group. Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillCount: number;

	/**
	 * If true, the columns in the first alternating fills group will overprint. Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillOverprint: boolean;

	/**
	 * The tint (as a percentage) of the columns in the first alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillTint: number;

	/**
	 * The stroke color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the first alternating column strokes group.
	 */
	startColumnStrokeColor: Swatch;

	/**
	 * The number of columns in the first alternating column strokes group.
	 */
	startColumnStrokeCount: number;

	/**
	 * The stroke gap color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the first alternating column strokes group. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapColor: Swatch;

	/**
	 * If true, the gap of the column borders in the first alternating column strokes group will overprint. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of column borders in the first alternating column strokes group. (Range: 0 to 100) Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapTint: number;

	/**
	 * If true, the column borders in the first alternating column strokes group will overprint. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of column borders in the first alternating column strokes group. (Range: 0 to 100) Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeTint: number;

	/**
	 * The stroke type of columns in the first alternating strokes group.
	 */
	startColumnStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of column borders in the first alternating column strokes group. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeWeight: number | string;

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of rows in the first alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillColor: Swatch;

	/**
	 * The number of rows in the first alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillCount: number;

	/**
	 * If true, the rows in the first alternating fills group will overprint. Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillOverprint: boolean;

	/**
	 * The tint (as a percentage) of the rows in the first alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillTint: number;

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of row borders in the first alternating row strokes group. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeColor: Swatch;

	/**
	 * The number of rows in the first alternating row strokes group.
	 */
	startRowStrokeCount: number;

	/**
	 * The stroke gap color of row borders in the first alternating row strokes group, specified as a swatch (color, gradient, tint, or mixed ink). Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the row border stroke in the first alternating row strokes group will overprint. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of row borders in the first alternating rows group. (Range: 0 to 100) Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapTint: number;

	/**
	 * If true, the row borders in the first alternating row strokes group will overprint. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the borders in the first alternating row strokes group. (Range: 0 to 100) Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeTint: number;

	/**
	 * The stroke type of rows in the first alternating strokes group.
	 */
	startRowStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of row borders in the first alternating row strokes group. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeWeight: number | string;

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	readonly storyOffset: InsertionPoint;

	/**
	 * The order in which to display row and column strokes at corners.
	 */
	strokeOrder: StrokeOrderTypes;

	/**
	 * The direction of the the table
	 */
	tableDirection: TableDirectionOptions;

	/**
	 * The bottom inset of the text cell.
	 */
	textBottomInset: number | string;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * The left inset of the text cell.
	 */
	textLeftInset: number | string;

	/**
	 * The right inset of the text cell.
	 */
	textRightInset: number | string;

	/**
	 * The top inset of the text cell.
	 */
	textTopInset: number | string;

	/**
	 * A collection of text variable instances.
	 */
	readonly textVariableInstances: TextVariableInstances;

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the table's top border stroke.
	 */
	topBorderStrokeColor: Swatch;

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the table's top border stroke. Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapColor: Swatch;

	/**
	 * If true, the gap of the top border stroke will overprint. Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the table's top border stroke. (Range: 0 to 100) Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapTint: number;

	/**
	 * If true, the top border strokes will overprint.
	 */
	topBorderStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the table's top border stroke. (Range: 0 to 100)
	 */
	topBorderStrokeTint: number;

	/**
	 * The stroke type of the top border.
	 */
	topBorderStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the table's top border stroke.
	 */
	topBorderStrokeWeight: number | string;

	/**
	 * The width of the Table. For a table or row, specifies the sum of the column widths.
	 */
	width: number | string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Tag the object or the parent story using default tags defined in XML preference.
	 */
	autoTag(): void;

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Clear Table Style Overrides
	 */
	clearTableStyleOverrides(): void;

	/**
	 * Convert bullets and numbering to text.
	 */
	convertBulletsAndNumberingToText(): void;

	/**
	 * Converts the table to text.
	 * @param columnSeparator The character to insert between the each column's content in the converted text. Note: Can be defined as any single character, such as a letter, number, or punctuation mark, or by typing a space or tab. Use the actual character rather than its name, such as ',' rather than 'Comma'. Precede double or single quotes or a backslash with an extra backslash as an escape character. For paragraphs, use ^p.
	 * @param rowSeparator The character to use to separate each row's content in the converted text. Note: Can be defined as any single character, such as a letter, number, or punctuation mark, or by typing a space or tab. Use the actual character rather than its name, such as , rather than Comma. Precede double or single quotes or a backslash with an extra backslash as an escape character. For paragraphs, use ^p.
	 */
	convertToText(columnSeparator: string, rowSeparator: string): Text;

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[];

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Table[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Associates the page item with the specified XML element while preserving existing content.
	 * @param using The XML element.
	 */
	markup(using: XMLElement): void;

	/**
	 * Recomposes the text in the Table.
	 */
	recompose(): void;

	/**
	 * Deletes the Table.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Table in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void;

	/**
	 * Generates a string which, if executed, will return the Table.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Unmerges all merged cells in the Table.
	 */
	unmerge(): Cell[];

}

/**
 * A collection of tables.
 */
declare class Tables {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Table with the specified index.
	 * @param index The index.
	 */
	[index: number]: Table;

	/**
	 * Creates a new table.
	 * @param to The location of the new table relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 * @param withProperties Initial values for properties of the new Table
	 */
	add(to?: LocationOptions, reference?: Table | XmlStory | XMLElement | TextFrame | EndnoteTextFrame | Text | InsertionPoint | TextStyleRange | Paragraph | TextColumn | Line | Word | Character | Story | Cell, withProperties?: object): Table;

	/**
	 * Returns any Table in the collection.
	 */
	anyItem(): Table;

	/**
	 * Displays the number of elements in the Table.
	 */
	count(): number;

	/**
	 * Returns every Table in the collection.
	 */
	everyItem(): Table[];

	/**
	 * Returns the first Table in the collection.
	 */
	firstItem(): Table;

	/**
	 * Returns the Table with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Table;

	/**
	 * Returns the Table with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Table;

	/**
	 * Returns the Table with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Table;

	/**
	 * Returns the Tables within the specified range.
	 * @param from The Table, index, or name at the beginning of the range.
	 * @param to The Table, index, or name at the end of the range.
	 */
	itemByRange(from: Table | number | string, to: Table | number | string): Table[];

	/**
	 * Returns the last Table in the collection.
	 */
	lastItem(): Table;

	/**
	 * Returns the middle Table in the collection.
	 */
	middleItem(): Table;

	/**
	 * Returns the Table whose index follows the specified Table in the collection.
	 * @param obj The Table whose index comes before the desired Table.
	 */
	nextItem(obj: Table): Table;

	/**
	 * Returns the Table with the index previous to the specified index.
	 * @param obj The index of the Table that follows the desired Table.
	 */
	previousItem(obj: Table): Table;

	/**
	 * Generates a string which, if executed, will return the Table.
	 */
	toSource(): string;

}

/**
 * A table column.
 */
declare class Column {
	/**
	 * If true, the height of the cell or the cells in the Column can increase or decrease automatically to fit cell content. Note: Allows cells to grow or shrink to the maximum or minimum height, if specified.
	 */
	autoGrow: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the bottom edge border stroke.
	 */
	bottomEdgeStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the bottom edge border stroke. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the bottom edge border stroke will overprint. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the bottom edge border stroke gap color. (Range: 0 to 100) Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapTint: number;

	/**
	 * If true, the bottom edge border stroke will overprint.
	 */
	bottomEdgeStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the bottom edge border stroke.
	 */
	bottomEdgeStrokeTint: number;

	/**
	 * The stroke type of the bottom edge.
	 */
	bottomEdgeStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the bottom edge border stroke.
	 */
	bottomEdgeStrokeWeight: number | string;

	/**
	 * The bottom inset of the cell.The API has been deprecated. Use TextBottomInset or GraphicBottomInset
	 */
	bottomInset: number | string;

	/**
	 * A collection of table cells.
	 */
	readonly cells: Cells;

	/**
	 * If true, clips the cell's content to width and height of the cell. The API has been deprecated. Use ClipContentsToTextCell or ClipContentsToPageItemCell
	 */
	clipContentToCell: boolean;

	/**
	 * If true, clips the graphic cell's content to width and height of the cell.
	 */
	clipContentToGraphicCell: boolean;

	/**
	 * If true, clips the text cell's content to width and height of the cell.
	 */
	clipContentToTextCell: boolean;

	/**
	 * The number of columns that the object spans.
	 */
	readonly columnSpan: number;

	/**
	 * A collection of table columns.
	 */
	readonly columns: Columns;

	/**
	 * The text contents. For rows or columns, when specified as a string, the sting populates each cell in the row or column; when specified as an array, the first value in the array populates the left-most cell in the row or the top-most cell in the column; the next value populates the next cell to the right (for rows) or the next lowest cell (for columns), and so on.
	 */
	contents: PageItem | string | SpecialCharacters | string[] | PageItems | NothingEnum;

	/**
	 * If true, draws the diagonal line in front of cell contents.
	 */
	diagonalLineInFront: boolean;

	/**
	 * The diagonal line color, specified as a swatch.
	 */
	diagonalLineStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the diagonal line stroke. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapColor: Swatch;

	/**
	 * If true, the stroke gap of the diagonal line will overprint. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the diagonal line stroke gap color. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapTint: number;

	/**
	 * If true, the diagonal line stroke will overprint.
	 */
	diagonalLineStrokeOverprint: boolean;

	/**
	 * The diagonal line tint (as a percentage). (Range: 0 to 100)
	 */
	diagonalLineStrokeTint: number;

	/**
	 * The stroke type of the diagonal line(s).
	 */
	diagonalLineStrokeType: StrokeStyle | string;

	/**
	 * The diagonal line stroke weight.
	 */
	diagonalLineStrokeWeight: number | string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the object.
	 */
	fillColor: Swatch | string;

	/**
	 * The tint (as a percentage) of the fill of the object.
	 */
	fillTint: number;

	/**
	 * The distance between the baseline of the text and the top inset of the cell.
	 */
	firstBaselineOffset: FirstBaseline;

	/**
	 * The angle of a linear gradient applied to the fill of the object. (Range: -180 to 180)
	 */
	gradientFillAngle: number;

	/**
	 * The length (of a linear gradient) or radius (of a radial gradient) applied to the fill of the object.
	 */
	gradientFillLength: number;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the Column, in the format [x, y].
	 */
	gradientFillStart: (number | string)[];

	/**
	 * The bottom inset of the graphic cell.
	 */
	graphicBottomInset: number | string;

	/**
	 * The left inset of the graphic cell.
	 */
	graphicLeftInset: number | string;

	/**
	 * The right inset of the graphic cell.
	 */
	graphicRightInset: number | string;

	/**
	 * The top inset of the graphic cell.
	 */
	graphicTopInset: number | string;

	/**
	 * The height of the Column. For a table or column, specifies the sum of the row heights.
	 */
	height: number | string;

	/**
	 * The index of the Column within its containing object.
	 */
	readonly index: number;

	/**
	 * The color, specified as a swatch, of the inner column border stroke.
	 */
	innerColumnStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the inner column border stroke. Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the inner column border stroke will overprint. Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the inner column border stroke gap color. (Range: 0 to 100) Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapTint: number;

	/**
	 * If true, the inner column border stroke will overprint.
	 */
	innerColumnStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the inner column border stroke. (Range: 0 to 100)
	 */
	innerColumnStrokeTint: number;

	/**
	 * The stroke type of the inner column.
	 */
	innerColumnStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the inner column border stroke.
	 */
	innerColumnStrokeWeight: number | string;

	/**
	 * The color, specified as a swatch, of the inner row border stroke.
	 */
	innerRowStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the inner row border stroke. Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the inner row border stroke will overprint. Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the inner row border stroke. (Range: 0 to 100) Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapTint: number;

	/**
	 * If true, the inner row border stroke will overprint.
	 */
	innerRowStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the inner row border stroke. (Range: 0 to 100)
	 */
	innerRowStrokeTint: number;

	/**
	 * The stroke type of the inner row.
	 */
	innerRowStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the inner row border strokes.
	 */
	innerRowStrokeWeight: number | string;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * If true, keeps the row with the next row when the table is split across text frames or pages.
	 */
	keepWithNextRow: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the left edge border stroke.
	 */
	leftEdgeStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the left edge border stroke. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the left edge border stroke will overprint. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the left edge border stroke gap color. (Range: 0 to 100) Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapTint: number;

	/**
	 * If true, the left edge border stroke will overprint.
	 */
	leftEdgeStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the left edge border stroke. (Range: 0 to 100)
	 */
	leftEdgeStrokeTint: number;

	/**
	 * The stroke type of the left edge.
	 */
	leftEdgeStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the left edge border stroke.
	 */
	leftEdgeStrokeWeight: number | string;

	/**
	 * The left inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicLeftInset
	 */
	leftInset: number | string;

	/**
	 * The maximum height to which cells in the Column may grow. Note: The maximum height cannot be exceeded even when auto grow is set to true. Also, the maximum height can affect redistribution.
	 */
	maximumHeight: number | string;

	/**
	 * The space between the baseline of the text and the top inset of the frame or cell.
	 */
	minimumFirstBaselineOffset: number | string;

	/**
	 * The minimum height of the cells in the Column. Note: When auto grow is true, cells can automatically grow larger than this amount when content is added. Also, the minimum height can affect redistribution.
	 */
	minimumHeight: number | string;

	/**
	 * The name of the Column.
	 */
	readonly name: string;

	/**
	 * If true, the story has overset text.
	 */
	readonly overflows: boolean;

	/**
	 * If true, the fill of the object will overprint.
	 */
	overprintFill: boolean;

	/**
	 * The maximum space that can be added between paragraphs in a cell. Note: Valid only when vertical justification is justified.
	 */
	paragraphSpacingLimit: number | string;

	/**
	 * The parent of the Column (a Table).
	 */
	readonly parent: Table;

	/**
	 * The parent column of the cell.
	 */
	readonly parentColumn: Column;

	/**
	 * The parent row of the cell.
	 */
	readonly parentRow: Row;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The color, specified as a swatch, of the right edge border stroke.
	 */
	rightEdgeStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the right edge border stroke. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the right edge border stroke will overprint. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the right edge border stroke gap color. (Range: 0 to 100) Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapTint: number;

	/**
	 * If true, the right edge border stroke will overprint.
	 */
	rightEdgeStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the right edge border stroke. (Range: 0 to 100)
	 */
	rightEdgeStrokeTint: number;

	/**
	 * The stroke type of the right edge.
	 */
	rightEdgeStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the right edge border stroke.
	 */
	rightEdgeStrokeWeight: number | string;

	/**
	 * The right inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicRightInset
	 */
	rightInset: number | string;

	/**
	 * The rotation angle (in degrees) of the cell, specified as one of the following values: 0, 90, 180, or 270.
	 */
	rotationAngle: number;

	/**
	 * The number of rows that the object spans.
	 */
	readonly rowSpan: number;

	/**
	 * The row type.
	 */
	rowType: RowTypes;

	/**
	 * A collection of table rows.
	 */
	readonly rows: Rows;

	/**
	 * Indicates where to start the row.
	 */
	startRow: StartParagraph;

	/**
	 * The bottom inset of the text cell.
	 */
	textBottomInset: number | string;

	/**
	 * The left inset of the text cell.
	 */
	textLeftInset: number | string;

	/**
	 * The right inset of the text cell.
	 */
	textRightInset: number | string;

	/**
	 * The top inset of the text cell.
	 */
	textTopInset: number | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the top edge border stroke.
	 */
	topEdgeStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the top edge border stroke. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the top edge border stroke will overprint. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the top edge border stroke gap color. (Range: 0 to 100) Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapTint: number;

	/**
	 * If true, the top edge border stroke will overprint.
	 */
	topEdgeStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the top edge border stroke. (Range: 0 to 100)
	 */
	topEdgeStrokeTint: number;

	/**
	 * The stroke type of the top edge.
	 */
	topEdgeStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the top edge border stroke.
	 */
	topEdgeStrokeWeight: number | string;

	/**
	 * The top inset of the cell. The API has been deprecated. Use TextTopInset or GraphicTopInset
	 */
	topInset: number | string;

	/**
	 * If true, draws a diagonal line starting from the top left.
	 */
	topLeftDiagonalLine: boolean;

	/**
	 * If true, draws a diagonal line starting from the top right.
	 */
	topRightDiagonalLine: boolean;

	/**
	 * The vertical alignment of cell.
	 */
	verticalJustification: VerticalJustification;

	/**
	 * The width of the Column. For a table or row, specifies the sum of the column widths.
	 */
	width: number | string;

	/**
	 * The direction of the text in the cell.
	 */
	writingDirection: HorizontalOrVertical;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[];

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Column[];

	/**
	 * Merges the cells.
	 * @param with_ The cell(s) to merge with.
	 */
	merge(with_: Cell | Row | Column): Cell;

	/**
	 * Recomposes the text in the Column.
	 */
	recompose(): void;

	/**
	 * Redistributes the specified range of Columns so that the Columns have a uniform size. Note: The maximum or minimum height or width specified for some of the cells in the range may prevent them from being exactly even.
	 * @param using The direction in which to redistribute.
	 * @param thru The last Column in the range.
	 */
	redistribute(using: HorizontalOrVertical, thru: Cell | Column | Row): void;

	/**
	 * Deletes the Column.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Column in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void;

	/**
	 * Splits the cell along the specified axis.
	 * @param using The direction in which to split the cell.
	 */
	split(using: HorizontalOrVertical): void;

	/**
	 * Generates a string which, if executed, will return the Column.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Unmerges all merged cells in the Column.
	 */
	unmerge(): Cell[];

}

/**
 * A collection of table columns.
 */
declare class Columns {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Column with the specified index.
	 * @param index The index.
	 */
	[index: number]: Column;

	/**
	 * Creates a new Column.
	 * @param at The Column's location relative to the reference object or within the table.
	 * @param reference The reference object. Note: The reference object must be within the table. Required only when the at value contains before or after.
	 * @param withProperties Initial values for properties of the new Column
	 */
	add(at?: LocationOptions, reference?: Row | Column | Cell | Table, withProperties?: object): any;

	/**
	 * Returns any Column in the collection.
	 */
	anyItem(): Column;

	/**
	 * Displays the number of elements in the Column.
	 */
	count(): number;

	/**
	 * Returns every Column in the collection.
	 */
	everyItem(): Column[];

	/**
	 * Returns the first Column in the collection.
	 */
	firstItem(): Column;

	/**
	 * Returns the Column with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Column;

	/**
	 * Returns the Column with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Column;

	/**
	 * Returns the Columns within the specified range.
	 * @param from The Column, index, or name at the beginning of the range.
	 * @param to The Column, index, or name at the end of the range.
	 */
	itemByRange(from: Column | number | string, to: Column | number | string): Column[];

	/**
	 * Returns the last Column in the collection.
	 */
	lastItem(): Column;

	/**
	 * Returns the middle Column in the collection.
	 */
	middleItem(): Column;

	/**
	 * Returns the Column whose index follows the specified Column in the collection.
	 * @param obj The Column whose index comes before the desired Column.
	 */
	nextItem(obj: Column): Column;

	/**
	 * Returns the Column with the index previous to the specified index.
	 * @param obj The index of the Column that follows the desired Column.
	 */
	previousItem(obj: Column): Column;

	/**
	 * Generates a string which, if executed, will return the Column.
	 */
	toSource(): string;

}

/**
 * A table row.
 */
declare class Row {
	/**
	 * If true, the height of the cell or the cells in the Row can increase or decrease automatically to fit cell content. Note: Allows cells to grow or shrink to the maximum or minimum height, if specified.
	 */
	autoGrow: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the bottom edge border stroke.
	 */
	bottomEdgeStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the bottom edge border stroke. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the bottom edge border stroke will overprint. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the bottom edge border stroke gap color. (Range: 0 to 100) Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapTint: number;

	/**
	 * If true, the bottom edge border stroke will overprint.
	 */
	bottomEdgeStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the bottom edge border stroke.
	 */
	bottomEdgeStrokeTint: number;

	/**
	 * The stroke type of the bottom edge.
	 */
	bottomEdgeStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the bottom edge border stroke.
	 */
	bottomEdgeStrokeWeight: number | string;

	/**
	 * The bottom inset of the cell.The API has been deprecated. Use TextBottomInset or GraphicBottomInset
	 */
	bottomInset: number | string;

	/**
	 * A collection of table cells.
	 */
	readonly cells: Cells;

	/**
	 * If true, clips the cell's content to width and height of the cell. The API has been deprecated. Use ClipContentsToTextCell or ClipContentsToPageItemCell
	 */
	clipContentToCell: boolean;

	/**
	 * If true, clips the graphic cell's content to width and height of the cell.
	 */
	clipContentToGraphicCell: boolean;

	/**
	 * If true, clips the text cell's content to width and height of the cell.
	 */
	clipContentToTextCell: boolean;

	/**
	 * The number of columns that the object spans.
	 */
	readonly columnSpan: number;

	/**
	 * A collection of table columns.
	 */
	readonly columns: Columns;

	/**
	 * The text contents. For rows or columns, when specified as a string, the sting populates each cell in the row or column; when specified as an array, the first value in the array populates the left-most cell in the row or the top-most cell in the column; the next value populates the next cell to the right (for rows) or the next lowest cell (for columns), and so on.
	 */
	contents: PageItem | string | SpecialCharacters | string[] | PageItems | NothingEnum;

	/**
	 * If true, draws the diagonal line in front of cell contents.
	 */
	diagonalLineInFront: boolean;

	/**
	 * The diagonal line color, specified as a swatch.
	 */
	diagonalLineStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the diagonal line stroke. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapColor: Swatch;

	/**
	 * If true, the stroke gap of the diagonal line will overprint. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the diagonal line stroke gap color. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapTint: number;

	/**
	 * If true, the diagonal line stroke will overprint.
	 */
	diagonalLineStrokeOverprint: boolean;

	/**
	 * The diagonal line tint (as a percentage). (Range: 0 to 100)
	 */
	diagonalLineStrokeTint: number;

	/**
	 * The stroke type of the diagonal line(s).
	 */
	diagonalLineStrokeType: StrokeStyle | string;

	/**
	 * The diagonal line stroke weight.
	 */
	diagonalLineStrokeWeight: number | string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the object.
	 */
	fillColor: Swatch | string;

	/**
	 * The tint (as a percentage) of the fill of the object.
	 */
	fillTint: number;

	/**
	 * The distance between the baseline of the text and the top inset of the cell.
	 */
	firstBaselineOffset: FirstBaseline;

	/**
	 * The angle of a linear gradient applied to the fill of the object. (Range: -180 to 180)
	 */
	gradientFillAngle: number;

	/**
	 * The length (of a linear gradient) or radius (of a radial gradient) applied to the fill of the object.
	 */
	gradientFillLength: number;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the Row, in the format [x, y].
	 */
	gradientFillStart: (number | string)[];

	/**
	 * The bottom inset of the graphic cell.
	 */
	graphicBottomInset: number | string;

	/**
	 * The left inset of the graphic cell.
	 */
	graphicLeftInset: number | string;

	/**
	 * The right inset of the graphic cell.
	 */
	graphicRightInset: number | string;

	/**
	 * The top inset of the graphic cell.
	 */
	graphicTopInset: number | string;

	/**
	 * The height of the Row. For a table or column, specifies the sum of the row heights.
	 */
	height: number | string;

	/**
	 * The index of the Row within its containing object.
	 */
	readonly index: number;

	/**
	 * The color, specified as a swatch, of the inner column border stroke.
	 */
	innerColumnStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the inner column border stroke. Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the inner column border stroke will overprint. Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the inner column border stroke gap color. (Range: 0 to 100) Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapTint: number;

	/**
	 * If true, the inner column border stroke will overprint.
	 */
	innerColumnStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the inner column border stroke. (Range: 0 to 100)
	 */
	innerColumnStrokeTint: number;

	/**
	 * The stroke type of the inner column.
	 */
	innerColumnStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the inner column border stroke.
	 */
	innerColumnStrokeWeight: number | string;

	/**
	 * The color, specified as a swatch, of the inner row border stroke.
	 */
	innerRowStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the inner row border stroke. Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the inner row border stroke will overprint. Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the inner row border stroke. (Range: 0 to 100) Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapTint: number;

	/**
	 * If true, the inner row border stroke will overprint.
	 */
	innerRowStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the inner row border stroke. (Range: 0 to 100)
	 */
	innerRowStrokeTint: number;

	/**
	 * The stroke type of the inner row.
	 */
	innerRowStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the inner row border strokes.
	 */
	innerRowStrokeWeight: number | string;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * If true, keeps the row with the next row when the table is split across text frames or pages.
	 */
	keepWithNextRow: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the left edge border stroke.
	 */
	leftEdgeStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the left edge border stroke. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the left edge border stroke will overprint. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the left edge border stroke gap color. (Range: 0 to 100) Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapTint: number;

	/**
	 * If true, the left edge border stroke will overprint.
	 */
	leftEdgeStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the left edge border stroke. (Range: 0 to 100)
	 */
	leftEdgeStrokeTint: number;

	/**
	 * The stroke type of the left edge.
	 */
	leftEdgeStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the left edge border stroke.
	 */
	leftEdgeStrokeWeight: number | string;

	/**
	 * The left inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicLeftInset
	 */
	leftInset: number | string;

	/**
	 * The maximum height to which cells in the Row may grow. Note: The maximum height cannot be exceeded even when auto grow is set to true. Also, the maximum height can affect redistribution.
	 */
	maximumHeight: number | string;

	/**
	 * The space between the baseline of the text and the top inset of the frame or cell.
	 */
	minimumFirstBaselineOffset: number | string;

	/**
	 * The minimum height of the cells in the Row. Note: When auto grow is true, cells can automatically grow larger than this amount when content is added. Also, the minimum height can affect redistribution.
	 */
	minimumHeight: number | string;

	/**
	 * The name of the Row.
	 */
	readonly name: string;

	/**
	 * If true, the story has overset text.
	 */
	readonly overflows: boolean;

	/**
	 * If true, the fill of the object will overprint.
	 */
	overprintFill: boolean;

	/**
	 * The maximum space that can be added between paragraphs in a cell. Note: Valid only when vertical justification is justified.
	 */
	paragraphSpacingLimit: number | string;

	/**
	 * The parent of the Row (a Table).
	 */
	readonly parent: Table;

	/**
	 * The parent column of the cell.
	 */
	readonly parentColumn: Column;

	/**
	 * The parent row of the cell.
	 */
	readonly parentRow: Row;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The color, specified as a swatch, of the right edge border stroke.
	 */
	rightEdgeStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the right edge border stroke. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the right edge border stroke will overprint. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the right edge border stroke gap color. (Range: 0 to 100) Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapTint: number;

	/**
	 * If true, the right edge border stroke will overprint.
	 */
	rightEdgeStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the right edge border stroke. (Range: 0 to 100)
	 */
	rightEdgeStrokeTint: number;

	/**
	 * The stroke type of the right edge.
	 */
	rightEdgeStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the right edge border stroke.
	 */
	rightEdgeStrokeWeight: number | string;

	/**
	 * The right inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicRightInset
	 */
	rightInset: number | string;

	/**
	 * The rotation angle (in degrees) of the cell, specified as one of the following values: 0, 90, 180, or 270.
	 */
	rotationAngle: number;

	/**
	 * The number of rows that the object spans.
	 */
	readonly rowSpan: number;

	/**
	 * The row type.
	 */
	rowType: RowTypes;

	/**
	 * A collection of table rows.
	 */
	readonly rows: Rows;

	/**
	 * Indicates where to start the row.
	 */
	startRow: StartParagraph;

	/**
	 * The bottom inset of the text cell.
	 */
	textBottomInset: number | string;

	/**
	 * The left inset of the text cell.
	 */
	textLeftInset: number | string;

	/**
	 * The right inset of the text cell.
	 */
	textRightInset: number | string;

	/**
	 * The top inset of the text cell.
	 */
	textTopInset: number | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the top edge border stroke.
	 */
	topEdgeStrokeColor: Swatch;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the top edge border stroke. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the top edge border stroke will overprint. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the top edge border stroke gap color. (Range: 0 to 100) Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapTint: number;

	/**
	 * If true, the top edge border stroke will overprint.
	 */
	topEdgeStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the top edge border stroke. (Range: 0 to 100)
	 */
	topEdgeStrokeTint: number;

	/**
	 * The stroke type of the top edge.
	 */
	topEdgeStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the top edge border stroke.
	 */
	topEdgeStrokeWeight: number | string;

	/**
	 * The top inset of the cell. The API has been deprecated. Use TextTopInset or GraphicTopInset
	 */
	topInset: number | string;

	/**
	 * If true, draws a diagonal line starting from the top left.
	 */
	topLeftDiagonalLine: boolean;

	/**
	 * If true, draws a diagonal line starting from the top right.
	 */
	topRightDiagonalLine: boolean;

	/**
	 * The vertical alignment of cell.
	 */
	verticalJustification: VerticalJustification;

	/**
	 * The width of the Row. For a table or row, specifies the sum of the column widths.
	 */
	width: number | string;

	/**
	 * The direction of the text in the cell.
	 */
	writingDirection: HorizontalOrVertical;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[];

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Row[];

	/**
	 * Merges the cells.
	 * @param with_ The cell(s) to merge with.
	 */
	merge(with_: Cell | Row | Column): Cell;

	/**
	 * Recomposes the text in the Row.
	 */
	recompose(): void;

	/**
	 * Redistributes the specified range of Rows so that the Rows have a uniform size. Note: The maximum or minimum height or width specified for some of the cells in the range may prevent them from being exactly even.
	 * @param using The direction in which to redistribute.
	 * @param thru The last Row in the range.
	 */
	redistribute(using: HorizontalOrVertical, thru: Cell | Column | Row): void;

	/**
	 * Deletes the Row.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Row in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void;

	/**
	 * Splits the cell along the specified axis.
	 * @param using The direction in which to split the cell.
	 */
	split(using: HorizontalOrVertical): void;

	/**
	 * Generates a string which, if executed, will return the Row.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

	/**
	 * Unmerges all merged cells in the Row.
	 */
	unmerge(): Cell[];

}

/**
 * A collection of table rows.
 */
declare class Rows {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Row with the specified index.
	 * @param index The index.
	 */
	[index: number]: Row;

	/**
	 * Creates a new Row.
	 * @param at The Row's location relative to the reference object or within the table.
	 * @param reference The reference object. Note: The reference object must be within the table. Required only when the at value contains before or after.
	 * @param withProperties Initial values for properties of the new Row
	 */
	add(at?: LocationOptions, reference?: Row | Column | Cell | Table, withProperties?: object): any;

	/**
	 * Returns any Row in the collection.
	 */
	anyItem(): Row;

	/**
	 * Displays the number of elements in the Row.
	 */
	count(): number;

	/**
	 * Returns every Row in the collection.
	 */
	everyItem(): Row[];

	/**
	 * Returns the first Row in the collection.
	 */
	firstItem(): Row;

	/**
	 * Returns the Row with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Row;

	/**
	 * Returns the Row with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Row;

	/**
	 * Returns the Rows within the specified range.
	 * @param from The Row, index, or name at the beginning of the range.
	 * @param to The Row, index, or name at the end of the range.
	 */
	itemByRange(from: Row | number | string, to: Row | number | string): Row[];

	/**
	 * Returns the last Row in the collection.
	 */
	lastItem(): Row;

	/**
	 * Returns the middle Row in the collection.
	 */
	middleItem(): Row;

	/**
	 * Returns the Row whose index follows the specified Row in the collection.
	 * @param obj The Row whose index comes before the desired Row.
	 */
	nextItem(obj: Row): Row;

	/**
	 * Returns the Row with the index previous to the specified index.
	 * @param obj The index of the Row that follows the desired Row.
	 */
	previousItem(obj: Row): Row;

	/**
	 * Generates a string which, if executed, will return the Row.
	 */
	toSource(): string;

}

/**
 * A table style.
 */
declare class TableStyle {
	/**
	 * The style that this style is based on.
	 */
	basedOn: TableStyle | string;

	/**
	 * The cell style of the body region.
	 */
	bodyRegionCellStyle: CellStyle | string;

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the bottom border stroke.
	 */
	bottomBorderStrokeColor: Swatch;

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the bottom border stroke. Note: Valid only when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapColor: Swatch;

	/**
	 * If true, the gap of the bottom border stroke will overprint. Note: Valid only when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the bottom border stroke. (Range: 0 to 100) Note: Valid only when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapTint: number;

	/**
	 * If true, the bottom border stroke will overprint.
	 */
	bottomBorderStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the bottom border stroke. (Range: 0 to 100)
	 */
	bottomBorderStrokeTint: number;

	/**
	 * The stroke type of the bottom border.
	 */
	bottomBorderStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the bottom border stroke.
	 */
	bottomBorderStrokeWeight: number | string;

	/**
	 * If true, clips the graphic cell's content to width and height of the cell.
	 */
	clipContentToGraphicCell: boolean;

	/**
	 * If true, clips the text cell's content to width and height of the cell.
	 */
	clipContentToTextCell: boolean;

	/**
	 * If true, hides alternating row fills. If false, hides alternating column fills.
	 */
	columnFillsPriority: boolean;

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of columns in the second alternating fill group. Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillColor: Swatch;

	/**
	 * The number of columns in the second alternating fills group. Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillCount: number;

	/**
	 * If true, the columns in the second alternating fills group will overprint. Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillOverprint: boolean;

	/**
	 * The tint (as a percentage) of the columns in the second alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillTint: number;

	/**
	 * The stroke type of columns in the second alternating strokes group.
	 */
	endColumnLineStyle: StrokeStyle | string;

	/**
	 * The stroke color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the second alternating column strokes group. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeColor: Swatch;

	/**
	 * The number of columns in the second alternating column strokes group.
	 */
	endColumnStrokeCount: number;

	/**
	 * The stroke gap color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the second alternating column strokes group. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapColor: Swatch;

	/**
	 * If true, the gap of the column border stroke in the second alternating column strokes group will overprint. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of column borders in the second alternating column strokes group. (Range: 0 to 100) Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapTint: number;

	/**
	 * If true, the column borders in the second alternating column strokes group will overprint. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of column borders in the second alternating column strokes group. (Range: 0 to 100) Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeTint: number;

	/**
	 * The stroke weight of column borders in the second alternating column strokes group. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeWeight: number | string;

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of rows in the second alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillColor: Swatch;

	/**
	 * The number of rows in the second alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillCount: number;

	/**
	 * If true, the rows in the second alternating fills group will overprint. Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillOverprint: boolean;

	/**
	 * The tint (as a percentage) of the rows in the second alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillTint: number;

	/**
	 * The stroke color, specified as a swatch (color, gradient, tint, or mixed ink), of row borders in the second alternating row strokes group. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeColor: Swatch;

	/**
	 * The number of rows in the second alternating row strokes group.
	 */
	endRowStrokeCount: number;

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of row borders in the second alternating rows group. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeGapColor: Swatch;

	/**
	 * If true, the gap of the row borders in the second alternating rows group will overprint. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of rows in the second alternating strokes group. (Range: 0 to 100) Note: Valid when end row stroke count is 1 or greater and end row stroke type is not solid.
	 */
	endRowStrokeGapTint: number;

	/**
	 * If true, the rows in the second alternating rows group will overprint. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the row borders in the second alternating strokes group. (Range: 0 to 100) Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeTint: number;

	/**
	 * The stroke type of rows in the second alternating strokes group.
	 */
	endRowStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of row borders in the second alternating row strokes group. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeWeight: number | string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The cell style of the footer region.
	 */
	footerRegionCellStyle: CellStyle | string;

	/**
	 * If true, uses the cell style of the body region for the footer region.
	 */
	footerRegionSameAsBodyRegion: boolean;

	/**
	 * The bottom inset of the graphic cell.
	 */
	graphicBottomInset: number | string;

	/**
	 * The left inset of the graphic cell.
	 */
	graphicLeftInset: number | string;

	/**
	 * The right inset of the graphic cell.
	 */
	graphicRightInset: number | string;

	/**
	 * The top inset of the graphic cell.
	 */
	graphicTopInset: number | string;

	/**
	 * The cell style of the header region.
	 */
	headerRegionCellStyle: CellStyle | string;

	/**
	 * If true, use the cell style of the body region for the header region.
	 */
	headerRegionSameAsBodyRegion: boolean;

	/**
	 * The unique ID of the TableStyle.
	 */
	readonly id: number;

	/**
	 * The index of the TableStyle within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the left border stroke.
	 */
	leftBorderStrokeColor: Swatch;

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the left border stroke. Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapColor: Swatch;

	/**
	 * If true, the gap of the left border stroke will overprint. Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the left border stroke. (Range: 0 to 100) Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapTint: number;

	/**
	 * If true, the left border stroke will overprint.
	 */
	leftBorderStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the left border stroke. (Range: 0 to 100)
	 */
	leftBorderStrokeTint: number;

	/**
	 * The stroke type of the left border.
	 */
	leftBorderStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the left border stroke.
	 */
	leftBorderStrokeWeight: number | string;

	/**
	 * The cell style of the left column region.
	 */
	leftColumnRegionCellStyle: CellStyle | string;

	/**
	 * If true, uses the cell style of the body region for the left column region.
	 */
	leftColumnRegionSameAsBodyRegion: boolean;

	/**
	 * The name of the TableStyle.
	 */
	name: string;

	/**
	 * The parent of the TableStyle (a Document, Application or TableStyleGroup).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the right border stroke.
	 */
	rightBorderStrokeColor: Swatch;

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the right border stroke. Note: Valid only when right border stroke type is not solid.
	 */
	rightBorderStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the right border stroke will overprint. Note: Valid only when right border stroke type is not solid.
	 */
	rightBorderStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the right border stroke. (Range: 0 to 100) Note: Valid only when right border stroke type is not solid.
	 */
	rightBorderStrokeGapTint: number;

	/**
	 * If true, the right border stroke will overprint.
	 */
	rightBorderStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the right border stroke. (Range: 0 to 100)
	 */
	rightBorderStrokeTint: number;

	/**
	 * The stroke type of the right border.
	 */
	rightBorderStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the right border stroke.
	 */
	rightBorderStrokeWeight: number | string;

	/**
	 * The cell style of the right column region.
	 */
	rightColumnRegionCellStyle: CellStyle | string;

	/**
	 * If true, uses the cell style of the body region for the right column region.
	 */
	rightColumnRegionSameAsBodyRegion: boolean;

	/**
	 * The number of columns on the left side of the table to skip before applying the column fill color. Note: Valid when alternating fills are defined for table columns.
	 */
	skipFirstAlternatingFillColumns: number;

	/**
	 * The number of body rows at the beginning of the table to skip before applying the row fill color. Note: Valid when alternating fills are defined for table rows.
	 */
	skipFirstAlternatingFillRows: number;

	/**
	 * The number of columns on the left of the table in which to skip border stroke formatting. Note: Valid when start column stroke count is 1 or greater and/or end column stroke count is 1 or greater.
	 */
	skipFirstAlternatingStrokeColumns: number;

	/**
	 * The number of body rows at the beginning of the table in which to skip border stroke formatting. Note: Valid when start row stroke count is 1 or greater and/or end row stroke count is 1 or greater.
	 */
	skipFirstAlternatingStrokeRows: number;

	/**
	 * The number columns on the right side of the table in which to not apply the column fill color. Note: Valid when alternating fills are defined for table columns.
	 */
	skipLastAlternatingFillColumns: number;

	/**
	 * The number of body rows at the end of the table in which to not apply the row fill color. Note: Valid when alternating fills are defined for table rows.
	 */
	skipLastAlternatingFillRows: number;

	/**
	 * The number of columns on the right side of the table in which to skip border stroke formatting. Note: Valid when start column stroke count is 1 or greater and/or end column stroke count is 1 or greater.
	 */
	skipLastAlternatingStrokeColumns: number;

	/**
	 * The number of body rows at the end of the table in which to skip border stroke formatting. Note: Valid when start row stroke count is 1 or greater and/or end row stroke count is 1 or greater.
	 */
	skipLastAlternatingStrokeRows: number;

	/**
	 * The space below the table.
	 */
	spaceAfter: number | string;

	/**
	 * The space above the table.
	 */
	spaceBefore: number | string;

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of columns in the first alternating fills group. Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillColor: Swatch;

	/**
	 * The number of columns in the first alternating fills group. Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillCount: number;

	/**
	 * If true, the columns in the first alternating fills group will overprint. Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillOverprint: boolean;

	/**
	 * The tint (as a percentage) of the columns in the first alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillTint: number;

	/**
	 * The stroke color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the first alternating column strokes group.
	 */
	startColumnStrokeColor: Swatch;

	/**
	 * The number of columns in the first alternating column strokes group.
	 */
	startColumnStrokeCount: number;

	/**
	 * The stroke gap color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the first alternating column strokes group. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapColor: Swatch;

	/**
	 * If true, the gap of the column borders in the first alternating column strokes group will overprint. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of column borders in the first alternating column strokes group. (Range: 0 to 100) Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapTint: number;

	/**
	 * If true, the column borders in the first alternating column strokes group will overprint. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of column borders in the first alternating column strokes group. (Range: 0 to 100) Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeTint: number;

	/**
	 * The stroke type of columns in the first alternating strokes group.
	 */
	startColumnStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of column borders in the first alternating column strokes group. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeWeight: number | string;

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of rows in the first alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillColor: Swatch;

	/**
	 * The number of rows in the first alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillCount: number;

	/**
	 * If true, the rows in the first alternating fills group will overprint. Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillOverprint: boolean;

	/**
	 * The tint (as a percentage) of the rows in the first alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillTint: number;

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of row borders in the first alternating row strokes group. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeColor: Swatch;

	/**
	 * The number of rows in the first alternating row strokes group.
	 */
	startRowStrokeCount: number;

	/**
	 * The stroke gap color of row borders in the first alternating row strokes group, specified as a swatch (color, gradient, tint, or mixed ink). Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapColor: Swatch;

	/**
	 * If true, the gap color of the row border stroke in the first alternating row strokes group will overprint. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of row borders in the first alternating rows group. (Range: 0 to 100) Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapTint: number;

	/**
	 * If true, the row borders in the first alternating row strokes group will overprint. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the borders in the first alternating row strokes group. (Range: 0 to 100) Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeTint: number;

	/**
	 * The stroke type of rows in the first alternating strokes group.
	 */
	startRowStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of row borders in the first alternating row strokes group. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeWeight: number | string;

	/**
	 * The order in which to display row and column strokes at corners.
	 */
	strokeOrder: StrokeOrderTypes;

	/**
	 * The bottom inset of the text cell.
	 */
	textBottomInset: number | string;

	/**
	 * The left inset of the text cell.
	 */
	textLeftInset: number | string;

	/**
	 * The right inset of the text cell.
	 */
	textRightInset: number | string;

	/**
	 * The top inset of the text cell.
	 */
	textTopInset: number | string;

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the table's top border stroke.
	 */
	topBorderStrokeColor: Swatch;

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the table's top border stroke. Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapColor: Swatch;

	/**
	 * If true, the gap of the top border stroke will overprint. Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the table's top border stroke. (Range: 0 to 100) Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapTint: number;

	/**
	 * If true, the top border strokes will overprint.
	 */
	topBorderStrokeOverprint: boolean;

	/**
	 * The tint (as a percentage) of the table's top border stroke. (Range: 0 to 100)
	 */
	topBorderStrokeTint: number;

	/**
	 * The stroke type of the top border.
	 */
	topBorderStrokeType: StrokeStyle | string;

	/**
	 * The stroke weight of the table's top border stroke.
	 */
	topBorderStrokeWeight: number | string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the TableStyle.
	 */
	duplicate(): TableStyle;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TableStyle[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): TableStyle;

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: TableStyle): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the TableStyle.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of table styles.
 */
declare class TableStyles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TableStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: TableStyle;

	/**
	 * Creates a new TableStyle.
	 * @param withProperties Initial values for properties of the new TableStyle
	 */
	add(withProperties: object): TableStyle;

	/**
	 * Returns any TableStyle in the collection.
	 */
	anyItem(): TableStyle;

	/**
	 * Displays the number of elements in the TableStyle.
	 */
	count(): number;

	/**
	 * Returns every TableStyle in the collection.
	 */
	everyItem(): TableStyle[];

	/**
	 * Returns the first TableStyle in the collection.
	 */
	firstItem(): TableStyle;

	/**
	 * Returns the TableStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TableStyle;

	/**
	 * Returns the TableStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TableStyle;

	/**
	 * Returns the TableStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TableStyle;

	/**
	 * Returns the TableStyles within the specified range.
	 * @param from The TableStyle, index, or name at the beginning of the range.
	 * @param to The TableStyle, index, or name at the end of the range.
	 */
	itemByRange(from: TableStyle | number | string, to: TableStyle | number | string): TableStyle[];

	/**
	 * Returns the last TableStyle in the collection.
	 */
	lastItem(): TableStyle;

	/**
	 * Returns the middle TableStyle in the collection.
	 */
	middleItem(): TableStyle;

	/**
	 * Returns the TableStyle whose index follows the specified TableStyle in the collection.
	 * @param obj The TableStyle whose index comes before the desired TableStyle.
	 */
	nextItem(obj: TableStyle): TableStyle;

	/**
	 * Returns the TableStyle with the index previous to the specified index.
	 * @param obj The index of the TableStyle that follows the desired TableStyle.
	 */
	previousItem(obj: TableStyle): TableStyle;

	/**
	 * Generates a string which, if executed, will return the TableStyle.
	 */
	toSource(): string;

}

/**
 * A table style group.
 */
declare class TableStyleGroup {
	/**
	 * All Table styles
	 */
	readonly allTableStyles: TableStyle[];

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the TableStyleGroup.
	 */
	readonly id: number;

	/**
	 * The index of the TableStyleGroup within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the TableStyleGroup.
	 */
	name: string;

	/**
	 * The parent of the TableStyleGroup (a Document, Application or TableStyleGroup).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of table style groups.
	 */
	readonly tableStyleGroups: TableStyleGroups;

	/**
	 * A collection of table styles.
	 */
	readonly tableStyles: TableStyles;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the TableStyleGroup.
	 */
	duplicate(): TableStyleGroup;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TableStyleGroup[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): TableStyleGroup;

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: ParagraphStyle | CharacterStyle): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the TableStyleGroup.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of table style groups.
 */
declare class TableStyleGroups {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TableStyleGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: TableStyleGroup;

	/**
	 * Creates a new TableStyleGroup.
	 * @param withProperties Initial values for properties of the new TableStyleGroup
	 */
	add(withProperties: object): TableStyleGroup;

	/**
	 * Returns any TableStyleGroup in the collection.
	 */
	anyItem(): TableStyleGroup;

	/**
	 * Displays the number of elements in the TableStyleGroup.
	 */
	count(): number;

	/**
	 * Returns every TableStyleGroup in the collection.
	 */
	everyItem(): TableStyleGroup[];

	/**
	 * Returns the first TableStyleGroup in the collection.
	 */
	firstItem(): TableStyleGroup;

	/**
	 * Returns the TableStyleGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TableStyleGroup;

	/**
	 * Returns the TableStyleGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TableStyleGroup;

	/**
	 * Returns the TableStyleGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TableStyleGroup;

	/**
	 * Returns the TableStyleGroups within the specified range.
	 * @param from The TableStyleGroup, index, or name at the beginning of the range.
	 * @param to The TableStyleGroup, index, or name at the end of the range.
	 */
	itemByRange(from: TableStyleGroup | number | string, to: TableStyleGroup | number | string): TableStyleGroup[];

	/**
	 * Returns the last TableStyleGroup in the collection.
	 */
	lastItem(): TableStyleGroup;

	/**
	 * Returns the middle TableStyleGroup in the collection.
	 */
	middleItem(): TableStyleGroup;

	/**
	 * Returns the TableStyleGroup whose index follows the specified TableStyleGroup in the collection.
	 * @param obj The TableStyleGroup whose index comes before the desired TableStyleGroup.
	 */
	nextItem(obj: TableStyleGroup): TableStyleGroup;

	/**
	 * Returns the TableStyleGroup with the index previous to the specified index.
	 * @param obj The index of the TableStyleGroup that follows the desired TableStyleGroup.
	 */
	previousItem(obj: TableStyleGroup): TableStyleGroup;

	/**
	 * Generates a string which, if executed, will return the TableStyleGroup.
	 */
	toSource(): string;

}

/**
 * A cell style.
 */
declare class CellStyle {
	/**
	 * The paragraph style applied to the text.
	 */
	appliedParagraphStyle: ParagraphStyle | NothingEnum | string;

	/**
	 * The style that this style is based on.
	 */
	basedOn: CellStyle | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the bottom edge border stroke.
	 */
	bottomEdgeStrokeColor: Swatch | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the bottom edge border stroke. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapColor: Swatch | NothingEnum;

	/**
	 * If true, the gap color of the bottom edge border stroke will overprint. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the bottom edge border stroke gap color. (Range: 0 to 100) Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapTint: number | NothingEnum;

	/**
	 * If true, the bottom edge border stroke will overprint.
	 */
	bottomEdgeStrokeOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the bottom edge border stroke.
	 */
	bottomEdgeStrokeTint: number | NothingEnum;

	/**
	 * The stroke type of the bottom edge.
	 */
	bottomEdgeStrokeType: StrokeStyle | NothingEnum | string;

	/**
	 * The stroke weight of the bottom edge border stroke.
	 */
	bottomEdgeStrokeWeight: number | NothingEnum;

	/**
	 * The bottom inset of the cell.The API has been deprecated. Use TextBottomInset or GraphicBottomInset.
	 */
	bottomInset: number | NothingEnum;

	/**
	 * If true, clips the cell's content to width and height of the cell. The API has been deprecated. Use ClipContentsToTextCell or ClipContentsToPageItemCell.
	 */
	clipContentToCell: boolean | NothingEnum;

	/**
	 * If true, clips the graphic cell's content to width and height of the cell.
	 */
	clipContentToGraphicCell: boolean | NothingEnum;

	/**
	 * If true, clips the text cell's content to width and height of the cell.
	 */
	clipContentToTextCell: boolean | NothingEnum;

	/**
	 * If true, draws the diagonal line in front of cell contents.
	 */
	diagonalLineInFront: boolean | NothingEnum;

	/**
	 * The diagonal line color, specified as a swatch.
	 */
	diagonalLineStrokeColor: Swatch | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the diagonal line stroke. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapColor: Swatch | NothingEnum;

	/**
	 * If true, the stroke gap of the diagonal line will overprint. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the diagonal line stroke gap color. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapTint: number | NothingEnum;

	/**
	 * If true, the diagonal line stroke will overprint.
	 */
	diagonalLineStrokeOverprint: boolean | NothingEnum;

	/**
	 * The diagonal line tint (as a percentage). (Range: 0 to 100).
	 */
	diagonalLineStrokeTint: number | NothingEnum;

	/**
	 * The stroke type of the diagonal line(s).
	 */
	diagonalLineStrokeType: StrokeStyle | NothingEnum | string;

	/**
	 * The diagonal line stroke weight.
	 */
	diagonalLineStrokeWeight: number | NothingEnum;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the object.
	 */
	fillColor: Swatch | NothingEnum | string;

	/**
	 * The tint (as a percentage) of the fill of the object.
	 */
	fillTint: number | NothingEnum;

	/**
	 * The distance between the baseline of the text and the top inset of the cell.
	 */
	firstBaselineOffset: FirstBaseline | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the fill of the object. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum;

	/**
	 * The length (of a linear gradient) or radius (of a radial gradient) applied to the fill of the object.
	 */
	gradientFillLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the CellStyle, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum;

	/**
	 * The bottom inset of the graphic cell.
	 */
	graphicBottomInset: number | NothingEnum;

	/**
	 * The left inset of the graphic cell.
	 */
	graphicLeftInset: number | NothingEnum;

	/**
	 * The right inset of the graphic cell.
	 */
	graphicRightInset: number | NothingEnum;

	/**
	 * The top inset of the graphic cell.
	 */
	graphicTopInset: number | NothingEnum;

	/**
	 * The unique ID of the CellStyle.
	 */
	readonly id: number;

	/**
	 * The index of the CellStyle within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the left edge border stroke.
	 */
	leftEdgeStrokeColor: Swatch | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the left edge border stroke. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapColor: Swatch | NothingEnum;

	/**
	 * If true, the gap color of the left edge border stroke will overprint. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the left edge border stroke gap color. (Range: 0 to 100) Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapTint: number | NothingEnum;

	/**
	 * If true, the left edge border stroke will overprint.
	 */
	leftEdgeStrokeOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the left edge border stroke. (Range: 0 to 100).
	 */
	leftEdgeStrokeTint: number | NothingEnum;

	/**
	 * The stroke type of the left edge.
	 */
	leftEdgeStrokeType: StrokeStyle | NothingEnum | string;

	/**
	 * The stroke weight of the left edge border stroke.
	 */
	leftEdgeStrokeWeight: number | NothingEnum;

	/**
	 * The left inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicLeftInset.
	 */
	leftInset: number | NothingEnum;

	/**
	 * The space between the baseline of the text and the top inset of the frame or cell.
	 */
	minimumFirstBaselineOffset: number | NothingEnum;

	/**
	 * The name of the style.
	 */
	name: string;

	/**
	 * If true, the fill of the object will overprint.
	 */
	overprintFill: boolean | NothingEnum;

	/**
	 * The maximum space that can be added between paragraphs in a cell. Note: Valid only when vertical justification is justified.
	 */
	paragraphSpacingLimit: number | NothingEnum;

	/**
	 * The parent of the CellStyle (a Document, Application or CellStyleGroup).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The color, specified as a swatch, of the right edge border stroke.
	 */
	rightEdgeStrokeColor: Swatch | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the right edge border stroke. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapColor: Swatch | NothingEnum;

	/**
	 * If true, the gap color of the right edge border stroke will overprint. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the right edge border stroke gap color. (Range: 0 to 100) Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapTint: number | NothingEnum;

	/**
	 * If true, the right edge border stroke will overprint.
	 */
	rightEdgeStrokeOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the right edge border stroke. (Range: 0 to 100).
	 */
	rightEdgeStrokeTint: number | NothingEnum;

	/**
	 * The stroke type of the right edge.
	 */
	rightEdgeStrokeType: StrokeStyle | NothingEnum | string;

	/**
	 * The stroke weight of the right edge border stroke.
	 */
	rightEdgeStrokeWeight: number | NothingEnum;

	/**
	 * The right inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicRightInset.
	 */
	rightInset: number | NothingEnum;

	/**
	 * The rotation angle (in degrees) of the cell, specified as one of the following values: 0, 90, 180, or 270.
	 */
	rotationAngle: number | NothingEnum;

	/**
	 * Whether the direction of the text in a cell runs against the story direction.
	 */
	rotationRunsAgainstStory: boolean | NothingEnum;

	/**
	 * The bottom inset of the text cell.
	 */
	textBottomInset: number | NothingEnum;

	/**
	 * The left inset of the text cell.
	 */
	textLeftInset: number | NothingEnum;

	/**
	 * The right inset of the text cell.
	 */
	textRightInset: number | NothingEnum;

	/**
	 * The top inset of the text cell.
	 */
	textTopInset: number | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the top edge border stroke.
	 */
	topEdgeStrokeColor: Swatch | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the top edge border stroke. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapColor: Swatch | NothingEnum;

	/**
	 * If true, the gap color of the top edge border stroke will overprint. Note: Not valid when top edge stroke type is solid. .
	 */
	topEdgeStrokeGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the top edge border stroke gap color. (Range: 0 to 100) Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapTint: number | NothingEnum;

	/**
	 * If true, the top edge border stroke will overprint.
	 */
	topEdgeStrokeOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the top edge border stroke. (Range: 0 to 100).
	 */
	topEdgeStrokeTint: number | NothingEnum;

	/**
	 * The stroke type of the top edge.
	 */
	topEdgeStrokeType: StrokeStyle | NothingEnum | string;

	/**
	 * The stroke weight of the top edge border stroke.
	 */
	topEdgeStrokeWeight: number | NothingEnum;

	/**
	 * The top inset of the cell. The API has been deprecated. Use TextTopInset or GraphicTopInset.
	 */
	topInset: number | NothingEnum;

	/**
	 * If true, draws a diagonal line starting from the top left.
	 */
	topLeftDiagonalLine: boolean | NothingEnum;

	/**
	 * If true, draws a diagonal line starting from the top right.
	 */
	topRightDiagonalLine: boolean | NothingEnum;

	/**
	 * The vertical alignment of cell.
	 */
	verticalJustification: VerticalJustification | NothingEnum;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the CellStyle.
	 */
	duplicate(): CellStyle;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CellStyle[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): CellStyle;

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: CellStyle): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the CellStyle.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of cell styles.
 */
declare class CellStyles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number | NothingEnum;

	/**
	 * Returns the CellStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: CellStyle;

	/**
	 * Creates a new CellStyle.
	 * @param withProperties Initial values for properties of the new CellStyle
	 */
	add(withProperties: object): CellStyle;

	/**
	 * Returns any CellStyle in the collection.
	 */
	anyItem(): CellStyle;

	/**
	 * Displays the number of elements in the CellStyle.
	 */
	count(): number;

	/**
	 * Returns every CellStyle in the collection.
	 */
	everyItem(): CellStyle[];

	/**
	 * Returns the first CellStyle in the collection.
	 */
	firstItem(): CellStyle;

	/**
	 * Returns the CellStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CellStyle;

	/**
	 * Returns the CellStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CellStyle;

	/**
	 * Returns the CellStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CellStyle;

	/**
	 * Returns the CellStyles within the specified range.
	 * @param from The CellStyle, index, or name at the beginning of the range.
	 * @param to The CellStyle, index, or name at the end of the range.
	 */
	itemByRange(from: CellStyle | number | string, to: CellStyle | number | string): CellStyle[];

	/**
	 * Returns the last CellStyle in the collection.
	 */
	lastItem(): CellStyle;

	/**
	 * Returns the middle CellStyle in the collection.
	 */
	middleItem(): CellStyle;

	/**
	 * Returns the CellStyle whose index follows the specified CellStyle in the collection.
	 * @param obj The CellStyle whose index comes before the desired CellStyle.
	 */
	nextItem(obj: CellStyle): CellStyle;

	/**
	 * Returns the CellStyle with the index previous to the specified index.
	 * @param obj The index of the CellStyle that follows the desired CellStyle.
	 */
	previousItem(obj: CellStyle): CellStyle;

	/**
	 * Generates a string which, if executed, will return the CellStyle.
	 */
	toSource(): string;

}

/**
 * A cell style group.
 */
declare class CellStyleGroup {
	/**
	 * All Cell styles
	 */
	readonly allCellStyles: CellStyle[];

	/**
	 * A collection of cell style groups.
	 */
	readonly cellStyleGroups: CellStyleGroups;

	/**
	 * A collection of cell styles.
	 */
	readonly cellStyles: CellStyles;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the CellStyleGroup.
	 */
	readonly id: number;

	/**
	 * The index of the CellStyleGroup within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the CellStyleGroup.
	 */
	name: string;

	/**
	 * The parent of the CellStyleGroup (a Document, Application or CellStyleGroup).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the CellStyleGroup.
	 */
	duplicate(): CellStyleGroup;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CellStyleGroup[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): CellStyleGroup;

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: ParagraphStyle | CharacterStyle): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the CellStyleGroup.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of cell style groups.
 */
declare class CellStyleGroups {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the CellStyleGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: CellStyleGroup;

	/**
	 * Creates a new CellStyleGroup.
	 * @param withProperties Initial values for properties of the new CellStyleGroup
	 */
	add(withProperties: object): CellStyleGroup;

	/**
	 * Returns any CellStyleGroup in the collection.
	 */
	anyItem(): CellStyleGroup;

	/**
	 * Displays the number of elements in the CellStyleGroup.
	 */
	count(): number;

	/**
	 * Returns every CellStyleGroup in the collection.
	 */
	everyItem(): CellStyleGroup[];

	/**
	 * Returns the first CellStyleGroup in the collection.
	 */
	firstItem(): CellStyleGroup;

	/**
	 * Returns the CellStyleGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CellStyleGroup;

	/**
	 * Returns the CellStyleGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CellStyleGroup;

	/**
	 * Returns the CellStyleGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CellStyleGroup;

	/**
	 * Returns the CellStyleGroups within the specified range.
	 * @param from The CellStyleGroup, index, or name at the beginning of the range.
	 * @param to The CellStyleGroup, index, or name at the end of the range.
	 */
	itemByRange(from: CellStyleGroup | number | string, to: CellStyleGroup | number | string): CellStyleGroup[];

	/**
	 * Returns the last CellStyleGroup in the collection.
	 */
	lastItem(): CellStyleGroup;

	/**
	 * Returns the middle CellStyleGroup in the collection.
	 */
	middleItem(): CellStyleGroup;

	/**
	 * Returns the CellStyleGroup whose index follows the specified CellStyleGroup in the collection.
	 * @param obj The CellStyleGroup whose index comes before the desired CellStyleGroup.
	 */
	nextItem(obj: CellStyleGroup): CellStyleGroup;

	/**
	 * Returns the CellStyleGroup with the index previous to the specified index.
	 * @param obj The index of the CellStyleGroup that follows the desired CellStyleGroup.
	 */
	previousItem(obj: CellStyleGroup): CellStyleGroup;

	/**
	 * Generates a string which, if executed, will return the CellStyleGroup.
	 */
	toSource(): string;

}

/**
 * A nested line style.
 */
declare class NestedLineStyle {
	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the NestedLineStyle within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The number lines to which to apply the nested style.
	 */
	lineCount: number;

	/**
	 * The parent of the NestedLineStyle (a TextDefault, Paragraph, ParagraphStyle, Text, InsertionPoint, TextStyleRange, TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The number line-style rules to back up.
	 */
	repeatLast: number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): NestedLineStyle[];

	/**
	 * Deletes the NestedLineStyle.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the NestedLineStyle.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of nested line styles.
 */
declare class NestedLineStyles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the NestedLineStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: NestedLineStyle;

	/**
	 * Creates a new NestedLineStyle.
	 * @param withProperties Initial values for properties of the new NestedLineStyle
	 */
	add(withProperties: object): NestedLineStyle;

	/**
	 * Returns any NestedLineStyle in the collection.
	 */
	anyItem(): NestedLineStyle;

	/**
	 * Displays the number of elements in the NestedLineStyle.
	 */
	count(): number;

	/**
	 * Returns every NestedLineStyle in the collection.
	 */
	everyItem(): NestedLineStyle[];

	/**
	 * Returns the first NestedLineStyle in the collection.
	 */
	firstItem(): NestedLineStyle;

	/**
	 * Returns the NestedLineStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): NestedLineStyle;

	/**
	 * Returns the NestedLineStyles within the specified range.
	 * @param from The NestedLineStyle, index, or name at the beginning of the range.
	 * @param to The NestedLineStyle, index, or name at the end of the range.
	 */
	itemByRange(from: NestedLineStyle | number | string, to: NestedLineStyle | number | string): NestedLineStyle[];

	/**
	 * Returns the last NestedLineStyle in the collection.
	 */
	lastItem(): NestedLineStyle;

	/**
	 * Returns the middle NestedLineStyle in the collection.
	 */
	middleItem(): NestedLineStyle;

	/**
	 * Returns the NestedLineStyle whose index follows the specified NestedLineStyle in the collection.
	 * @param obj The NestedLineStyle whose index comes before the desired NestedLineStyle.
	 */
	nextItem(obj: NestedLineStyle): NestedLineStyle;

	/**
	 * Returns the NestedLineStyle with the index previous to the specified index.
	 * @param obj The index of the NestedLineStyle that follows the desired NestedLineStyle.
	 */
	previousItem(obj: NestedLineStyle): NestedLineStyle;

	/**
	 * Generates a string which, if executed, will return the NestedLineStyle.
	 */
	toSource(): string;

}

/**
 * A nested GREP style.
 */
declare class NestedGrepStyle {
	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The GREP expression used to apply automatic styling.
	 */
	grepExpression: string;

	/**
	 * The index of the NestedGrepStyle within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the NestedGrepStyle (a TextDefault, Paragraph, ParagraphStyle, Text, InsertionPoint, TextStyleRange, TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): NestedGrepStyle[];

	/**
	 * Deletes the NestedGrepStyle.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the NestedGrepStyle.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of nested GREP styles.
 */
declare class NestedGrepStyles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the NestedGrepStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: NestedGrepStyle;

	/**
	 * Creates a new NestedGrepStyle.
	 * @param withProperties Initial values for properties of the new NestedGrepStyle
	 */
	add(withProperties: object): NestedGrepStyle;

	/**
	 * Returns any NestedGrepStyle in the collection.
	 */
	anyItem(): NestedGrepStyle;

	/**
	 * Displays the number of elements in the NestedGrepStyle.
	 */
	count(): number;

	/**
	 * Returns every NestedGrepStyle in the collection.
	 */
	everyItem(): NestedGrepStyle[];

	/**
	 * Returns the first NestedGrepStyle in the collection.
	 */
	firstItem(): NestedGrepStyle;

	/**
	 * Returns the NestedGrepStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): NestedGrepStyle;

	/**
	 * Returns the NestedGrepStyles within the specified range.
	 * @param from The NestedGrepStyle, index, or name at the beginning of the range.
	 * @param to The NestedGrepStyle, index, or name at the end of the range.
	 */
	itemByRange(from: NestedGrepStyle | number | string, to: NestedGrepStyle | number | string): NestedGrepStyle[];

	/**
	 * Returns the last NestedGrepStyle in the collection.
	 */
	lastItem(): NestedGrepStyle;

	/**
	 * Returns the middle NestedGrepStyle in the collection.
	 */
	middleItem(): NestedGrepStyle;

	/**
	 * Returns the NestedGrepStyle whose index follows the specified NestedGrepStyle in the collection.
	 * @param obj The NestedGrepStyle whose index comes before the desired NestedGrepStyle.
	 */
	nextItem(obj: NestedGrepStyle): NestedGrepStyle;

	/**
	 * Returns the NestedGrepStyle with the index previous to the specified index.
	 * @param obj The index of the NestedGrepStyle that follows the desired NestedGrepStyle.
	 */
	previousItem(obj: NestedGrepStyle): NestedGrepStyle;

	/**
	 * Generates a string which, if executed, will return the NestedGrepStyle.
	 */
	toSource(): string;

}

/**
 * A text object.
 */
declare class Text {
	/**
	 * Lists all graphics contained by the Text.
	 */
	readonly allGraphics: Graphic[];

	/**
	 * Lists all page items contained by the Text.
	 */
	readonly allPageItems: PageItem[];

	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;

	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string;

	/**
	 * The applied conditions.
	 */
	appliedConditions: Condition[];

	/**
	 * The font applied to the Text, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string;

	/**
	 * The language of the text.
	 */
	appliedLanguage: LanguageWithVendors | Language | string;

	/**
	 * The applied character styles dictated by nested styles.
	 */
	readonly appliedNestedStyles: CharacterStyle[];

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string;

	/**
	 * The paragraph style applied to the text.
	 */
	appliedParagraphStyle: ParagraphStyle | string;

	/**
	 * The maximum ascent of any character in the text.
	 */
	readonly ascent: number | string;

	/**
	 * The XML elements associated with the Text.
	 */
	readonly associatedXMLElements: XMLItem[];

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number;

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean;

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle;

	/**
	 * The vertical offset of the text.
	 */
	readonly baseline: number | string;

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | string;

	/**
	 * Bullet character.
	 */
	readonly bulletChar: Bullet;

	/**
	 * The alignment of the bullet character.
	 */
	bulletsAlignment: ListAlignment;

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType;

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string;

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string;

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;

	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization;

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment;

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions;

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number;

	/**
	 * A collection of characters.
	 */
	readonly characters: Characters;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string;

	/**
	 * The contents of the text.
	 */
	contents: string | SpecialCharacters;

	/**
	 * The maximum descent of any character in the text.
	 */
	readonly descent: number | string;

	/**
	 * The desired width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;

	/**
	 * The desired letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500)
	 */
	desiredLetterSpacing: number;

	/**
	 * The desired word spacing, specified as a percentage of the font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions;

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions;

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number;

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number;

	/**
	 * The character style to apply to the drop cap.
	 */
	dropCapStyle: CharacterStyle | string;

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number;

	/**
	 * Vertical offset of the end of the text.
	 */
	readonly endBaseline: number | string;

	/**
	 * Horizontal offset of the end of the text.
	 */
	readonly endHorizontalOffset: number | string;

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin;

	/**
	 * A collection of endnote text ranges.
	 */
	readonly endnoteRanges: EndnoteRanges;

	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the Text. .
	 */
	fillColor: Swatch | string;

	/**
	 * The tint (as a percentage) of the fill color of the Text. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | string;

	/**
	 * The name of the font style.
	 */
	fontStyle: string;

	/**
	 * A collection of footnotes.
	 */
	readonly footnotes: Footnotes;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms;

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: (number | string)[];

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: (number | string)[];

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * If true, aligns only the first line to the frame grid or baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment;

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * A collection of hidden text objects.
	 */
	readonly hiddenTexts: HiddenTexts;

	/**
	 * The horizontal offset of the text.
	 */
	readonly horizontalOffset: number | string;

	/**
	 * The horizontal scaling applied to the Text.
	 */
	horizontalScale: number;

	/**
	 * The relative desirability of better spacing vs. fewer hyphens. A lower value results in greater use of hyphens. (Range: 0 to 100)
	 */
	hyphenWeight: number;

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean;

	/**
	 * The mininum number of letters at the beginning of a word that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;

	/**
	 * The minimum number of letters at the end of a word that can be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;

	/**
	 * If true, allows hyphenation of capitalized words.
	 */
	hyphenateCapitalizedWords: boolean;

	/**
	 * The maximum number of hyphens that can appear on consecutive lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;

	/**
	 * The minimum number of letters a word must have in order to qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;

	/**
	 * If true, allows hyphenation.
	 */
	hyphenation: boolean;

	/**
	 * The amount of white space allowed at the end of a line of non-justified text before hypenation begins. Note: Valid when composer is single-line composer.
	 */
	hyphenationZone: number | string;

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean;

	/**
	 * The index of the text in the collection or parent object.
	 */
	readonly index: number;

	/**
	 * A collection of insertion points.
	 */
	readonly insertionPoints: InsertionPoints;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The number of grid squares in which to arrange the text.
	 */
	jidori: number;

	/**
	 * The paragraph alignment.
	 */
	justification: Justification;

	/**
	 * Use of Kashidas for justification
	 */
	kashidas: KashidasOptions;

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number;

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number;

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean;

	/**
	 * The alignment of kenten characters relative to the parent characters.
	 */
	kentenAlignment: KentenAlignment;

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string;

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string;

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number;

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum;

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter;

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint;

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint;

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number;

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string;

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenStrokeTint: number;

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenTint: number;

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number;

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number;

	/**
	 * The vertical size of kenten charachers as a percent of the original size.
	 */
	kentenYScale: number;

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string;

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em.
	 */
	kerningValue: number;

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions;

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string;

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | string;

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading;

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number;

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel;

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | string;

	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean;

	/**
	 * A collection of lines.
	 */
	readonly lines: Lines;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * The maximum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;

	/**
	 * The maximum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;

	/**
	 * The maximum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;

	/**
	 * If true, consecutive para borders with completely similar properties are merged.
	 */
	mergeConsecutiveParaBorders: boolean;

	/**
	 * The minimum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;

	/**
	 * The minimum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;

	/**
	 * The minimum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number;

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * A collection of nested GREP styles.
	 */
	readonly nestedGrepStyles: NestedGrepStyles;

	/**
	 * A collection of nested line styles.
	 */
	readonly nestedLineStyles: NestedLineStyles;

	/**
	 * A collection of nested styles.
	 */
	readonly nestedStyles: NestedStyles;

	/**
	 * If true, keeps the text on the same line.
	 */
	noBreak: boolean;

	/**
	 * A collection of notes.
	 */
	readonly notes: Notes;

	/**
	 * The alignment of the number.
	 */
	numberingAlignment: ListAlignment;

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean;

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string;

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean;

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string;

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string;

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number;

	/**
	 * Numbering restart policies.
	 */
	readonly numberingRestartPolicies: NumberingRestartPolicy;

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number;

	/**
	 * OpenType features. Can return: Array of Array of 2 Strings or Long Integers.
	 */
	opentypeFeatures: any[];

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean;

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean;

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle;

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean;

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean;

	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean;

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean;

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean;

	/**
	 * If true, use overlapping swash forms in OpenType fonts
	 */
	otfOverlapSwash: boolean;

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean;

	/**
	 * If true, applies italics to half-width alphanumerics.
	 */
	otfRomanItalics: boolean;

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean;

	/**
	 * If true, use stretched alternate forms in OpenType fonts
	 */
	otfStretchedAlternate: boolean;

	/**
	 * If true, use stylistic alternate forms in OpenType fonts
	 */
	otfStylisticAlternate: boolean;

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number;

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean;

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean;

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphBorderBottomLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphBorderBottomLeftCornerRadius: number | string;

	/**
	 * The bottom line weight of the border of paragraph.
	 */
	paragraphBorderBottomLineWeight: number | string;

	/**
	 * The distance to offset the bottom edge of the paragraph border.
	 */
	paragraphBorderBottomOffset: number | string;

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph border.
	 */
	paragraphBorderBottomOrigin: ParagraphBorderBottomOriginEnum;

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphBorderBottomRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphBorderBottomRightCornerRadius: number | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph stroke.
	 */
	paragraphBorderColor: Swatch | string;

	/**
	 * If true, then paragraph border is also displayed at the points where the paragraph splits across frames or columns.
	 */
	paragraphBorderDisplayIfSplits: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph border gap. Note: Valid only when the border type is not solid.
	 */
	paragraphBorderGapColor: Swatch | string;

	/**
	 * If true, the paragraph border gap will overprint. Note: Valid only when border type is not solid.
	 */
	paragraphBorderGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the paragraph border gap. Note: Valid only when the border type is not solid. (Range: 0 to 100)
	 */
	paragraphBorderGapTint: number;

	/**
	 * The left line weight of the border of paragraph.
	 */
	paragraphBorderLeftLineWeight: number | string;

	/**
	 * The distance to offset the left edge of the paragraph border.
	 */
	paragraphBorderLeftOffset: number | string;

	/**
	 * If true, the paragraph border is on.
	 */
	paragraphBorderOn: boolean;

	/**
	 * If true, the paragraph border will overprint.
	 */
	paragraphBorderOverprint: boolean;

	/**
	 * The right line weight of the border of paragraph.
	 */
	paragraphBorderRightLineWeight: number | string;

	/**
	 * The distance to offset the right edge of the paragraph border.
	 */
	paragraphBorderRightOffset: number | string;

	/**
	 * The end shape of an open path.
	 */
	paragraphBorderStrokeEndCap: EndCap;

	/**
	 * The corner join applied to the Text.
	 */
	paragraphBorderStrokeEndJoin: EndJoin;

	/**
	 * The tint (as a percentage) of the paragraph stroke. (Range: 0 to 100)
	 */
	paragraphBorderTint: number;

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphBorderTopLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphBorderTopLeftCornerRadius: number | string;

	/**
	 * The top line weight of the border of paragraph.
	 */
	paragraphBorderTopLineWeight: number | string;

	/**
	 * The distance to offset the top edge of the paragraph border.
	 */
	paragraphBorderTopOffset: number | string;

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph border.
	 */
	paragraphBorderTopOrigin: ParagraphBorderTopOriginEnum;

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerRadius: number | string;

	/**
	 * The type of the border for the paragraph.
	 */
	paragraphBorderType: StrokeStyle | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph border.
	 */
	paragraphBorderWidth: ParagraphBorderEnum;

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions;

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean;

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions;

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long
	 */
	paragraphKashidaWidth: number;

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphShadingBottomLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphShadingBottomLeftCornerRadius: number | string;

	/**
	 * The distance to offset the bottom edge of the paragraph.
	 */
	paragraphShadingBottomOffset: number | string;

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphShadingBottomRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphShadingBottomRightCornerRadius: number | string;

	/**
	 * If true, forces the shading of the paragraph to be clipped with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph shading.
	 */
	paragraphShadingColor: Swatch | string;

	/**
	 * The distance to offset the left edge of the paragraph.
	 */
	paragraphShadingLeftOffset: number | string;

	/**
	 * If true, the paragraph shading is On.
	 */
	paragraphShadingOn: boolean;

	/**
	 * If true, the paragraph shading will overprint.
	 */
	paragraphShadingOverprint: boolean;

	/**
	 * The distance to offset the right edge of the paragraph.
	 */
	paragraphShadingRightOffset: number | string;

	/**
	 * If true, suppress printing of the shading of the paragraph.
	 */
	paragraphShadingSuppressPrinting: boolean;

	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 0 to 100)
	 */
	paragraphShadingTint: number;

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphShadingTopLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphShadingTopLeftCornerRadius: number | string;

	/**
	 * The distance to offset the top edge of the paragraph.
	 */
	paragraphShadingTopOffset: number | string;

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerRadius: number | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;

	/**
	 * A collection of paragraphs.
	 */
	readonly paragraphs: Paragraphs;

	/**
	 * The parent of the Text (a XmlStory, TextPath, TextFrame, EndnoteTextFrame, Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, Line, Word, Character, Story, Cell, XMLElement, Endnote, Footnote, Change, Note or HiddenText).
	 */
	readonly parent: any;

	/**
	 * The story that contains the text.
	 */
	readonly parentStory: Story;

	/**
	 * An array of the text frames that contain the text.
	 */
	readonly parentTextFrames: TextFrame[] | TextPaths;

	/**
	 * The text size.
	 */
	pointSize: number | string;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * The text position relative to the baseline.
	 */
	position: Position;

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The hyphenation style chosen for the provider.
	 */
	providerHyphenationStyle: HyphenationStyleEnum;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | string;

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean;

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments;

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean;

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number;

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string;

	/**
	 * If true, ruby is on.
	 */
	rubyFlag: boolean;

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string;

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number;

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum;

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean;

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount.
	 */
	rubyOverhang: boolean;

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint;

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint;

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang;

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;

	/**
	 * The ruby spacing relative to the parent text.
	 */
	rubyParentSpacing: RubyParentSpacing;

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;

	/**
	 * The ruby string contents.
	 */
	rubyString: string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string;

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number;

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100)
	 */
	rubyTint: number;

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes;

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number;

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number;

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number;

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number;

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number;

	/**
	 * If true, places a rule above the paragraph.
	 */
	ruleAbove: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule above.
	 */
	ruleAboveColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule above. Note: Valid only when the paragraph rule above type is not solid.
	 */
	ruleAboveGapColor: Swatch | string;

	/**
	 * If true, the stroke gap of the paragraph rule above will overprint. Note: Valid only the rule above type is not solid.
	 */
	ruleAboveGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule. (Range: 0 to 100) Note: Valid only when the rule above type is not solid.
	 */
	ruleAboveGapTint: number;

	/**
	 * The distance to indent the left edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number | string;

	/**
	 * The line weight of the rule above.
	 */
	ruleAboveLineWeight: number | string;

	/**
	 * The amount to offset the paragraph rule above from the baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number | string;

	/**
	 * If true, the paragraph rule above will overprint.
	 */
	ruleAboveOverprint: boolean;

	/**
	 * The distance to indent the right edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveRightIndent: number | string;

	/**
	 * The tint (as a percentage) of the paragraph rule above. (Range: 0 to 100)
	 */
	ruleAboveTint: number;

	/**
	 * The stroke type of the rule above the paragraph.
	 */
	ruleAboveType: StrokeStyle | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;

	/**
	 * If true, applies a paragraph rule below.
	 */
	ruleBelow: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule below.
	 */
	ruleBelowColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule below. Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapColor: Swatch | string;

	/**
	 * If true, the gap color of the rule below will overprint.
	 */
	ruleBelowGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule below. (Range: 0 to 100) Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;

	/**
	 * The distance to indent the left edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number | string;

	/**
	 * The line weight of the rule below.
	 */
	ruleBelowLineWeight: number | string;

	/**
	 * The amount to offset the the paragraph rule below from the baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number | string;

	/**
	 * If true, the rule below will overprint.
	 */
	ruleBelowOverprint: boolean;

	/**
	 * The distance to indent the right edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowRightIndent: number | string;

	/**
	 * The tint (as a percentage) of the paragraph rule below. (Range: 0 to 100)
	 */
	ruleBelowTint: number;

	/**
	 * The stroke type of the rule below the paragraph.
	 */
	ruleBelowType: StrokeStyle | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing;

	/**
	 * If true, the line changes size when characters are scaled.
	 */
	scaleAffectsLineHeight: boolean;

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean;

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean;

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number;

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification;

	/**
	 * The skew angle of the Text.
	 */
	skew: number;

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | string;

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | string;

	/**
	 * The minimum space after a span or a split column
	 */
	spanColumnMinSpaceAfter: number | string;

	/**
	 * The minimum space before a span or a split column
	 */
	spanColumnMinSpaceBefore: number | string;

	/**
	 * Whether a paragraph should be a single column, span columns or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * The inside gutter if the paragraph splits columns
	 */
	splitColumnInsideGutter: number | string;

	/**
	 * The outside gutter if the paragraph splits columns
	 */
	splitColumnOutsideGutter: number | string;

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string;

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number;

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | string;

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean;

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100)
	 */
	strikeThroughTint: number;

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string;

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | string;

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean;

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the Text.
	 */
	strokeColor: Swatch | string;

	/**
	 * The tint (as a percentage) of the stroke color of the Text. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | string;

	/**
	 * If true, the applied style has been overridden with additional attributes.
	 */
	readonly styleOverridden: boolean;

	/**
	 * A list of the tab stops in the paragraph. Can return: Array of Arrays of Property Name/Value Pairs.
	 */
	tabList: any[];

	/**
	 * A collection of tab stops.
	 */
	readonly tabStops: TabStops;

	/**
	 * A collection of tables.
	 */
	readonly tables: Tables;

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean;

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number;

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * A collection of text columns.
	 */
	readonly textColumns: TextColumns;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of text style ranges.
	 */
	readonly textStyleRanges: TextStyleRanges;

	/**
	 * A collection of text variable instances.
	 */
	readonly textVariableInstances: TextVariableInstances;

	/**
	 * A collection of text objects.
	 */
	readonly texts: Texts;

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number;

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number;

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number;

	/**
	 * If true, underlines the text.
	 */
	underline: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string;

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number;

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | string;

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean;

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100)
	 */
	underlineTint: number;

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string;

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | string;

	/**
	 * The vertical scaling applied to the Text.
	 */
	verticalScale: number;

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean;

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment;

	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number;

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number;

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number;

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number;

	/**
	 * A collection of words.
	 */
	readonly words: Words;

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number;

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Apply a character style.
	 * @param using The character style to apply.
	 */
	applyCharacterStyle(using: CharacterStyle): void;

	/**
	 * Apply one or more conditions.
	 * @param using The condition(s) to apply
	 * @param removeExisting If true, remove existing conditions.
	 */
	applyConditions(using: Condition[], removeExisting?: boolean): void;

	/**
	 * Apply a paragraph style.
	 * @param using The paragraph style to apply.
	 * @param clearingOverrides If true, clear any text attributes before applying the style.
	 */
	applyParagraphStyle(using: ParagraphStyle, clearingOverrides?: boolean): void;

	/**
	 * asynchronously exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	asynchronousExportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;

	/**
	 * Tag the object or the parent story using default tags defined in XML preference.
	 */
	autoTag(): void;

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Sets the case of the text.
	 * @param using The text case option.
	 */
	changecase(using: ChangecaseMode): void;

	/**
	 * Clears the specified types of override.
	 * @param overridesToClear The types of override to clear.
	 */
	clearOverrides(overridesToClear?: OverrideType): void;

	/**
	 * Convert bullets and numbering to text.
	 */
	convertBulletsAndNumberingToText(): void;

	/**
	 * Converts the text to a note.
	 */
	convertToNote(): Note;

	/**
	 * Converts the text to a table.
	 * @param columnSeparator The character that starts a new column in the new table.
	 * @param rowSeparator The character starts a new row in the new table.
	 * @param numberOfColumns The number of columns in the table. Note: Valid only when the column and row separator characters are the same.
	 */
	convertToTable(columnSeparator: string, rowSeparator: string, numberOfColumns?: number): Table;

	/**
	 * Create Email QR Code on the page item or document
	 * @param emailAddress QR code Email Address
	 * @param subject QR code Email Subject
	 * @param body QR code Email Body Message
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Text. Above parameters can also be passed as properties
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param urlLink QR code Hyperlink URL
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Text. Above parameters can also be passed as properties
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[];

	/**
	 * Create Plain Text QR Code on the page item
	 * @param plainText QR code Plain Text
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Text. Above parameters can also be passed as properties
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Create thumbnail for selected text using the applied style and overrides with the given properties.
	 * @param previewText Text to use as sample
	 * @param pointSize Text font size (in points)
	 * @param space Color space RGB, CMYK or LAB
	 * @param colorValue Color values
	 * @param to The path to the export file.
	 * @param charOrParaStyle The applied style type to use.
	 */
	createStyleThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number[], to: File, charOrParaStyle: StyleType): boolean;

	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param cellNumber QR code Text Phone Number
	 * @param textMessage QR code Text Message
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Text. Above parameters can also be passed as properties
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Create thumbnail for selected text with the given properties.
	 * @param previewText Text to use as sample
	 * @param pointSize Text font size (in points)
	 * @param space Color space RGB, CMYK or LAB
	 * @param colorValue Color values
	 * @param to The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number[], to: File): boolean;

	/**
	 * Create Business Card QR Code on the page item or load on document's placegun
	 * @param firstName QR code Business Card First Name
	 * @param lastName QR code Business Card Last Name
	 * @param jobTitle QR code Business Card Title
	 * @param cellPhone QR code Business Card Cell Phone Number
	 * @param phone QR code Business Card Phone Number
	 * @param email QR code Business Card Email Address
	 * @param organisation QR code Business Card Organisation
	 * @param streetAddress QR code Business Card Street Address
	 * @param city QR code Business Card City
	 * @param adrState QR code Business Card State
	 * @param country QR code Business Card Country
	 * @param postalCode QR code Business Card Postal Code
	 * @param website QR code Business Card URL
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Text. Above parameters can also be passed as properties
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void;

	/**
	 * Duplicates the text in the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	duplicate(to: LocationOptions, reference: Text | Story | Cell | Row | Column | Table | PageItem): Text;

	/**
	 * Exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	exportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds hyperlink sources that intersecting with specified text range.
	 * @param sortOrder The sort order of found ranges.
	 */
	findHyperlinks(sortOrder: RangeSortOrder): HyperlinkTextSource[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Text[];

	/**
	 * Associates the page item with the specified XML element while preserving existing content.
	 * @param using The XML element.
	 */
	markup(using: XMLElement): void;

	/**
	 * Moves the text to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: Text | Story | Cell | Row | Column | Table | PageItem): Text;

	/**
	 * Places the file.
	 * @param fileName The file to place
	 * @param showingOptions Whether to display the import options dialog
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: object): any[];

	/**
	 * Recomposes the text in the Text.
	 */
	recompose(): void;

	/**
	 * Deletes the Text.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Text in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void;

	/**
	 * Jump to the text range.
	 */
	showText(): void;

	/**
	 * If true, text has local overrides
	 * @param charOrParaStyle Style type to look at.
	 * @param charStyleAsOverride Whether to consider character styles as overrides or not
	 */
	textHasOverrides(charOrParaStyle: StyleType, charStyleAsOverride?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Text.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of text objects.
 */
declare class Texts {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Text with the specified index.
	 * @param index The index.
	 */
	[index: number]: Text;

	/**
	 * Returns any Text in the collection.
	 */
	anyItem(): Text;

	/**
	 * Displays the number of elements in the Text.
	 */
	count(): number;

	/**
	 * Returns every Text in the collection.
	 */
	everyItem(): Text[];

	/**
	 * Returns the first Text in the collection.
	 */
	firstItem(): Text;

	/**
	 * Returns the Text with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Text;

	/**
	 * Returns the Texts within the specified range.
	 * @param from The Text, index, or name at the beginning of the range.
	 * @param to The Text, index, or name at the end of the range.
	 */
	itemByRange(from: Text | number | string, to: Text | number | string): Text[];

	/**
	 * Returns the last Text in the collection.
	 */
	lastItem(): Text;

	/**
	 * Returns the middle Text in the collection.
	 */
	middleItem(): Text;

	/**
	 * Returns the Text whose index follows the specified Text in the collection.
	 * @param obj The Text whose index comes before the desired Text.
	 */
	nextItem(obj: Text): Text;

	/**
	 * Returns the Text with the index previous to the specified index.
	 * @param obj The index of the Text that follows the desired Text.
	 */
	previousItem(obj: Text): Text;

	/**
	 * Generates a string which, if executed, will return the Text.
	 */
	toSource(): string;

}

/**
 * A text character.
 */
declare class Character extends Text {
}

/**
 * A collection of characters.
 */
declare class Characters {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Character with the specified index.
	 * @param index The index.
	 */
	[index: number]: Character;

	/**
	 * Returns any Character in the collection.
	 */
	anyItem(): Character;

	/**
	 * Displays the number of elements in the Character.
	 */
	count(): number;

	/**
	 * Returns every Character in the collection.
	 */
	everyItem(): Character[];

	/**
	 * Returns the first Character in the collection.
	 */
	firstItem(): Character;

	/**
	 * Returns the Character with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Character;

	/**
	 * Returns the Characters within the specified range.
	 * @param from The Character, index, or name at the beginning of the range.
	 * @param to The Character, index, or name at the end of the range.
	 */
	itemByRange(from: Character | number | string, to: Character | number | string): Character[];

	/**
	 * Returns the last Character in the collection.
	 */
	lastItem(): Character;

	/**
	 * Returns the middle Character in the collection.
	 */
	middleItem(): Character;

	/**
	 * Returns the Character whose index follows the specified Character in the collection.
	 * @param obj The Character whose index comes before the desired Character.
	 */
	nextItem(obj: Character): Character;

	/**
	 * Returns the Character with the index previous to the specified index.
	 * @param obj The index of the Character that follows the desired Character.
	 */
	previousItem(obj: Character): Character;

	/**
	 * Generates a string which, if executed, will return the Character.
	 */
	toSource(): string;

}

/**
 * A word.
 */
declare class Word extends Text {
}

/**
 * A collection of words.
 */
declare class Words {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Word with the specified index.
	 * @param index The index.
	 */
	[index: number]: Word;

	/**
	 * Returns any Word in the collection.
	 */
	anyItem(): Word;

	/**
	 * Displays the number of elements in the Word.
	 */
	count(): number;

	/**
	 * Returns every Word in the collection.
	 */
	everyItem(): Word[];

	/**
	 * Returns the first Word in the collection.
	 */
	firstItem(): Word;

	/**
	 * Returns the Word with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Word;

	/**
	 * Returns the Words within the specified range.
	 * @param from The Word, index, or name at the beginning of the range.
	 * @param to The Word, index, or name at the end of the range.
	 */
	itemByRange(from: Word | number | string, to: Word | number | string): Word[];

	/**
	 * Returns the last Word in the collection.
	 */
	lastItem(): Word;

	/**
	 * Returns the middle Word in the collection.
	 */
	middleItem(): Word;

	/**
	 * Returns the Word whose index follows the specified Word in the collection.
	 * @param obj The Word whose index comes before the desired Word.
	 */
	nextItem(obj: Word): Word;

	/**
	 * Returns the Word with the index previous to the specified index.
	 * @param obj The index of the Word that follows the desired Word.
	 */
	previousItem(obj: Word): Word;

	/**
	 * Generates a string which, if executed, will return the Word.
	 */
	toSource(): string;

}

/**
 * A line of text.
 */
declare class Line extends Text {
}

/**
 * A collection of lines.
 */
declare class Lines {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Line with the specified index.
	 * @param index The index.
	 */
	[index: number]: Line;

	/**
	 * Returns any Line in the collection.
	 */
	anyItem(): Line;

	/**
	 * Displays the number of elements in the Line.
	 */
	count(): number;

	/**
	 * Returns every Line in the collection.
	 */
	everyItem(): Line[];

	/**
	 * Returns the first Line in the collection.
	 */
	firstItem(): Line;

	/**
	 * Returns the Line with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Line;

	/**
	 * Returns the Lines within the specified range.
	 * @param from The Line, index, or name at the beginning of the range.
	 * @param to The Line, index, or name at the end of the range.
	 */
	itemByRange(from: Line | number | string, to: Line | number | string): Line[];

	/**
	 * Returns the last Line in the collection.
	 */
	lastItem(): Line;

	/**
	 * Returns the middle Line in the collection.
	 */
	middleItem(): Line;

	/**
	 * Returns the Line whose index follows the specified Line in the collection.
	 * @param obj The Line whose index comes before the desired Line.
	 */
	nextItem(obj: Line): Line;

	/**
	 * Returns the Line with the index previous to the specified index.
	 * @param obj The index of the Line that follows the desired Line.
	 */
	previousItem(obj: Line): Line;

	/**
	 * Generates a string which, if executed, will return the Line.
	 */
	toSource(): string;

}

/**
 * A text column.
 */
declare class TextColumn extends Text {
}

/**
 * A collection of text columns.
 */
declare class TextColumns {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TextColumn with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextColumn;

	/**
	 * Returns any TextColumn in the collection.
	 */
	anyItem(): TextColumn;

	/**
	 * Displays the number of elements in the TextColumn.
	 */
	count(): number;

	/**
	 * Returns every TextColumn in the collection.
	 */
	everyItem(): TextColumn[];

	/**
	 * Returns the first TextColumn in the collection.
	 */
	firstItem(): TextColumn;

	/**
	 * Returns the TextColumn with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextColumn;

	/**
	 * Returns the TextColumns within the specified range.
	 * @param from The TextColumn, index, or name at the beginning of the range.
	 * @param to The TextColumn, index, or name at the end of the range.
	 */
	itemByRange(from: TextColumn | number | string, to: TextColumn | number | string): TextColumn[];

	/**
	 * Returns the last TextColumn in the collection.
	 */
	lastItem(): TextColumn;

	/**
	 * Returns the middle TextColumn in the collection.
	 */
	middleItem(): TextColumn;

	/**
	 * Returns the TextColumn whose index follows the specified TextColumn in the collection.
	 * @param obj The TextColumn whose index comes before the desired TextColumn.
	 */
	nextItem(obj: TextColumn): TextColumn;

	/**
	 * Returns the TextColumn with the index previous to the specified index.
	 * @param obj The index of the TextColumn that follows the desired TextColumn.
	 */
	previousItem(obj: TextColumn): TextColumn;

	/**
	 * Generates a string which, if executed, will return the TextColumn.
	 */
	toSource(): string;

}

/**
 * A paragraph.
 */
declare class Paragraph extends Text {
	/**
	 * The current bullets or numbering string.
	 */
	readonly bulletsAndNumberingResultText: string;

	/**
	 * The current level number value.
	 */
	readonly numberingResultNumber: number;

}

/**
 * A collection of paragraphs.
 */
declare class Paragraphs {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Paragraph with the specified index.
	 * @param index The index.
	 */
	[index: number]: Paragraph;

	/**
	 * Returns any Paragraph in the collection.
	 */
	anyItem(): Paragraph;

	/**
	 * Displays the number of elements in the Paragraph.
	 */
	count(): number;

	/**
	 * Returns every Paragraph in the collection.
	 */
	everyItem(): Paragraph[];

	/**
	 * Returns the first Paragraph in the collection.
	 */
	firstItem(): Paragraph;

	/**
	 * Returns the Paragraph with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Paragraph;

	/**
	 * Returns the Paragraphs within the specified range.
	 * @param from The Paragraph, index, or name at the beginning of the range.
	 * @param to The Paragraph, index, or name at the end of the range.
	 */
	itemByRange(from: Paragraph | number | string, to: Paragraph | number | string): Paragraph[];

	/**
	 * Returns the last Paragraph in the collection.
	 */
	lastItem(): Paragraph;

	/**
	 * Returns the middle Paragraph in the collection.
	 */
	middleItem(): Paragraph;

	/**
	 * Returns the Paragraph whose index follows the specified Paragraph in the collection.
	 * @param obj The Paragraph whose index comes before the desired Paragraph.
	 */
	nextItem(obj: Paragraph): Paragraph;

	/**
	 * Returns the Paragraph with the index previous to the specified index.
	 * @param obj The index of the Paragraph that follows the desired Paragraph.
	 */
	previousItem(obj: Paragraph): Paragraph;

	/**
	 * Generates a string which, if executed, will return the Paragraph.
	 */
	toSource(): string;

}

/**
 * A continuous range of identical text formatting attributes.
 */
declare class TextStyleRange extends Text {
}

/**
 * A collection of text style ranges.
 */
declare class TextStyleRanges {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TextStyleRange with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextStyleRange;

	/**
	 * Returns any TextStyleRange in the collection.
	 */
	anyItem(): TextStyleRange;

	/**
	 * Displays the number of elements in the TextStyleRange.
	 */
	count(): number;

	/**
	 * Returns every TextStyleRange in the collection.
	 */
	everyItem(): TextStyleRange[];

	/**
	 * Returns the first TextStyleRange in the collection.
	 */
	firstItem(): TextStyleRange;

	/**
	 * Returns the TextStyleRange with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextStyleRange;

	/**
	 * Returns the TextStyleRanges within the specified range.
	 * @param from The TextStyleRange, index, or name at the beginning of the range.
	 * @param to The TextStyleRange, index, or name at the end of the range.
	 */
	itemByRange(from: TextStyleRange | number | string, to: TextStyleRange | number | string): TextStyleRange[];

	/**
	 * Returns the last TextStyleRange in the collection.
	 */
	lastItem(): TextStyleRange;

	/**
	 * Returns the middle TextStyleRange in the collection.
	 */
	middleItem(): TextStyleRange;

	/**
	 * Returns the TextStyleRange whose index follows the specified TextStyleRange in the collection.
	 * @param obj The TextStyleRange whose index comes before the desired TextStyleRange.
	 */
	nextItem(obj: TextStyleRange): TextStyleRange;

	/**
	 * Returns the TextStyleRange with the index previous to the specified index.
	 * @param obj The index of the TextStyleRange that follows the desired TextStyleRange.
	 */
	previousItem(obj: TextStyleRange): TextStyleRange;

	/**
	 * Generates a string which, if executed, will return the TextStyleRange.
	 */
	toSource(): string;

}

/**
 * An insertion point between two characters.
 */
declare class InsertionPoint extends Text {
	/**
	 * A collection of endnotes.
	 */
	readonly endnotes: Endnotes;

	/**
	 * Creates a new endnote. Internally it creates the endnote reference and its endnote text range.
	 */
	createEndnote(): Endnote;

	/**
	 * Experimental: Place the text fragment fetched from url onto insertion point and create a link
	 * @param linkResourceURI Resource URI for the link.
	 * @param name The tag name for the key.
	 */
	createTextFragmentLink(linkResourceURI: string, name: string): Link;

}

/**
 * A collection of insertion points.
 */
declare class InsertionPoints {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the InsertionPoint with the specified index.
	 * @param index The index.
	 */
	[index: number]: InsertionPoint;

	/**
	 * Returns any InsertionPoint in the collection.
	 */
	anyItem(): InsertionPoint;

	/**
	 * Displays the number of elements in the InsertionPoint.
	 */
	count(): number;

	/**
	 * Returns every InsertionPoint in the collection.
	 */
	everyItem(): InsertionPoint[];

	/**
	 * Returns the first InsertionPoint in the collection.
	 */
	firstItem(): InsertionPoint;

	/**
	 * Returns the InsertionPoint with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): InsertionPoint;

	/**
	 * Returns the InsertionPoints within the specified range.
	 * @param from The InsertionPoint, index, or name at the beginning of the range.
	 * @param to The InsertionPoint, index, or name at the end of the range.
	 */
	itemByRange(from: InsertionPoint | number | string, to: InsertionPoint | number | string): InsertionPoint[];

	/**
	 * Returns the last InsertionPoint in the collection.
	 */
	lastItem(): InsertionPoint;

	/**
	 * Returns the middle InsertionPoint in the collection.
	 */
	middleItem(): InsertionPoint;

	/**
	 * Returns the InsertionPoint whose index follows the specified InsertionPoint in the collection.
	 * @param obj The InsertionPoint whose index comes before the desired InsertionPoint.
	 */
	nextItem(obj: InsertionPoint): InsertionPoint;

	/**
	 * Returns the InsertionPoint with the index previous to the specified index.
	 * @param obj The index of the InsertionPoint that follows the desired InsertionPoint.
	 */
	previousItem(obj: InsertionPoint): InsertionPoint;

	/**
	 * Generates a string which, if executed, will return the InsertionPoint.
	 */
	toSource(): string;

}

/**
 * A text frame.
 */
declare class TextFrame extends PageItem {
	/**
	 * Anchored object settings.
	 */
	readonly anchoredObjectSettings: AnchoredObjectSetting;

	/**
	 * Baseline frame grid option settings.
	 */
	readonly baselineFrameGridOptions: BaselineFrameGridOption;

	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * A collection of characters.
	 */
	readonly characters: Characters;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * The type of content that a frame can contain.
	 */
	contentType: ContentType;

	/**
	 * The contents of the text frame.
	 */
	contents: string | TextFrameContents | SpecialCharacters;

	/**
	 * The last text frame in the thread.
	 */
	readonly endTextFrame: TextFrame | TextPath;

	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of footnotes.
	 */
	readonly footnotes: Footnotes;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * Default grid properties. Note: Applies to named, layout, and frame (story) grids.
	 */
	readonly gridData: GridDataInformation;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * A collection of hidden text objects.
	 */
	readonly hiddenTexts: HiddenTexts;

	/**
	 * A collection of insertion points.
	 */
	readonly insertionPoints: InsertionPoints;

	/**
	 * A collection of lines.
	 */
	readonly lines: Lines;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * The next text frame in the thread.
	 */
	nextTextFrame: TextFrame | TextPath | NothingEnum;

	/**
	 * A collection of notes.
	 */
	readonly notes: Notes;

	/**
	 * Export options for the object
	 */
	readonly objectExportOptions: ObjectExportOption;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * If true, the story has overset text.
	 */
	readonly overflows: boolean;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of paragraphs.
	 */
	readonly paragraphs: Paragraphs;

	/**
	 * The story that contains the text.
	 */
	readonly parentStory: Story;

	/**
	 * A collection of paths.
	 */
	readonly paths: Paths;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * The previous text frame in the thread.
	 */
	previousTextFrame: TextFrame | TextPath | NothingEnum;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * The first text frame in the thread.
	 */
	readonly startTextFrame: TextFrame | TextPath;

	/**
	 * A collection of tables.
	 */
	readonly tables: Tables;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * A collection of text columns.
	 */
	readonly textColumns: TextColumns;

	/**
	 * The index of the text frame within the story.
	 */
	readonly textFrameIndex: number;

	/**
	 * Text frame preference settings.
	 */
	readonly textFramePreferences: TextFramePreference;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of text paths.
	 */
	readonly textPaths: TextPaths;

	/**
	 * A collection of text style ranges.
	 */
	readonly textStyleRanges: TextStyleRanges;

	/**
	 * A collection of text variable instances.
	 */
	readonly textVariableInstances: TextVariableInstances;

	/**
	 * A collection of text objects.
	 */
	readonly texts: Texts;

	/**
	 * A collection of words.
	 */
	readonly words: Words;

	/**
	 * Creates a new page item by combining the TextFrame with other objects. Deletes the objects if they do not intersect.
	 * @param with_ The object(s) to add.
	 */
	addPath(with_: PageItem[]): PageItem;

	/**
	 * Brings the TextFrame forward one level in its layer.
	 */
	bringForward(): void;

	/**
	 * Brings the TextFrame to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void;

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Convert the text frame contents to raw text
	 */
	convertToRawText(): void;

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[];

	/**
	 * Creates a new page item by excluding the overlapping areas of the TextFrame and other objects.
	 * @param with_ The object(s) to exclude.
	 */
	excludeOverlapPath(with_: PageItem[]): PageItem;

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Creates a new page item by intersecting the TextFrame with other objects. Returns an error if the objects do not intersect.
	 * @param with_ The object(s) with which to intersect.
	 */
	intersectPath(with_: PageItem[]): PageItem;

	/**
	 * Creates a compound path by combining the path(s) of the TextFrame with the paths of other objects.
	 * @param with_ The other objects whose paths to include in the new compound path.
	 */
	makeCompoundPath(with_: PageItem[]): PageItem;

	/**
	 * Creates a new page item by reverse subtracting the overlapping areas of the TextFrame and other objects.
	 * @param with_ The object(s) to reverse subtract.
	 */
	minusBack(with_: PageItem[]): PageItem;

	/**
	 * Deprecated: Use contentPlace method. Original Description: Create a linked story and place it into the target page item.
	 * @param parentStory The story to place and link from.
	 * @param showingOptions Whether to display the link options dialog
	 */
	placeAndLink(parentStory: Story, showingOptions?: boolean): Story;

	/**
	 * Recomposes the text in the TextFrame.
	 */
	recompose(): void;

	/**
	 * Releases a compound path.
	 */
	releaseCompoundPath(): PageItem[];

	/**
	 * Sends the TextFrame back one level in its layer.
	 */
	sendBackward(): void;

	/**
	 * Sends the TextFrame to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void;

	/**
	 * Creates a new page item by subtracting the overlapping areas of the TextFrame and other objects.
	 * @param with_ The object(s) to subtract.
	 */
	subtractPath(with_: PageItem[]): PageItem;

}

/**
 * A collection of text frames.
 */
declare class TextFrames {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TextFrame with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextFrame;

	/**
	 * Creates a new TextFrame
	 * @param layer The layer on which to create the TextFrame.
	 * @param at The location at which to insert the TextFrame relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new TextFrame
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): TextFrame;

	/**
	 * Returns any TextFrame in the collection.
	 */
	anyItem(): TextFrame;

	/**
	 * Displays the number of elements in the TextFrame.
	 */
	count(): number;

	/**
	 * Returns every TextFrame in the collection.
	 */
	everyItem(): TextFrame[];

	/**
	 * Returns the first TextFrame in the collection.
	 */
	firstItem(): TextFrame;

	/**
	 * Returns the TextFrame with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextFrame;

	/**
	 * Returns the TextFrame with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TextFrame;

	/**
	 * Returns the TextFrame with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TextFrame;

	/**
	 * Returns the TextFrames within the specified range.
	 * @param from The TextFrame, index, or name at the beginning of the range.
	 * @param to The TextFrame, index, or name at the end of the range.
	 */
	itemByRange(from: TextFrame | number | string, to: TextFrame | number | string): TextFrame[];

	/**
	 * Returns the last TextFrame in the collection.
	 */
	lastItem(): TextFrame;

	/**
	 * Returns the middle TextFrame in the collection.
	 */
	middleItem(): TextFrame;

	/**
	 * Returns the TextFrame whose index follows the specified TextFrame in the collection.
	 * @param obj The TextFrame whose index comes before the desired TextFrame.
	 */
	nextItem(obj: TextFrame): TextFrame;

	/**
	 * Returns the TextFrame with the index previous to the specified index.
	 * @param obj The index of the TextFrame that follows the desired TextFrame.
	 */
	previousItem(obj: TextFrame): TextFrame;

	/**
	 * Generates a string which, if executed, will return the TextFrame.
	 */
	toSource(): string;

}

/**
 * A story.
 */
declare class Story {
	/**
	 * Dispatched after a Story is placed. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_PLACE: string;

	/**
	 * Dispatched before a Story is placed. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_PLACE: string;

	/**
	 * Lists all graphics contained by the Story.
	 */
	readonly allGraphics: Graphic[];

	/**
	 * Lists all page items contained by the Story.
	 */
	readonly allPageItems: PageItem[];

	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;

	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string;

	/**
	 * The font applied to the Story, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string;

	/**
	 * The language of the text.
	 */
	appliedLanguage: LanguageWithVendors | Language | string;

	/**
	 * The named grid in use.
	 */
	appliedNamedGrid: NamedGrid;

	/**
	 * The applied character styles dictated by nested styles.
	 */
	readonly appliedNestedStyles: CharacterStyle[];

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string;

	/**
	 * The paragraph style applied to the text.
	 */
	appliedParagraphStyle: ParagraphStyle | string;

	/**
	 * The XML element associated with the Story.
	 */
	readonly associatedXMLElement: XMLItem;

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number;

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean;

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle;

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | string;

	/**
	 * Bullet character.
	 */
	readonly bulletChar: Bullet;

	/**
	 * The alignment of the bullet character.
	 */
	bulletsAlignment: ListAlignment;

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType;

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string;

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string;

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;

	/**
	 * A collection of buttons.
	 */
	readonly buttons: Buttons;

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization;

	/**
	 * A collection of cell style mappings.
	 */
	readonly cellStyleMappings: CellStyleMappings;

	/**
	 * A collection of changes.
	 */
	readonly changes: Changes;

	/**
	 * A collection of char style mappings.
	 */
	readonly charStyleMappings: CharStyleMappings;

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment;

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions;

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number;

	/**
	 * A collection of characters.
	 */
	readonly characters: Characters;

	/**
	 * A collection of checkboxes.
	 */
	readonly checkBoxes: CheckBoxes;

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean;

	/**
	 * A collection of comboboxes.
	 */
	readonly comboBoxes: ComboBoxes;

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string;

	/**
	 * The contents of the text.
	 */
	contents: string | SpecialCharacters;

	/**
	 * The desired width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;

	/**
	 * The desired letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500)
	 */
	desiredLetterSpacing: number;

	/**
	 * The desired word spacing, specified as a percentage of the font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions;

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions;

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number;

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number;

	/**
	 * The character style to apply to the drop cap.
	 */
	dropCapStyle: CharacterStyle | string;

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number;

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin;

	/**
	 * A collection of endnote text ranges.
	 */
	readonly endnoteRanges: EndnoteRanges;

	/**
	 * A collection of endnote text frames.
	 */
	readonly endnoteTextFrames: EndnoteTextFrames;

	/**
	 * A collection of endnotes.
	 */
	readonly endnotes: Endnotes;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the Story. .
	 */
	fillColor: Swatch | string;

	/**
	 * The tint (as a percentage) of the fill color of the Story. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | string;

	/**
	 * The name of the font style.
	 */
	fontStyle: string;

	/**
	 * A collection of footnotes.
	 */
	readonly footnotes: Footnotes;

	/**
	 * A collection of form fields.
	 */
	readonly formFields: FormFields;

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms;

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: (number | string)[];

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: (number | string)[];

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * If true, aligns only the first line to the frame grid or baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment;

	/**
	 * Default grid properties. Note: Applies to named, layout, and frame (story) grids.
	 */
	readonly gridData: GridDataInformation;

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * A collection of hidden text objects.
	 */
	readonly hiddenTexts: HiddenTexts;

	/**
	 * The horizontal scaling applied to the Story.
	 */
	horizontalScale: number;

	/**
	 * The relative desirability of better spacing vs. fewer hyphens. A lower value results in greater use of hyphens. (Range: 0 to 100)
	 */
	hyphenWeight: number;

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean;

	/**
	 * The mininum number of letters at the beginning of a word that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;

	/**
	 * The minimum number of letters at the end of a word that can be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;

	/**
	 * If true, allows hyphenation of capitalized words.
	 */
	hyphenateCapitalizedWords: boolean;

	/**
	 * The maximum number of hyphens that can appear on consecutive lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;

	/**
	 * The minimum number of letters a word must have in order to qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;

	/**
	 * If true, allows hyphenation.
	 */
	hyphenation: boolean;

	/**
	 * The amount of white space allowed at the end of a line of non-justified text before hypenation begins. Note: Valid when composer is single-line composer.
	 */
	hyphenationZone: number | string;

	/**
	 * The unique ID of the Story.
	 */
	readonly id: number;

	/**
	 * The IDML component name of the Story.
	 */
	idmlComponentName: string;

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean;

	/**
	 * Export options for InCopy INCX document format.
	 */
	readonly incopyExportOptions: InCopyExportOption;

	/**
	 * The index of the Story within its containing object.
	 */
	readonly index: number;

	/**
	 * A collection of insertion points.
	 */
	readonly insertionPoints: InsertionPoints;

	/**
	 * returns true if it's an endnote story otherwise returns false.
	 */
	readonly isEndnoteStory: boolean;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The source file of the link.
	 */
	readonly itemLink: Link;

	/**
	 * The number of grid squares in which to arrange the text.
	 */
	jidori: number;

	/**
	 * The paragraph alignment.
	 */
	justification: Justification;

	/**
	 * Use of Kashidas for justification
	 */
	kashidas: KashidasOptions;

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number;

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number;

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean;

	/**
	 * The alignment of kenten characters relative to the parent characters.
	 */
	kentenAlignment: KentenAlignment;

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string;

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string;

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number;

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum;

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter;

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint;

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint;

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number;

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string;

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenStrokeTint: number;

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenTint: number;

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number;

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number;

	/**
	 * The vertical size of kenten charachers as a percent of the original size.
	 */
	kentenYScale: number;

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string;

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions;

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string;

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | string;

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading;

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number;

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel;

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | string;

	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean;

	/**
	 * A collection of lines.
	 */
	readonly lines: Lines;

	/**
	 * Linked story options
	 */
	readonly linkedStoryOptions: LinkedStoryOption;

	/**
	 * A collection of listboxes.
	 */
	readonly listBoxes: ListBoxes;

	/**
	 * The lock state.
	 */
	readonly lockState: LockStateValues;

	/**
	 * The maximum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;

	/**
	 * The maximum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;

	/**
	 * The maximum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;

	/**
	 * If true, consecutive para borders with completely similar properties are merged.
	 */
	mergeConsecutiveParaBorders: boolean;

	/**
	 * The minimum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;

	/**
	 * The minimum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;

	/**
	 * The minimum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number;

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults;

	/**
	 * A collection of multi-state objects.
	 */
	readonly multiStateObjects: MultiStateObjects;

	/**
	 * The name of the Story; this is an alias to the Story's label property.
	 */
	name: string;

	/**
	 * A collection of nested GREP styles.
	 */
	readonly nestedGrepStyles: NestedGrepStyles;

	/**
	 * A collection of nested line styles.
	 */
	readonly nestedLineStyles: NestedLineStyles;

	/**
	 * A collection of nested styles.
	 */
	readonly nestedStyles: NestedStyles;

	/**
	 * If true, keeps the text on the same line.
	 */
	noBreak: boolean;

	/**
	 * A collection of notes.
	 */
	readonly notes: Notes;

	/**
	 * The alignment of the number.
	 */
	numberingAlignment: ListAlignment;

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean;

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string;

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean;

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string;

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string;

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number;

	/**
	 * Numbering restart policies.
	 */
	readonly numberingRestartPolicies: NumberingRestartPolicy;

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number;

	/**
	 * OpenType features. Can return: Array of Array of 2 Strings or Long Integers.
	 */
	opentypeFeatures: any[];

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean;

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean;

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle;

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean;

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean;

	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean;

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean;

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean;

	/**
	 * If true, use overlapping swash forms in OpenType fonts
	 */
	otfOverlapSwash: boolean;

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean;

	/**
	 * If true, applies italics to half-width alphanumerics.
	 */
	otfRomanItalics: boolean;

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean;

	/**
	 * If true, use stretched alternate forms in OpenType fonts
	 */
	otfStretchedAlternate: boolean;

	/**
	 * If true, use stylistic alternate forms in OpenType fonts
	 */
	otfStylisticAlternate: boolean;

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number;

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean;

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * If true, the story has overset text.
	 */
	readonly overflows: boolean;

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean;

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of para style mappings.
	 */
	readonly paraStyleMappings: ParaStyleMappings;

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphBorderBottomLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphBorderBottomLeftCornerRadius: number | string;

	/**
	 * The bottom line weight of the border of paragraph.
	 */
	paragraphBorderBottomLineWeight: number | string;

	/**
	 * The distance to offset the bottom edge of the paragraph border.
	 */
	paragraphBorderBottomOffset: number | string;

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph border.
	 */
	paragraphBorderBottomOrigin: ParagraphBorderBottomOriginEnum;

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphBorderBottomRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphBorderBottomRightCornerRadius: number | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph stroke.
	 */
	paragraphBorderColor: Swatch | string;

	/**
	 * If true, then paragraph border is also displayed at the points where the paragraph splits across frames or columns.
	 */
	paragraphBorderDisplayIfSplits: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph border gap. Note: Valid only when the border type is not solid.
	 */
	paragraphBorderGapColor: Swatch | string;

	/**
	 * If true, the paragraph border gap will overprint. Note: Valid only when border type is not solid.
	 */
	paragraphBorderGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the paragraph border gap. Note: Valid only when the border type is not solid. (Range: 0 to 100)
	 */
	paragraphBorderGapTint: number;

	/**
	 * The left line weight of the border of paragraph.
	 */
	paragraphBorderLeftLineWeight: number | string;

	/**
	 * The distance to offset the left edge of the paragraph border.
	 */
	paragraphBorderLeftOffset: number | string;

	/**
	 * If true, the paragraph border is on.
	 */
	paragraphBorderOn: boolean;

	/**
	 * If true, the paragraph border will overprint.
	 */
	paragraphBorderOverprint: boolean;

	/**
	 * The right line weight of the border of paragraph.
	 */
	paragraphBorderRightLineWeight: number | string;

	/**
	 * The distance to offset the right edge of the paragraph border.
	 */
	paragraphBorderRightOffset: number | string;

	/**
	 * The end shape of an open path.
	 */
	paragraphBorderStrokeEndCap: EndCap;

	/**
	 * The corner join applied to the Story.
	 */
	paragraphBorderStrokeEndJoin: EndJoin;

	/**
	 * The tint (as a percentage) of the paragraph stroke. (Range: 0 to 100)
	 */
	paragraphBorderTint: number;

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphBorderTopLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphBorderTopLeftCornerRadius: number | string;

	/**
	 * The top line weight of the border of paragraph.
	 */
	paragraphBorderTopLineWeight: number | string;

	/**
	 * The distance to offset the top edge of the paragraph border.
	 */
	paragraphBorderTopOffset: number | string;

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph border.
	 */
	paragraphBorderTopOrigin: ParagraphBorderTopOriginEnum;

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerRadius: number | string;

	/**
	 * The type of the border for the paragraph.
	 */
	paragraphBorderType: StrokeStyle | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph border.
	 */
	paragraphBorderWidth: ParagraphBorderEnum;

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions;

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean;

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions;

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long
	 */
	paragraphKashidaWidth: number;

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphShadingBottomLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphShadingBottomLeftCornerRadius: number | string;

	/**
	 * The distance to offset the bottom edge of the paragraph.
	 */
	paragraphShadingBottomOffset: number | string;

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphShadingBottomRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphShadingBottomRightCornerRadius: number | string;

	/**
	 * If true, forces the shading of the paragraph to be clipped with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph shading.
	 */
	paragraphShadingColor: Swatch | string;

	/**
	 * The distance to offset the left edge of the paragraph.
	 */
	paragraphShadingLeftOffset: number | string;

	/**
	 * If true, the paragraph shading is On.
	 */
	paragraphShadingOn: boolean;

	/**
	 * If true, the paragraph shading will overprint.
	 */
	paragraphShadingOverprint: boolean;

	/**
	 * The distance to offset the right edge of the paragraph.
	 */
	paragraphShadingRightOffset: number | string;

	/**
	 * If true, suppress printing of the shading of the paragraph.
	 */
	paragraphShadingSuppressPrinting: boolean;

	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 0 to 100)
	 */
	paragraphShadingTint: number;

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphShadingTopLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphShadingTopLeftCornerRadius: number | string;

	/**
	 * The distance to offset the top edge of the paragraph.
	 */
	paragraphShadingTopOffset: number | string;

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerRadius: number | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;

	/**
	 * A collection of paragraphs.
	 */
	readonly paragraphs: Paragraphs;

	/**
	 * The parent of the Story (a XMLElement or Document).
	 */
	readonly parent: any;

	/**
	 * The text size.
	 */
	pointSize: number | string;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * The text position relative to the baseline.
	 */
	position: Position;

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The hyphenation style chosen for the provider.
	 */
	providerHyphenationStyle: HyphenationStyleEnum;

	/**
	 * A collection of radio buttons.
	 */
	readonly radioButtons: RadioButtons;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | string;

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean;

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments;

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean;

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number;

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string;

	/**
	 * If true, ruby is on.
	 */
	rubyFlag: boolean;

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string;

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number;

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum;

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean;

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount.
	 */
	rubyOverhang: boolean;

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint;

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint;

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang;

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;

	/**
	 * The ruby spacing relative to the parent text.
	 */
	rubyParentSpacing: RubyParentSpacing;

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;

	/**
	 * The ruby string contents.
	 */
	rubyString: string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string;

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number;

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100)
	 */
	rubyTint: number;

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes;

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number;

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number;

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number;

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number;

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number;

	/**
	 * If true, places a rule above the paragraph.
	 */
	ruleAbove: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule above.
	 */
	ruleAboveColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule above. Note: Valid only when the paragraph rule above type is not solid.
	 */
	ruleAboveGapColor: Swatch | string;

	/**
	 * If true, the stroke gap of the paragraph rule above will overprint. Note: Valid only the rule above type is not solid.
	 */
	ruleAboveGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule. (Range: 0 to 100) Note: Valid only when the rule above type is not solid.
	 */
	ruleAboveGapTint: number;

	/**
	 * The distance to indent the left edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number | string;

	/**
	 * The line weight of the rule above.
	 */
	ruleAboveLineWeight: number | string;

	/**
	 * The amount to offset the paragraph rule above from the baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number | string;

	/**
	 * If true, the paragraph rule above will overprint.
	 */
	ruleAboveOverprint: boolean;

	/**
	 * The distance to indent the right edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveRightIndent: number | string;

	/**
	 * The tint (as a percentage) of the paragraph rule above. (Range: 0 to 100)
	 */
	ruleAboveTint: number;

	/**
	 * The stroke type of the rule above the paragraph.
	 */
	ruleAboveType: StrokeStyle | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;

	/**
	 * If true, applies a paragraph rule below.
	 */
	ruleBelow: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule below.
	 */
	ruleBelowColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule below. Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapColor: Swatch | string;

	/**
	 * If true, the gap color of the rule below will overprint.
	 */
	ruleBelowGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule below. (Range: 0 to 100) Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;

	/**
	 * The distance to indent the left edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number | string;

	/**
	 * The line weight of the rule below.
	 */
	ruleBelowLineWeight: number | string;

	/**
	 * The amount to offset the the paragraph rule below from the baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number | string;

	/**
	 * If true, the rule below will overprint.
	 */
	ruleBelowOverprint: boolean;

	/**
	 * The distance to indent the right edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowRightIndent: number | string;

	/**
	 * The tint (as a percentage) of the paragraph rule below. (Range: 0 to 100)
	 */
	ruleBelowTint: number;

	/**
	 * The stroke type of the rule below the paragraph.
	 */
	ruleBelowType: StrokeStyle | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing;

	/**
	 * If true, the line changes size when characters are scaled.
	 */
	scaleAffectsLineHeight: boolean;

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean;

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean;

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number;

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number;

	/**
	 * A collection of signature fields.
	 */
	readonly signatureFields: SignatureFields;

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification;

	/**
	 * The skew angle of the Story.
	 */
	skew: number;

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | string;

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | string;

	/**
	 * The minimum space after a span or a split column
	 */
	spanColumnMinSpaceAfter: number | string;

	/**
	 * The minimum space before a span or a split column
	 */
	spanColumnMinSpaceBefore: number | string;

	/**
	 * Whether a paragraph should be a single column, span columns or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * The inside gutter if the paragraph splits columns
	 */
	splitColumnInsideGutter: number | string;

	/**
	 * The outside gutter if the paragraph splits columns
	 */
	splitColumnOutsideGutter: number | string;

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph;

	/**
	 * Story preference settings.
	 */
	readonly storyPreferences: StoryPreference;

	/**
	 * Title for this InCopy story.
	 */
	storyTitle: string;

	/**
	 * The type of story.
	 */
	readonly storyType: StoryTypes;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string;

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number;

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | string;

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean;

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100)
	 */
	strikeThroughTint: number;

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string;

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | string;

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean;

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the Story.
	 */
	strokeColor: Swatch | string;

	/**
	 * The tint (as a percentage) of the stroke color of the Story. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | string;

	/**
	 * If true, the applied style has been overridden with additional attributes.
	 */
	readonly styleOverridden: boolean;

	/**
	 * A list of the tab stops in the paragraph. Can return: Array of Arrays of Property Name/Value Pairs.
	 */
	tabList: any[];

	/**
	 * A collection of tab stops.
	 */
	readonly tabStops: TabStops;

	/**
	 * A collection of table style mappings.
	 */
	readonly tableStyleMappings: TableStyleMappings;

	/**
	 * A collection of tables.
	 */
	readonly tables: Tables;

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean;

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number;

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number;

	/**
	 * A collection of text boxes.
	 */
	readonly textBoxes: TextBoxes;

	/**
	 * A collection of text columns.
	 */
	readonly textColumns: TextColumns;

	/**
	 * Array of text frames or text paths.
	 */
	readonly textContainers: TextFrame[] | TextPaths;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of text style ranges.
	 */
	readonly textStyleRanges: TextStyleRanges;

	/**
	 * A collection of text variable instances.
	 */
	readonly textVariableInstances: TextVariableInstances;

	/**
	 * A collection of text objects.
	 */
	readonly texts: Texts;

	/**
	 * If true, track changes is turned on.
	 */
	trackChanges: boolean;

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number;

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number;

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number;

	/**
	 * If true, underlines the text.
	 */
	underline: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string;

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number;

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | string;

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean;

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100)
	 */
	underlineTint: number;

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string;

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | string;

	/**
	 * Indicates whether the text is user or placeholder text.
	 */
	userText: boolean;

	/**
	 * The vertical scaling applied to the Story.
	 */
	verticalScale: number;

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean;

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment;

	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number;

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number;

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number;

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number;

	/**
	 * A collection of words.
	 */
	readonly words: Words;

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number;

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * asynchronously exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	asynchronousExportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;

	/**
	 * Tag the object or the parent story using default tags defined in XML preference.
	 */
	autoTag(): void;

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Sets the case of the text.
	 * @param using The text case option.
	 */
	changecase(using: ChangecaseMode): void;

	/**
	 * Checks in the story or stories.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	checkIn(versionComments: string, forceSave?: boolean): boolean;

	/**
	 * Checks out the story.
	 */
	checkOut(): boolean;

	/**
	 * Clears the specified types of override.
	 * @param overridesToClear The types of override to clear.
	 */
	clearOverrides(overridesToClear?: OverrideType): void;

	/**
	 * Convert bullets and numbering to text.
	 */
	convertBulletsAndNumberingToText(): void;

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[];

	/**
	 * Duplicates the text in the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	duplicate(to: LocationOptions, reference: Text | Story | Cell | Row | Column | Table | PageItem): Text;

	/**
	 * Exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	exportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Story[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Associates the page item with the specified XML element while preserving existing content.
	 * @param using The XML element.
	 */
	markup(using: XMLElement): void;

	/**
	 * Moves the text to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: Text | Story | Cell | Row | Column | Table | PageItem): Text;

	/**
	 * Places XML content into the specified object. Note: Replaces any existing content.
	 * @param using The XML element whose content you want to place.
	 */
	placeXML(using: XMLElement): void;

	/**
	 * Recomposes the text in the Story.
	 */
	recompose(): void;

	/**
	 * Deletes the Story.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Reverts the document to its state at the last save operation.
	 */
	revert(): boolean;

	/**
	 * Opens the story in a story editor window.
	 */
	storyEdit(): StoryWindow;

	/**
	 * Generates a string which, if executed, will return the Story.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of stories.
 */
declare class Stories {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Story with the specified index.
	 * @param index The index.
	 */
	[index: number]: Story;

	/**
	 * Returns any Story in the collection.
	 */
	anyItem(): Story;

	/**
	 * Displays the number of elements in the Story.
	 */
	count(): number;

	/**
	 * Returns every Story in the collection.
	 */
	everyItem(): Story[];

	/**
	 * Returns the first Story in the collection.
	 */
	firstItem(): Story;

	/**
	 * Returns the Story with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Story;

	/**
	 * Returns the Story with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Story;

	/**
	 * Returns the Story with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Story;

	/**
	 * Returns the Stories within the specified range.
	 * @param from The Story, index, or name at the beginning of the range.
	 * @param to The Story, index, or name at the end of the range.
	 */
	itemByRange(from: Story | number | string, to: Story | number | string): Story[];

	/**
	 * Returns the last Story in the collection.
	 */
	lastItem(): Story;

	/**
	 * Returns the middle Story in the collection.
	 */
	middleItem(): Story;

	/**
	 * Returns the Story whose index follows the specified Story in the collection.
	 * @param obj The Story whose index comes before the desired Story.
	 */
	nextItem(obj: Story): Story;

	/**
	 * Returns the Story with the index previous to the specified index.
	 * @param obj The index of the Story that follows the desired Story.
	 */
	previousItem(obj: Story): Story;

	/**
	 * Generates a string which, if executed, will return the Story.
	 */
	toSource(): string;

}

/**
 * A paragraph style.
 */
declare class ParagraphStyle {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;

	/**
	 * The font applied to the ParagraphStyle, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string;

	/**
	 * The language of the text.
	 */
	appliedLanguage: LanguageWithVendors | Language | string;

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string;

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number;

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean;

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle;

	/**
	 * The style that this style is based on.
	 */
	basedOn: ParagraphStyle | string;

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | string;

	/**
	 * Bullet character.
	 */
	readonly bulletChar: Bullet;

	/**
	 * The alignment of the bullet character.
	 */
	bulletsAlignment: ListAlignment;

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType;

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string;

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string;

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization;

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment;

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions;

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number;

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean;

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string;

	/**
	 * The desired width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;

	/**
	 * The desired letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500)
	 */
	desiredLetterSpacing: number;

	/**
	 * The desired word spacing, specified as a percentage of the font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions;

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions;

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number;

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number;

	/**
	 * The character style to apply to the drop cap.
	 */
	dropCapStyle: CharacterStyle | string;

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number;

	/**
	 * Emit CSS
	 */
	emitCss: boolean;

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the ParagraphStyle. .
	 */
	fillColor: Swatch | string;

	/**
	 * The tint (as a percentage) of the fill color of the ParagraphStyle. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | string;

	/**
	 * The name of the font style.
	 */
	fontStyle: string;

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms;

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: (number | string)[];

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: (number | string)[];

	/**
	 * If true, aligns only the first line to the frame grid or baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment;

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number;

	/**
	 * The horizontal scaling applied to the ParagraphStyle.
	 */
	horizontalScale: number;

	/**
	 * The relative desirability of better spacing vs. fewer hyphens. A lower value results in greater use of hyphens. (Range: 0 to 100)
	 */
	hyphenWeight: number;

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean;

	/**
	 * The mininum number of letters at the beginning of a word that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;

	/**
	 * The minimum number of letters at the end of a word that can be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;

	/**
	 * If true, allows hyphenation of capitalized words.
	 */
	hyphenateCapitalizedWords: boolean;

	/**
	 * The maximum number of hyphens that can appear on consecutive lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;

	/**
	 * The minimum number of letters a word must have in order to qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;

	/**
	 * If true, allows hyphenation.
	 */
	hyphenation: boolean;

	/**
	 * The amount of white space allowed at the end of a line of non-justified text before hypenation begins. Note: Valid when composer is single-line composer.
	 */
	hyphenationZone: number | string;

	/**
	 * The unique ID of the ParagraphStyle.
	 */
	readonly id: number;

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean;

	/**
	 * If true, the style was imported from another document.
	 */
	readonly imported: boolean;

	/**
	 * If true, class attribute will be generated for the style
	 */
	includeClass: boolean;

	/**
	 * The index of the ParagraphStyle within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The number of grid squares in which to arrange the text.
	 */
	jidori: number;

	/**
	 * The paragraph alignment.
	 */
	justification: Justification;

	/**
	 * Use of Kashidas for justification
	 */
	kashidas: KashidasOptions;

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number;

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number;

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean;

	/**
	 * The alignment of kenten characters relative to the parent characters.
	 */
	kentenAlignment: KentenAlignment;

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string;

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string;

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number;

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum;

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter;

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint;

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint;

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number;

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string;

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenStrokeTint: number;

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenTint: number;

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number;

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number;

	/**
	 * The vertical size of kenten charachers as a percent of the original size.
	 */
	kentenYScale: number;

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string;

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions;

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string;

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | string;

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading;

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number;

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel;

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | string;

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean;

	/**
	 * The maximum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;

	/**
	 * The maximum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;

	/**
	 * The maximum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;

	/**
	 * If true, consecutive para borders with completely similar properties are merged.
	 */
	mergeConsecutiveParaBorders: boolean;

	/**
	 * The minimum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;

	/**
	 * The minimum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;

	/**
	 * The minimum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number;

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults;

	/**
	 * The name of the ParagraphStyle.
	 */
	name: string;

	/**
	 * A collection of nested GREP styles.
	 */
	readonly nestedGrepStyles: NestedGrepStyles;

	/**
	 * A collection of nested line styles.
	 */
	readonly nestedLineStyles: NestedLineStyles;

	/**
	 * A collection of nested styles.
	 */
	readonly nestedStyles: NestedStyles;

	/**
	 * The style to apply to new paragraphs that follow paragraphs tagged with this style.
	 */
	nextStyle: ParagraphStyle;

	/**
	 * If true, keeps the text on the same line.
	 */
	noBreak: boolean;

	/**
	 * The alignment of the number.
	 */
	numberingAlignment: ListAlignment;

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean;

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string;

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean;

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string;

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string;

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number;

	/**
	 * Numbering restart policies.
	 */
	readonly numberingRestartPolicies: NumberingRestartPolicy;

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number;

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean;

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean;

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle;

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean;

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean;

	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean;

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean;

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean;

	/**
	 * If true, use overlapping swash forms in OpenType fonts
	 */
	otfOverlapSwash: boolean;

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean;

	/**
	 * If true, applies italics to half-width alphanumerics.
	 */
	otfRomanItalics: boolean;

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean;

	/**
	 * If true, use stretched alternate forms in OpenType fonts
	 */
	otfStretchedAlternate: boolean;

	/**
	 * If true, use stylistic alternate forms in OpenType fonts
	 */
	otfStylisticAlternate: boolean;

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number;

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean;

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean;

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean;

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean;

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphBorderBottomLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphBorderBottomLeftCornerRadius: number | string;

	/**
	 * The bottom line weight of the border of paragraph.
	 */
	paragraphBorderBottomLineWeight: number | string;

	/**
	 * The distance to offset the bottom edge of the paragraph border.
	 */
	paragraphBorderBottomOffset: number | string;

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph border.
	 */
	paragraphBorderBottomOrigin: ParagraphBorderBottomOriginEnum;

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphBorderBottomRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphBorderBottomRightCornerRadius: number | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph stroke.
	 */
	paragraphBorderColor: Swatch | string;

	/**
	 * If true, then paragraph border is also displayed at the points where the paragraph splits across frames or columns.
	 */
	paragraphBorderDisplayIfSplits: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph border gap. Note: Valid only when the border type is not solid.
	 */
	paragraphBorderGapColor: Swatch | string;

	/**
	 * If true, the paragraph border gap will overprint. Note: Valid only when border type is not solid.
	 */
	paragraphBorderGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the paragraph border gap. Note: Valid only when the border type is not solid. (Range: 0 to 100)
	 */
	paragraphBorderGapTint: number;

	/**
	 * The left line weight of the border of paragraph.
	 */
	paragraphBorderLeftLineWeight: number | string;

	/**
	 * The distance to offset the left edge of the paragraph border.
	 */
	paragraphBorderLeftOffset: number | string;

	/**
	 * If true, the paragraph border is on.
	 */
	paragraphBorderOn: boolean;

	/**
	 * If true, the paragraph border will overprint.
	 */
	paragraphBorderOverprint: boolean;

	/**
	 * The right line weight of the border of paragraph.
	 */
	paragraphBorderRightLineWeight: number | string;

	/**
	 * The distance to offset the right edge of the paragraph border.
	 */
	paragraphBorderRightOffset: number | string;

	/**
	 * The end shape of an open path.
	 */
	paragraphBorderStrokeEndCap: EndCap;

	/**
	 * The corner join applied to the ParagraphStyle.
	 */
	paragraphBorderStrokeEndJoin: EndJoin;

	/**
	 * The tint (as a percentage) of the paragraph stroke. (Range: 0 to 100)
	 */
	paragraphBorderTint: number;

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphBorderTopLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphBorderTopLeftCornerRadius: number | string;

	/**
	 * The top line weight of the border of paragraph.
	 */
	paragraphBorderTopLineWeight: number | string;

	/**
	 * The distance to offset the top edge of the paragraph border.
	 */
	paragraphBorderTopOffset: number | string;

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph border.
	 */
	paragraphBorderTopOrigin: ParagraphBorderTopOriginEnum;

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerRadius: number | string;

	/**
	 * The type of the border for the paragraph.
	 */
	paragraphBorderType: StrokeStyle | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph border.
	 */
	paragraphBorderWidth: ParagraphBorderEnum;

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions;

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean;

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions;

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long
	 */
	paragraphKashidaWidth: number;

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphShadingBottomLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphShadingBottomLeftCornerRadius: number | string;

	/**
	 * The distance to offset the bottom edge of the paragraph.
	 */
	paragraphShadingBottomOffset: number | string;

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphShadingBottomRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphShadingBottomRightCornerRadius: number | string;

	/**
	 * If true, forces the shading of the paragraph to be clipped with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph shading.
	 */
	paragraphShadingColor: Swatch | string;

	/**
	 * The distance to offset the left edge of the paragraph.
	 */
	paragraphShadingLeftOffset: number | string;

	/**
	 * If true, the paragraph shading is On.
	 */
	paragraphShadingOn: boolean;

	/**
	 * If true, the paragraph shading will overprint.
	 */
	paragraphShadingOverprint: boolean;

	/**
	 * The distance to offset the right edge of the paragraph.
	 */
	paragraphShadingRightOffset: number | string;

	/**
	 * If true, suppress printing of the shading of the paragraph.
	 */
	paragraphShadingSuppressPrinting: boolean;

	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 0 to 100)
	 */
	paragraphShadingTint: number;

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphShadingTopLeftCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphShadingTopLeftCornerRadius: number | string;

	/**
	 * The distance to offset the top edge of the paragraph.
	 */
	paragraphShadingTopOffset: number | string;

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerOption: CornerOptions;

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerRadius: number | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;

	/**
	 * The parent of the ParagraphStyle (a Document, Application or ParagraphStyleGroup).
	 */
	readonly parent: any;

	/**
	 * The text size.
	 */
	pointSize: number | string;

	/**
	 * The text position relative to the baseline.
	 */
	position: Position;

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * The color to use for preview, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	previewColor: [number, number, number] | UIColors | NothingEnum;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The hyphenation style chosen for the provider.
	 */
	providerHyphenationStyle: HyphenationStyleEnum;

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | string;

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean;

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments;

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean;

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number;

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string;

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string;

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number;

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum;

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean;

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount.
	 */
	rubyOverhang: boolean;

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint;

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint;

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang;

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;

	/**
	 * The ruby spacing relative to the parent text.
	 */
	rubyParentSpacing: RubyParentSpacing;

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string;

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number;

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100)
	 */
	rubyTint: number;

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes;

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number;

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number;

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number;

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number;

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number;

	/**
	 * If true, places a rule above the paragraph.
	 */
	ruleAbove: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule above.
	 */
	ruleAboveColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule above. Note: Valid only when the paragraph rule above type is not solid.
	 */
	ruleAboveGapColor: Swatch | string;

	/**
	 * If true, the stroke gap of the paragraph rule above will overprint. Note: Valid only the rule above type is not solid.
	 */
	ruleAboveGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule. (Range: 0 to 100) Note: Valid only when the rule above type is not solid.
	 */
	ruleAboveGapTint: number;

	/**
	 * The distance to indent the left edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number | string;

	/**
	 * The line weight of the rule above.
	 */
	ruleAboveLineWeight: number | string;

	/**
	 * The amount to offset the paragraph rule above from the baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number | string;

	/**
	 * If true, the paragraph rule above will overprint.
	 */
	ruleAboveOverprint: boolean;

	/**
	 * The distance to indent the right edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveRightIndent: number | string;

	/**
	 * The tint (as a percentage) of the paragraph rule above. (Range: 0 to 100)
	 */
	ruleAboveTint: number;

	/**
	 * The stroke type of the rule above the paragraph.
	 */
	ruleAboveType: StrokeStyle | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;

	/**
	 * If true, applies a paragraph rule below.
	 */
	ruleBelow: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule below.
	 */
	ruleBelowColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule below. Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapColor: Swatch | string;

	/**
	 * If true, the gap color of the rule below will overprint.
	 */
	ruleBelowGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule below. (Range: 0 to 100) Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;

	/**
	 * The distance to indent the left edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number | string;

	/**
	 * The line weight of the rule below.
	 */
	ruleBelowLineWeight: number | string;

	/**
	 * The amount to offset the the paragraph rule below from the baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number | string;

	/**
	 * If true, the rule below will overprint.
	 */
	ruleBelowOverprint: boolean;

	/**
	 * The distance to indent the right edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowRightIndent: number | string;

	/**
	 * The tint (as a percentage) of the paragraph rule below. (Range: 0 to 100)
	 */
	ruleBelowTint: number;

	/**
	 * The stroke type of the rule below the paragraph.
	 */
	ruleBelowType: StrokeStyle | string;

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing;

	/**
	 * If true, the line changes size when characters are scaled.
	 */
	scaleAffectsLineHeight: boolean;

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean;

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean;

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number;

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number;

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification;

	/**
	 * The skew angle of the ParagraphStyle.
	 */
	skew: number;

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | string;

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | string;

	/**
	 * The minimum space after a span or a split column
	 */
	spanColumnMinSpaceAfter: number | string;

	/**
	 * The minimum space before a span or a split column
	 */
	spanColumnMinSpaceBefore: number | string;

	/**
	 * Whether a paragraph should be a single column, span columns or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions;

	/**
	 * The inside gutter if the paragraph splits columns
	 */
	splitColumnInsideGutter: number | string;

	/**
	 * The outside gutter if the paragraph splits columns
	 */
	splitColumnOutsideGutter: number | string;

	/**
	 * Split Document (EPUB only)
	 */
	splitDocument: boolean;

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string;

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number;

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | string;

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean;

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100)
	 */
	strikeThroughTint: number;

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string;

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | string;

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean;

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the ParagraphStyle.
	 */
	strokeColor: Swatch | string;

	/**
	 * The tint (as a percentage) of the stroke color of the ParagraphStyle. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | string;

	/**
	 * A collection of style export tag maps.
	 */
	readonly styleExportTagMaps: StyleExportTagMaps;

	/**
	 * A unique id that can be assigned to a style. This can be used to differentiate between the styles. Internal use only.
	 */
	styleUniqueId: string;

	/**
	 * A list of the tab stops in the paragraph. Can return: Array of Arrays of Property Name/Value Pairs.
	 */
	tabList: any[];

	/**
	 * A collection of tab stops.
	 */
	readonly tabStops: TabStops;

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean;

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number;

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number;

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number;

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number;

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number;

	/**
	 * If true, underlines the text.
	 */
	underline: boolean;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string;

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean;

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number;

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | string;

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean;

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100)
	 */
	underlineTint: number;

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string;

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | string;

	/**
	 * The vertical scaling applied to the ParagraphStyle.
	 */
	verticalScale: number;

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean;

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment;

	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number;

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number;

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number;

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number;

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number;

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Convert bullets and numbering to text.
	 */
	convertBulletsAndNumberingToText(): void;

	/**
	 * Create thumbnail for selected text with the given properties.
	 * @param previewText Text to use as sample
	 * @param pointSize Text font size (in points)
	 * @param space Color space RGB, CMYK or LAB
	 * @param colorValue Color values
	 * @param to The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number[], to: File): boolean;

	/**
	 * Duplicates the ParagraphStyle.
	 */
	duplicate(): ParagraphStyle;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Deletes the paragraph style forcefully. For internal use only.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	forceDelete(replacingWith: ParagraphStyle): void;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ParagraphStyle[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): ParagraphStyle;

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: ParagraphStyle): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the ParagraphStyle.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of paragraph styles.
 */
declare class ParagraphStyles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ParagraphStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: ParagraphStyle;

	/**
	 * Creates a new ParagraphStyle.
	 * @param withProperties Initial values for properties of the new ParagraphStyle
	 */
	add(withProperties: object): ParagraphStyle;

	/**
	 * Returns any ParagraphStyle in the collection.
	 */
	anyItem(): ParagraphStyle;

	/**
	 * Displays the number of elements in the ParagraphStyle.
	 */
	count(): number;

	/**
	 * Returns every ParagraphStyle in the collection.
	 */
	everyItem(): ParagraphStyle[];

	/**
	 * Returns the first ParagraphStyle in the collection.
	 */
	firstItem(): ParagraphStyle;

	/**
	 * Returns the ParagraphStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ParagraphStyle;

	/**
	 * Returns the ParagraphStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ParagraphStyle;

	/**
	 * Returns the ParagraphStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ParagraphStyle;

	/**
	 * Returns the ParagraphStyles within the specified range.
	 * @param from The ParagraphStyle, index, or name at the beginning of the range.
	 * @param to The ParagraphStyle, index, or name at the end of the range.
	 */
	itemByRange(from: ParagraphStyle | number | string, to: ParagraphStyle | number | string): ParagraphStyle[];

	/**
	 * Returns the last ParagraphStyle in the collection.
	 */
	lastItem(): ParagraphStyle;

	/**
	 * Returns the middle ParagraphStyle in the collection.
	 */
	middleItem(): ParagraphStyle;

	/**
	 * Returns the ParagraphStyle whose index follows the specified ParagraphStyle in the collection.
	 * @param obj The ParagraphStyle whose index comes before the desired ParagraphStyle.
	 */
	nextItem(obj: ParagraphStyle): ParagraphStyle;

	/**
	 * Returns the ParagraphStyle with the index previous to the specified index.
	 * @param obj The index of the ParagraphStyle that follows the desired ParagraphStyle.
	 */
	previousItem(obj: ParagraphStyle): ParagraphStyle;

	/**
	 * Generates a string which, if executed, will return the ParagraphStyle.
	 */
	toSource(): string;

}

/**
 * A character style.
 */
declare class CharacterStyle {
	/**
	 * The font applied to the CharacterStyle, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum;

	/**
	 * The language of the text.
	 */
	appliedLanguage: LanguageWithVendors | Language | NothingEnum | string;

	/**
	 * The style that this style is based on.
	 */
	basedOn: CharacterStyle | string;

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum;

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum;

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum;

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum;

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum;

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum;

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum;

	/**
	 * Emit CSS.
	 */
	emitCss: boolean | NothingEnum;

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the CharacterStyle. .
	 */
	fillColor: Swatch | NothingEnum | string;

	/**
	 * The tint (as a percentage) of the fill color of the CharacterStyle. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum;

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum;

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum;

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum;

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum;

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum;

	/**
	 * The horizontal scaling applied to the CharacterStyle.
	 */
	horizontalScale: number | NothingEnum;

	/**
	 * The unique ID of the CharacterStyle.
	 */
	readonly id: number;

	/**
	 * If true, the style was imported from another document.
	 */
	readonly imported: boolean | NothingEnum;

	/**
	 * If true, class attribute will be generated for the style.
	 */
	includeClass: boolean | NothingEnum;

	/**
	 * The index of the CharacterStyle within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum;

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum;

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum;

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum;

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum;

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum;

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum;

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum;

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum;

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum;

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum;

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum;

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum;

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum;

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum;

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum;

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum;

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum;

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum;

	/**
	 * The name of the style.
	 */
	name: string;

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum;

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum;

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum;

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum;

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum;

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum;

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum;

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum;

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum;

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum;

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum;

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum;

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum;

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum;

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum;

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum;

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum;

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum;

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum;

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum;

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum;

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum;

	/**
	 * The parent of the CharacterStyle (a Document, Application or CharacterStyleGroup).
	 */
	readonly parent: any;

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum;

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum;

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum;

	/**
	 * The color to use for preview, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	previewColor: [number, number, number] | UIColors | NothingEnum;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum;

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum;

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum;

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum;

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum;

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum;

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum;

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum;

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum;

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum;

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum;

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum;

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum;

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum;

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum;

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum;

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum;

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum;

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum;

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum;

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum;

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum;

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum;

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum;

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum;

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum;

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum;

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum;

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum;

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum;

	/**
	 * The skew angle of the CharacterStyle.
	 */
	skew: number | NothingEnum;

	/**
	 * Split Document (EPUB only).
	 */
	splitDocument: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum;

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum;

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum;

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum;

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the CharacterStyle.
	 */
	strokeColor: Swatch | NothingEnum | string;

	/**
	 * The tint (as a percentage) of the stroke color of the CharacterStyle. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum;

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum;

	/**
	 * A collection of style export tag maps.
	 */
	readonly styleExportTagMaps: StyleExportTagMaps;

	/**
	 * A unique id that can be assigned to a style. This can be used to differentiate between the styles. Internal use only.
	 */
	styleUniqueId: string | NothingEnum;

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum;

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum;

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum;

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum;

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum;

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum;

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum;

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum;

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum;

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum;

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum;

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum;

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum;

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum;

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum;

	/**
	 * The vertical scaling applied to the CharacterStyle.
	 */
	verticalScale: number | NothingEnum;

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum;

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum;

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum;

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum;

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum;

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum;

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum;

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum;

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Create thumbnail for selected text with the given properties.
	 * @param previewText Text to use as sample
	 * @param pointSize Text font size (in points)
	 * @param space Color space RGB, CMYK or LAB
	 * @param colorValue Color values
	 * @param to The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number[], to: File): boolean;

	/**
	 * Duplicates the CharacterStyle.
	 */
	duplicate(): CharacterStyle;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CharacterStyle[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): CharacterStyle;

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: CharacterStyle): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the CharacterStyle.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of character styles.
 */
declare class CharacterStyles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number | NothingEnum;

	/**
	 * Returns the CharacterStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: CharacterStyle;

	/**
	 * Creates a new CharacterStyle.
	 * @param withProperties Initial values for properties of the new CharacterStyle
	 */
	add(withProperties: object): CharacterStyle;

	/**
	 * Returns any CharacterStyle in the collection.
	 */
	anyItem(): CharacterStyle;

	/**
	 * Displays the number of elements in the CharacterStyle.
	 */
	count(): number;

	/**
	 * Returns every CharacterStyle in the collection.
	 */
	everyItem(): CharacterStyle[];

	/**
	 * Returns the first CharacterStyle in the collection.
	 */
	firstItem(): CharacterStyle;

	/**
	 * Returns the CharacterStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CharacterStyle;

	/**
	 * Returns the CharacterStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CharacterStyle;

	/**
	 * Returns the CharacterStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CharacterStyle;

	/**
	 * Returns the CharacterStyles within the specified range.
	 * @param from The CharacterStyle, index, or name at the beginning of the range.
	 * @param to The CharacterStyle, index, or name at the end of the range.
	 */
	itemByRange(from: CharacterStyle | number | string, to: CharacterStyle | number | string): CharacterStyle[];

	/**
	 * Returns the last CharacterStyle in the collection.
	 */
	lastItem(): CharacterStyle;

	/**
	 * Returns the middle CharacterStyle in the collection.
	 */
	middleItem(): CharacterStyle;

	/**
	 * Returns the CharacterStyle whose index follows the specified CharacterStyle in the collection.
	 * @param obj The CharacterStyle whose index comes before the desired CharacterStyle.
	 */
	nextItem(obj: CharacterStyle): CharacterStyle;

	/**
	 * Returns the CharacterStyle with the index previous to the specified index.
	 * @param obj The index of the CharacterStyle that follows the desired CharacterStyle.
	 */
	previousItem(obj: CharacterStyle): CharacterStyle;

	/**
	 * Generates a string which, if executed, will return the CharacterStyle.
	 */
	toSource(): string;

}

/**
 * A tab stop.
 */
declare class TabStop {
	/**
	 * The tab stop alignment.
	 */
	alignment: TabStopAlignment;

	/**
	 * The tab stop alignment character. Note: Valid when alignment is character align.
	 */
	alignmentCharacter: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the TabStop within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The tab stop leader.
	 */
	leader: string;

	/**
	 * The parent of the TabStop (a TextDefault, Paragraph, ParagraphStyle, Text, InsertionPoint, TextStyleRange, TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	readonly parent: any;

	/**
	 * The position of the tab stop.
	 */
	position: number | string;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TabStop[];

	/**
	 * Deletes the TabStop.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the TabStop.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of tab stops.
 */
declare class TabStops {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TabStop with the specified index.
	 * @param index The index.
	 */
	[index: number]: TabStop;

	/**
	 * Creates a new TabStop.
	 * @param withProperties Initial values for properties of the new TabStop
	 */
	add(withProperties: object): TabStop;

	/**
	 * Returns any TabStop in the collection.
	 */
	anyItem(): TabStop;

	/**
	 * Displays the number of elements in the TabStop.
	 */
	count(): number;

	/**
	 * Returns every TabStop in the collection.
	 */
	everyItem(): TabStop[];

	/**
	 * Returns the first TabStop in the collection.
	 */
	firstItem(): TabStop;

	/**
	 * Returns the TabStop with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TabStop;

	/**
	 * Returns the TabStops within the specified range.
	 * @param from The TabStop, index, or name at the beginning of the range.
	 * @param to The TabStop, index, or name at the end of the range.
	 */
	itemByRange(from: TabStop | number | string, to: TabStop | number | string): TabStop[];

	/**
	 * Returns the last TabStop in the collection.
	 */
	lastItem(): TabStop;

	/**
	 * Returns the middle TabStop in the collection.
	 */
	middleItem(): TabStop;

	/**
	 * Returns the TabStop whose index follows the specified TabStop in the collection.
	 * @param obj The TabStop whose index comes before the desired TabStop.
	 */
	nextItem(obj: TabStop): TabStop;

	/**
	 * Returns the TabStop with the index previous to the specified index.
	 * @param obj The index of the TabStop that follows the desired TabStop.
	 */
	previousItem(obj: TabStop): TabStop;

	/**
	 * Generates a string which, if executed, will return the TabStop.
	 */
	toSource(): string;

}

/**
 * A nested style.
 */
declare class NestedStyle {
	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string;

	/**
	 * The delimiting expression that indicates how deeply into the paragraph the nested style is applied.
	 */
	delimiter: string | NestedStyleDelimiters;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, the nested style is applied through the last delimiter. If false, the nested style is applied up to the last delimiter.
	 */
	inclusive: boolean;

	/**
	 * The index of the NestedStyle within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the NestedStyle (a TextDefault, Paragraph, ParagraphStyle, Text, InsertionPoint, TextStyleRange, TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The number instances of the specified delimiter up to which, or through which, to apply the nested style.
	 */
	repetition: number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): NestedStyle[];

	/**
	 * Deletes the NestedStyle.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the NestedStyle.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of nested styles.
 */
declare class NestedStyles {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the NestedStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: NestedStyle;

	/**
	 * Creates a new NestedStyle.
	 * @param withProperties Initial values for properties of the new NestedStyle
	 */
	add(withProperties: object): NestedStyle;

	/**
	 * Returns any NestedStyle in the collection.
	 */
	anyItem(): NestedStyle;

	/**
	 * Displays the number of elements in the NestedStyle.
	 */
	count(): number;

	/**
	 * Returns every NestedStyle in the collection.
	 */
	everyItem(): NestedStyle[];

	/**
	 * Returns the first NestedStyle in the collection.
	 */
	firstItem(): NestedStyle;

	/**
	 * Returns the NestedStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): NestedStyle;

	/**
	 * Returns the NestedStyles within the specified range.
	 * @param from The NestedStyle, index, or name at the beginning of the range.
	 * @param to The NestedStyle, index, or name at the end of the range.
	 */
	itemByRange(from: NestedStyle | number | string, to: NestedStyle | number | string): NestedStyle[];

	/**
	 * Returns the last NestedStyle in the collection.
	 */
	lastItem(): NestedStyle;

	/**
	 * Returns the middle NestedStyle in the collection.
	 */
	middleItem(): NestedStyle;

	/**
	 * Returns the NestedStyle whose index follows the specified NestedStyle in the collection.
	 * @param obj The NestedStyle whose index comes before the desired NestedStyle.
	 */
	nextItem(obj: NestedStyle): NestedStyle;

	/**
	 * Returns the NestedStyle with the index previous to the specified index.
	 * @param obj The index of the NestedStyle that follows the desired NestedStyle.
	 */
	previousItem(obj: NestedStyle): NestedStyle;

	/**
	 * Generates a string which, if executed, will return the NestedStyle.
	 */
	toSource(): string;

}

/**
 * An endnote.
 */
declare class Endnote {
	/**
	 * A collection of characters.
	 */
	readonly characters: Characters;

	/**
	 * The endnote range object.
	 */
	endnoteTextRange: EndnoteRange;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the Endnote.
	 */
	readonly id: number;

	/**
	 * The index of the Endnote within its containing object.
	 */
	readonly index: number;

	/**
	 * A collection of insertion points.
	 */
	readonly insertionPoints: InsertionPoints;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * A collection of lines.
	 */
	readonly lines: Lines;

	/**
	 * The name of the Endnote; this is an alias to the Endnote's label property.
	 */
	name: string;

	/**
	 * The parent of the Endnote (a InsertionPoint, Story, XmlStory, Cell or Table).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The location of the endnote marker in the parent story
	 */
	readonly storyOffset: InsertionPoint;

	/**
	 * A collection of text columns.
	 */
	readonly textColumns: TextColumns;

	/**
	 * A collection of text style ranges.
	 */
	readonly textStyleRanges: TextStyleRanges;

	/**
	 * A collection of text objects.
	 */
	readonly texts: Texts;

	/**
	 * A collection of words.
	 */
	readonly words: Words;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Deletes the endnote reference and the associated endnote text range.
	 */
	deleteEndnote(): void;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Endnote[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Insert the text in endnote text range at specified text index. Insertion position should lie within the start and end range indices excluding the markers
	 * @param storyOffset The location within the story, specified as an insertion point.
	 * @param contents The content to insert.
	 */
	insertTextInEndnote(storyOffset: InsertionPoint, contents: string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Endnote.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of endnotes.
 */
declare class Endnotes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Endnote with the specified index.
	 * @param index The index.
	 */
	[index: number]: Endnote;

	/**
	 * Returns any Endnote in the collection.
	 */
	anyItem(): Endnote;

	/**
	 * Displays the number of elements in the Endnote.
	 */
	count(): number;

	/**
	 * Returns every Endnote in the collection.
	 */
	everyItem(): Endnote[];

	/**
	 * Returns the first Endnote in the collection.
	 */
	firstItem(): Endnote;

	/**
	 * Returns the Endnote with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Endnote;

	/**
	 * Returns the Endnote with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Endnote;

	/**
	 * Returns the Endnote with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Endnote;

	/**
	 * Returns the Endnotes within the specified range.
	 * @param from The Endnote, index, or name at the beginning of the range.
	 * @param to The Endnote, index, or name at the end of the range.
	 */
	itemByRange(from: Endnote | number | string, to: Endnote | number | string): Endnote[];

	/**
	 * Returns the last Endnote in the collection.
	 */
	lastItem(): Endnote;

	/**
	 * Returns the middle Endnote in the collection.
	 */
	middleItem(): Endnote;

	/**
	 * Returns the Endnote whose index follows the specified Endnote in the collection.
	 * @param obj The Endnote whose index comes before the desired Endnote.
	 */
	nextItem(obj: Endnote): Endnote;

	/**
	 * Returns the Endnote with the index previous to the specified index.
	 * @param obj The index of the Endnote that follows the desired Endnote.
	 */
	previousItem(obj: Endnote): Endnote;

	/**
	 * Generates a string which, if executed, will return the Endnote.
	 */
	toSource(): string;

}

/**
 * An endnote text range.
 */
declare class EndnoteRange {
	/**
	 * EndnoteRange Contents, It will skip the endnote number while setting/replacing the content into endnote range.
	 */
	endnoteRangeContent: string | SpecialCharacters | string[] | NothingEnum;

	/**
	 * Ending Index of the endnote range object.
	 */
	readonly endnoteRangeEndIndex: number;

	/**
	 * Starting Index of the endnote range object.
	 */
	readonly endnoteRangeStartIndex: number;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the EndnoteRange.
	 */
	readonly id: number;

	/**
	 * The index of the EndnoteRange within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the EndnoteRange; this is an alias to the EndnoteRange's label property.
	 */
	name: string;

	/**
	 * The parent of the EndnoteRange (a Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The endnote reference corresponding to the endnote text range.
	 */
	sourceEndnote: Endnote;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Deletes the endnote range and the associated endnote anchor.
	 */
	deleteEndnoteRange(): void;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): EndnoteRange[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the EndnoteRange.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of endnote text ranges.
 */
declare class EndnoteRanges {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the EndnoteRange with the specified index.
	 * @param index The index.
	 */
	[index: number]: EndnoteRange;

	/**
	 * Returns any EndnoteRange in the collection.
	 */
	anyItem(): EndnoteRange;

	/**
	 * Displays the number of elements in the EndnoteRange.
	 */
	count(): number;

	/**
	 * Returns every EndnoteRange in the collection.
	 */
	everyItem(): EndnoteRange[];

	/**
	 * Returns the first EndnoteRange in the collection.
	 */
	firstItem(): EndnoteRange;

	/**
	 * Returns the EndnoteRange with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): EndnoteRange;

	/**
	 * Returns the EndnoteRange with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): EndnoteRange;

	/**
	 * Returns the EndnoteRange with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): EndnoteRange;

	/**
	 * Returns the EndnoteRanges within the specified range.
	 * @param from The EndnoteRange, index, or name at the beginning of the range.
	 * @param to The EndnoteRange, index, or name at the end of the range.
	 */
	itemByRange(from: EndnoteRange | number | string, to: EndnoteRange | number | string): EndnoteRange[];

	/**
	 * Returns the last EndnoteRange in the collection.
	 */
	lastItem(): EndnoteRange;

	/**
	 * Returns the middle EndnoteRange in the collection.
	 */
	middleItem(): EndnoteRange;

	/**
	 * Returns the EndnoteRange whose index follows the specified EndnoteRange in the collection.
	 * @param obj The EndnoteRange whose index comes before the desired EndnoteRange.
	 */
	nextItem(obj: EndnoteRange): EndnoteRange;

	/**
	 * Returns the EndnoteRange with the index previous to the specified index.
	 * @param obj The index of the EndnoteRange that follows the desired EndnoteRange.
	 */
	previousItem(obj: EndnoteRange): EndnoteRange;

	/**
	 * Generates a string which, if executed, will return the EndnoteRange.
	 */
	toSource(): string;

}

/**
 * An endnote text frame.
 */
declare class EndnoteTextFrame extends TextFrame {
}

/**
 * A collection of endnote text frames.
 */
declare class EndnoteTextFrames {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the EndnoteTextFrame with the specified index.
	 * @param index The index.
	 */
	[index: number]: EndnoteTextFrame;

	/**
	 * Creates a new EndnoteTextFrame
	 * @param layer The layer on which to create the EndnoteTextFrame.
	 * @param at The location at which to insert the EndnoteTextFrame relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new EndnoteTextFrame
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): EndnoteTextFrame;

	/**
	 * Returns any EndnoteTextFrame in the collection.
	 */
	anyItem(): EndnoteTextFrame;

	/**
	 * Displays the number of elements in the EndnoteTextFrame.
	 */
	count(): number;

	/**
	 * Returns every EndnoteTextFrame in the collection.
	 */
	everyItem(): EndnoteTextFrame[];

	/**
	 * Returns the first EndnoteTextFrame in the collection.
	 */
	firstItem(): EndnoteTextFrame;

	/**
	 * Returns the EndnoteTextFrame with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): EndnoteTextFrame;

	/**
	 * Returns the EndnoteTextFrame with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): EndnoteTextFrame;

	/**
	 * Returns the EndnoteTextFrame with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): EndnoteTextFrame;

	/**
	 * Returns the EndnoteTextFrames within the specified range.
	 * @param from The EndnoteTextFrame, index, or name at the beginning of the range.
	 * @param to The EndnoteTextFrame, index, or name at the end of the range.
	 */
	itemByRange(from: EndnoteTextFrame | number | string, to: EndnoteTextFrame | number | string): EndnoteTextFrame[];

	/**
	 * Returns the last EndnoteTextFrame in the collection.
	 */
	lastItem(): EndnoteTextFrame;

	/**
	 * Returns the middle EndnoteTextFrame in the collection.
	 */
	middleItem(): EndnoteTextFrame;

	/**
	 * Returns the EndnoteTextFrame whose index follows the specified EndnoteTextFrame in the collection.
	 * @param obj The EndnoteTextFrame whose index comes before the desired EndnoteTextFrame.
	 */
	nextItem(obj: EndnoteTextFrame): EndnoteTextFrame;

	/**
	 * Returns the EndnoteTextFrame with the index previous to the specified index.
	 * @param obj The index of the EndnoteTextFrame that follows the desired EndnoteTextFrame.
	 */
	previousItem(obj: EndnoteTextFrame): EndnoteTextFrame;

	/**
	 * Generates a string which, if executed, will return the EndnoteTextFrame.
	 */
	toSource(): string;

}

/**
 * The language on which to base hyphenation rules and spell checking.
 */
declare class Language {
	/**
	 * The double quotes pair for the language.
	 */
	doubleQuotes: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The hyphenation rules source.
	 */
	hyphenationVendor: string;

	/**
	 * The full name of the Language object's ICU locale.
	 */
	readonly icuLocaleName: string;

	/**
	 * The unique ID of the Language.
	 */
	readonly id: number;

	/**
	 * The index of the Language within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the Language.
	 */
	readonly name: string;

	/**
	 * The parent of the Language (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The single quotes pair for the language.
	 */
	singleQuotes: string;

	/**
	 * The spell-checking source.
	 */
	spellingVendor: string;

	/**
	 * The untranslated name of the language.
	 */
	readonly untranslatedName: string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Language[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Language.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of languages.
 */
declare class Languages {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Language with the specified index.
	 * @param index The index.
	 */
	[index: number]: Language;

	/**
	 * Returns any Language in the collection.
	 */
	anyItem(): Language;

	/**
	 * Displays the number of elements in the Language.
	 */
	count(): number;

	/**
	 * Returns every Language in the collection.
	 */
	everyItem(): Language[];

	/**
	 * Returns the first Language in the collection.
	 */
	firstItem(): Language;

	/**
	 * Returns the Language with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Language;

	/**
	 * Returns the Language with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Language;

	/**
	 * Returns the Language with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Language;

	/**
	 * Returns the Languages within the specified range.
	 * @param from The Language, index, or name at the beginning of the range.
	 * @param to The Language, index, or name at the end of the range.
	 */
	itemByRange(from: Language | number | string, to: Language | number | string): Language[];

	/**
	 * Returns the last Language in the collection.
	 */
	lastItem(): Language;

	/**
	 * Returns the middle Language in the collection.
	 */
	middleItem(): Language;

	/**
	 * Returns the Language whose index follows the specified Language in the collection.
	 * @param obj The Language whose index comes before the desired Language.
	 */
	nextItem(obj: Language): Language;

	/**
	 * Returns the Language with the index previous to the specified index.
	 * @param obj The index of the Language that follows the desired Language.
	 */
	previousItem(obj: Language): Language;

	/**
	 * Generates a string which, if executed, will return the Language.
	 */
	toSource(): string;

}

/**
 * A language that allows the specification of a hyphenation rules source, a spell-checking source, and a thesaurus.
 */
declare class LanguageWithVendors {
	/**
	 * The user dictionaries for the language.
	 */
	dictionaryPaths: string[];

	/**
	 * The double quotes pair for the language.
	 */
	doubleQuotes: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The hyphenation rules source.
	 */
	hyphenationVendor: string;

	/**
	 * A list of hyphenation vendors.
	 */
	readonly hyphenationVendorList: string[];

	/**
	 * The full name of the Language object's ICU locale.
	 */
	readonly icuLocaleName: string;

	/**
	 * The unique ID of the LanguageWithVendors.
	 */
	readonly id: number;

	/**
	 * The index of the LanguageWithVendors within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the LanguageWithVendors.
	 */
	readonly name: string;

	/**
	 * The parent of the LanguageWithVendors (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The single quotes pair for the language.
	 */
	singleQuotes: string;

	/**
	 * The spell-checking source.
	 */
	spellingVendor: string;

	/**
	 * A list of spelling vendors.
	 */
	readonly spellingVendorList: string[];

	/**
	 * The thesaurus source.
	 */
	thesaurusVendor: string;

	/**
	 * The untranslated name of the language.
	 */
	readonly untranslatedName: string;

	/**
	 * Adds the specified user dictionary.
	 * @param filePath The path to the dictionary file.
	 */
	addDictionaryPath(filePath: string): string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): LanguageWithVendors[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Removes the specified user dictionary.
	 * @param filePath The path to the dictionary file.
	 */
	removeDictionaryPath(filePath: string): string;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the LanguageWithVendors.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of languages with vendors.
 */
declare class LanguagesWithVendors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the LanguageWithVendors with the specified index.
	 * @param index The index.
	 */
	[index: number]: LanguageWithVendors;

	/**
	 * Returns any LanguageWithVendors in the collection.
	 */
	anyItem(): LanguageWithVendors;

	/**
	 * Displays the number of elements in the LanguageWithVendors.
	 */
	count(): number;

	/**
	 * Returns every LanguageWithVendors in the collection.
	 */
	everyItem(): LanguageWithVendors[];

	/**
	 * Returns the first LanguageWithVendors in the collection.
	 */
	firstItem(): LanguageWithVendors;

	/**
	 * Returns the LanguageWithVendors with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): LanguageWithVendors;

	/**
	 * Returns the LanguageWithVendors with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): LanguageWithVendors;

	/**
	 * Returns the LanguageWithVendors with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): LanguageWithVendors;

	/**
	 * Returns the LanguagesWithVendors within the specified range.
	 * @param from The LanguageWithVendors, index, or name at the beginning of the range.
	 * @param to The LanguageWithVendors, index, or name at the end of the range.
	 */
	itemByRange(from: LanguageWithVendors | number | string, to: LanguageWithVendors | number | string): LanguageWithVendors[];

	/**
	 * Returns the last LanguageWithVendors in the collection.
	 */
	lastItem(): LanguageWithVendors;

	/**
	 * Returns the middle LanguageWithVendors in the collection.
	 */
	middleItem(): LanguageWithVendors;

	/**
	 * Returns the LanguageWithVendors whose index follows the specified LanguageWithVendors in the collection.
	 * @param obj The LanguageWithVendors whose index comes before the desired LanguageWithVendors.
	 */
	nextItem(obj: LanguageWithVendors): LanguageWithVendors;

	/**
	 * Returns the LanguageWithVendors with the index previous to the specified index.
	 * @param obj The index of the LanguageWithVendors that follows the desired LanguageWithVendors.
	 */
	previousItem(obj: LanguageWithVendors): LanguageWithVendors;

	/**
	 * Generates a string which, if executed, will return the LanguageWithVendors.
	 */
	toSource(): string;

}

/**
 * A font.
 */
declare class Font {
	/**
	 * If true, the font can be embedded.
	 */
	readonly allowEditableEmbedding: boolean;

	/**
	 * If true, the font can be converted to outlines.
	 */
	readonly allowOutlines: boolean;

	/**
	 * If true, the font can be embedded in a PDF document.
	 */
	readonly allowPDFEmbedding: boolean;

	/**
	 * If true, the can font be printed.
	 */
	readonly allowPrinting: boolean;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The name of the font family
	 */
	readonly fontFamily: string;

	/**
	 * The name of the font style.
	 */
	readonly fontStyleName: string;

	/**
	 * The native name of the font style.
	 */
	readonly fontStyleNameNative: string;

	/**
	 * The type of font.
	 */
	readonly fontType: FontTypes;

	/**
	 * The full font name.
	 */
	readonly fullName: string;

	/**
	 * The full native name of the font.
	 */
	readonly fullNameNative: string;

	/**
	 * The index of the Font within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The full path to the Font.
	 */
	readonly location: string;

	/**
	 * The name of the Font.
	 */
	readonly name: string;

	/**
	 * The ordering of a CID font.
	 */
	readonly ordering: string;

	/**
	 * The parent of the Font (a Document or Application).
	 */
	readonly parent: any;

	/**
	 * The platform font name.
	 */
	readonly platformName: string;

	/**
	 * The PostScript name of the font.
	 */
	readonly postscriptName: string;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The registry of a CID font.
	 */
	readonly registry: string;

	/**
	 * If true, the font allows only restricted printing.
	 */
	readonly restrictedPrinting: boolean;

	/**
	 * The status of the font.
	 */
	readonly status: FontStatus;

	/**
	 * The font version.
	 */
	readonly version: string;

	/**
	 * The writing script.
	 */
	readonly writingScript: number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Checks whether the font supports the specified OpenType feature.
	 * @param using The OpenType feature to check for, specified either as an OpenType feature or a string.
	 */
	checkOpenTypeFeature(using: OpenTypeFeature | string): boolean;

	/**
	 * Create a copy of the font with just enough information to render the list of characters given.
	 * @param charactersForSubset String with all the characters used in the resulting font.
	 * @param fontDestination File location for the new font.
	 */
	createSubsetFont(charactersForSubset: string, fontDestination: File): void;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Font[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Font.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of fonts.
 */
declare class Fonts {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Font with the specified index.
	 * @param index The index.
	 */
	[index: number]: Font;

	/**
	 * Returns any Font in the collection.
	 */
	anyItem(): Font;

	/**
	 * Displays the number of elements in the Font.
	 */
	count(): number;

	/**
	 * Returns every Font in the collection.
	 */
	everyItem(): Font[];

	/**
	 * Returns the first Font in the collection.
	 */
	firstItem(): Font;

	/**
	 * Returns the Font with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Font;

	/**
	 * Returns the Font with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Font;

	/**
	 * Returns the Fonts within the specified range.
	 * @param from The Font, index, or name at the beginning of the range.
	 * @param to The Font, index, or name at the end of the range.
	 */
	itemByRange(from: Font | number | string, to: Font | number | string): Font[];

	/**
	 * Returns the last Font in the collection.
	 */
	lastItem(): Font;

	/**
	 * Returns the middle Font in the collection.
	 */
	middleItem(): Font;

	/**
	 * Returns the Font whose index follows the specified Font in the collection.
	 * @param obj The Font whose index comes before the desired Font.
	 */
	nextItem(obj: Font): Font;

	/**
	 * Returns the Font with the index previous to the specified index.
	 * @param obj The index of the Font that follows the desired Font.
	 */
	previousItem(obj: Font): Font;

	/**
	 * Generates a string which, if executed, will return the Font.
	 */
	toSource(): string;

}

/**
 * The kinsoku table.
 */
declare class KinsokuTable {
	/**
	 * The characters in the kinsoku set that cannot be separated.
	 */
	cantBeSeparatedChars: string;

	/**
	 * The characters in the kinsoku set that cannot begin lines.
	 */
	cantBeginLineChars: string;

	/**
	 * That characters in the kinsoku set that cannot end lines.
	 */
	cantEndLineChars: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The hanging punctuation characters in the kinsoku set.
	 */
	hangingPunctuationChars: string;

	/**
	 * The unique ID of the KinsokuTable.
	 */
	readonly id: number;

	/**
	 * The index of the KinsokuTable within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the KinsokuTable.
	 */
	name: string;

	/**
	 * The parent of the KinsokuTable (a Document or Application).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): KinsokuTable[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the KinsokuTable.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the KinsokuTable.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of kinsoku tables.
 */
declare class KinsokuTables {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the KinsokuTable with the specified index.
	 * @param index The index.
	 */
	[index: number]: KinsokuTable;

	/**
	 * Creates a new kinsoku table.
	 * @param name The name of the new kinsoku table.
	 * @param withProperties Initial values for properties of the new KinsokuTable
	 */
	add(name: string, withProperties: object): KinsokuTable;

	/**
	 * Returns any KinsokuTable in the collection.
	 */
	anyItem(): KinsokuTable;

	/**
	 * Displays the number of elements in the KinsokuTable.
	 */
	count(): number;

	/**
	 * Returns every KinsokuTable in the collection.
	 */
	everyItem(): KinsokuTable[];

	/**
	 * Returns the first KinsokuTable in the collection.
	 */
	firstItem(): KinsokuTable;

	/**
	 * Returns the KinsokuTable with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): KinsokuTable;

	/**
	 * Returns the KinsokuTable with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): KinsokuTable;

	/**
	 * Returns the KinsokuTable with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): KinsokuTable;

	/**
	 * Returns the KinsokuTables within the specified range.
	 * @param from The KinsokuTable, index, or name at the beginning of the range.
	 * @param to The KinsokuTable, index, or name at the end of the range.
	 */
	itemByRange(from: KinsokuTable | number | string, to: KinsokuTable | number | string): KinsokuTable[];

	/**
	 * Returns the last KinsokuTable in the collection.
	 */
	lastItem(): KinsokuTable;

	/**
	 * Returns the middle KinsokuTable in the collection.
	 */
	middleItem(): KinsokuTable;

	/**
	 * Returns the KinsokuTable whose index follows the specified KinsokuTable in the collection.
	 * @param obj The KinsokuTable whose index comes before the desired KinsokuTable.
	 */
	nextItem(obj: KinsokuTable): KinsokuTable;

	/**
	 * Returns the KinsokuTable with the index previous to the specified index.
	 * @param obj The index of the KinsokuTable that follows the desired KinsokuTable.
	 */
	previousItem(obj: KinsokuTable): KinsokuTable;

	/**
	 * Generates a string which, if executed, will return the KinsokuTable.
	 */
	toSource(): string;

}

/**
 * The mojikumi table.
 */
declare class MojikumiTable {
	/**
	 * The existing mojikumi set on which to base the new mojikumi set.
	 */
	basedOnMojikumiSet: MojikumiTableDefaults;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the MojikumiTable.
	 */
	readonly id: number;

	/**
	 * The index of the MojikumiTable within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the MojikumiTable.
	 */
	name: string;

	/**
	 * The mojikumi overrides for aki. Can return: Ordered array containing targetMojikumiClass:Short Integer, sideMojikumiClass:Short Integer, sideIsAfterTarget:Boolean, minimum:Real, desired:Real, maximum:Real, compressionPriority:Short Integer, akiDoesNotFloat:Boolean.
	 */
	overrideMojikumiAkiList: any[];

	/**
	 * The parent of the MojikumiTable (a Document or Application).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): MojikumiTable[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the MojikumiTable.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the MojikumiTable.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of mojikumi tables.
 */
declare class MojikumiTables {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MojikumiTable with the specified index.
	 * @param index The index.
	 */
	[index: number]: MojikumiTable;

	/**
	 * Creates a new mojikumi table.
	 * @param name The name of the new mojikumi table.
	 * @param withProperties Initial values for properties of the new MojikumiTable
	 */
	add(name: string, withProperties: object): MojikumiTable;

	/**
	 * Returns any MojikumiTable in the collection.
	 */
	anyItem(): MojikumiTable;

	/**
	 * Displays the number of elements in the MojikumiTable.
	 */
	count(): number;

	/**
	 * Returns every MojikumiTable in the collection.
	 */
	everyItem(): MojikumiTable[];

	/**
	 * Returns the first MojikumiTable in the collection.
	 */
	firstItem(): MojikumiTable;

	/**
	 * Returns the MojikumiTable with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MojikumiTable;

	/**
	 * Returns the MojikumiTable with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MojikumiTable;

	/**
	 * Returns the MojikumiTable with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MojikumiTable;

	/**
	 * Returns the MojikumiTables within the specified range.
	 * @param from The MojikumiTable, index, or name at the beginning of the range.
	 * @param to The MojikumiTable, index, or name at the end of the range.
	 */
	itemByRange(from: MojikumiTable | number | string, to: MojikumiTable | number | string): MojikumiTable[];

	/**
	 * Returns the last MojikumiTable in the collection.
	 */
	lastItem(): MojikumiTable;

	/**
	 * Returns the middle MojikumiTable in the collection.
	 */
	middleItem(): MojikumiTable;

	/**
	 * Returns the MojikumiTable whose index follows the specified MojikumiTable in the collection.
	 * @param obj The MojikumiTable whose index comes before the desired MojikumiTable.
	 */
	nextItem(obj: MojikumiTable): MojikumiTable;

	/**
	 * Returns the MojikumiTable with the index previous to the specified index.
	 * @param obj The index of the MojikumiTable that follows the desired MojikumiTable.
	 */
	previousItem(obj: MojikumiTable): MojikumiTable;

	/**
	 * Generates a string which, if executed, will return the MojikumiTable.
	 */
	toSource(): string;

}

/**
 * A hyphenation exceptions list.
 */
declare class HyphenationException {
	/**
	 * A list of words added to the hyphenation exceptions list.
	 */
	addedExceptions: string[];

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the HyphenationException within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the HyphenationException.
	 */
	readonly name: string;

	/**
	 * The parent of the HyphenationException (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A list of words removed from the hyphenation exceptions list.
	 */
	removedExceptions: string[];

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Adds the specified words to the hyphenation exceptions list.
	 * @param addedExceptions The list of words to add.
	 * @param removedList If true, adds the words to the removed exceptions list. If false or unspecified, adds the words to the added exceptions list.
	 */
	addException(addedExceptions: string[], removedList?: boolean): void;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyphenationException[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Removes the specified words from the hyphenation exceptions list.
	 * @param removedExceptions The list of words to remove.
	 * @param removedList If true, removes the words from the removed exceptions list. If false or unspecified, adds the words to the added exceptions list.
	 */
	removeException(removedExceptions: string[], removedList?: boolean): void;

	/**
	 * Generates a string which, if executed, will return the HyphenationException.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of hyphenation exceptions lists.
 */
declare class HyphenationExceptions {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the HyphenationException with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyphenationException;

	/**
	 * Returns any HyphenationException in the collection.
	 */
	anyItem(): HyphenationException;

	/**
	 * Displays the number of elements in the HyphenationException.
	 */
	count(): number;

	/**
	 * Returns every HyphenationException in the collection.
	 */
	everyItem(): HyphenationException[];

	/**
	 * Returns the first HyphenationException in the collection.
	 */
	firstItem(): HyphenationException;

	/**
	 * Returns the HyphenationException with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyphenationException;

	/**
	 * Returns the HyphenationException with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyphenationException;

	/**
	 * Returns the HyphenationExceptions within the specified range.
	 * @param from The HyphenationException, index, or name at the beginning of the range.
	 * @param to The HyphenationException, index, or name at the end of the range.
	 */
	itemByRange(from: HyphenationException | number | string, to: HyphenationException | number | string): HyphenationException[];

	/**
	 * Returns the last HyphenationException in the collection.
	 */
	lastItem(): HyphenationException;

	/**
	 * Returns the middle HyphenationException in the collection.
	 */
	middleItem(): HyphenationException;

	/**
	 * Returns the HyphenationException whose index follows the specified HyphenationException in the collection.
	 * @param obj The HyphenationException whose index comes before the desired HyphenationException.
	 */
	nextItem(obj: HyphenationException): HyphenationException;

	/**
	 * Returns the HyphenationException with the index previous to the specified index.
	 * @param obj The index of the HyphenationException that follows the desired HyphenationException.
	 */
	previousItem(obj: HyphenationException): HyphenationException;

	/**
	 * Generates a string which, if executed, will return the HyphenationException.
	 */
	toSource(): string;

}

/**
 * A user dictionary.
 */
declare class UserDictionary {
	/**
	 * A list of words added to the user dictionary.
	 */
	addedWords: string[];

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the UserDictionary within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the UserDictionary.
	 */
	readonly name: string;

	/**
	 * The parent of the UserDictionary (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A list of words removed from the user dictionary.
	 */
	removedWords: string[];

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Adds the specified words to the specified list in the dictionary.
	 * @param addedWords The words to add.
	 * @param removedList If true, adds the words to the removed words list. If false or unspecified, adds the words to the added words list.
	 */
	addWord(addedWords: string[], removedList?: boolean): void;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): UserDictionary[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Removes the specified words from the specified list in the dictionary.
	 * @param removedWords The words to remove.
	 * @param removedList If true, removes the words from the removed words list. If false or unspecified, removes the words from the added words list.
	 */
	removeWord(removedWords: string[], removedList?: boolean): void;

	/**
	 * Generates a string which, if executed, will return the UserDictionary.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of user dictionaries.
 */
declare class UserDictionaries {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the UserDictionary with the specified index.
	 * @param index The index.
	 */
	[index: number]: UserDictionary;

	/**
	 * Returns any UserDictionary in the collection.
	 */
	anyItem(): UserDictionary;

	/**
	 * Displays the number of elements in the UserDictionary.
	 */
	count(): number;

	/**
	 * Returns every UserDictionary in the collection.
	 */
	everyItem(): UserDictionary[];

	/**
	 * Returns the first UserDictionary in the collection.
	 */
	firstItem(): UserDictionary;

	/**
	 * Returns the UserDictionary with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): UserDictionary;

	/**
	 * Returns the UserDictionary with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): UserDictionary;

	/**
	 * Returns the UserDictionaries within the specified range.
	 * @param from The UserDictionary, index, or name at the beginning of the range.
	 * @param to The UserDictionary, index, or name at the end of the range.
	 */
	itemByRange(from: UserDictionary | number | string, to: UserDictionary | number | string): UserDictionary[];

	/**
	 * Returns the last UserDictionary in the collection.
	 */
	lastItem(): UserDictionary;

	/**
	 * Returns the middle UserDictionary in the collection.
	 */
	middleItem(): UserDictionary;

	/**
	 * Returns the UserDictionary whose index follows the specified UserDictionary in the collection.
	 * @param obj The UserDictionary whose index comes before the desired UserDictionary.
	 */
	nextItem(obj: UserDictionary): UserDictionary;

	/**
	 * Returns the UserDictionary with the index previous to the specified index.
	 * @param obj The index of the UserDictionary that follows the desired UserDictionary.
	 */
	previousItem(obj: UserDictionary): UserDictionary;

	/**
	 * Generates a string which, if executed, will return the UserDictionary.
	 */
	toSource(): string;

}

/**
 * An auto-correct table.
 */
declare class AutoCorrectTable {
	/**
	 * An auto-correct word pair, specified as a misspelled word and a corrected word. Can return: Array of Arrays of 2 Strings.
	 */
	autoCorrectWordPairList: any[];

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the AutoCorrectTable within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the AutoCorrectTable.
	 */
	readonly name: string;

	/**
	 * The parent of the AutoCorrectTable (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): AutoCorrectTable[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the AutoCorrectTable.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of auto-correct tables.
 */
declare class AutoCorrectTables {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the AutoCorrectTable with the specified index.
	 * @param index The index.
	 */
	[index: number]: AutoCorrectTable;

	/**
	 * Returns any AutoCorrectTable in the collection.
	 */
	anyItem(): AutoCorrectTable;

	/**
	 * Displays the number of elements in the AutoCorrectTable.
	 */
	count(): number;

	/**
	 * Returns every AutoCorrectTable in the collection.
	 */
	everyItem(): AutoCorrectTable[];

	/**
	 * Returns the first AutoCorrectTable in the collection.
	 */
	firstItem(): AutoCorrectTable;

	/**
	 * Returns the AutoCorrectTable with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): AutoCorrectTable;

	/**
	 * Returns the AutoCorrectTable with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): AutoCorrectTable;

	/**
	 * Returns the AutoCorrectTables within the specified range.
	 * @param from The AutoCorrectTable, index, or name at the beginning of the range.
	 * @param to The AutoCorrectTable, index, or name at the end of the range.
	 */
	itemByRange(from: AutoCorrectTable | number | string, to: AutoCorrectTable | number | string): AutoCorrectTable[];

	/**
	 * Returns the last AutoCorrectTable in the collection.
	 */
	lastItem(): AutoCorrectTable;

	/**
	 * Returns the middle AutoCorrectTable in the collection.
	 */
	middleItem(): AutoCorrectTable;

	/**
	 * Returns the AutoCorrectTable whose index follows the specified AutoCorrectTable in the collection.
	 * @param obj The AutoCorrectTable whose index comes before the desired AutoCorrectTable.
	 */
	nextItem(obj: AutoCorrectTable): AutoCorrectTable;

	/**
	 * Returns the AutoCorrectTable with the index previous to the specified index.
	 * @param obj The index of the AutoCorrectTable that follows the desired AutoCorrectTable.
	 */
	previousItem(obj: AutoCorrectTable): AutoCorrectTable;

	/**
	 * Generates a string which, if executed, will return the AutoCorrectTable.
	 */
	toSource(): string;

}

/**
 * A tracked change made to a story.
 */
declare class Change {
	/**
	 * The type of tracked change. Note: Valid only when track changes is true.
	 */
	readonly changeType: ChangeTypes;

	/**
	 * A collection of characters.
	 */
	readonly characters: Characters;

	/**
	 * The date on which the tracked change was made. Note: Valid only when track changes is true.
	 */
	readonly date: Date;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the Change within its containing object.
	 */
	readonly index: number;

	/**
	 * A collection of insertion points.
	 */
	readonly insertionPoints: InsertionPoints;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A collection of lines.
	 */
	readonly lines: Lines;

	/**
	 * A collection of paragraphs.
	 */
	readonly paragraphs: Paragraphs;

	/**
	 * The parent of the Change (a Story, XmlStory or Cell).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The location of the first insertion point in the object (relative to the beginning of the story).
	 */
	readonly storyOffset: InsertionPoint;

	/**
	 * A collection of text columns.
	 */
	readonly textColumns: TextColumns;

	/**
	 * A collection of text style ranges.
	 */
	readonly textStyleRanges: TextStyleRanges;

	/**
	 * A collection of text variable instances.
	 */
	readonly textVariableInstances: TextVariableInstances;

	/**
	 * A collection of text objects.
	 */
	readonly texts: Texts;

	/**
	 * The user who made the change. Note: Valid only when track changes is true.
	 */
	readonly userName: string;

	/**
	 * A collection of words.
	 */
	readonly words: Words;

	/**
	 * Accepts the tracked change. Note: Valid only when track changes is true.
	 */
	accept(): void;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Change[];

	/**
	 * Rejects the tracked change. Note: Valid only when track changes is true.
	 */
	reject(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Change.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of changes.
 */
declare class Changes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Change with the specified index.
	 * @param index The index.
	 */
	[index: number]: Change;

	/**
	 * Returns any Change in the collection.
	 */
	anyItem(): Change;

	/**
	 * Displays the number of elements in the Change.
	 */
	count(): number;

	/**
	 * Returns every Change in the collection.
	 */
	everyItem(): Change[];

	/**
	 * Returns the first Change in the collection.
	 */
	firstItem(): Change;

	/**
	 * Returns the Change with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Change;

	/**
	 * Returns the Changes within the specified range.
	 * @param from The Change, index, or name at the beginning of the range.
	 * @param to The Change, index, or name at the end of the range.
	 */
	itemByRange(from: Change | number | string, to: Change | number | string): Change[];

	/**
	 * Returns the last Change in the collection.
	 */
	lastItem(): Change;

	/**
	 * Returns the middle Change in the collection.
	 */
	middleItem(): Change;

	/**
	 * Returns the Change whose index follows the specified Change in the collection.
	 * @param obj The Change whose index comes before the desired Change.
	 */
	nextItem(obj: Change): Change;

	/**
	 * Returns the Change with the index previous to the specified index.
	 * @param obj The index of the Change that follows the desired Change.
	 */
	previousItem(obj: Change): Change;

	/**
	 * Generates a string which, if executed, will return the Change.
	 */
	toSource(): string;

}

/**
 * A text object that is on a path.
 */
declare class TextPath {
	/**
	 * Dispatched after a TextPath is placed. This event bubbles. This event is not cancelable.
	 */
	static readonly AFTER_PLACE: string;

	/**
	 * Dispatched before a TextPath is placed. This event bubbles. This event is cancelable.
	 */
	static readonly BEFORE_PLACE: string;

	/**
	 * The halfway point between the start bracket and the end bracket.
	 */
	readonly centerBracket: number;

	/**
	 * A collection of characters.
	 */
	readonly characters: Characters;

	/**
	 * The contents of the text frame.
	 */
	contents: string | TextFrameContents | SpecialCharacters;

	/**
	 * The end of the type on a path. Note: Additional text becomes overset text unless the text is linked to another path or text frame.
	 */
	endBracket: number;

	/**
	 * The last text frame in the thread.
	 */
	readonly endTextFrame: TextFrame | TextPath;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The flip effect applied to the type on a path.
	 */
	flipPathEffect: FlipValues;

	/**
	 * The unique ID of the TextPath.
	 */
	readonly id: number;

	/**
	 * The index of the TextPath within its containing object.
	 */
	readonly index: number;

	/**
	 * A collection of insertion points.
	 */
	readonly insertionPoints: InsertionPoints;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * A collection of lines.
	 */
	readonly lines: Lines;

	/**
	 * The name of the TextPath; this is an alias to the TextPath's label property.
	 */
	name: string;

	/**
	 * The next text frame in the thread.
	 */
	nextTextFrame: TextFrame | TextPath | NothingEnum;

	/**
	 * If true, the story has overset text.
	 */
	readonly overflows: boolean;

	/**
	 * A collection of paragraphs.
	 */
	readonly paragraphs: Paragraphs;

	/**
	 * The parent of the TextPath (a SplineItem, Polygon, GraphicLine, Rectangle, Oval, TextFrame, EndnoteTextFrame or EPSText).
	 */
	readonly parent: any;

	/**
	 * The story that contains the text.
	 */
	readonly parentStory: Story;

	/**
	 * The alignment of the type on a path.
	 */
	pathAlignment: PathTypeAlignments;

	/**
	 * The effect applied to the type on a path.
	 */
	pathEffect: TextPathEffects;

	/**
	 * The spacing applied to the type on a path.
	 */
	pathSpacing: number;

	/**
	 * The previous text frame in the thread.
	 */
	previousTextFrame: TextFrame | TextPath | NothingEnum;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The location of the start of the type on the path, expressed in points. Note: 0 is the first point on the path.
	 */
	startBracket: number;

	/**
	 * The first text frame in the thread.
	 */
	readonly startTextFrame: TextFrame | TextPath;

	/**
	 * The alignment applied to the type on a path.
	 */
	textAlignment: TextTypeAlignments;

	/**
	 * A collection of text columns.
	 */
	readonly textColumns: TextColumns;

	/**
	 * The index of the text frame within the story.
	 */
	readonly textFrameIndex: number;

	/**
	 * A collection of text style ranges.
	 */
	readonly textStyleRanges: TextStyleRanges;

	/**
	 * A collection of text objects.
	 */
	readonly texts: Texts;

	/**
	 * A collection of words.
	 */
	readonly words: Words;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TextPath[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the TextPath.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the TextPath.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of text paths.
 */
declare class TextPaths {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TextPath with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextPath;

	/**
	 * Creates a new TextPath.
	 * @param withProperties Initial values for properties of the new TextPath
	 */
	add(withProperties: object): TextPath;

	/**
	 * Returns any TextPath in the collection.
	 */
	anyItem(): TextPath;

	/**
	 * Displays the number of elements in the TextPath.
	 */
	count(): number;

	/**
	 * Returns every TextPath in the collection.
	 */
	everyItem(): TextPath[];

	/**
	 * Returns the first TextPath in the collection.
	 */
	firstItem(): TextPath;

	/**
	 * Returns the TextPath with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextPath;

	/**
	 * Returns the TextPath with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TextPath;

	/**
	 * Returns the TextPath with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TextPath;

	/**
	 * Returns the TextPaths within the specified range.
	 * @param from The TextPath, index, or name at the beginning of the range.
	 * @param to The TextPath, index, or name at the end of the range.
	 */
	itemByRange(from: TextPath | number | string, to: TextPath | number | string): TextPath[];

	/**
	 * Returns the last TextPath in the collection.
	 */
	lastItem(): TextPath;

	/**
	 * Returns the middle TextPath in the collection.
	 */
	middleItem(): TextPath;

	/**
	 * Returns the TextPath whose index follows the specified TextPath in the collection.
	 * @param obj The TextPath whose index comes before the desired TextPath.
	 */
	nextItem(obj: TextPath): TextPath;

	/**
	 * Returns the TextPath with the index previous to the specified index.
	 * @param obj The index of the TextPath that follows the desired TextPath.
	 */
	previousItem(obj: TextPath): TextPath;

	/**
	 * Generates a string which, if executed, will return the TextPath.
	 */
	toSource(): string;

}

/**
 * A note in a story.
 */
declare class Note {
	/**
	 * A collection of characters.
	 */
	readonly characters: Characters;

	/**
	 * If true, the note is collapsed in galley view.
	 */
	collapsed: boolean;

	/**
	 * The date and time the note was created.
	 */
	readonly creationDate: Date;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * A collection of hidden text objects.
	 */
	readonly hiddenTexts: HiddenTexts;

	/**
	 * The unique ID of the Note.
	 */
	readonly id: number;

	/**
	 * The index of the Note within its containing object.
	 */
	readonly index: number;

	/**
	 * A collection of insertion points.
	 */
	readonly insertionPoints: InsertionPoints;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * A collection of lines.
	 */
	readonly lines: Lines;

	/**
	 * The date and time the note was last modified.
	 */
	readonly modificationDate: Date;

	/**
	 * The name of the Note; this is an alias to the Note's label property.
	 */
	name: string;

	/**
	 * A collection of paragraphs.
	 */
	readonly paragraphs: Paragraphs;

	/**
	 * The parent of the Note (a XmlStory, Story, TextFrame, EndnoteTextFrame, InsertionPoint or Cell).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	readonly storyOffset: InsertionPoint;

	/**
	 * A collection of text columns.
	 */
	readonly textColumns: TextColumns;

	/**
	 * A collection of text style ranges.
	 */
	readonly textStyleRanges: TextStyleRanges;

	/**
	 * A collection of text variable instances.
	 */
	readonly textVariableInstances: TextVariableInstances;

	/**
	 * A collection of text objects.
	 */
	readonly texts: Texts;

	/**
	 * The user who made the note.
	 */
	readonly userName: string;

	/**
	 * A collection of words.
	 */
	readonly words: Words;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Converts the note to story text.
	 */
	convertToText(): void;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Note[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the note to the specified location.
	 * @param to The new location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: Text | Story): Note;

	/**
	 * Deletes the Note.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Note.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of notes.
 */
declare class Notes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Note with the specified index.
	 * @param index The index.
	 */
	[index: number]: Note;

	/**
	 * Creates a new note.
	 * @param at The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the at parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new Note
	 */
	add(at?: LocationOptions, reference?: Note | InsertionPoint, withProperties?: object): Note;

	/**
	 * Returns any Note in the collection.
	 */
	anyItem(): Note;

	/**
	 * Displays the number of elements in the Note.
	 */
	count(): number;

	/**
	 * Returns every Note in the collection.
	 */
	everyItem(): Note[];

	/**
	 * Returns the first Note in the collection.
	 */
	firstItem(): Note;

	/**
	 * Returns the Note with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Note;

	/**
	 * Returns the Note with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Note;

	/**
	 * Returns the Note with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Note;

	/**
	 * Returns the Notes within the specified range.
	 * @param from The Note, index, or name at the beginning of the range.
	 * @param to The Note, index, or name at the end of the range.
	 */
	itemByRange(from: Note | number | string, to: Note | number | string): Note[];

	/**
	 * Returns the last Note in the collection.
	 */
	lastItem(): Note;

	/**
	 * Returns the middle Note in the collection.
	 */
	middleItem(): Note;

	/**
	 * Returns the Note whose index follows the specified Note in the collection.
	 * @param obj The Note whose index comes before the desired Note.
	 */
	nextItem(obj: Note): Note;

	/**
	 * Returns the Note with the index previous to the specified index.
	 * @param obj The index of the Note that follows the desired Note.
	 */
	previousItem(obj: Note): Note;

	/**
	 * Generates a string which, if executed, will return the Note.
	 */
	toSource(): string;

}

/**
 * A footnote.
 */
declare class Footnote {
	/**
	 * Lists all graphics contained by the Footnote.
	 */
	readonly allGraphics: Graphic[];

	/**
	 * Lists all page items contained by the Footnote.
	 */
	readonly allPageItems: PageItem[];

	/**
	 * A collection of characters.
	 */
	readonly characters: Characters;

	/**
	 * The text contents of the footnote.
	 */
	contents: string | SpecialCharacters | string[] | NothingEnum;

	/**
	 * EPSTexts
	 */
	readonly epstexts: EPSTexts;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * A collection of graphic lines.
	 */
	readonly graphicLines: GraphicLines;

	/**
	 * A collection of groups.
	 */
	readonly groups: Groups;

	/**
	 * A collection of hidden text objects.
	 */
	readonly hiddenTexts: HiddenTexts;

	/**
	 * The unique ID of the Footnote.
	 */
	readonly id: number;

	/**
	 * The index of the Footnote within its containing object.
	 */
	readonly index: number;

	/**
	 * A collection of insertion points.
	 */
	readonly insertionPoints: InsertionPoints;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * A collection of lines.
	 */
	readonly lines: Lines;

	/**
	 * The name of the Footnote; this is an alias to the Footnote's label property.
	 */
	name: string;

	/**
	 * A collection of ellipses.
	 */
	readonly ovals: Ovals;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of paragraphs.
	 */
	readonly paragraphs: Paragraphs;

	/**
	 * The parent of the Footnote (a XmlStory, Cell, Story, TextFrame, EndnoteTextFrame or InsertionPoint).
	 */
	readonly parent: any;

	/**
	 * A collection of polygons.
	 */
	readonly polygons: Polygons;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of rectangles.
	 */
	readonly rectangles: Rectangles;

	/**
	 * The spline items collection.
	 */
	readonly splineItems: SplineItems;

	/**
	 * The location of the footnote marker in the parent story.
	 */
	readonly storyOffset: InsertionPoint;

	/**
	 * A collection of text columns.
	 */
	readonly textColumns: TextColumns;

	/**
	 * A collection of text frames.
	 */
	readonly textFrames: TextFrames;

	/**
	 * A collection of text style ranges.
	 */
	readonly textStyleRanges: TextStyleRanges;

	/**
	 * A collection of text variable instances.
	 */
	readonly textVariableInstances: TextVariableInstances;

	/**
	 * A collection of text objects.
	 */
	readonly texts: Texts;

	/**
	 * A collection of words.
	 */
	readonly words: Words;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Converts the footnote to part of the story text and places the converted text at the former location of the footnote marker in the text.
	 */
	convertToText(): Text;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Footnote[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the Footnote.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Footnote.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of footnotes.
 */
declare class Footnotes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Footnote with the specified index.
	 * @param index The index.
	 */
	[index: number]: Footnote;

	/**
	 * Creates a new footnote.
	 * @param at The location of the footnote reference number in the main text relative to the reference object or within the story.
	 * @param reference The reference object. Note: Must be an insertion point or a note. Required when the at parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new Footnote
	 */
	add(at?: LocationOptions, reference?: Note | InsertionPoint, withProperties?: object): Footnote;

	/**
	 * Returns any Footnote in the collection.
	 */
	anyItem(): Footnote;

	/**
	 * Displays the number of elements in the Footnote.
	 */
	count(): number;

	/**
	 * Returns every Footnote in the collection.
	 */
	everyItem(): Footnote[];

	/**
	 * Returns the first Footnote in the collection.
	 */
	firstItem(): Footnote;

	/**
	 * Returns the Footnote with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Footnote;

	/**
	 * Returns the Footnote with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Footnote;

	/**
	 * Returns the Footnote with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Footnote;

	/**
	 * Returns the Footnotes within the specified range.
	 * @param from The Footnote, index, or name at the beginning of the range.
	 * @param to The Footnote, index, or name at the end of the range.
	 */
	itemByRange(from: Footnote | number | string, to: Footnote | number | string): Footnote[];

	/**
	 * Returns the last Footnote in the collection.
	 */
	lastItem(): Footnote;

	/**
	 * Returns the middle Footnote in the collection.
	 */
	middleItem(): Footnote;

	/**
	 * Returns the Footnote whose index follows the specified Footnote in the collection.
	 * @param obj The Footnote whose index comes before the desired Footnote.
	 */
	nextItem(obj: Footnote): Footnote;

	/**
	 * Returns the Footnote with the index previous to the specified index.
	 * @param obj The index of the Footnote that follows the desired Footnote.
	 */
	previousItem(obj: Footnote): Footnote;

	/**
	 * Generates a string which, if executed, will return the Footnote.
	 */
	toSource(): string;

}

/**
 * A text variable definition in a document.
 */
declare class TextVariable {
	/**
	 * Variable instances associated with the text variable.
	 */
	readonly associatedInstances: TextVariableInstance[];

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the TextVariable within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the TextVariable.
	 */
	name: string;

	/**
	 * The parent of the TextVariable (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The preferences associated with the text variable.
	 */
	readonly variableOptions: PageNumberVariablePreference | ChapterNumberVariablePreference | DateVariablePreference | FileNameVariablePreference | MatchCharacterStylePreference | MatchParagraphStylePreference | CustomTextVariablePreference | CaptionMetadataVariablePreference;

	/**
	 * The variable type.
	 */
	variableType: VariableTypes;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Convert all of this variable's instances to text.
	 */
	convertToText(): Text[];

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TextVariable[];

	/**
	 * Deletes the TextVariable.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the TextVariable.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of text variables.
 */
declare class TextVariables {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TextVariable with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextVariable;

	/**
	 * Creates a new TextVariable.
	 * @param withProperties Initial values for properties of the new TextVariable
	 */
	add(withProperties: object): TextVariable;

	/**
	 * Returns any TextVariable in the collection.
	 */
	anyItem(): TextVariable;

	/**
	 * Displays the number of elements in the TextVariable.
	 */
	count(): number;

	/**
	 * Returns every TextVariable in the collection.
	 */
	everyItem(): TextVariable[];

	/**
	 * Returns the first TextVariable in the collection.
	 */
	firstItem(): TextVariable;

	/**
	 * Returns the TextVariable with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextVariable;

	/**
	 * Returns the TextVariable with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TextVariable;

	/**
	 * Returns the TextVariables within the specified range.
	 * @param from The TextVariable, index, or name at the beginning of the range.
	 * @param to The TextVariable, index, or name at the end of the range.
	 */
	itemByRange(from: TextVariable | number | string, to: TextVariable | number | string): TextVariable[];

	/**
	 * Returns the last TextVariable in the collection.
	 */
	lastItem(): TextVariable;

	/**
	 * Returns the middle TextVariable in the collection.
	 */
	middleItem(): TextVariable;

	/**
	 * Returns the TextVariable whose index follows the specified TextVariable in the collection.
	 * @param obj The TextVariable whose index comes before the desired TextVariable.
	 */
	nextItem(obj: TextVariable): TextVariable;

	/**
	 * Returns the TextVariable with the index previous to the specified index.
	 * @param obj The index of the TextVariable that follows the desired TextVariable.
	 */
	previousItem(obj: TextVariable): TextVariable;

	/**
	 * Generates a string which, if executed, will return the TextVariable.
	 */
	toSource(): string;

}

/**
 * A text variable instance in the text.
 */
declare class TextVariableInstance {
	/**
	 * The associated text variable.
	 */
	associatedTextVariable: TextVariable;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the TextVariableInstance.
	 */
	readonly id: number;

	/**
	 * The index of the TextVariableInstance within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the TextVariableInstance.
	 */
	readonly name: string;

	/**
	 * The parent of the TextVariableInstance (a XmlStory, TextFrame, EndnoteTextFrame, Story, Note, Cell, Footnote or Change).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The text that replaces the variable marker. Note: This property cannot be set; it can be used only to update variables. .
	 */
	readonly resultText: string;

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	readonly storyOffset: InsertionPoint;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Converts the footnote to part of the story text and places the converted text at the former location of the footnote marker in the text.
	 */
	convertToText(): Text;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TextVariableInstance[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the TextVariableInstance.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the TextVariableInstance.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of text variable instances.
 */
declare class TextVariableInstances {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TextVariableInstance with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextVariableInstance;

	/**
	 * Creates a text variable instance at the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required only when the to parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new TextVariableInstance
	 */
	add(to?: LocationOptions, reference?: TextVariableInstance | XmlStory | TextFrame | EndnoteTextFrame | Story | Note | Cell | Footnote | Table | TextColumn | TextStyleRange | Text | InsertionPoint | Paragraph | Line | Word | Character | Change, withProperties?: object): TextVariableInstance;

	/**
	 * Returns any TextVariableInstance in the collection.
	 */
	anyItem(): TextVariableInstance;

	/**
	 * Displays the number of elements in the TextVariableInstance.
	 */
	count(): number;

	/**
	 * Returns every TextVariableInstance in the collection.
	 */
	everyItem(): TextVariableInstance[];

	/**
	 * Returns the first TextVariableInstance in the collection.
	 */
	firstItem(): TextVariableInstance;

	/**
	 * Returns the TextVariableInstance with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextVariableInstance;

	/**
	 * Returns the TextVariableInstance with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TextVariableInstance;

	/**
	 * Returns the TextVariableInstance with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TextVariableInstance;

	/**
	 * Returns the TextVariableInstances within the specified range.
	 * @param from The TextVariableInstance, index, or name at the beginning of the range.
	 * @param to The TextVariableInstance, index, or name at the end of the range.
	 */
	itemByRange(from: TextVariableInstance | number | string, to: TextVariableInstance | number | string): TextVariableInstance[];

	/**
	 * Returns the last TextVariableInstance in the collection.
	 */
	lastItem(): TextVariableInstance;

	/**
	 * Returns the middle TextVariableInstance in the collection.
	 */
	middleItem(): TextVariableInstance;

	/**
	 * Returns the TextVariableInstance whose index follows the specified TextVariableInstance in the collection.
	 * @param obj The TextVariableInstance whose index comes before the desired TextVariableInstance.
	 */
	nextItem(obj: TextVariableInstance): TextVariableInstance;

	/**
	 * Returns the TextVariableInstance with the index previous to the specified index.
	 * @param obj The index of the TextVariableInstance that follows the desired TextVariableInstance.
	 */
	previousItem(obj: TextVariableInstance): TextVariableInstance;

	/**
	 * Generates a string which, if executed, will return the TextVariableInstance.
	 */
	toSource(): string;

}

/**
 * A mapping object that maps an export type to an export tag.
 */
declare class StyleExportTagMap {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The attributes to map.
	 */
	exportAttributes: string;

	/**
	 * The class to map.
	 */
	exportClass: string;

	/**
	 * The tag to map.
	 */
	exportTag: string;

	/**
	 * The type of export.
	 */
	readonly exportType: string;

	/**
	 * The index of the StyleExportTagMap within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the StyleExportTagMap (a CharacterStyle or ParagraphStyle).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): StyleExportTagMap[];

	/**
	 * Deletes the StyleExportTagMap.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the StyleExportTagMap.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of style export tag maps.
 */
declare class StyleExportTagMaps {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the StyleExportTagMap with the specified index.
	 * @param index The index.
	 */
	[index: number]: StyleExportTagMap;

	/**
	 * Create a new mapping
	 * @param exportType The type of export.
	 * @param exportTag The tag to map.
	 * @param exportClass The class to map.
	 * @param exportAttributes The attributes to map.
	 * @param withProperties Initial values for properties of the new StyleExportTagMap
	 */
	add(exportType: string, exportTag: string, exportClass: string, exportAttributes: string, withProperties: object): StyleExportTagMap;

	/**
	 * Returns any StyleExportTagMap in the collection.
	 */
	anyItem(): StyleExportTagMap;

	/**
	 * Displays the number of elements in the StyleExportTagMap.
	 */
	count(): number;

	/**
	 * Returns every StyleExportTagMap in the collection.
	 */
	everyItem(): StyleExportTagMap[];

	/**
	 * Returns the first StyleExportTagMap in the collection.
	 */
	firstItem(): StyleExportTagMap;

	/**
	 * Returns the StyleExportTagMap with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): StyleExportTagMap;

	/**
	 * Returns the StyleExportTagMaps within the specified range.
	 * @param from The StyleExportTagMap, index, or name at the beginning of the range.
	 * @param to The StyleExportTagMap, index, or name at the end of the range.
	 */
	itemByRange(from: StyleExportTagMap | number | string, to: StyleExportTagMap | number | string): StyleExportTagMap[];

	/**
	 * Returns the last StyleExportTagMap in the collection.
	 */
	lastItem(): StyleExportTagMap;

	/**
	 * Returns the middle StyleExportTagMap in the collection.
	 */
	middleItem(): StyleExportTagMap;

	/**
	 * Returns the StyleExportTagMap whose index follows the specified StyleExportTagMap in the collection.
	 * @param obj The StyleExportTagMap whose index comes before the desired StyleExportTagMap.
	 */
	nextItem(obj: StyleExportTagMap): StyleExportTagMap;

	/**
	 * Returns the StyleExportTagMap with the index previous to the specified index.
	 * @param obj The index of the StyleExportTagMap that follows the desired StyleExportTagMap.
	 */
	previousItem(obj: StyleExportTagMap): StyleExportTagMap;

	/**
	 * Generates a string which, if executed, will return the StyleExportTagMap.
	 */
	toSource(): string;

}

/**
 * A paragraph style group.
 */
declare class ParagraphStyleGroup {
	/**
	 * Lists all paragraph styles (regardless of their group).
	 */
	readonly allParagraphStyles: ParagraphStyle[];

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the ParagraphStyleGroup.
	 */
	readonly id: number;

	/**
	 * The index of the ParagraphStyleGroup within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the ParagraphStyleGroup.
	 */
	name: string;

	/**
	 * A collection of paragraph style groups.
	 */
	readonly paragraphStyleGroups: ParagraphStyleGroups;

	/**
	 * A collection of paragraph styles.
	 */
	readonly paragraphStyles: ParagraphStyles;

	/**
	 * The parent of the ParagraphStyleGroup (a Document, Application or ParagraphStyleGroup).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the ParagraphStyleGroup.
	 */
	duplicate(): ParagraphStyleGroup;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ParagraphStyleGroup[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): ParagraphStyleGroup;

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: ParagraphStyle | CharacterStyle): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the ParagraphStyleGroup.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of paragraph style groups.
 */
declare class ParagraphStyleGroups {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ParagraphStyleGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: ParagraphStyleGroup;

	/**
	 * Creates a new ParagraphStyleGroup.
	 * @param withProperties Initial values for properties of the new ParagraphStyleGroup
	 */
	add(withProperties: object): ParagraphStyleGroup;

	/**
	 * Returns any ParagraphStyleGroup in the collection.
	 */
	anyItem(): ParagraphStyleGroup;

	/**
	 * Displays the number of elements in the ParagraphStyleGroup.
	 */
	count(): number;

	/**
	 * Returns every ParagraphStyleGroup in the collection.
	 */
	everyItem(): ParagraphStyleGroup[];

	/**
	 * Returns the first ParagraphStyleGroup in the collection.
	 */
	firstItem(): ParagraphStyleGroup;

	/**
	 * Returns the ParagraphStyleGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ParagraphStyleGroup;

	/**
	 * Returns the ParagraphStyleGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ParagraphStyleGroup;

	/**
	 * Returns the ParagraphStyleGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ParagraphStyleGroup;

	/**
	 * Returns the ParagraphStyleGroups within the specified range.
	 * @param from The ParagraphStyleGroup, index, or name at the beginning of the range.
	 * @param to The ParagraphStyleGroup, index, or name at the end of the range.
	 */
	itemByRange(from: ParagraphStyleGroup | number | string, to: ParagraphStyleGroup | number | string): ParagraphStyleGroup[];

	/**
	 * Returns the last ParagraphStyleGroup in the collection.
	 */
	lastItem(): ParagraphStyleGroup;

	/**
	 * Returns the middle ParagraphStyleGroup in the collection.
	 */
	middleItem(): ParagraphStyleGroup;

	/**
	 * Returns the ParagraphStyleGroup whose index follows the specified ParagraphStyleGroup in the collection.
	 * @param obj The ParagraphStyleGroup whose index comes before the desired ParagraphStyleGroup.
	 */
	nextItem(obj: ParagraphStyleGroup): ParagraphStyleGroup;

	/**
	 * Returns the ParagraphStyleGroup with the index previous to the specified index.
	 * @param obj The index of the ParagraphStyleGroup that follows the desired ParagraphStyleGroup.
	 */
	previousItem(obj: ParagraphStyleGroup): ParagraphStyleGroup;

	/**
	 * Generates a string which, if executed, will return the ParagraphStyleGroup.
	 */
	toSource(): string;

}

/**
 * A character style group.
 */
declare class CharacterStyleGroup {
	/**
	 * Lists all character styles (regardless of their group).
	 */
	readonly allCharacterStyles: CharacterStyle[];

	/**
	 * A collection of character style groups.
	 */
	readonly characterStyleGroups: CharacterStyleGroups;

	/**
	 * A collection of character styles.
	 */
	readonly characterStyles: CharacterStyles;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the CharacterStyleGroup.
	 */
	readonly id: number;

	/**
	 * The index of the CharacterStyleGroup within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the CharacterStyleGroup.
	 */
	name: string;

	/**
	 * The parent of the CharacterStyleGroup (a Document, Application or CharacterStyleGroup).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the CharacterStyleGroup.
	 */
	duplicate(): CharacterStyleGroup;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CharacterStyleGroup[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): CharacterStyleGroup;

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: ParagraphStyle | CharacterStyle): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the CharacterStyleGroup.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of character style groups.
 */
declare class CharacterStyleGroups {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the CharacterStyleGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: CharacterStyleGroup;

	/**
	 * Creates a new CharacterStyleGroup.
	 * @param withProperties Initial values for properties of the new CharacterStyleGroup
	 */
	add(withProperties: object): CharacterStyleGroup;

	/**
	 * Returns any CharacterStyleGroup in the collection.
	 */
	anyItem(): CharacterStyleGroup;

	/**
	 * Displays the number of elements in the CharacterStyleGroup.
	 */
	count(): number;

	/**
	 * Returns every CharacterStyleGroup in the collection.
	 */
	everyItem(): CharacterStyleGroup[];

	/**
	 * Returns the first CharacterStyleGroup in the collection.
	 */
	firstItem(): CharacterStyleGroup;

	/**
	 * Returns the CharacterStyleGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CharacterStyleGroup;

	/**
	 * Returns the CharacterStyleGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CharacterStyleGroup;

	/**
	 * Returns the CharacterStyleGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CharacterStyleGroup;

	/**
	 * Returns the CharacterStyleGroups within the specified range.
	 * @param from The CharacterStyleGroup, index, or name at the beginning of the range.
	 * @param to The CharacterStyleGroup, index, or name at the end of the range.
	 */
	itemByRange(from: CharacterStyleGroup | number | string, to: CharacterStyleGroup | number | string): CharacterStyleGroup[];

	/**
	 * Returns the last CharacterStyleGroup in the collection.
	 */
	lastItem(): CharacterStyleGroup;

	/**
	 * Returns the middle CharacterStyleGroup in the collection.
	 */
	middleItem(): CharacterStyleGroup;

	/**
	 * Returns the CharacterStyleGroup whose index follows the specified CharacterStyleGroup in the collection.
	 * @param obj The CharacterStyleGroup whose index comes before the desired CharacterStyleGroup.
	 */
	nextItem(obj: CharacterStyleGroup): CharacterStyleGroup;

	/**
	 * Returns the CharacterStyleGroup with the index previous to the specified index.
	 * @param obj The index of the CharacterStyleGroup that follows the desired CharacterStyleGroup.
	 */
	previousItem(obj: CharacterStyleGroup): CharacterStyleGroup;

	/**
	 * Generates a string which, if executed, will return the CharacterStyleGroup.
	 */
	toSource(): string;

}

/**
 * A composite font.
 */
declare class CompositeFont {
	/**
	 * A collection of composite font entries.
	 */
	readonly compositeFontEntries: CompositeFontEntries;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the CompositeFont.
	 */
	readonly id: number;

	/**
	 * The index of the CompositeFont within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the CompositeFont.
	 */
	name: string;

	/**
	 * The parent of the CompositeFont (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CompositeFont[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the CompositeFont.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the CompositeFont.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of composite fonts.
 */
declare class CompositeFonts {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the CompositeFont with the specified index.
	 * @param index The index.
	 */
	[index: number]: CompositeFont;

	/**
	 * Creates a new CompositeFont.
	 * @param withProperties Initial values for properties of the new CompositeFont
	 */
	add(withProperties: object): CompositeFont;

	/**
	 * Returns any CompositeFont in the collection.
	 */
	anyItem(): CompositeFont;

	/**
	 * Displays the number of elements in the CompositeFont.
	 */
	count(): number;

	/**
	 * Returns every CompositeFont in the collection.
	 */
	everyItem(): CompositeFont[];

	/**
	 * Returns the first CompositeFont in the collection.
	 */
	firstItem(): CompositeFont;

	/**
	 * Returns the CompositeFont with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CompositeFont;

	/**
	 * Returns the CompositeFont with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CompositeFont;

	/**
	 * Returns the CompositeFont with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CompositeFont;

	/**
	 * Returns the CompositeFonts within the specified range.
	 * @param from The CompositeFont, index, or name at the beginning of the range.
	 * @param to The CompositeFont, index, or name at the end of the range.
	 */
	itemByRange(from: CompositeFont | number | string, to: CompositeFont | number | string): CompositeFont[];

	/**
	 * Returns the last CompositeFont in the collection.
	 */
	lastItem(): CompositeFont;

	/**
	 * Returns the middle CompositeFont in the collection.
	 */
	middleItem(): CompositeFont;

	/**
	 * Returns the CompositeFont whose index follows the specified CompositeFont in the collection.
	 * @param obj The CompositeFont whose index comes before the desired CompositeFont.
	 */
	nextItem(obj: CompositeFont): CompositeFont;

	/**
	 * Returns the CompositeFont with the index previous to the specified index.
	 * @param obj The index of the CompositeFont that follows the desired CompositeFont.
	 */
	previousItem(obj: CompositeFont): CompositeFont;

	/**
	 * Generates a string which, if executed, will return the CompositeFont.
	 */
	toSource(): string;

}

/**
 * A composite font entry.
 */
declare class CompositeFontEntry {
	/**
	 * The font applied to the CompositeFontEntry, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string;

	/**
	 * The amount of baseline shift.
	 */
	baselineShift: number;

	/**
	 * The characters that the set affects.
	 */
	customCharacters: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The name of the font style.
	 */
	fontStyle: string;

	/**
	 * The horizontal scaling applied to the CompositeFontEntry.
	 */
	horizontalScale: number;

	/**
	 * The unique ID of the CompositeFontEntry.
	 */
	readonly id: number;

	/**
	 * The index of the CompositeFontEntry within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * If true, the CompositeFontEntry is locked.
	 */
	readonly locked: boolean;

	/**
	 * The name of the CompositeFontEntry.
	 */
	name: string;

	/**
	 * The parent of the CompositeFontEntry (a CompositeFont).
	 */
	readonly parent: CompositeFont;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The size of the entry relative to the base entry. Note: The base entry cannot be modified.
	 */
	relativeSize: number;

	/**
	 * If true, scales characters from the center.
	 */
	scaleOption: boolean;

	/**
	 * The vertical scaling applied to the CompositeFontEntry.
	 */
	verticalScale: number;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CompositeFontEntry[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the CompositeFontEntry.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the CompositeFontEntry.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of composite font entries.
 */
declare class CompositeFontEntries {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the CompositeFontEntry with the specified index.
	 * @param index The index.
	 */
	[index: number]: CompositeFontEntry;

	/**
	 * Creates a new CompositeFontEntry.
	 * @param withProperties Initial values for properties of the new CompositeFontEntry
	 */
	add(withProperties: object): CompositeFontEntry;

	/**
	 * Returns any CompositeFontEntry in the collection.
	 */
	anyItem(): CompositeFontEntry;

	/**
	 * Displays the number of elements in the CompositeFontEntry.
	 */
	count(): number;

	/**
	 * Returns every CompositeFontEntry in the collection.
	 */
	everyItem(): CompositeFontEntry[];

	/**
	 * Returns the first CompositeFontEntry in the collection.
	 */
	firstItem(): CompositeFontEntry;

	/**
	 * Returns the CompositeFontEntry with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CompositeFontEntry;

	/**
	 * Returns the CompositeFontEntry with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CompositeFontEntry;

	/**
	 * Returns the CompositeFontEntry with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CompositeFontEntry;

	/**
	 * Returns the CompositeFontEntries within the specified range.
	 * @param from The CompositeFontEntry, index, or name at the beginning of the range.
	 * @param to The CompositeFontEntry, index, or name at the end of the range.
	 */
	itemByRange(from: CompositeFontEntry | number | string, to: CompositeFontEntry | number | string): CompositeFontEntry[];

	/**
	 * Returns the last CompositeFontEntry in the collection.
	 */
	lastItem(): CompositeFontEntry;

	/**
	 * Returns the middle CompositeFontEntry in the collection.
	 */
	middleItem(): CompositeFontEntry;

	/**
	 * Returns the CompositeFontEntry whose index follows the specified CompositeFontEntry in the collection.
	 * @param obj The CompositeFontEntry whose index comes before the desired CompositeFontEntry.
	 */
	nextItem(obj: CompositeFontEntry): CompositeFontEntry;

	/**
	 * Returns the CompositeFontEntry with the index previous to the specified index.
	 * @param obj The index of the CompositeFontEntry that follows the desired CompositeFontEntry.
	 */
	previousItem(obj: CompositeFontEntry): CompositeFontEntry;

	/**
	 * Generates a string which, if executed, will return the CompositeFontEntry.
	 */
	toSource(): string;

}

/**
 * A named grid.
 */
declare class NamedGrid {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * Default grid properties. Note: Applies to named, layout, and frame (story) grids.
	 */
	readonly gridData: GridDataInformation;

	/**
	 * The unique ID of the NamedGrid.
	 */
	readonly id: number;

	/**
	 * The index of the NamedGrid within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the NamedGrid.
	 */
	name: string;

	/**
	 * The parent of the NamedGrid (a Document or Application).
	 */
	readonly parent: any;

	/**
	 * A collection of preferences objects.
	 */
	readonly preferences: Preferences;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): NamedGrid[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the NamedGrid.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the NamedGrid.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of named grids.
 */
declare class NamedGrids {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the NamedGrid with the specified index.
	 * @param index The index.
	 */
	[index: number]: NamedGrid;

	/**
	 * Creates a new NamedGrid.
	 * @param withProperties Initial values for properties of the new NamedGrid
	 */
	add(withProperties: object): NamedGrid;

	/**
	 * Returns any NamedGrid in the collection.
	 */
	anyItem(): NamedGrid;

	/**
	 * Displays the number of elements in the NamedGrid.
	 */
	count(): number;

	/**
	 * Returns every NamedGrid in the collection.
	 */
	everyItem(): NamedGrid[];

	/**
	 * Returns the first NamedGrid in the collection.
	 */
	firstItem(): NamedGrid;

	/**
	 * Returns the NamedGrid with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): NamedGrid;

	/**
	 * Returns the NamedGrid with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): NamedGrid;

	/**
	 * Returns the NamedGrid with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): NamedGrid;

	/**
	 * Returns the NamedGrids within the specified range.
	 * @param from The NamedGrid, index, or name at the beginning of the range.
	 * @param to The NamedGrid, index, or name at the end of the range.
	 */
	itemByRange(from: NamedGrid | number | string, to: NamedGrid | number | string): NamedGrid[];

	/**
	 * Returns the last NamedGrid in the collection.
	 */
	lastItem(): NamedGrid;

	/**
	 * Returns the middle NamedGrid in the collection.
	 */
	middleItem(): NamedGrid;

	/**
	 * Returns the NamedGrid whose index follows the specified NamedGrid in the collection.
	 * @param obj The NamedGrid whose index comes before the desired NamedGrid.
	 */
	nextItem(obj: NamedGrid): NamedGrid;

	/**
	 * Returns the NamedGrid with the index previous to the specified index.
	 * @param obj The index of the NamedGrid that follows the desired NamedGrid.
	 */
	previousItem(obj: NamedGrid): NamedGrid;

	/**
	 * Generates a string which, if executed, will return the NamedGrid.
	 */
	toSource(): string;

}

/**
 * An indexing sort option.
 */
declare class IndexingSortOption {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The header type.
	 */
	headerType: HeaderTypes | NothingEnum;

	/**
	 * If true, include this indexing sort option.
	 */
	include: boolean;

	/**
	 * The index of the IndexingSortOption within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the IndexingSortOption.
	 */
	readonly name: string;

	/**
	 * The parent of the IndexingSortOption (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * Priority of this indexing sort option (shuffles prior entries down).
	 */
	priority: number;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): IndexingSortOption[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the IndexingSortOption.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of indexing sort options.
 */
declare class IndexingSortOptions {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the IndexingSortOption with the specified index.
	 * @param index The index.
	 */
	[index: number]: IndexingSortOption;

	/**
	 * Returns any IndexingSortOption in the collection.
	 */
	anyItem(): IndexingSortOption;

	/**
	 * Displays the number of elements in the IndexingSortOption.
	 */
	count(): number;

	/**
	 * Returns every IndexingSortOption in the collection.
	 */
	everyItem(): IndexingSortOption[];

	/**
	 * Returns the first IndexingSortOption in the collection.
	 */
	firstItem(): IndexingSortOption;

	/**
	 * Returns the IndexingSortOption with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): IndexingSortOption;

	/**
	 * Returns the IndexingSortOption with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): IndexingSortOption;

	/**
	 * Returns the IndexingSortOptions within the specified range.
	 * @param from The IndexingSortOption, index, or name at the beginning of the range.
	 * @param to The IndexingSortOption, index, or name at the end of the range.
	 */
	itemByRange(from: IndexingSortOption | number | string, to: IndexingSortOption | number | string): IndexingSortOption[];

	/**
	 * Returns the last IndexingSortOption in the collection.
	 */
	lastItem(): IndexingSortOption;

	/**
	 * Returns the middle IndexingSortOption in the collection.
	 */
	middleItem(): IndexingSortOption;

	/**
	 * Returns the IndexingSortOption whose index follows the specified IndexingSortOption in the collection.
	 * @param obj The IndexingSortOption whose index comes before the desired IndexingSortOption.
	 */
	nextItem(obj: IndexingSortOption): IndexingSortOption;

	/**
	 * Returns the IndexingSortOption with the index previous to the specified index.
	 * @param obj The index of the IndexingSortOption that follows the desired IndexingSortOption.
	 */
	previousItem(obj: IndexingSortOption): IndexingSortOption;

	/**
	 * Generates a string which, if executed, will return the IndexingSortOption.
	 */
	toSource(): string;

}

/**
 * Bullet character.
 */
declare class Bullet extends Preference {
	/**
	 * Font of the bullet character.
	 */
	bulletsFont: Font | string | AutoEnum;

	/**
	 * Font style of the bullet character.
	 */
	bulletsFontStyle: string | NothingEnum | AutoEnum;

	/**
	 * The type of bullet character.
	 */
	characterType: BulletCharacterType;

	/**
	 * The bullet character as a unicode ID or a glyph ID.
	 */
	characterValue: number;

}

/**
 * Numbering restart policy.
 */
declare class NumberingRestartPolicy extends Preference {
	/**
	 * The lower numbering level for a numbered list.
	 */
	numberingLowerLevel: number;

	/**
	 * The numbering restart policy to use.
	 */
	numberingPolicy: RestartPolicy;

	/**
	 * The upper numbering level for a numbered list.
	 */
	numberingUpperLevel: number;

}

/**
 * A numbered list.
 */
declare class NumberingList {
	/**
	 * if true, numbering will continue across book documents.
	 */
	continueNumbersAcrossDocuments: boolean;

	/**
	 * If true, numbering will continue across stories.
	 */
	continueNumbersAcrossStories: boolean;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the NumberingList.
	 */
	readonly id: number;

	/**
	 * The index of the NumberingList within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the NumberingList.
	 */
	name: string;

	/**
	 * The parent of the NumberingList (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): NumberingList[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Delete the NumberingList.
	 * @param replacingWith The NumberingList to apply in place of this one.
	 */
	remove(replacingWith: NumberingList): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the NumberingList.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of numbered lists.
 */
declare class NumberingLists {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the NumberingList with the specified index.
	 * @param index The index.
	 */
	[index: number]: NumberingList;

	/**
	 * Create a new list style.
	 * @param name Name
	 * @param continueNumbersAcrossStories If true, numbering will continue across stories.
	 * @param continueNumbersAcrossDocuments If true, numbering will continue across book documents.
	 * @param withProperties Initial values for properties of the new NumberingList
	 */
	add(name: string, continueNumbersAcrossStories: boolean, continueNumbersAcrossDocuments: boolean, withProperties: object): NumberingList;

	/**
	 * Returns any NumberingList in the collection.
	 */
	anyItem(): NumberingList;

	/**
	 * Displays the number of elements in the NumberingList.
	 */
	count(): number;

	/**
	 * Returns every NumberingList in the collection.
	 */
	everyItem(): NumberingList[];

	/**
	 * Returns the first NumberingList in the collection.
	 */
	firstItem(): NumberingList;

	/**
	 * Returns the NumberingList with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): NumberingList;

	/**
	 * Returns the NumberingList with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): NumberingList;

	/**
	 * Returns the NumberingList with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): NumberingList;

	/**
	 * Returns the NumberingLists within the specified range.
	 * @param from The NumberingList, index, or name at the beginning of the range.
	 * @param to The NumberingList, index, or name at the end of the range.
	 */
	itemByRange(from: NumberingList | number | string, to: NumberingList | number | string): NumberingList[];

	/**
	 * Returns the last NumberingList in the collection.
	 */
	lastItem(): NumberingList;

	/**
	 * Returns the middle NumberingList in the collection.
	 */
	middleItem(): NumberingList;

	/**
	 * Returns the NumberingList whose index follows the specified NumberingList in the collection.
	 * @param obj The NumberingList whose index comes before the desired NumberingList.
	 */
	nextItem(obj: NumberingList): NumberingList;

	/**
	 * Returns the NumberingList with the index previous to the specified index.
	 * @param obj The index of the NumberingList that follows the desired NumberingList.
	 */
	previousItem(obj: NumberingList): NumberingList;

	/**
	 * Generates a string which, if executed, will return the NumberingList.
	 */
	toSource(): string;

}

/**
 * An object style group.
 */
declare class ObjectStyleGroup {
	/**
	 * All object styles contained by the ObjectStyleGroup.
	 */
	readonly allObjectStyles: ObjectStyle[];

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the ObjectStyleGroup.
	 */
	readonly id: number;

	/**
	 * The index of the ObjectStyleGroup within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the ObjectStyleGroup.
	 */
	name: string;

	/**
	 * A collection of object style groups.
	 */
	readonly objectStyleGroups: ObjectStyleGroups;

	/**
	 * A collection of object styles.
	 */
	readonly objectStyles: ObjectStyles;

	/**
	 * The parent of the ObjectStyleGroup (a Document, Application or ObjectStyleGroup).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the ObjectStyleGroup.
	 */
	duplicate(): ObjectStyleGroup;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ObjectStyleGroup[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Moves the ObjectStyleGroup to the specified location.
	 * @param to The new location relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the to parameter is before or after.
	 */
	move(to: LocationOptions, reference: ObjectStyle | ObjectStyleGroup | Document | Application): ObjectStyleGroup;

	/**
	 * Deletes the ObjectStyleGroup.
	 * @param replacingWith The ObjectStyleGroup to apply in place of the deleted ObjectStyleGroup.
	 */
	remove(replacingWith: ObjectStyle): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the ObjectStyleGroup.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of object style groups.
 */
declare class ObjectStyleGroups {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ObjectStyleGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: ObjectStyleGroup;

	/**
	 * Creates a new ObjectStyleGroup.
	 * @param withProperties Initial values for properties of the new ObjectStyleGroup
	 */
	add(withProperties: object): ObjectStyleGroup;

	/**
	 * Returns any ObjectStyleGroup in the collection.
	 */
	anyItem(): ObjectStyleGroup;

	/**
	 * Displays the number of elements in the ObjectStyleGroup.
	 */
	count(): number;

	/**
	 * Returns every ObjectStyleGroup in the collection.
	 */
	everyItem(): ObjectStyleGroup[];

	/**
	 * Returns the first ObjectStyleGroup in the collection.
	 */
	firstItem(): ObjectStyleGroup;

	/**
	 * Returns the ObjectStyleGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ObjectStyleGroup;

	/**
	 * Returns the ObjectStyleGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ObjectStyleGroup;

	/**
	 * Returns the ObjectStyleGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ObjectStyleGroup;

	/**
	 * Returns the ObjectStyleGroups within the specified range.
	 * @param from The ObjectStyleGroup, index, or name at the beginning of the range.
	 * @param to The ObjectStyleGroup, index, or name at the end of the range.
	 */
	itemByRange(from: ObjectStyleGroup | number | string, to: ObjectStyleGroup | number | string): ObjectStyleGroup[];

	/**
	 * Returns the last ObjectStyleGroup in the collection.
	 */
	lastItem(): ObjectStyleGroup;

	/**
	 * Returns the middle ObjectStyleGroup in the collection.
	 */
	middleItem(): ObjectStyleGroup;

	/**
	 * Returns the ObjectStyleGroup whose index follows the specified ObjectStyleGroup in the collection.
	 * @param obj The ObjectStyleGroup whose index comes before the desired ObjectStyleGroup.
	 */
	nextItem(obj: ObjectStyleGroup): ObjectStyleGroup;

	/**
	 * Returns the ObjectStyleGroup with the index previous to the specified index.
	 * @param obj The index of the ObjectStyleGroup that follows the desired ObjectStyleGroup.
	 */
	previousItem(obj: ObjectStyleGroup): ObjectStyleGroup;

	/**
	 * Generates a string which, if executed, will return the ObjectStyleGroup.
	 */
	toSource(): string;

}

/**
 * A condition for conditional text.
 */
declare class Condition {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the Condition.
	 */
	readonly id: number;

	/**
	 * The index of the Condition within its containing object.
	 */
	readonly index: number;

	/**
	 * The color for the condition indicator; specified either as an array of three doubles representing RGB values in the range 0 to 255, or as a UI color.
	 */
	indicatorColor: [number, number, number] | UIColors;

	/**
	 * The condition indicator method.
	 */
	indicatorMethod: ConditionIndicatorMethod;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the Condition.
	 */
	name: string;

	/**
	 * The parent of the Condition (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The condition underline indicator appearance.
	 */
	underlineIndicatorAppearance: ConditionUnderlineIndicatorAppearance;

	/**
	 * If true, the Condition is visible.
	 */
	visible: boolean;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Condition[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Delete the condition.
	 * @param replacingWith The condition to apply to text in place of the deleted condition. By default, no condition is applied in place of the deleted condition.
	 */
	remove(replacingWith: Condition | string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Condition.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of conditions for conditional text.
 */
declare class Conditions {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Condition with the specified index.
	 * @param index The index.
	 */
	[index: number]: Condition;

	/**
	 * Creates a new Condition.
	 * @param withProperties Initial values for properties of the new Condition
	 */
	add(withProperties: object): Condition;

	/**
	 * Returns any Condition in the collection.
	 */
	anyItem(): Condition;

	/**
	 * Displays the number of elements in the Condition.
	 */
	count(): number;

	/**
	 * Returns every Condition in the collection.
	 */
	everyItem(): Condition[];

	/**
	 * Returns the first Condition in the collection.
	 */
	firstItem(): Condition;

	/**
	 * Returns the Condition with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Condition;

	/**
	 * Returns the Condition with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Condition;

	/**
	 * Returns the Condition with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Condition;

	/**
	 * Returns the Conditions within the specified range.
	 * @param from The Condition, index, or name at the beginning of the range.
	 * @param to The Condition, index, or name at the end of the range.
	 */
	itemByRange(from: Condition | number | string, to: Condition | number | string): Condition[];

	/**
	 * Returns the last Condition in the collection.
	 */
	lastItem(): Condition;

	/**
	 * Returns the middle Condition in the collection.
	 */
	middleItem(): Condition;

	/**
	 * Returns the Condition whose index follows the specified Condition in the collection.
	 * @param obj The Condition whose index comes before the desired Condition.
	 */
	nextItem(obj: Condition): Condition;

	/**
	 * Returns the Condition with the index previous to the specified index.
	 * @param obj The index of the Condition that follows the desired Condition.
	 */
	previousItem(obj: Condition): Condition;

	/**
	 * Generates a string which, if executed, will return the Condition.
	 */
	toSource(): string;

}

/**
 * A hidden text object.
 */
declare class HiddenText {
	/**
	 * A collection of characters.
	 */
	readonly characters: Characters;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the HiddenText.
	 */
	readonly id: number;

	/**
	 * The index of the HiddenText within its containing object.
	 */
	readonly index: number;

	/**
	 * A collection of insertion points.
	 */
	readonly insertionPoints: InsertionPoints;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * A collection of lines.
	 */
	readonly lines: Lines;

	/**
	 * The name of the HiddenText; this is an alias to the HiddenText's label property.
	 */
	name: string;

	/**
	 * A collection of paragraphs.
	 */
	readonly paragraphs: Paragraphs;

	/**
	 * The parent of the HiddenText (a Story, XmlStory, TextFrame, EndnoteTextFrame, InsertionPoint, Note, Cell or Footnote).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	readonly storyOffset: InsertionPoint;

	/**
	 * A collection of text columns.
	 */
	readonly textColumns: TextColumns;

	/**
	 * A collection of text style ranges.
	 */
	readonly textStyleRanges: TextStyleRanges;

	/**
	 * A collection of text objects.
	 */
	readonly texts: Texts;

	/**
	 * A collection of words.
	 */
	readonly words: Words;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HiddenText[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the HiddenText.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of hidden text objects.
 */
declare class HiddenTexts {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the HiddenText with the specified index.
	 * @param index The index.
	 */
	[index: number]: HiddenText;

	/**
	 * Returns any HiddenText in the collection.
	 */
	anyItem(): HiddenText;

	/**
	 * Displays the number of elements in the HiddenText.
	 */
	count(): number;

	/**
	 * Returns every HiddenText in the collection.
	 */
	everyItem(): HiddenText[];

	/**
	 * Returns the first HiddenText in the collection.
	 */
	firstItem(): HiddenText;

	/**
	 * Returns the HiddenText with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HiddenText;

	/**
	 * Returns the HiddenText with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HiddenText;

	/**
	 * Returns the HiddenText with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HiddenText;

	/**
	 * Returns the HiddenTexts within the specified range.
	 * @param from The HiddenText, index, or name at the beginning of the range.
	 * @param to The HiddenText, index, or name at the end of the range.
	 */
	itemByRange(from: HiddenText | number | string, to: HiddenText | number | string): HiddenText[];

	/**
	 * Returns the last HiddenText in the collection.
	 */
	lastItem(): HiddenText;

	/**
	 * Returns the middle HiddenText in the collection.
	 */
	middleItem(): HiddenText;

	/**
	 * Returns the HiddenText whose index follows the specified HiddenText in the collection.
	 * @param obj The HiddenText whose index comes before the desired HiddenText.
	 */
	nextItem(obj: HiddenText): HiddenText;

	/**
	 * Returns the HiddenText with the index previous to the specified index.
	 * @param obj The index of the HiddenText that follows the desired HiddenText.
	 */
	previousItem(obj: HiddenText): HiddenText;

	/**
	 * Generates a string which, if executed, will return the HiddenText.
	 */
	toSource(): string;

}

/**
 * A condition set for conditional text.
 */
declare class ConditionSet {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the ConditionSet.
	 */
	readonly id: number;

	/**
	 * The index of the ConditionSet within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the ConditionSet.
	 */
	name: string;

	/**
	 * The parent of the ConditionSet (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * List of conditions and visibilities in the set. Can return: Ordered array containing condition:Condition, visibility:Boolean.
	 */
	setConditions: any[];

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ConditionSet[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Redefine a condition set with the currently existing conditions and visibilities.
	 */
	redefine(): void;

	/**
	 * Delete a condition set for conditional text.
	 * @param replacingWith The condition set to apply to the text in place of the deleted condition set. By default, no condition set is applied in place of the deleted condition set.
	 */
	remove(replacingWith: ConditionSet | string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the ConditionSet.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of condition sets for conditional text.
 */
declare class ConditionSets {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ConditionSet with the specified index.
	 * @param index The index.
	 */
	[index: number]: ConditionSet;

	/**
	 * Creates a new ConditionSet.
	 * @param withProperties Initial values for properties of the new ConditionSet
	 */
	add(withProperties: object): ConditionSet;

	/**
	 * Returns any ConditionSet in the collection.
	 */
	anyItem(): ConditionSet;

	/**
	 * Displays the number of elements in the ConditionSet.
	 */
	count(): number;

	/**
	 * Returns every ConditionSet in the collection.
	 */
	everyItem(): ConditionSet[];

	/**
	 * Returns the first ConditionSet in the collection.
	 */
	firstItem(): ConditionSet;

	/**
	 * Returns the ConditionSet with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ConditionSet;

	/**
	 * Returns the ConditionSet with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ConditionSet;

	/**
	 * Returns the ConditionSet with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ConditionSet;

	/**
	 * Returns the ConditionSets within the specified range.
	 * @param from The ConditionSet, index, or name at the beginning of the range.
	 * @param to The ConditionSet, index, or name at the end of the range.
	 */
	itemByRange(from: ConditionSet | number | string, to: ConditionSet | number | string): ConditionSet[];

	/**
	 * Returns the last ConditionSet in the collection.
	 */
	lastItem(): ConditionSet;

	/**
	 * Returns the middle ConditionSet in the collection.
	 */
	middleItem(): ConditionSet;

	/**
	 * Returns the ConditionSet whose index follows the specified ConditionSet in the collection.
	 * @param obj The ConditionSet whose index comes before the desired ConditionSet.
	 */
	nextItem(obj: ConditionSet): ConditionSet;

	/**
	 * Returns the ConditionSet with the index previous to the specified index.
	 * @param obj The index of the ConditionSet that follows the desired ConditionSet.
	 */
	previousItem(obj: ConditionSet): ConditionSet;

	/**
	 * Generates a string which, if executed, will return the ConditionSet.
	 */
	toSource(): string;

}

/**
 * Pages panel.
 */
declare class PagesPanel extends Panel {
	/**
	 * Page icon size.
	 */
	iconSize: IconSizes;

	/**
	 * Master page icon size.
	 */
	masterIconSize: IconSizes;

	/**
	 * If true, master page icons will be arranged vertically around the binding spine. If false, master page icons will be arranged horizontally.
	 */
	masterVerticalView: boolean;

	/**
	 * If true, display thumbnails of the pages in the master pages area of the panel.
	 */
	mastersThumbnails: boolean;

	/**
	 * If true, the pages area of the panel will be drawn above the master pages area.
	 */
	pagesOnTop: boolean;

	/**
	 * If true, display thumbnails of the pages in the pages area of the panel.
	 */
	pagesThumbnails: boolean;

	/**
	 * View setting for how to arrange the pages in the page section of the panel.
	 */
	pagesViewSetting: PageViewOptions;

	/**
	 * Specifies the behavior of the document and master page areas of the panel when the panel is resized.
	 */
	resizeBehavior: PanelLayoutResize;

	/**
	 * If true, a rotation icon will display next to spreads with non-zero rotation applied.
	 */
	rotationIcons: boolean;

	/**
	 * If true, a page transitions icon will display next to spreads with page transitions applied.
	 */
	transitionsIcons: boolean;

	/**
	 * If true, a transparency icon will display next to spreads with elements having transparency applied.
	 */
	transparencyIcons: boolean;

}

/**
 * Library panel
 */
declare class LibraryPanel extends Panel {
	/**
	 * The library displayed in this LibraryPanel
	 */
	readonly associatedLibrary: Library;

	/**
	 * The selected object(s).
	 */
	selection: object[] | object | NothingEnum;

	/**
	 * The sort order of the assets in the LibraryPanel
	 */
	sortOrder: SortAssets;

	/**
	 * LibraryPanel view
	 */
	view: LibraryPanelViews;

	/**
	 * Selects the specified object(s).
	 * @param selectableItems The objects to select.
	 * @param existingSelection The selection status of the LibraryPanel in relation to previously selected objects.
	 */
	select(selectableItems: object | object[] | NothingEnum | SelectAll, existingSelection?: SelectionOptions): void;

	/**
	 * Show all assets
	 */
	showAll(): void;

}

/**
 * A menu action.
 */
declare class MenuAction {
	/**
	 * Dispatched after the MenuAction is invoked. This event does not bubble. This event is not cancelable.
	 */
	static readonly AFTER_INVOKE: string;

	/**
	 * Dispatched before the MenuAction is invoked. This event does not bubble. This event is cancelable.
	 */
	static readonly BEFORE_INVOKE: string;

	/**
	 * The menu action area.
	 */
	readonly area: string;

	/**
	 * If true, the menu item associated with the menu action is checked.
	 */
	readonly checked: boolean;

	/**
	 * If true, the MenuAction is enabled.
	 */
	readonly enabled: boolean;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the MenuAction.
	 */
	readonly id: number;

	/**
	 * The index of the MenuAction within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the MenuAction.
	 */
	readonly name: string;

	/**
	 * The parent of the MenuAction (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The name of the MenuAction for display in the user interface. The title includes any ampersand characters (&), which are used to tell the Windows OS to underline the following character in the name for use with the Alt key to navigate to a menu item. Double ampersands are used to display an actual ampersand character in the name. The Mac OS ignores and removes the extra ampersand characters.
	 */
	readonly title: string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): MenuAction[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Invoke the action.
	 */
	invoke(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the MenuAction.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of menu actions.
 */
declare class MenuActions {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MenuAction with the specified index.
	 * @param index The index.
	 */
	[index: number]: MenuAction;

	/**
	 * Returns any MenuAction in the collection.
	 */
	anyItem(): MenuAction;

	/**
	 * Displays the number of elements in the MenuAction.
	 */
	count(): number;

	/**
	 * Returns every MenuAction in the collection.
	 */
	everyItem(): MenuAction[];

	/**
	 * Returns the first MenuAction in the collection.
	 */
	firstItem(): MenuAction;

	/**
	 * Returns the MenuAction with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MenuAction;

	/**
	 * Returns the MenuAction with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MenuAction;

	/**
	 * Returns the MenuAction with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MenuAction;

	/**
	 * Returns the MenuActions within the specified range.
	 * @param from The MenuAction, index, or name at the beginning of the range.
	 * @param to The MenuAction, index, or name at the end of the range.
	 */
	itemByRange(from: MenuAction | number | string, to: MenuAction | number | string): MenuAction[];

	/**
	 * Returns the last MenuAction in the collection.
	 */
	lastItem(): MenuAction;

	/**
	 * Returns the middle MenuAction in the collection.
	 */
	middleItem(): MenuAction;

	/**
	 * Returns the MenuAction whose index follows the specified MenuAction in the collection.
	 * @param obj The MenuAction whose index comes before the desired MenuAction.
	 */
	nextItem(obj: MenuAction): MenuAction;

	/**
	 * Returns the MenuAction with the index previous to the specified index.
	 * @param obj The index of the MenuAction that follows the desired MenuAction.
	 */
	previousItem(obj: MenuAction): MenuAction;

	/**
	 * Generates a string which, if executed, will return the MenuAction.
	 */
	toSource(): string;

}

/**
 * A script menu action.
 */
declare class ScriptMenuAction extends MenuAction {
	/**
	 * Dispatched before the ScriptMenuAction is displayed. This event does not bubble. This event is not cancelable.
	 */
	static readonly BEFORE_DISPLAY: string;

	/**
	 * Dispatched when the ScriptMenuAction is invoked. This event does not bubble. This event is not cancelable.
	 */
	static readonly ON_INVOKE: string;

	/**
	 * Deletes the ScriptMenuAction.
	 */
	remove(): void;

}

/**
 * A collection of script menu actions.
 */
declare class ScriptMenuActions {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ScriptMenuAction with the specified index.
	 * @param index The index.
	 */
	[index: number]: ScriptMenuAction;

	/**
	 * Creates a new action.
	 * @param title The name of the ScriptMenuAction for display in the user interface. The title includes any ampersand characters (&), which are used to tell the Windows OS to underline the following character in the name for use with the Alt key to navigate to a menu item. Double ampersands are used to display an actual ampersand character in the name. The Mac OS ignores and removes the extra ampersand characters.
	 * @param withProperties Initial values for properties of the new ScriptMenuAction
	 */
	add(title: string, withProperties: object): ScriptMenuAction;

	/**
	 * Returns any ScriptMenuAction in the collection.
	 */
	anyItem(): ScriptMenuAction;

	/**
	 * Displays the number of elements in the ScriptMenuAction.
	 */
	count(): number;

	/**
	 * Returns every ScriptMenuAction in the collection.
	 */
	everyItem(): ScriptMenuAction[];

	/**
	 * Returns the first ScriptMenuAction in the collection.
	 */
	firstItem(): ScriptMenuAction;

	/**
	 * Returns the ScriptMenuAction with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ScriptMenuAction;

	/**
	 * Returns the ScriptMenuAction with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ScriptMenuAction;

	/**
	 * Returns the ScriptMenuAction with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ScriptMenuAction;

	/**
	 * Returns the ScriptMenuActions within the specified range.
	 * @param from The ScriptMenuAction, index, or name at the beginning of the range.
	 * @param to The ScriptMenuAction, index, or name at the end of the range.
	 */
	itemByRange(from: ScriptMenuAction | number | string, to: ScriptMenuAction | number | string): ScriptMenuAction[];

	/**
	 * Returns the last ScriptMenuAction in the collection.
	 */
	lastItem(): ScriptMenuAction;

	/**
	 * Returns the middle ScriptMenuAction in the collection.
	 */
	middleItem(): ScriptMenuAction;

	/**
	 * Returns the ScriptMenuAction whose index follows the specified ScriptMenuAction in the collection.
	 * @param obj The ScriptMenuAction whose index comes before the desired ScriptMenuAction.
	 */
	nextItem(obj: ScriptMenuAction): ScriptMenuAction;

	/**
	 * Returns the ScriptMenuAction with the index previous to the specified index.
	 * @param obj The index of the ScriptMenuAction that follows the desired ScriptMenuAction.
	 */
	previousItem(obj: ScriptMenuAction): ScriptMenuAction;

	/**
	 * Generates a string which, if executed, will return the ScriptMenuAction.
	 */
	toSource(): string;

}

/**
 * A menu.
 */
declare class Menu {
	/**
	 * Dispatched before the Menu is displayed. This event does not bubble. This event is not cancelable.
	 */
	static readonly BEFORE_DISPLAY: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the Menu within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A collection of menu elements.
	 */
	readonly menuElements: MenuElements;

	/**
	 * A collection of menu items.
	 */
	readonly menuItems: MenuItems;

	/**
	 * A collection of menu separators.
	 */
	readonly menuSeparators: MenuSeparators;

	/**
	 * The name of the Menu.
	 */
	readonly name: string;

	/**
	 * The parent of the Menu (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of submenus.
	 */
	readonly submenus: Submenus;

	/**
	 * The name of the Menu for display in the user interface. The title includes any ampersand characters (&), which are used to tell the Windows OS to underline the following character in the name for use with the Alt key to navigate to a menu item. Double ampersands are used to display an actual ampersand character in the name. The Mac OS ignores and removes the extra ampersand characters.
	 */
	readonly title: string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Menu[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Menu.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of menus.
 */
declare class Menus {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Menu with the specified index.
	 * @param index The index.
	 */
	[index: number]: Menu;

	/**
	 * Returns any Menu in the collection.
	 */
	anyItem(): Menu;

	/**
	 * Displays the number of elements in the Menu.
	 */
	count(): number;

	/**
	 * Returns every Menu in the collection.
	 */
	everyItem(): Menu[];

	/**
	 * Returns the first Menu in the collection.
	 */
	firstItem(): Menu;

	/**
	 * Returns the Menu with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Menu;

	/**
	 * Returns the Menu with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Menu;

	/**
	 * Returns the Menus within the specified range.
	 * @param from The Menu, index, or name at the beginning of the range.
	 * @param to The Menu, index, or name at the end of the range.
	 */
	itemByRange(from: Menu | number | string, to: Menu | number | string): Menu[];

	/**
	 * Returns the last Menu in the collection.
	 */
	lastItem(): Menu;

	/**
	 * Returns the middle Menu in the collection.
	 */
	middleItem(): Menu;

	/**
	 * Returns the Menu whose index follows the specified Menu in the collection.
	 * @param obj The Menu whose index comes before the desired Menu.
	 */
	nextItem(obj: Menu): Menu;

	/**
	 * Returns the Menu with the index previous to the specified index.
	 * @param obj The index of the Menu that follows the desired Menu.
	 */
	previousItem(obj: Menu): Menu;

	/**
	 * Generates a string which, if executed, will return the Menu.
	 */
	toSource(): string;

}

/**
 * A menu elements
 */
declare class MenuElement {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the MenuElement within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the MenuElement (a Menu or Submenu).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): MenuElement[];

	/**
	 * Deletes the MenuElement.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the MenuElement.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of menu elements.
 */
declare class MenuElements {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MenuElement with the specified index.
	 * @param index The index.
	 */
	[index: number]: MenuElement;

	/**
	 * Returns any MenuElement in the collection.
	 */
	anyItem(): MenuElement;

	/**
	 * Displays the number of elements in the MenuElement.
	 */
	count(): number;

	/**
	 * Returns every MenuElement in the collection.
	 */
	everyItem(): MenuElement[];

	/**
	 * Returns the first MenuElement in the collection.
	 */
	firstItem(): MenuElement;

	/**
	 * Returns the MenuElement with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MenuElement;

	/**
	 * Returns the MenuElements within the specified range.
	 * @param from The MenuElement, index, or name at the beginning of the range.
	 * @param to The MenuElement, index, or name at the end of the range.
	 */
	itemByRange(from: MenuElement | number | string, to: MenuElement | number | string): MenuElement[];

	/**
	 * Returns the last MenuElement in the collection.
	 */
	lastItem(): MenuElement;

	/**
	 * Returns the middle MenuElement in the collection.
	 */
	middleItem(): MenuElement;

	/**
	 * Returns the MenuElement whose index follows the specified MenuElement in the collection.
	 * @param obj The MenuElement whose index comes before the desired MenuElement.
	 */
	nextItem(obj: MenuElement): MenuElement;

	/**
	 * Returns the MenuElement with the index previous to the specified index.
	 * @param obj The index of the MenuElement that follows the desired MenuElement.
	 */
	previousItem(obj: MenuElement): MenuElement;

	/**
	 * Generates a string which, if executed, will return the MenuElement.
	 */
	toSource(): string;

}

/**
 * A submenu.
 */
declare class Submenu extends MenuElement {
	/**
	 * Dispatched before the Submenu is displayed. This event does not bubble. This event is not cancelable.
	 */
	static readonly BEFORE_DISPLAY: string;

	/**
	 * A collection of menu elements.
	 */
	readonly menuElements: MenuElements;

	/**
	 * A collection of menu items.
	 */
	readonly menuItems: MenuItems;

	/**
	 * A collection of menu separators.
	 */
	readonly menuSeparators: MenuSeparators;

	/**
	 * The name of the Submenu.
	 */
	readonly name: string;

	/**
	 * A collection of submenus.
	 */
	readonly submenus: Submenus;

	/**
	 * The name of the Submenu for display in the user interface. The title includes any ampersand characters (&), which are used to tell the Windows OS to underline the following character in the name for use with the Alt key to navigate to a menu item. Double ampersands are used to display an actual ampersand character in the name. The Mac OS ignores and removes the extra ampersand characters.
	 */
	readonly title: string;

}

/**
 * A collection of submenus.
 */
declare class Submenus {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Submenu with the specified index.
	 * @param index The index.
	 */
	[index: number]: Submenu;

	/**
	 * Creates a new submenu.
	 * @param title The name of the Submenu for display in the user interface. The title includes any ampersand characters (&), which are used to tell the Windows OS to underline the following character in the name for use with the Alt key to navigate to a menu item. Double ampersands are used to display an actual ampersand character in the name. The Mac OS ignores and removes the extra ampersand characters.
	 * @param at The location of the submenu relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the at parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new Submenu
	 */
	add(title: string, at?: LocationOptions, reference?: MenuElement, withProperties?: object): Submenu;

	/**
	 * Returns any Submenu in the collection.
	 */
	anyItem(): Submenu;

	/**
	 * Displays the number of elements in the Submenu.
	 */
	count(): number;

	/**
	 * Returns every Submenu in the collection.
	 */
	everyItem(): Submenu[];

	/**
	 * Returns the first Submenu in the collection.
	 */
	firstItem(): Submenu;

	/**
	 * Returns the Submenu with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Submenu;

	/**
	 * Returns the Submenu with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Submenu;

	/**
	 * Returns the Submenus within the specified range.
	 * @param from The Submenu, index, or name at the beginning of the range.
	 * @param to The Submenu, index, or name at the end of the range.
	 */
	itemByRange(from: Submenu | number | string, to: Submenu | number | string): Submenu[];

	/**
	 * Returns the last Submenu in the collection.
	 */
	lastItem(): Submenu;

	/**
	 * Returns the middle Submenu in the collection.
	 */
	middleItem(): Submenu;

	/**
	 * Returns the Submenu whose index follows the specified Submenu in the collection.
	 * @param obj The Submenu whose index comes before the desired Submenu.
	 */
	nextItem(obj: Submenu): Submenu;

	/**
	 * Returns the Submenu with the index previous to the specified index.
	 * @param obj The index of the Submenu that follows the desired Submenu.
	 */
	previousItem(obj: Submenu): Submenu;

	/**
	 * Generates a string which, if executed, will return the Submenu.
	 */
	toSource(): string;

}

/**
 * A menu item.
 */
declare class MenuItem extends MenuElement {
	/**
	 * The menu action that implements the menu item.
	 */
	readonly associatedMenuAction: MenuAction;

	/**
	 * If true, the menu item associated with the menu action is checked.
	 */
	readonly checked: boolean;

	/**
	 * If true, the MenuItem is enabled.
	 */
	readonly enabled: boolean;

	/**
	 * The unique ID of the MenuItem.
	 */
	readonly id: number;

	/**
	 * The name of the MenuItem.
	 */
	readonly name: string;

	/**
	 * The name of the MenuItem for display in the user interface. The title includes any ampersand characters (&), which are used to tell the Windows OS to underline the following character in the name for use with the Alt key to navigate to a menu item. Double ampersands are used to display an actual ampersand character in the name. The Mac OS ignores and removes the extra ampersand characters.
	 */
	readonly title: string;

	/**
	 * Selects the MenuItem.
	 */
	select(): void;

}

/**
 * A collection of menu items.
 */
declare class MenuItems {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MenuItem with the specified index.
	 * @param index The index.
	 */
	[index: number]: MenuItem;

	/**
	 * Creates a new menu item.
	 * @param associatedMenuAction The menu action that implements themenu item.
	 * @param at The location of the menu item relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the at parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new MenuItem
	 */
	add(associatedMenuAction: MenuAction, at?: LocationOptions, reference?: MenuElement, withProperties?: object): MenuItem;

	/**
	 * Returns any MenuItem in the collection.
	 */
	anyItem(): MenuItem;

	/**
	 * Displays the number of elements in the MenuItem.
	 */
	count(): number;

	/**
	 * Returns every MenuItem in the collection.
	 */
	everyItem(): MenuItem[];

	/**
	 * Returns the first MenuItem in the collection.
	 */
	firstItem(): MenuItem;

	/**
	 * Returns the MenuItem with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MenuItem;

	/**
	 * Returns the MenuItem with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MenuItem;

	/**
	 * Returns the MenuItem with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MenuItem;

	/**
	 * Returns the MenuItems within the specified range.
	 * @param from The MenuItem, index, or name at the beginning of the range.
	 * @param to The MenuItem, index, or name at the end of the range.
	 */
	itemByRange(from: MenuItem | number | string, to: MenuItem | number | string): MenuItem[];

	/**
	 * Returns the last MenuItem in the collection.
	 */
	lastItem(): MenuItem;

	/**
	 * Returns the middle MenuItem in the collection.
	 */
	middleItem(): MenuItem;

	/**
	 * Returns the MenuItem whose index follows the specified MenuItem in the collection.
	 * @param obj The MenuItem whose index comes before the desired MenuItem.
	 */
	nextItem(obj: MenuItem): MenuItem;

	/**
	 * Returns the MenuItem with the index previous to the specified index.
	 * @param obj The index of the MenuItem that follows the desired MenuItem.
	 */
	previousItem(obj: MenuItem): MenuItem;

	/**
	 * Generates a string which, if executed, will return the MenuItem.
	 */
	toSource(): string;

}

/**
 * A menu separator.
 */
declare class MenuSeparator extends MenuElement {
	/**
	 * The unique ID of the MenuSeparator.
	 */
	readonly id: number;

}

/**
 * A collection of menu separators.
 */
declare class MenuSeparators {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MenuSeparator with the specified index.
	 * @param index The index.
	 */
	[index: number]: MenuSeparator;

	/**
	 * Creates a new menu separator.
	 * @param at The location of the menu separator relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the at parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new MenuSeparator
	 */
	add(at?: LocationOptions, reference?: MenuElement, withProperties?: object): MenuSeparator;

	/**
	 * Returns any MenuSeparator in the collection.
	 */
	anyItem(): MenuSeparator;

	/**
	 * Displays the number of elements in the MenuSeparator.
	 */
	count(): number;

	/**
	 * Returns every MenuSeparator in the collection.
	 */
	everyItem(): MenuSeparator[];

	/**
	 * Returns the first MenuSeparator in the collection.
	 */
	firstItem(): MenuSeparator;

	/**
	 * Returns the MenuSeparator with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MenuSeparator;

	/**
	 * Returns the MenuSeparator with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MenuSeparator;

	/**
	 * Returns the MenuSeparators within the specified range.
	 * @param from The MenuSeparator, index, or name at the beginning of the range.
	 * @param to The MenuSeparator, index, or name at the end of the range.
	 */
	itemByRange(from: MenuSeparator | number | string, to: MenuSeparator | number | string): MenuSeparator[];

	/**
	 * Returns the last MenuSeparator in the collection.
	 */
	lastItem(): MenuSeparator;

	/**
	 * Returns the middle MenuSeparator in the collection.
	 */
	middleItem(): MenuSeparator;

	/**
	 * Returns the MenuSeparator whose index follows the specified MenuSeparator in the collection.
	 * @param obj The MenuSeparator whose index comes before the desired MenuSeparator.
	 */
	nextItem(obj: MenuSeparator): MenuSeparator;

	/**
	 * Returns the MenuSeparator with the index previous to the specified index.
	 * @param obj The index of the MenuSeparator that follows the desired MenuSeparator.
	 */
	previousItem(obj: MenuSeparator): MenuSeparator;

	/**
	 * Generates a string which, if executed, will return the MenuSeparator.
	 */
	toSource(): string;

}

/**
 * A panel (possibly within a panel group).
 */
declare class Panel {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the Panel within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the Panel.
	 */
	readonly name: string;

	/**
	 * The parent of the Panel (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * If true, the panel is visible.
	 */
	visible: boolean;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Panel[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Panel.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of panels.
 */
declare class Panels {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Panel with the specified index.
	 * @param index The index.
	 */
	[index: number]: Panel;

	/**
	 * Returns any Panel in the collection.
	 */
	anyItem(): Panel;

	/**
	 * Displays the number of elements in the Panel.
	 */
	count(): number;

	/**
	 * Returns every Panel in the collection.
	 */
	everyItem(): Panel[];

	/**
	 * Returns the first Panel in the collection.
	 */
	firstItem(): Panel;

	/**
	 * Returns the Panel with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Panel;

	/**
	 * Returns the Panel with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Panel;

	/**
	 * Returns the Panels within the specified range.
	 * @param from The Panel, index, or name at the beginning of the range.
	 * @param to The Panel, index, or name at the end of the range.
	 */
	itemByRange(from: Panel | number | string, to: Panel | number | string): Panel[];

	/**
	 * Returns the last Panel in the collection.
	 */
	lastItem(): Panel;

	/**
	 * Returns the middle Panel in the collection.
	 */
	middleItem(): Panel;

	/**
	 * Returns the Panel whose index follows the specified Panel in the collection.
	 * @param obj The Panel whose index comes before the desired Panel.
	 */
	nextItem(obj: Panel): Panel;

	/**
	 * Returns the Panel with the index previous to the specified index.
	 * @param obj The index of the Panel that follows the desired Panel.
	 */
	previousItem(obj: Panel): Panel;

	/**
	 * Generates a string which, if executed, will return the Panel.
	 */
	toSource(): string;

}

/**
 * A dialog.
 */
declare class Dialog {
	/**
	 * If true, creates a Cancel button in the dialog that allows users to close the dialog without saving any selections. If false, the dialog contains an OK button but no Cancel button.
	 */
	canCancel: boolean;

	/**
	 * A collection of dialog columns.
	 */
	readonly dialogColumns: DialogColumns;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the Dialog.
	 */
	readonly id: number;

	/**
	 * The index of the Dialog within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the Dialog.
	 */
	name: string;

	/**
	 * The parent of the Dialog (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Destroys the dialog object. Note: Dialog objects remain in memory until you destroy them or quit the program.
	 */
	destroy(): void;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Dialog[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Displays the dialog.
	 */
	show(): boolean;

	/**
	 * Generates a string which, if executed, will return the Dialog.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of dialogs.
 */
declare class Dialogs {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Dialog with the specified index.
	 * @param index The index.
	 */
	[index: number]: Dialog;

	/**
	 * Creates a new Dialog.
	 * @param withProperties Initial values for properties of the new Dialog
	 */
	add(withProperties: object): Dialog;

	/**
	 * Returns any Dialog in the collection.
	 */
	anyItem(): Dialog;

	/**
	 * Displays the number of elements in the Dialog.
	 */
	count(): number;

	/**
	 * Returns every Dialog in the collection.
	 */
	everyItem(): Dialog[];

	/**
	 * Returns the first Dialog in the collection.
	 */
	firstItem(): Dialog;

	/**
	 * Returns the Dialog with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Dialog;

	/**
	 * Returns the Dialog with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Dialog;

	/**
	 * Returns the Dialog with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Dialog;

	/**
	 * Returns the Dialogs within the specified range.
	 * @param from The Dialog, index, or name at the beginning of the range.
	 * @param to The Dialog, index, or name at the end of the range.
	 */
	itemByRange(from: Dialog | number | string, to: Dialog | number | string): Dialog[];

	/**
	 * Returns the last Dialog in the collection.
	 */
	lastItem(): Dialog;

	/**
	 * Returns the middle Dialog in the collection.
	 */
	middleItem(): Dialog;

	/**
	 * Returns the Dialog whose index follows the specified Dialog in the collection.
	 * @param obj The Dialog whose index comes before the desired Dialog.
	 */
	nextItem(obj: Dialog): Dialog;

	/**
	 * Returns the Dialog with the index previous to the specified index.
	 * @param obj The index of the Dialog that follows the desired Dialog.
	 */
	previousItem(obj: Dialog): Dialog;

	/**
	 * Generates a string which, if executed, will return the Dialog.
	 */
	toSource(): string;

}

/**
 * Generic term for an object in a dialog column or dialog row, including dialog controls such as radio button groups, checkboxes, editboxes, dropdowns, and comboboxes; static text objects; enabling groups; border panels; and nested dialog columns and dialog rows. For information, see dialog column, dialog row, static text, border panel, enabling group, radiobutton group, checkbox control, angle editbox, angle combobox, integer editbox, integer combobox, measurement editbox, measurement combobox, percent editbox, percent combobox, real editbox, real combobox, and text editbox.
 */
declare class Widget {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the Widget.
	 */
	readonly id: number;

	/**
	 * The index of the Widget within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The width of the control. For an editbox or combobox, specifies the minimum width of the box.
	 */
	minWidth: number;

	/**
	 * The parent of the Widget (a DialogColumn, DialogRow, EnablingGroup, BorderPanel or RadiobuttonGroup).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Widget[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the Widget.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of widgets.
 */
declare class Widgets {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Widget with the specified index.
	 * @param index The index.
	 */
	[index: number]: Widget;

	/**
	 * Returns any Widget in the collection.
	 */
	anyItem(): Widget;

	/**
	 * Displays the number of elements in the Widget.
	 */
	count(): number;

	/**
	 * Returns every Widget in the collection.
	 */
	everyItem(): Widget[];

	/**
	 * Returns the first Widget in the collection.
	 */
	firstItem(): Widget;

	/**
	 * Returns the Widget with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Widget;

	/**
	 * Returns the Widget with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Widget;

	/**
	 * Returns the Widgets within the specified range.
	 * @param from The Widget, index, or name at the beginning of the range.
	 * @param to The Widget, index, or name at the end of the range.
	 */
	itemByRange(from: Widget | number | string, to: Widget | number | string): Widget[];

	/**
	 * Returns the last Widget in the collection.
	 */
	lastItem(): Widget;

	/**
	 * Returns the middle Widget in the collection.
	 */
	middleItem(): Widget;

	/**
	 * Returns the Widget whose index follows the specified Widget in the collection.
	 * @param obj The Widget whose index comes before the desired Widget.
	 */
	nextItem(obj: Widget): Widget;

	/**
	 * Returns the Widget with the index previous to the specified index.
	 * @param obj The index of the Widget that follows the desired Widget.
	 */
	previousItem(obj: Widget): Widget;

	/**
	 * Generates a string which, if executed, will return the Widget.
	 */
	toSource(): string;

}

/**
 * A text entry field.
 */
declare class TextEditbox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string;

}

/**
 * A collection of text editboxes.
 */
declare class TextEditboxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the TextEditbox with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextEditbox;

	/**
	 * Creates a new TextEditbox.
	 * @param withProperties Initial values for properties of the new TextEditbox
	 */
	add(withProperties: object): TextEditbox;

	/**
	 * Returns any TextEditbox in the collection.
	 */
	anyItem(): TextEditbox;

	/**
	 * Displays the number of elements in the TextEditbox.
	 */
	count(): number;

	/**
	 * Returns every TextEditbox in the collection.
	 */
	everyItem(): TextEditbox[];

	/**
	 * Returns the first TextEditbox in the collection.
	 */
	firstItem(): TextEditbox;

	/**
	 * Returns the TextEditbox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextEditbox;

	/**
	 * Returns the TextEditbox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TextEditbox;

	/**
	 * Returns the TextEditboxes within the specified range.
	 * @param from The TextEditbox, index, or name at the beginning of the range.
	 * @param to The TextEditbox, index, or name at the end of the range.
	 */
	itemByRange(from: TextEditbox | number | string, to: TextEditbox | number | string): TextEditbox[];

	/**
	 * Returns the last TextEditbox in the collection.
	 */
	lastItem(): TextEditbox;

	/**
	 * Returns the middle TextEditbox in the collection.
	 */
	middleItem(): TextEditbox;

	/**
	 * Returns the TextEditbox whose index follows the specified TextEditbox in the collection.
	 * @param obj The TextEditbox whose index comes before the desired TextEditbox.
	 */
	nextItem(obj: TextEditbox): TextEditbox;

	/**
	 * Returns the TextEditbox with the index previous to the specified index.
	 * @param obj The index of the TextEditbox that follows the desired TextEditbox.
	 */
	previousItem(obj: TextEditbox): TextEditbox;

	/**
	 * Generates a string which, if executed, will return the TextEditbox.
	 */
	toSource(): string;

}

/**
 * A static text control (typically a label for another control or a set of controls).
 */
declare class StaticText extends Widget {
	/**
	 * Text alignment for the StaticText.
	 */
	staticAlignment: StaticAlignmentOptions;

	/**
	 * Text that appears in the StaticText.
	 */
	staticLabel: string;

}

/**
 * A collection of static text objects.
 */
declare class StaticTexts {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the StaticText with the specified index.
	 * @param index The index.
	 */
	[index: number]: StaticText;

	/**
	 * Creates a new StaticText.
	 * @param withProperties Initial values for properties of the new StaticText
	 */
	add(withProperties: object): StaticText;

	/**
	 * Returns any StaticText in the collection.
	 */
	anyItem(): StaticText;

	/**
	 * Displays the number of elements in the StaticText.
	 */
	count(): number;

	/**
	 * Returns every StaticText in the collection.
	 */
	everyItem(): StaticText[];

	/**
	 * Returns the first StaticText in the collection.
	 */
	firstItem(): StaticText;

	/**
	 * Returns the StaticText with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): StaticText;

	/**
	 * Returns the StaticText with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): StaticText;

	/**
	 * Returns the StaticTexts within the specified range.
	 * @param from The StaticText, index, or name at the beginning of the range.
	 * @param to The StaticText, index, or name at the end of the range.
	 */
	itemByRange(from: StaticText | number | string, to: StaticText | number | string): StaticText[];

	/**
	 * Returns the last StaticText in the collection.
	 */
	lastItem(): StaticText;

	/**
	 * Returns the middle StaticText in the collection.
	 */
	middleItem(): StaticText;

	/**
	 * Returns the StaticText whose index follows the specified StaticText in the collection.
	 * @param obj The StaticText whose index comes before the desired StaticText.
	 */
	nextItem(obj: StaticText): StaticText;

	/**
	 * Returns the StaticText with the index previous to the specified index.
	 * @param obj The index of the StaticText that follows the desired StaticText.
	 */
	previousItem(obj: StaticText): StaticText;

	/**
	 * Generates a string which, if executed, will return the StaticText.
	 */
	toSource(): string;

}

/**
 * A dropdown control.
 */
declare class Dropdown extends Widget {
	/**
	 * The index of the selection in a dropdown or combobox control.
	 */
	selectedIndex: number;

	/**
	 * The menu items on a dropdown or combobox control, as an array of strings.
	 */
	stringList: string[];

}

/**
 * A collection of dropdowns.
 */
declare class Dropdowns {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the Dropdown with the specified index.
	 * @param index The index.
	 */
	[index: number]: Dropdown;

	/**
	 * Creates a new Dropdown.
	 * @param withProperties Initial values for properties of the new Dropdown
	 */
	add(withProperties: object): Dropdown;

	/**
	 * Returns any Dropdown in the collection.
	 */
	anyItem(): Dropdown;

	/**
	 * Displays the number of elements in the Dropdown.
	 */
	count(): number;

	/**
	 * Returns every Dropdown in the collection.
	 */
	everyItem(): Dropdown[];

	/**
	 * Returns the first Dropdown in the collection.
	 */
	firstItem(): Dropdown;

	/**
	 * Returns the Dropdown with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Dropdown;

	/**
	 * Returns the Dropdown with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Dropdown;

	/**
	 * Returns the Dropdowns within the specified range.
	 * @param from The Dropdown, index, or name at the beginning of the range.
	 * @param to The Dropdown, index, or name at the end of the range.
	 */
	itemByRange(from: Dropdown | number | string, to: Dropdown | number | string): Dropdown[];

	/**
	 * Returns the last Dropdown in the collection.
	 */
	lastItem(): Dropdown;

	/**
	 * Returns the middle Dropdown in the collection.
	 */
	middleItem(): Dropdown;

	/**
	 * Returns the Dropdown whose index follows the specified Dropdown in the collection.
	 * @param obj The Dropdown whose index comes before the desired Dropdown.
	 */
	nextItem(obj: Dropdown): Dropdown;

	/**
	 * Returns the Dropdown with the index previous to the specified index.
	 * @param obj The index of the Dropdown that follows the desired Dropdown.
	 */
	previousItem(obj: Dropdown): Dropdown;

	/**
	 * Generates a string which, if executed, will return the Dropdown.
	 */
	toSource(): string;

}

/**
 * A checkbox control.
 */
declare class CheckboxControl extends Widget {
	/**
	 * If true, the control is checked by default in the dialog.
	 */
	checkedState: boolean;

	/**
	 * Text that appears in the CheckboxControl.
	 */
	staticLabel: string;

}

/**
 * A collection of checkbox controls.
 */
declare class CheckboxControls {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the CheckboxControl with the specified index.
	 * @param index The index.
	 */
	[index: number]: CheckboxControl;

	/**
	 * Creates a new CheckboxControl.
	 * @param withProperties Initial values for properties of the new CheckboxControl
	 */
	add(withProperties: object): CheckboxControl;

	/**
	 * Returns any CheckboxControl in the collection.
	 */
	anyItem(): CheckboxControl;

	/**
	 * Displays the number of elements in the CheckboxControl.
	 */
	count(): number;

	/**
	 * Returns every CheckboxControl in the collection.
	 */
	everyItem(): CheckboxControl[];

	/**
	 * Returns the first CheckboxControl in the collection.
	 */
	firstItem(): CheckboxControl;

	/**
	 * Returns the CheckboxControl with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CheckboxControl;

	/**
	 * Returns the CheckboxControl with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CheckboxControl;

	/**
	 * Returns the CheckboxControls within the specified range.
	 * @param from The CheckboxControl, index, or name at the beginning of the range.
	 * @param to The CheckboxControl, index, or name at the end of the range.
	 */
	itemByRange(from: CheckboxControl | number | string, to: CheckboxControl | number | string): CheckboxControl[];

	/**
	 * Returns the last CheckboxControl in the collection.
	 */
	lastItem(): CheckboxControl;

	/**
	 * Returns the middle CheckboxControl in the collection.
	 */
	middleItem(): CheckboxControl;

	/**
	 * Returns the CheckboxControl whose index follows the specified CheckboxControl in the collection.
	 * @param obj The CheckboxControl whose index comes before the desired CheckboxControl.
	 */
	nextItem(obj: CheckboxControl): CheckboxControl;

	/**
	 * Returns the CheckboxControl with the index previous to the specified index.
	 * @param obj The index of the CheckboxControl that follows the desired CheckboxControl.
	 */
	previousItem(obj: CheckboxControl): CheckboxControl;

	/**
	 * Generates a string which, if executed, will return the CheckboxControl.
	 */
	toSource(): string;

}

/**
 * A borderless column for containing controls in a dialog.
 */
declare class DialogColumn {
	/**
	 * A collection of angle comboboxes.
	 */
	readonly angleComboboxes: AngleComboboxes;

	/**
	 * A collection of angle editboxes.
	 */
	readonly angleEditboxes: AngleEditboxes;

	/**
	 * A collection of border panels.
	 */
	readonly borderPanels: BorderPanels;

	/**
	 * A collection of checkbox controls.
	 */
	readonly checkboxControls: CheckboxControls;

	/**
	 * A collection of dialog rows.
	 */
	readonly dialogRows: DialogRows;

	/**
	 * A collection of dropdowns.
	 */
	readonly dropdowns: Dropdowns;

	/**
	 * A collection of enabling groups.
	 */
	readonly enablingGroups: EnablingGroups;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the DialogColumn.
	 */
	readonly id: number;

	/**
	 * The index of the DialogColumn within its containing object.
	 */
	readonly index: number;

	/**
	 * A collection of integer comboboxes.
	 */
	readonly integerComboboxes: IntegerComboboxes;

	/**
	 * A collection of integer editboxes.
	 */
	readonly integerEditboxes: IntegerEditboxes;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A collection of measurement comboboxes.
	 */
	readonly measurementComboboxes: MeasurementComboboxes;

	/**
	 * A collection of measurement editboxes.
	 */
	readonly measurementEditboxes: MeasurementEditboxes;

	/**
	 * The parent of the DialogColumn (a Dialog, DialogRow, EnablingGroup or BorderPanel).
	 */
	readonly parent: any;

	/**
	 * A collection of percent comboboxes.
	 */
	readonly percentComboboxes: PercentComboboxes;

	/**
	 * A collection of percent editboxes.
	 */
	readonly percentEditboxes: PercentEditboxes;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of radiobutton groups.
	 */
	readonly radiobuttonGroups: RadiobuttonGroups;

	/**
	 * A collection of real number comboboxes.
	 */
	readonly realComboboxes: RealComboboxes;

	/**
	 * A collection of real number editboxes.
	 */
	readonly realEditboxes: RealEditboxes;

	/**
	 * A collection of static text objects.
	 */
	readonly staticTexts: StaticTexts;

	/**
	 * A collection of text editboxes.
	 */
	readonly textEditboxes: TextEditboxes;

	/**
	 * A collection of widgets.
	 */
	readonly widgets: Widgets;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DialogColumn[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the DialogColumn.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of dialog columns.
 */
declare class DialogColumns {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the DialogColumn with the specified index.
	 * @param index The index.
	 */
	[index: number]: DialogColumn;

	/**
	 * Creates a new DialogColumn.
	 * @param withProperties Initial values for properties of the new DialogColumn
	 */
	add(withProperties: object): DialogColumn;

	/**
	 * Returns any DialogColumn in the collection.
	 */
	anyItem(): DialogColumn;

	/**
	 * Displays the number of elements in the DialogColumn.
	 */
	count(): number;

	/**
	 * Returns every DialogColumn in the collection.
	 */
	everyItem(): DialogColumn[];

	/**
	 * Returns the first DialogColumn in the collection.
	 */
	firstItem(): DialogColumn;

	/**
	 * Returns the DialogColumn with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DialogColumn;

	/**
	 * Returns the DialogColumn with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): DialogColumn;

	/**
	 * Returns the DialogColumns within the specified range.
	 * @param from The DialogColumn, index, or name at the beginning of the range.
	 * @param to The DialogColumn, index, or name at the end of the range.
	 */
	itemByRange(from: DialogColumn | number | string, to: DialogColumn | number | string): DialogColumn[];

	/**
	 * Returns the last DialogColumn in the collection.
	 */
	lastItem(): DialogColumn;

	/**
	 * Returns the middle DialogColumn in the collection.
	 */
	middleItem(): DialogColumn;

	/**
	 * Returns the DialogColumn whose index follows the specified DialogColumn in the collection.
	 * @param obj The DialogColumn whose index comes before the desired DialogColumn.
	 */
	nextItem(obj: DialogColumn): DialogColumn;

	/**
	 * Returns the DialogColumn with the index previous to the specified index.
	 * @param obj The index of the DialogColumn that follows the desired DialogColumn.
	 */
	previousItem(obj: DialogColumn): DialogColumn;

	/**
	 * Generates a string which, if executed, will return the DialogColumn.
	 */
	toSource(): string;

}

/**
 * A single control that contains one or more radiobutton controls.
 */
declare class RadiobuttonGroup extends Widget {
	/**
	 * A collection of individual radiobutton controls.
	 */
	readonly radiobuttonControls: RadiobuttonControls;

	/**
	 * The index of the selection in a radiobutton group.
	 */
	selectedButton: number;

	/**
	 * A collection of widgets.
	 */
	readonly widgets: Widgets;

}

/**
 * A collection of radiobutton groups.
 */
declare class RadiobuttonGroups {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the RadiobuttonGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: RadiobuttonGroup;

	/**
	 * Creates a new RadiobuttonGroup.
	 * @param withProperties Initial values for properties of the new RadiobuttonGroup
	 */
	add(withProperties: object): RadiobuttonGroup;

	/**
	 * Returns any RadiobuttonGroup in the collection.
	 */
	anyItem(): RadiobuttonGroup;

	/**
	 * Displays the number of elements in the RadiobuttonGroup.
	 */
	count(): number;

	/**
	 * Returns every RadiobuttonGroup in the collection.
	 */
	everyItem(): RadiobuttonGroup[];

	/**
	 * Returns the first RadiobuttonGroup in the collection.
	 */
	firstItem(): RadiobuttonGroup;

	/**
	 * Returns the RadiobuttonGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): RadiobuttonGroup;

	/**
	 * Returns the RadiobuttonGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): RadiobuttonGroup;

	/**
	 * Returns the RadiobuttonGroups within the specified range.
	 * @param from The RadiobuttonGroup, index, or name at the beginning of the range.
	 * @param to The RadiobuttonGroup, index, or name at the end of the range.
	 */
	itemByRange(from: RadiobuttonGroup | number | string, to: RadiobuttonGroup | number | string): RadiobuttonGroup[];

	/**
	 * Returns the last RadiobuttonGroup in the collection.
	 */
	lastItem(): RadiobuttonGroup;

	/**
	 * Returns the middle RadiobuttonGroup in the collection.
	 */
	middleItem(): RadiobuttonGroup;

	/**
	 * Returns the RadiobuttonGroup whose index follows the specified RadiobuttonGroup in the collection.
	 * @param obj The RadiobuttonGroup whose index comes before the desired RadiobuttonGroup.
	 */
	nextItem(obj: RadiobuttonGroup): RadiobuttonGroup;

	/**
	 * Returns the RadiobuttonGroup with the index previous to the specified index.
	 * @param obj The index of the RadiobuttonGroup that follows the desired RadiobuttonGroup.
	 */
	previousItem(obj: RadiobuttonGroup): RadiobuttonGroup;

	/**
	 * Generates a string which, if executed, will return the RadiobuttonGroup.
	 */
	toSource(): string;

}

/**
 * An individual radiobutton control in a radiobutton group.
 */
declare class RadiobuttonControl extends Widget {
	/**
	 * If true, the control is checked by default in the dialog.
	 */
	checkedState: boolean;

	/**
	 * Text that appears in the RadiobuttonControl.
	 */
	staticLabel: string;

}

/**
 * A collection of individual radiobutton controls.
 */
declare class RadiobuttonControls {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the RadiobuttonControl with the specified index.
	 * @param index The index.
	 */
	[index: number]: RadiobuttonControl;

	/**
	 * Creates a new RadiobuttonControl.
	 * @param withProperties Initial values for properties of the new RadiobuttonControl
	 */
	add(withProperties: object): RadiobuttonControl;

	/**
	 * Returns any RadiobuttonControl in the collection.
	 */
	anyItem(): RadiobuttonControl;

	/**
	 * Displays the number of elements in the RadiobuttonControl.
	 */
	count(): number;

	/**
	 * Returns every RadiobuttonControl in the collection.
	 */
	everyItem(): RadiobuttonControl[];

	/**
	 * Returns the first RadiobuttonControl in the collection.
	 */
	firstItem(): RadiobuttonControl;

	/**
	 * Returns the RadiobuttonControl with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): RadiobuttonControl;

	/**
	 * Returns the RadiobuttonControl with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): RadiobuttonControl;

	/**
	 * Returns the RadiobuttonControls within the specified range.
	 * @param from The RadiobuttonControl, index, or name at the beginning of the range.
	 * @param to The RadiobuttonControl, index, or name at the end of the range.
	 */
	itemByRange(from: RadiobuttonControl | number | string, to: RadiobuttonControl | number | string): RadiobuttonControl[];

	/**
	 * Returns the last RadiobuttonControl in the collection.
	 */
	lastItem(): RadiobuttonControl;

	/**
	 * Returns the middle RadiobuttonControl in the collection.
	 */
	middleItem(): RadiobuttonControl;

	/**
	 * Returns the RadiobuttonControl whose index follows the specified RadiobuttonControl in the collection.
	 * @param obj The RadiobuttonControl whose index comes before the desired RadiobuttonControl.
	 */
	nextItem(obj: RadiobuttonControl): RadiobuttonControl;

	/**
	 * Returns the RadiobuttonControl with the index previous to the specified index.
	 * @param obj The index of the RadiobuttonControl that follows the desired RadiobuttonControl.
	 */
	previousItem(obj: RadiobuttonControl): RadiobuttonControl;

	/**
	 * Generates a string which, if executed, will return the RadiobuttonControl.
	 */
	toSource(): string;

}

/**
 * A numeric entry field that rounds to the nearest whole number. Note: .5 is rounded up.
 */
declare class IntegerEditbox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string;

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number;

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number;

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number;

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number;

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number;

}

/**
 * A collection of integer editboxes.
 */
declare class IntegerEditboxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the IntegerEditbox with the specified index.
	 * @param index The index.
	 */
	[index: number]: IntegerEditbox;

	/**
	 * Creates a new IntegerEditbox.
	 * @param withProperties Initial values for properties of the new IntegerEditbox
	 */
	add(withProperties: object): IntegerEditbox;

	/**
	 * Returns any IntegerEditbox in the collection.
	 */
	anyItem(): IntegerEditbox;

	/**
	 * Displays the number of elements in the IntegerEditbox.
	 */
	count(): number;

	/**
	 * Returns every IntegerEditbox in the collection.
	 */
	everyItem(): IntegerEditbox[];

	/**
	 * Returns the first IntegerEditbox in the collection.
	 */
	firstItem(): IntegerEditbox;

	/**
	 * Returns the IntegerEditbox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): IntegerEditbox;

	/**
	 * Returns the IntegerEditbox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): IntegerEditbox;

	/**
	 * Returns the IntegerEditboxes within the specified range.
	 * @param from The IntegerEditbox, index, or name at the beginning of the range.
	 * @param to The IntegerEditbox, index, or name at the end of the range.
	 */
	itemByRange(from: IntegerEditbox | number | string, to: IntegerEditbox | number | string): IntegerEditbox[];

	/**
	 * Returns the last IntegerEditbox in the collection.
	 */
	lastItem(): IntegerEditbox;

	/**
	 * Returns the middle IntegerEditbox in the collection.
	 */
	middleItem(): IntegerEditbox;

	/**
	 * Returns the IntegerEditbox whose index follows the specified IntegerEditbox in the collection.
	 * @param obj The IntegerEditbox whose index comes before the desired IntegerEditbox.
	 */
	nextItem(obj: IntegerEditbox): IntegerEditbox;

	/**
	 * Returns the IntegerEditbox with the index previous to the specified index.
	 * @param obj The index of the IntegerEditbox that follows the desired IntegerEditbox.
	 */
	previousItem(obj: IntegerEditbox): IntegerEditbox;

	/**
	 * Generates a string which, if executed, will return the IntegerEditbox.
	 */
	toSource(): string;

}

/**
 * An integer entry control featuring both a pop-up menu and an entry field. Note: .5 is rounded up.
 */
declare class IntegerCombobox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string;

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number;

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number;

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number;

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number;

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number;

	/**
	 * The menu items on a dropdown or combobox control, as an array of strings.
	 */
	stringList: string[];

}

/**
 * A collection of integer comboboxes.
 */
declare class IntegerComboboxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the IntegerCombobox with the specified index.
	 * @param index The index.
	 */
	[index: number]: IntegerCombobox;

	/**
	 * Creates a new IntegerCombobox.
	 * @param withProperties Initial values for properties of the new IntegerCombobox
	 */
	add(withProperties: object): IntegerCombobox;

	/**
	 * Returns any IntegerCombobox in the collection.
	 */
	anyItem(): IntegerCombobox;

	/**
	 * Displays the number of elements in the IntegerCombobox.
	 */
	count(): number;

	/**
	 * Returns every IntegerCombobox in the collection.
	 */
	everyItem(): IntegerCombobox[];

	/**
	 * Returns the first IntegerCombobox in the collection.
	 */
	firstItem(): IntegerCombobox;

	/**
	 * Returns the IntegerCombobox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): IntegerCombobox;

	/**
	 * Returns the IntegerCombobox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): IntegerCombobox;

	/**
	 * Returns the IntegerComboboxes within the specified range.
	 * @param from The IntegerCombobox, index, or name at the beginning of the range.
	 * @param to The IntegerCombobox, index, or name at the end of the range.
	 */
	itemByRange(from: IntegerCombobox | number | string, to: IntegerCombobox | number | string): IntegerCombobox[];

	/**
	 * Returns the last IntegerCombobox in the collection.
	 */
	lastItem(): IntegerCombobox;

	/**
	 * Returns the middle IntegerCombobox in the collection.
	 */
	middleItem(): IntegerCombobox;

	/**
	 * Returns the IntegerCombobox whose index follows the specified IntegerCombobox in the collection.
	 * @param obj The IntegerCombobox whose index comes before the desired IntegerCombobox.
	 */
	nextItem(obj: IntegerCombobox): IntegerCombobox;

	/**
	 * Returns the IntegerCombobox with the index previous to the specified index.
	 * @param obj The index of the IntegerCombobox that follows the desired IntegerCombobox.
	 */
	previousItem(obj: IntegerCombobox): IntegerCombobox;

	/**
	 * Generates a string which, if executed, will return the IntegerCombobox.
	 */
	toSource(): string;

}

/**
 * A bordered panel that contains an enabling checkbox. A user makes the enabling group active or inactive by clicking the checkbox. An enabling group can contain any type and number of controls.
 */
declare class EnablingGroup extends Widget {
	/**
	 * A collection of angle comboboxes.
	 */
	readonly angleComboboxes: AngleComboboxes;

	/**
	 * A collection of angle editboxes.
	 */
	readonly angleEditboxes: AngleEditboxes;

	/**
	 * A collection of border panels.
	 */
	readonly borderPanels: BorderPanels;

	/**
	 * A collection of checkbox controls.
	 */
	readonly checkboxControls: CheckboxControls;

	/**
	 * If true, the control is checked by default in the dialog.
	 */
	checkedState: boolean;

	/**
	 * A collection of dialog columns.
	 */
	readonly dialogColumns: DialogColumns;

	/**
	 * A collection of dropdowns.
	 */
	readonly dropdowns: Dropdowns;

	/**
	 * A collection of enabling groups.
	 */
	readonly enablingGroups: EnablingGroups;

	/**
	 * A collection of integer comboboxes.
	 */
	readonly integerComboboxes: IntegerComboboxes;

	/**
	 * A collection of integer editboxes.
	 */
	readonly integerEditboxes: IntegerEditboxes;

	/**
	 * A collection of measurement comboboxes.
	 */
	readonly measurementComboboxes: MeasurementComboboxes;

	/**
	 * A collection of measurement editboxes.
	 */
	readonly measurementEditboxes: MeasurementEditboxes;

	/**
	 * A collection of percent comboboxes.
	 */
	readonly percentComboboxes: PercentComboboxes;

	/**
	 * A collection of percent editboxes.
	 */
	readonly percentEditboxes: PercentEditboxes;

	/**
	 * A collection of radiobutton groups.
	 */
	readonly radiobuttonGroups: RadiobuttonGroups;

	/**
	 * A collection of real number comboboxes.
	 */
	readonly realComboboxes: RealComboboxes;

	/**
	 * A collection of real number editboxes.
	 */
	readonly realEditboxes: RealEditboxes;

	/**
	 * Text that appears in the EnablingGroup.
	 */
	staticLabel: string;

	/**
	 * A collection of static text objects.
	 */
	readonly staticTexts: StaticTexts;

	/**
	 * A collection of text editboxes.
	 */
	readonly textEditboxes: TextEditboxes;

	/**
	 * A collection of widgets.
	 */
	readonly widgets: Widgets;

}

/**
 * A collection of enabling groups.
 */
declare class EnablingGroups {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the EnablingGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: EnablingGroup;

	/**
	 * Creates a new EnablingGroup.
	 * @param withProperties Initial values for properties of the new EnablingGroup
	 */
	add(withProperties: object): EnablingGroup;

	/**
	 * Returns any EnablingGroup in the collection.
	 */
	anyItem(): EnablingGroup;

	/**
	 * Displays the number of elements in the EnablingGroup.
	 */
	count(): number;

	/**
	 * Returns every EnablingGroup in the collection.
	 */
	everyItem(): EnablingGroup[];

	/**
	 * Returns the first EnablingGroup in the collection.
	 */
	firstItem(): EnablingGroup;

	/**
	 * Returns the EnablingGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): EnablingGroup;

	/**
	 * Returns the EnablingGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): EnablingGroup;

	/**
	 * Returns the EnablingGroups within the specified range.
	 * @param from The EnablingGroup, index, or name at the beginning of the range.
	 * @param to The EnablingGroup, index, or name at the end of the range.
	 */
	itemByRange(from: EnablingGroup | number | string, to: EnablingGroup | number | string): EnablingGroup[];

	/**
	 * Returns the last EnablingGroup in the collection.
	 */
	lastItem(): EnablingGroup;

	/**
	 * Returns the middle EnablingGroup in the collection.
	 */
	middleItem(): EnablingGroup;

	/**
	 * Returns the EnablingGroup whose index follows the specified EnablingGroup in the collection.
	 * @param obj The EnablingGroup whose index comes before the desired EnablingGroup.
	 */
	nextItem(obj: EnablingGroup): EnablingGroup;

	/**
	 * Returns the EnablingGroup with the index previous to the specified index.
	 * @param obj The index of the EnablingGroup that follows the desired EnablingGroup.
	 */
	previousItem(obj: EnablingGroup): EnablingGroup;

	/**
	 * Generates a string which, if executed, will return the EnablingGroup.
	 */
	toSource(): string;

}

/**
 * A degree entry control featuring both a pop-up menu and and entry field.
 */
declare class AngleCombobox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string;

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number;

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number;

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number;

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number;

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number;

	/**
	 * The menu items on a dropdown or combobox control, as an array of strings.
	 */
	stringList: string[];

}

/**
 * A collection of angle comboboxes.
 */
declare class AngleComboboxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the AngleCombobox with the specified index.
	 * @param index The index.
	 */
	[index: number]: AngleCombobox;

	/**
	 * Creates a new AngleCombobox.
	 * @param withProperties Initial values for properties of the new AngleCombobox
	 */
	add(withProperties: object): AngleCombobox;

	/**
	 * Returns any AngleCombobox in the collection.
	 */
	anyItem(): AngleCombobox;

	/**
	 * Displays the number of elements in the AngleCombobox.
	 */
	count(): number;

	/**
	 * Returns every AngleCombobox in the collection.
	 */
	everyItem(): AngleCombobox[];

	/**
	 * Returns the first AngleCombobox in the collection.
	 */
	firstItem(): AngleCombobox;

	/**
	 * Returns the AngleCombobox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): AngleCombobox;

	/**
	 * Returns the AngleCombobox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): AngleCombobox;

	/**
	 * Returns the AngleComboboxes within the specified range.
	 * @param from The AngleCombobox, index, or name at the beginning of the range.
	 * @param to The AngleCombobox, index, or name at the end of the range.
	 */
	itemByRange(from: AngleCombobox | number | string, to: AngleCombobox | number | string): AngleCombobox[];

	/**
	 * Returns the last AngleCombobox in the collection.
	 */
	lastItem(): AngleCombobox;

	/**
	 * Returns the middle AngleCombobox in the collection.
	 */
	middleItem(): AngleCombobox;

	/**
	 * Returns the AngleCombobox whose index follows the specified AngleCombobox in the collection.
	 * @param obj The AngleCombobox whose index comes before the desired AngleCombobox.
	 */
	nextItem(obj: AngleCombobox): AngleCombobox;

	/**
	 * Returns the AngleCombobox with the index previous to the specified index.
	 * @param obj The index of the AngleCombobox that follows the desired AngleCombobox.
	 */
	previousItem(obj: AngleCombobox): AngleCombobox;

	/**
	 * Generates a string which, if executed, will return the AngleCombobox.
	 */
	toSource(): string;

}

/**
 * A percentage entry control featuring both a pop-up menu and an entry field.
 */
declare class PercentCombobox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string;

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number;

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number;

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number;

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number;

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number;

	/**
	 * The menu items on a dropdown or combobox control, as an array of strings.
	 */
	stringList: string[];

}

/**
 * A collection of percent comboboxes.
 */
declare class PercentComboboxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PercentCombobox with the specified index.
	 * @param index The index.
	 */
	[index: number]: PercentCombobox;

	/**
	 * Creates a new PercentCombobox.
	 * @param withProperties Initial values for properties of the new PercentCombobox
	 */
	add(withProperties: object): PercentCombobox;

	/**
	 * Returns any PercentCombobox in the collection.
	 */
	anyItem(): PercentCombobox;

	/**
	 * Displays the number of elements in the PercentCombobox.
	 */
	count(): number;

	/**
	 * Returns every PercentCombobox in the collection.
	 */
	everyItem(): PercentCombobox[];

	/**
	 * Returns the first PercentCombobox in the collection.
	 */
	firstItem(): PercentCombobox;

	/**
	 * Returns the PercentCombobox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PercentCombobox;

	/**
	 * Returns the PercentCombobox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PercentCombobox;

	/**
	 * Returns the PercentComboboxes within the specified range.
	 * @param from The PercentCombobox, index, or name at the beginning of the range.
	 * @param to The PercentCombobox, index, or name at the end of the range.
	 */
	itemByRange(from: PercentCombobox | number | string, to: PercentCombobox | number | string): PercentCombobox[];

	/**
	 * Returns the last PercentCombobox in the collection.
	 */
	lastItem(): PercentCombobox;

	/**
	 * Returns the middle PercentCombobox in the collection.
	 */
	middleItem(): PercentCombobox;

	/**
	 * Returns the PercentCombobox whose index follows the specified PercentCombobox in the collection.
	 * @param obj The PercentCombobox whose index comes before the desired PercentCombobox.
	 */
	nextItem(obj: PercentCombobox): PercentCombobox;

	/**
	 * Returns the PercentCombobox with the index previous to the specified index.
	 * @param obj The index of the PercentCombobox that follows the desired PercentCombobox.
	 */
	previousItem(obj: PercentCombobox): PercentCombobox;

	/**
	 * Generates a string which, if executed, will return the PercentCombobox.
	 */
	toSource(): string;

}

/**
 * A high-precision numeric entry field.
 */
declare class RealEditbox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string;

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number;

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number;

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number;

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number;

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number;

}

/**
 * A collection of real number editboxes.
 */
declare class RealEditboxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the RealEditbox with the specified index.
	 * @param index The index.
	 */
	[index: number]: RealEditbox;

	/**
	 * Creates a new RealEditbox.
	 * @param withProperties Initial values for properties of the new RealEditbox
	 */
	add(withProperties: object): RealEditbox;

	/**
	 * Returns any RealEditbox in the collection.
	 */
	anyItem(): RealEditbox;

	/**
	 * Displays the number of elements in the RealEditbox.
	 */
	count(): number;

	/**
	 * Returns every RealEditbox in the collection.
	 */
	everyItem(): RealEditbox[];

	/**
	 * Returns the first RealEditbox in the collection.
	 */
	firstItem(): RealEditbox;

	/**
	 * Returns the RealEditbox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): RealEditbox;

	/**
	 * Returns the RealEditbox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): RealEditbox;

	/**
	 * Returns the RealEditboxes within the specified range.
	 * @param from The RealEditbox, index, or name at the beginning of the range.
	 * @param to The RealEditbox, index, or name at the end of the range.
	 */
	itemByRange(from: RealEditbox | number | string, to: RealEditbox | number | string): RealEditbox[];

	/**
	 * Returns the last RealEditbox in the collection.
	 */
	lastItem(): RealEditbox;

	/**
	 * Returns the middle RealEditbox in the collection.
	 */
	middleItem(): RealEditbox;

	/**
	 * Returns the RealEditbox whose index follows the specified RealEditbox in the collection.
	 * @param obj The RealEditbox whose index comes before the desired RealEditbox.
	 */
	nextItem(obj: RealEditbox): RealEditbox;

	/**
	 * Returns the RealEditbox with the index previous to the specified index.
	 * @param obj The index of the RealEditbox that follows the desired RealEditbox.
	 */
	previousItem(obj: RealEditbox): RealEditbox;

	/**
	 * Generates a string which, if executed, will return the RealEditbox.
	 */
	toSource(): string;

}

/**
 * A percentage entry field.
 */
declare class PercentEditbox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string;

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number;

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number;

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number;

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number;

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number;

}

/**
 * A collection of percent editboxes.
 */
declare class PercentEditboxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the PercentEditbox with the specified index.
	 * @param index The index.
	 */
	[index: number]: PercentEditbox;

	/**
	 * Creates a new PercentEditbox.
	 * @param withProperties Initial values for properties of the new PercentEditbox
	 */
	add(withProperties: object): PercentEditbox;

	/**
	 * Returns any PercentEditbox in the collection.
	 */
	anyItem(): PercentEditbox;

	/**
	 * Displays the number of elements in the PercentEditbox.
	 */
	count(): number;

	/**
	 * Returns every PercentEditbox in the collection.
	 */
	everyItem(): PercentEditbox[];

	/**
	 * Returns the first PercentEditbox in the collection.
	 */
	firstItem(): PercentEditbox;

	/**
	 * Returns the PercentEditbox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PercentEditbox;

	/**
	 * Returns the PercentEditbox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PercentEditbox;

	/**
	 * Returns the PercentEditboxes within the specified range.
	 * @param from The PercentEditbox, index, or name at the beginning of the range.
	 * @param to The PercentEditbox, index, or name at the end of the range.
	 */
	itemByRange(from: PercentEditbox | number | string, to: PercentEditbox | number | string): PercentEditbox[];

	/**
	 * Returns the last PercentEditbox in the collection.
	 */
	lastItem(): PercentEditbox;

	/**
	 * Returns the middle PercentEditbox in the collection.
	 */
	middleItem(): PercentEditbox;

	/**
	 * Returns the PercentEditbox whose index follows the specified PercentEditbox in the collection.
	 * @param obj The PercentEditbox whose index comes before the desired PercentEditbox.
	 */
	nextItem(obj: PercentEditbox): PercentEditbox;

	/**
	 * Returns the PercentEditbox with the index previous to the specified index.
	 * @param obj The index of the PercentEditbox that follows the desired PercentEditbox.
	 */
	previousItem(obj: PercentEditbox): PercentEditbox;

	/**
	 * Generates a string which, if executed, will return the PercentEditbox.
	 */
	toSource(): string;

}

/**
 * A degree entry field.
 */
declare class AngleEditbox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string;

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number;

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number;

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number;

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number;

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number;

}

/**
 * A collection of angle editboxes.
 */
declare class AngleEditboxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the AngleEditbox with the specified index.
	 * @param index The index.
	 */
	[index: number]: AngleEditbox;

	/**
	 * Creates a new AngleEditbox.
	 * @param withProperties Initial values for properties of the new AngleEditbox
	 */
	add(withProperties: object): AngleEditbox;

	/**
	 * Returns any AngleEditbox in the collection.
	 */
	anyItem(): AngleEditbox;

	/**
	 * Displays the number of elements in the AngleEditbox.
	 */
	count(): number;

	/**
	 * Returns every AngleEditbox in the collection.
	 */
	everyItem(): AngleEditbox[];

	/**
	 * Returns the first AngleEditbox in the collection.
	 */
	firstItem(): AngleEditbox;

	/**
	 * Returns the AngleEditbox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): AngleEditbox;

	/**
	 * Returns the AngleEditbox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): AngleEditbox;

	/**
	 * Returns the AngleEditboxes within the specified range.
	 * @param from The AngleEditbox, index, or name at the beginning of the range.
	 * @param to The AngleEditbox, index, or name at the end of the range.
	 */
	itemByRange(from: AngleEditbox | number | string, to: AngleEditbox | number | string): AngleEditbox[];

	/**
	 * Returns the last AngleEditbox in the collection.
	 */
	lastItem(): AngleEditbox;

	/**
	 * Returns the middle AngleEditbox in the collection.
	 */
	middleItem(): AngleEditbox;

	/**
	 * Returns the AngleEditbox whose index follows the specified AngleEditbox in the collection.
	 * @param obj The AngleEditbox whose index comes before the desired AngleEditbox.
	 */
	nextItem(obj: AngleEditbox): AngleEditbox;

	/**
	 * Returns the AngleEditbox with the index previous to the specified index.
	 * @param obj The index of the AngleEditbox that follows the desired AngleEditbox.
	 */
	previousItem(obj: AngleEditbox): AngleEditbox;

	/**
	 * Generates a string which, if executed, will return the AngleEditbox.
	 */
	toSource(): string;

}

/**
 * A high-precision numeric entry control featuring both a pop-up menu and an entry field.
 */
declare class RealCombobox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string;

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number;

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number;

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number;

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number;

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number;

	/**
	 * The menu items on a dropdown or combobox control, as an array of strings.
	 */
	stringList: string[];

}

/**
 * A collection of real number comboboxes.
 */
declare class RealComboboxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the RealCombobox with the specified index.
	 * @param index The index.
	 */
	[index: number]: RealCombobox;

	/**
	 * Creates a new RealCombobox.
	 * @param withProperties Initial values for properties of the new RealCombobox
	 */
	add(withProperties: object): RealCombobox;

	/**
	 * Returns any RealCombobox in the collection.
	 */
	anyItem(): RealCombobox;

	/**
	 * Displays the number of elements in the RealCombobox.
	 */
	count(): number;

	/**
	 * Returns every RealCombobox in the collection.
	 */
	everyItem(): RealCombobox[];

	/**
	 * Returns the first RealCombobox in the collection.
	 */
	firstItem(): RealCombobox;

	/**
	 * Returns the RealCombobox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): RealCombobox;

	/**
	 * Returns the RealCombobox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): RealCombobox;

	/**
	 * Returns the RealComboboxes within the specified range.
	 * @param from The RealCombobox, index, or name at the beginning of the range.
	 * @param to The RealCombobox, index, or name at the end of the range.
	 */
	itemByRange(from: RealCombobox | number | string, to: RealCombobox | number | string): RealCombobox[];

	/**
	 * Returns the last RealCombobox in the collection.
	 */
	lastItem(): RealCombobox;

	/**
	 * Returns the middle RealCombobox in the collection.
	 */
	middleItem(): RealCombobox;

	/**
	 * Returns the RealCombobox whose index follows the specified RealCombobox in the collection.
	 * @param obj The RealCombobox whose index comes before the desired RealCombobox.
	 */
	nextItem(obj: RealCombobox): RealCombobox;

	/**
	 * Returns the RealCombobox with the index previous to the specified index.
	 * @param obj The index of the RealCombobox that follows the desired RealCombobox.
	 */
	previousItem(obj: RealCombobox): RealCombobox;

	/**
	 * Generates a string which, if executed, will return the RealCombobox.
	 */
	toSource(): string;

}

/**
 * A measurement entry control featuring both a pop-up menu and an entry field.
 */
declare class MeasurementCombobox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string;

	/**
	 * The measurement units to display in the measurement control.
	 */
	editUnits: MeasurementUnits;

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number;

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number;

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number;

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number;

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number;

	/**
	 * The menu items on a dropdown or combobox control, as an array of strings.
	 */
	stringList: string[];

}

/**
 * A collection of measurement comboboxes.
 */
declare class MeasurementComboboxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MeasurementCombobox with the specified index.
	 * @param index The index.
	 */
	[index: number]: MeasurementCombobox;

	/**
	 * Creates a new MeasurementCombobox.
	 * @param withProperties Initial values for properties of the new MeasurementCombobox
	 */
	add(withProperties: object): MeasurementCombobox;

	/**
	 * Returns any MeasurementCombobox in the collection.
	 */
	anyItem(): MeasurementCombobox;

	/**
	 * Displays the number of elements in the MeasurementCombobox.
	 */
	count(): number;

	/**
	 * Returns every MeasurementCombobox in the collection.
	 */
	everyItem(): MeasurementCombobox[];

	/**
	 * Returns the first MeasurementCombobox in the collection.
	 */
	firstItem(): MeasurementCombobox;

	/**
	 * Returns the MeasurementCombobox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MeasurementCombobox;

	/**
	 * Returns the MeasurementCombobox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MeasurementCombobox;

	/**
	 * Returns the MeasurementComboboxes within the specified range.
	 * @param from The MeasurementCombobox, index, or name at the beginning of the range.
	 * @param to The MeasurementCombobox, index, or name at the end of the range.
	 */
	itemByRange(from: MeasurementCombobox | number | string, to: MeasurementCombobox | number | string): MeasurementCombobox[];

	/**
	 * Returns the last MeasurementCombobox in the collection.
	 */
	lastItem(): MeasurementCombobox;

	/**
	 * Returns the middle MeasurementCombobox in the collection.
	 */
	middleItem(): MeasurementCombobox;

	/**
	 * Returns the MeasurementCombobox whose index follows the specified MeasurementCombobox in the collection.
	 * @param obj The MeasurementCombobox whose index comes before the desired MeasurementCombobox.
	 */
	nextItem(obj: MeasurementCombobox): MeasurementCombobox;

	/**
	 * Returns the MeasurementCombobox with the index previous to the specified index.
	 * @param obj The index of the MeasurementCombobox that follows the desired MeasurementCombobox.
	 */
	previousItem(obj: MeasurementCombobox): MeasurementCombobox;

	/**
	 * Generates a string which, if executed, will return the MeasurementCombobox.
	 */
	toSource(): string;

}

/**
 * A measurement entry field.
 */
declare class MeasurementEditbox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string;

	/**
	 * The measurement units to display in the measurement control.
	 */
	editUnits: MeasurementUnits;

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number;

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number;

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number;

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number;

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number;

}

/**
 * A collection of measurement editboxes.
 */
declare class MeasurementEditboxes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the MeasurementEditbox with the specified index.
	 * @param index The index.
	 */
	[index: number]: MeasurementEditbox;

	/**
	 * Creates a new MeasurementEditbox.
	 * @param withProperties Initial values for properties of the new MeasurementEditbox
	 */
	add(withProperties: object): MeasurementEditbox;

	/**
	 * Returns any MeasurementEditbox in the collection.
	 */
	anyItem(): MeasurementEditbox;

	/**
	 * Displays the number of elements in the MeasurementEditbox.
	 */
	count(): number;

	/**
	 * Returns every MeasurementEditbox in the collection.
	 */
	everyItem(): MeasurementEditbox[];

	/**
	 * Returns the first MeasurementEditbox in the collection.
	 */
	firstItem(): MeasurementEditbox;

	/**
	 * Returns the MeasurementEditbox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MeasurementEditbox;

	/**
	 * Returns the MeasurementEditbox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MeasurementEditbox;

	/**
	 * Returns the MeasurementEditboxes within the specified range.
	 * @param from The MeasurementEditbox, index, or name at the beginning of the range.
	 * @param to The MeasurementEditbox, index, or name at the end of the range.
	 */
	itemByRange(from: MeasurementEditbox | number | string, to: MeasurementEditbox | number | string): MeasurementEditbox[];

	/**
	 * Returns the last MeasurementEditbox in the collection.
	 */
	lastItem(): MeasurementEditbox;

	/**
	 * Returns the middle MeasurementEditbox in the collection.
	 */
	middleItem(): MeasurementEditbox;

	/**
	 * Returns the MeasurementEditbox whose index follows the specified MeasurementEditbox in the collection.
	 * @param obj The MeasurementEditbox whose index comes before the desired MeasurementEditbox.
	 */
	nextItem(obj: MeasurementEditbox): MeasurementEditbox;

	/**
	 * Returns the MeasurementEditbox with the index previous to the specified index.
	 * @param obj The index of the MeasurementEditbox that follows the desired MeasurementEditbox.
	 */
	previousItem(obj: MeasurementEditbox): MeasurementEditbox;

	/**
	 * Generates a string which, if executed, will return the MeasurementEditbox.
	 */
	toSource(): string;

}

/**
 * A bordered panel on a dialog that can contain any type and number of controls.
 */
declare class BorderPanel extends Widget {
	/**
	 * A collection of angle comboboxes.
	 */
	readonly angleComboboxes: AngleComboboxes;

	/**
	 * A collection of angle editboxes.
	 */
	readonly angleEditboxes: AngleEditboxes;

	/**
	 * A collection of border panels.
	 */
	readonly borderPanels: BorderPanels;

	/**
	 * A collection of checkbox controls.
	 */
	readonly checkboxControls: CheckboxControls;

	/**
	 * A collection of dialog columns.
	 */
	readonly dialogColumns: DialogColumns;

	/**
	 * A collection of dropdowns.
	 */
	readonly dropdowns: Dropdowns;

	/**
	 * A collection of enabling groups.
	 */
	readonly enablingGroups: EnablingGroups;

	/**
	 * A collection of integer comboboxes.
	 */
	readonly integerComboboxes: IntegerComboboxes;

	/**
	 * A collection of integer editboxes.
	 */
	readonly integerEditboxes: IntegerEditboxes;

	/**
	 * A collection of measurement comboboxes.
	 */
	readonly measurementComboboxes: MeasurementComboboxes;

	/**
	 * A collection of measurement editboxes.
	 */
	readonly measurementEditboxes: MeasurementEditboxes;

	/**
	 * A collection of percent comboboxes.
	 */
	readonly percentComboboxes: PercentComboboxes;

	/**
	 * A collection of percent editboxes.
	 */
	readonly percentEditboxes: PercentEditboxes;

	/**
	 * A collection of radiobutton groups.
	 */
	readonly radiobuttonGroups: RadiobuttonGroups;

	/**
	 * A collection of real number comboboxes.
	 */
	readonly realComboboxes: RealComboboxes;

	/**
	 * A collection of real number editboxes.
	 */
	readonly realEditboxes: RealEditboxes;

	/**
	 * A collection of static text objects.
	 */
	readonly staticTexts: StaticTexts;

	/**
	 * A collection of text editboxes.
	 */
	readonly textEditboxes: TextEditboxes;

	/**
	 * A collection of widgets.
	 */
	readonly widgets: Widgets;

}

/**
 * A collection of border panels.
 */
declare class BorderPanels {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the BorderPanel with the specified index.
	 * @param index The index.
	 */
	[index: number]: BorderPanel;

	/**
	 * Creates a new BorderPanel.
	 * @param withProperties Initial values for properties of the new BorderPanel
	 */
	add(withProperties: object): BorderPanel;

	/**
	 * Returns any BorderPanel in the collection.
	 */
	anyItem(): BorderPanel;

	/**
	 * Displays the number of elements in the BorderPanel.
	 */
	count(): number;

	/**
	 * Returns every BorderPanel in the collection.
	 */
	everyItem(): BorderPanel[];

	/**
	 * Returns the first BorderPanel in the collection.
	 */
	firstItem(): BorderPanel;

	/**
	 * Returns the BorderPanel with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): BorderPanel;

	/**
	 * Returns the BorderPanel with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): BorderPanel;

	/**
	 * Returns the BorderPanels within the specified range.
	 * @param from The BorderPanel, index, or name at the beginning of the range.
	 * @param to The BorderPanel, index, or name at the end of the range.
	 */
	itemByRange(from: BorderPanel | number | string, to: BorderPanel | number | string): BorderPanel[];

	/**
	 * Returns the last BorderPanel in the collection.
	 */
	lastItem(): BorderPanel;

	/**
	 * Returns the middle BorderPanel in the collection.
	 */
	middleItem(): BorderPanel;

	/**
	 * Returns the BorderPanel whose index follows the specified BorderPanel in the collection.
	 * @param obj The BorderPanel whose index comes before the desired BorderPanel.
	 */
	nextItem(obj: BorderPanel): BorderPanel;

	/**
	 * Returns the BorderPanel with the index previous to the specified index.
	 * @param obj The index of the BorderPanel that follows the desired BorderPanel.
	 */
	previousItem(obj: BorderPanel): BorderPanel;

	/**
	 * Generates a string which, if executed, will return the BorderPanel.
	 */
	toSource(): string;

}

/**
 * A borderless row for containing controls in a dialog.
 */
declare class DialogRow {
	/**
	 * A collection of angle comboboxes.
	 */
	readonly angleComboboxes: AngleComboboxes;

	/**
	 * A collection of angle editboxes.
	 */
	readonly angleEditboxes: AngleEditboxes;

	/**
	 * A collection of border panels.
	 */
	readonly borderPanels: BorderPanels;

	/**
	 * A collection of checkbox controls.
	 */
	readonly checkboxControls: CheckboxControls;

	/**
	 * A collection of dialog columns.
	 */
	readonly dialogColumns: DialogColumns;

	/**
	 * A collection of dropdowns.
	 */
	readonly dropdowns: Dropdowns;

	/**
	 * A collection of enabling groups.
	 */
	readonly enablingGroups: EnablingGroups;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the DialogRow.
	 */
	readonly id: number;

	/**
	 * The index of the DialogRow within its containing object.
	 */
	readonly index: number;

	/**
	 * A collection of integer comboboxes.
	 */
	readonly integerComboboxes: IntegerComboboxes;

	/**
	 * A collection of integer editboxes.
	 */
	readonly integerEditboxes: IntegerEditboxes;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A collection of measurement comboboxes.
	 */
	readonly measurementComboboxes: MeasurementComboboxes;

	/**
	 * A collection of measurement editboxes.
	 */
	readonly measurementEditboxes: MeasurementEditboxes;

	/**
	 * The parent of the DialogRow (a DialogColumn).
	 */
	readonly parent: DialogColumn;

	/**
	 * A collection of percent comboboxes.
	 */
	readonly percentComboboxes: PercentComboboxes;

	/**
	 * A collection of percent editboxes.
	 */
	readonly percentEditboxes: PercentEditboxes;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * A collection of radiobutton groups.
	 */
	readonly radiobuttonGroups: RadiobuttonGroups;

	/**
	 * A collection of real number comboboxes.
	 */
	readonly realComboboxes: RealComboboxes;

	/**
	 * A collection of real number editboxes.
	 */
	readonly realEditboxes: RealEditboxes;

	/**
	 * A collection of static text objects.
	 */
	readonly staticTexts: StaticTexts;

	/**
	 * A collection of text editboxes.
	 */
	readonly textEditboxes: TextEditboxes;

	/**
	 * A collection of widgets.
	 */
	readonly widgets: Widgets;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DialogRow[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the DialogRow.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of dialog rows.
 */
declare class DialogRows {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the DialogRow with the specified index.
	 * @param index The index.
	 */
	[index: number]: DialogRow;

	/**
	 * Creates a new DialogRow.
	 * @param withProperties Initial values for properties of the new DialogRow
	 */
	add(withProperties: object): DialogRow;

	/**
	 * Returns any DialogRow in the collection.
	 */
	anyItem(): DialogRow;

	/**
	 * Displays the number of elements in the DialogRow.
	 */
	count(): number;

	/**
	 * Returns every DialogRow in the collection.
	 */
	everyItem(): DialogRow[];

	/**
	 * Returns the first DialogRow in the collection.
	 */
	firstItem(): DialogRow;

	/**
	 * Returns the DialogRow with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DialogRow;

	/**
	 * Returns the DialogRow with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): DialogRow;

	/**
	 * Returns the DialogRows within the specified range.
	 * @param from The DialogRow, index, or name at the beginning of the range.
	 * @param to The DialogRow, index, or name at the end of the range.
	 */
	itemByRange(from: DialogRow | number | string, to: DialogRow | number | string): DialogRow[];

	/**
	 * Returns the last DialogRow in the collection.
	 */
	lastItem(): DialogRow;

	/**
	 * Returns the middle DialogRow in the collection.
	 */
	middleItem(): DialogRow;

	/**
	 * Returns the DialogRow whose index follows the specified DialogRow in the collection.
	 * @param obj The DialogRow whose index comes before the desired DialogRow.
	 */
	nextItem(obj: DialogRow): DialogRow;

	/**
	 * Returns the DialogRow with the index previous to the specified index.
	 * @param obj The index of the DialogRow that follows the desired DialogRow.
	 */
	previousItem(obj: DialogRow): DialogRow;

	/**
	 * Generates a string which, if executed, will return the DialogRow.
	 */
	toSource(): string;

}

/**
 * An XML element.
 */
declare class XMLElement extends XMLItem {
	/**
	 * A collection of table cells.
	 */
	readonly cells: Cells;

	/**
	 * A collection of characters.
	 */
	readonly characters: Characters;

	/**
	 * The contents of the text.
	 */
	contents: string | SpecialCharacters;

	/**
	 * A collection of EPS files.
	 */
	readonly epss: EPSs;

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;

	/**
	 * A collection of insertion points.
	 */
	readonly insertionPoints: InsertionPoints;

	/**
	 * A collection of lines.
	 */
	readonly lines: Lines;

	/**
	 * The XML tag applied to the element.
	 */
	markupTag: XMLTag | string;

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	readonly pageItems: PageItems;

	/**
	 * A collection of paragraphs.
	 */
	readonly paragraphs: Paragraphs;

	/**
	 * The story that contains the text.
	 */
	readonly parentStory: Story;

	/**
	 * A collection of PDF files.
	 */
	readonly pdfs: PDFs;

	/**
	 * A collection of PICT graphics.
	 */
	readonly picts: PICTs;

	/**
	 * A collection of stories.
	 */
	readonly stories: Stories;

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	readonly storyOffset: InsertionPoint;

	/**
	 * A collection of tables.
	 */
	readonly tables: Tables;

	/**
	 * A collection of text columns.
	 */
	readonly textColumns: TextColumns;

	/**
	 * A collection of text style ranges.
	 */
	readonly textStyleRanges: TextStyleRanges;

	/**
	 * A collection of text objects.
	 */
	readonly texts: Texts;

	/**
	 * A collection of WMF graphics.
	 */
	readonly wmfs: WMFs;

	/**
	 * A collection of words.
	 */
	readonly words: Words;

	/**
	 * A collection of XML attributes.
	 */
	readonly xmlAttributes: XMLAttributes;

	/**
	 * A collection of XML comments.
	 */
	readonly xmlComments: XMLComments;

	/**
	 * The text content or page item referred to by the element.
	 */
	readonly xmlContent: Text | Story | PageItem | Movie | Sound | Graphic | Table | Cell;

	/**
	 * A collection of XML elements.
	 */
	readonly xmlElements: XMLElements;

	/**
	 * A collection of XML instructions.
	 */
	readonly xmlInstructions: XMLInstructions;

	/**
	 * A collection of XML items.
	 */
	readonly xmlItems: XMLItems;

	/**
	 * Applies a cell style to the table cells associated with the XMLElement.
	 * @param using The cell style to apply.
	 * @param clearingOverrides If true, removes local formatting before applying the cell style.
	 */
	applyCellStyle(using: string | CellStyle, clearingOverrides?: boolean): void;

	/**
	 * Applies the specified character style to the text content of the XMLElement.
	 * @param using The character style to apply.
	 */
	applyCharacterStyle(using: string | CharacterStyle): void;

	/**
	 * Applies an object style to the frame associated with the XMLElement.
	 * @param using The object style to apply.
	 * @param clearingOverrides If true, removes local formatting before applying the object style.
	 * @param clearingOverridesThroughRootObjectStyle If true, clears unchecked category attributes through the root style.
	 */
	applyObjectStyle(using: string | ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;

	/**
	 * Applies the specified paragraph style to the text content of the XMLElement.
	 * @param using The paragraph style to apply.
	 * @param clearingOverrides If true, clears any attributes before applying the style.
	 */
	applyParagraphStyle(using: string | ParagraphStyle, clearingOverrides?: boolean): void;

	/**
	 * Applies a table style to the table associated with the XMLElement.
	 * @param using The table style to apply.
	 * @param clearingOverrides If true, removes local formatting before applying the table style.
	 */
	applyTableStyle(using: string | TableStyle, clearingOverrides?: boolean): void;

	/**
	 * asynchronously exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	asynchronousExportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Converts the content of the XML element to a table.
	 * @param rowTag The XML tag that indicates a table row.
	 * @param cellTag The XML tag that indicates a table cell.
	 */
	convertElementToTable(rowTag: XMLTag, cellTag: XMLTag): Table;

	/**
	 * Converts the XMLElement to an attribute of its parent element.
	 * @param using The name to give to the new attribute.
	 */
	convertToAttribute(using: string): XMLAttribute;

	/**
	 * Evaluates an XPath expression starting at this XML element in the structure.
	 * @param using The XPath expression.
	 * @param prefixMappingTable The namespace mapping table. Can accept: Array of Arrays of 2 Strings.
	 */
	evaluateXPathExpression(using: string, prefixMappingTable: any[]): XMLItem[];

	/**
	 * Exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	exportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[];

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[];

	/**
	 * Imports the specified XML file into an InDesign document.
	 * @param from The XML file.
	 */
	importXML(from: File): void;

	/**
	 * Inserts the specified text as content before, in, or after the XML element.
	 * @param using The text to be inserted.
	 * @param position The position at which to insert the text. Note that text inserted before or after the element does not become part of the content of the element. Instead, it becomes content of the parent of the element.
	 */
	insertTextAsContent(using: string | SpecialCharacters, position: XMLElementPosition): Text;

	/**
	 * Associates the object with the specified XML element while preserving existing content.
	 * @param using The object to mark up.
	 */
	markup(using: PageItem | Movie | Sound | Graphic | Story | Text | Table): void;

	/**
	 * Moves the element to the specified location.
	 * @param to The location in relation to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after. .
	 */
	move(to: LocationOptions, reference: XMLItem | Text): XMLElement;

	/**
	 * Associates the XML element with a copy of a page item.
	 * @param on The page or spread on which to create the new page item.
	 * @param placePoint The page coordinates of the top left corner of the page item, in the format [y1, x1]
	 * @param copyItem The page item to copy.
	 * @param retainExistingFrame If true, associates the XML element with the existing page item and moves the page item (rather than a copy of the page item).
	 */
	placeIntoCopy(on: Spread | Page | MasterSpread, placePoint: (number | string)[], copyItem: PageItem, retainExistingFrame?: boolean): PageItem;

	/**
	 * Places the XML element into a new rectangular page item. If the XML element was already associated with a page item, that page item is deleted.
	 * @param on The page or spread on which to create the new page item.
	 * @param geometricBounds The bounds of the page item excluding the stroke width, in the format [y1, x1, y2, x2].
	 */
	placeIntoFrame(on: Spread | Page | MasterSpread, geometricBounds: (number | string)[]): PageItem;

	/**
	 * Associates an existing page item with the XML element and places it into an inline frame.
	 * @param copyItem The page item to copy.
	 * @param retainExistingFrame If true, moves the existing page item. If false, moves a copy of the page item.
	 */
	placeIntoInlineCopy(copyItem: PageItem, retainExistingFrame?: boolean): PageItem;

	/**
	 * Places an XML element into an inline frame.
	 * @param dimensions The dimensions of the inline frame in the format [width, height].
	 */
	placeIntoInlineFrame(dimensions: (number | string)[]): PageItem;

	/**
	 * Places XML content into the story, replacing the existing content.
	 * @param using The object to place into.
	 */
	placeXML(using: Story | PageItem | Graphic | Movie | Sound): void;

	/**
	 * Replaces the content of XML element with content imported from a file.
	 * @param using The file path to the import file.
	 * @param relativeBasePath Base path used to resolve relative paths.
	 */
	setContent(using: string, relativeBasePath: string): PageItem;

	/**
	 * Stores the object in the specified library.
	 * @param using The library in which to store the object.
	 * @param withProperties Initial values for properties of the new XMLElement
	 */
	store(using: Library, withProperties: object): Asset;

	/**
	 * Untags an element.
	 */
	untag(): void;

	/**
	 * Validates the element against a DTD.
	 * @param maximumErrors The maximum number of validation errors to generate.
	 */
	validate(maximumErrors?: number): ValidationError[];

}

/**
 * A collection of XML elements.
 */
declare class XMLElements {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the XMLElement with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLElement;

	/**
	 * Creates a new XML element.
	 * @param markupTag The XML tag used to identify the element.
	 * @param xmlContent The content to be marked up.
	 * @param withProperties Initial values for properties of the new XMLElement
	 */
	add(markupTag: string | XMLTag, xmlContent: Text | Story | PageItem | Movie | Sound | Graphic | Table | Cell, withProperties: object): XMLElement;

	/**
	 * Returns any XMLElement in the collection.
	 */
	anyItem(): XMLElement;

	/**
	 * Displays the number of elements in the XMLElement.
	 */
	count(): number;

	/**
	 * Returns every XMLElement in the collection.
	 */
	everyItem(): XMLElement[];

	/**
	 * Returns the first XMLElement in the collection.
	 */
	firstItem(): XMLElement;

	/**
	 * Returns the XMLElement with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLElement;

	/**
	 * Returns the XMLElement with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XMLElement;

	/**
	 * Returns the XMLElements within the specified range.
	 * @param from The XMLElement, index, or name at the beginning of the range.
	 * @param to The XMLElement, index, or name at the end of the range.
	 */
	itemByRange(from: XMLElement | number | string, to: XMLElement | number | string): XMLElement[];

	/**
	 * Returns the last XMLElement in the collection.
	 */
	lastItem(): XMLElement;

	/**
	 * Returns the middle XMLElement in the collection.
	 */
	middleItem(): XMLElement;

	/**
	 * Returns the XMLElement whose index follows the specified XMLElement in the collection.
	 * @param obj The XMLElement whose index comes before the desired XMLElement.
	 */
	nextItem(obj: XMLElement): XMLElement;

	/**
	 * Returns the XMLElement with the index previous to the specified index.
	 * @param obj The index of the XMLElement that follows the desired XMLElement.
	 */
	previousItem(obj: XMLElement): XMLElement;

	/**
	 * Generates a string which, if executed, will return the XMLElement.
	 */
	toSource(): string;

}

/**
 * An XML attribute.
 */
declare class XMLAttribute {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the XMLAttribute within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The name of the XMLAttribute.
	 */
	name: string;

	/**
	 * The parent of the XMLAttribute (a XMLElement).
	 */
	readonly parent: XMLElement;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The value of the XMLAttribute.
	 */
	value: string;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Converts the XML attribute to a child element of its parent element.
	 * @param located The location of the new XML element within the parent XML element of the XML attribute.
	 * @param markupTag The XML tag to apply to the new XML element.
	 */
	convertToElement(located?: XMLElementLocation, markupTag?: XMLTag): XMLElement;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLAttribute[];

	/**
	 * Deletes the XMLAttribute.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the XMLAttribute in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void;

	/**
	 * Generates a string which, if executed, will return the XMLAttribute.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of XML attributes.
 */
declare class XMLAttributes {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the XMLAttribute with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLAttribute;

	/**
	 * Creates a new XML attribute.
	 * @param name The name of the attribute.
	 * @param value The value of the attribute.
	 * @param withProperties Initial values for properties of the new XMLAttribute
	 */
	add(name: string, value: string, withProperties: object): XMLAttribute;

	/**
	 * Returns any XMLAttribute in the collection.
	 */
	anyItem(): XMLAttribute;

	/**
	 * Displays the number of elements in the XMLAttribute.
	 */
	count(): number;

	/**
	 * Returns every XMLAttribute in the collection.
	 */
	everyItem(): XMLAttribute[];

	/**
	 * Returns the first XMLAttribute in the collection.
	 */
	firstItem(): XMLAttribute;

	/**
	 * Returns the XMLAttribute with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLAttribute;

	/**
	 * Returns the XMLAttribute with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): XMLAttribute;

	/**
	 * Returns the XMLAttributes within the specified range.
	 * @param from The XMLAttribute, index, or name at the beginning of the range.
	 * @param to The XMLAttribute, index, or name at the end of the range.
	 */
	itemByRange(from: XMLAttribute | number | string, to: XMLAttribute | number | string): XMLAttribute[];

	/**
	 * Returns the last XMLAttribute in the collection.
	 */
	lastItem(): XMLAttribute;

	/**
	 * Returns the middle XMLAttribute in the collection.
	 */
	middleItem(): XMLAttribute;

	/**
	 * Returns the XMLAttribute whose index follows the specified XMLAttribute in the collection.
	 * @param obj The XMLAttribute whose index comes before the desired XMLAttribute.
	 */
	nextItem(obj: XMLAttribute): XMLAttribute;

	/**
	 * Returns the XMLAttribute with the index previous to the specified index.
	 * @param obj The index of the XMLAttribute that follows the desired XMLAttribute.
	 */
	previousItem(obj: XMLAttribute): XMLAttribute;

	/**
	 * Generates a string which, if executed, will return the XMLAttribute.
	 */
	toSource(): string;

}

/**
 * An XML markup tag.
 */
declare class XMLTag {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the XMLTag.
	 */
	readonly id: number;

	/**
	 * The index of the XMLTag within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the XMLTag.
	 */
	name: string;

	/**
	 * The parent of the XMLTag (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The color of the tag, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	tagColor: [number, number, number] | UIColors;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLTag[];

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the tag.
	 * @param replacingWith The tag to substitute.
	 */
	remove(replacingWith: XMLTag | string): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the XMLTag.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of XML tags.
 */
declare class XMLTags {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the XMLTag with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLTag;

	/**
	 * Creates a tag.
	 * @param name The name of the tag.
	 * @param tagColor The dolor of the tag, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 * @param withProperties Initial values for properties of the new XMLTag
	 */
	add(name: string, tagColor: [number, number, number] | UIColors, withProperties: object): XMLTag;

	/**
	 * Returns any XMLTag in the collection.
	 */
	anyItem(): XMLTag;

	/**
	 * Displays the number of elements in the XMLTag.
	 */
	count(): number;

	/**
	 * Returns every XMLTag in the collection.
	 */
	everyItem(): XMLTag[];

	/**
	 * Returns the first XMLTag in the collection.
	 */
	firstItem(): XMLTag;

	/**
	 * Returns the XMLTag with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLTag;

	/**
	 * Returns the XMLTag with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XMLTag;

	/**
	 * Returns the XMLTag with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): XMLTag;

	/**
	 * Returns the XMLTags within the specified range.
	 * @param from The XMLTag, index, or name at the beginning of the range.
	 * @param to The XMLTag, index, or name at the end of the range.
	 */
	itemByRange(from: XMLTag | number | string, to: XMLTag | number | string): XMLTag[];

	/**
	 * Returns the last XMLTag in the collection.
	 */
	lastItem(): XMLTag;

	/**
	 * Returns the middle XMLTag in the collection.
	 */
	middleItem(): XMLTag;

	/**
	 * Returns the XMLTag whose index follows the specified XMLTag in the collection.
	 * @param obj The XMLTag whose index comes before the desired XMLTag.
	 */
	nextItem(obj: XMLTag): XMLTag;

	/**
	 * Returns the XMLTag with the index previous to the specified index.
	 * @param obj The index of the XMLTag that follows the desired XMLTag.
	 */
	previousItem(obj: XMLTag): XMLTag;

	/**
	 * Generates a string which, if executed, will return the XMLTag.
	 */
	toSource(): string;

}

/**
 * A mapping object that maps an XML tag to a style (paragraph, character, table, or cell).
 */
declare class XMLImportMap {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the XMLImportMap within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The style mapped to the XML tag.
	 */
	mappedStyle: ParagraphStyle | CharacterStyle | TableStyle | CellStyle | string;

	/**
	 * The XML tag applied to the element.
	 */
	readonly markupTag: XMLTag | string;

	/**
	 * The parent of the XMLImportMap (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLImportMap[];

	/**
	 * Deletes the XMLImportMap.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the XMLImportMap.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of XML import maps.
 */
declare class XMLImportMaps {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the XMLImportMap with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLImportMap;

	/**
	 * Create a new mapping
	 * @param markupTag The tag to map.
	 * @param mappedStyle the mapped style.
	 * @param withProperties Initial values for properties of the new XMLImportMap
	 */
	add(markupTag: XMLTag | string, mappedStyle: ParagraphStyle | CharacterStyle | TableStyle | CellStyle | string, withProperties: object): XMLImportMap;

	/**
	 * Returns any XMLImportMap in the collection.
	 */
	anyItem(): XMLImportMap;

	/**
	 * Displays the number of elements in the XMLImportMap.
	 */
	count(): number;

	/**
	 * Returns every XMLImportMap in the collection.
	 */
	everyItem(): XMLImportMap[];

	/**
	 * Returns the first XMLImportMap in the collection.
	 */
	firstItem(): XMLImportMap;

	/**
	 * Returns the XMLImportMap with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLImportMap;

	/**
	 * Returns the XMLImportMaps within the specified range.
	 * @param from The XMLImportMap, index, or name at the beginning of the range.
	 * @param to The XMLImportMap, index, or name at the end of the range.
	 */
	itemByRange(from: XMLImportMap | number | string, to: XMLImportMap | number | string): XMLImportMap[];

	/**
	 * Returns the last XMLImportMap in the collection.
	 */
	lastItem(): XMLImportMap;

	/**
	 * Returns the middle XMLImportMap in the collection.
	 */
	middleItem(): XMLImportMap;

	/**
	 * Returns the XMLImportMap whose index follows the specified XMLImportMap in the collection.
	 * @param obj The XMLImportMap whose index comes before the desired XMLImportMap.
	 */
	nextItem(obj: XMLImportMap): XMLImportMap;

	/**
	 * Returns the XMLImportMap with the index previous to the specified index.
	 * @param obj The index of the XMLImportMap that follows the desired XMLImportMap.
	 */
	previousItem(obj: XMLImportMap): XMLImportMap;

	/**
	 * Generates a string which, if executed, will return the XMLImportMap.
	 */
	toSource(): string;

}

/**
 * A mapping object that maps a style (paragraph, character, table, or cell) to an XML tag.
 */
declare class XMLExportMap {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, includes empty stories when mapping styles to tags.
	 */
	includeEmptyStories: boolean;

	/**
	 * If true, includes stories on master spreads when mapping styles to tags.
	 */
	includeMasterPageStories: boolean;

	/**
	 * If true, includes stories on the pasteboard when mapping styles to tags.
	 */
	includePasteboardStories: boolean;

	/**
	 * The index of the XMLExportMap within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The style mapped to the XML tag.
	 */
	readonly mappedStyle: ParagraphStyle | CharacterStyle | TableStyle | CellStyle | string;

	/**
	 * The XML tag applied to the element.
	 */
	markupTag: XMLTag | string;

	/**
	 * The parent of the XMLExportMap (a Application or Document).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLExportMap[];

	/**
	 * Deletes the XMLExportMap.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the XMLExportMap.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of XML export maps.
 */
declare class XMLExportMaps {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the XMLExportMap with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLExportMap;

	/**
	 * Create a new mapping
	 * @param mappedStyle The mapped style.
	 * @param markupTag The tag to map.
	 * @param withProperties Initial values for properties of the new XMLExportMap
	 */
	add(mappedStyle: ParagraphStyle | CharacterStyle | TableStyle | CellStyle | string, markupTag: XMLTag | string, withProperties: object): XMLExportMap;

	/**
	 * Returns any XMLExportMap in the collection.
	 */
	anyItem(): XMLExportMap;

	/**
	 * Displays the number of elements in the XMLExportMap.
	 */
	count(): number;

	/**
	 * Returns every XMLExportMap in the collection.
	 */
	everyItem(): XMLExportMap[];

	/**
	 * Returns the first XMLExportMap in the collection.
	 */
	firstItem(): XMLExportMap;

	/**
	 * Returns the XMLExportMap with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLExportMap;

	/**
	 * Returns the XMLExportMaps within the specified range.
	 * @param from The XMLExportMap, index, or name at the beginning of the range.
	 * @param to The XMLExportMap, index, or name at the end of the range.
	 */
	itemByRange(from: XMLExportMap | number | string, to: XMLExportMap | number | string): XMLExportMap[];

	/**
	 * Returns the last XMLExportMap in the collection.
	 */
	lastItem(): XMLExportMap;

	/**
	 * Returns the middle XMLExportMap in the collection.
	 */
	middleItem(): XMLExportMap;

	/**
	 * Returns the XMLExportMap whose index follows the specified XMLExportMap in the collection.
	 * @param obj The XMLExportMap whose index comes before the desired XMLExportMap.
	 */
	nextItem(obj: XMLExportMap): XMLExportMap;

	/**
	 * Returns the XMLExportMap with the index previous to the specified index.
	 * @param obj The index of the XMLExportMap that follows the desired XMLExportMap.
	 */
	previousItem(obj: XMLExportMap): XMLExportMap;

	/**
	 * Generates a string which, if executed, will return the XMLExportMap.
	 */
	toSource(): string;

}

/**
 * An XML validation error.
 */
declare class ValidationError {
	/**
	 * The attribute name if the validation error refers to an attribute.
	 */
	readonly attributeName: string;

	/**
	 * The element that caused the validation error.
	 */
	readonly element: XMLElement;

	/**
	 * The validation error message.
	 */
	readonly errorMessage: string;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the ValidationError within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the ValidationError (a Document).
	 */
	readonly parent: Document;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ValidationError[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the ValidationError.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of XML validation errors.
 */
declare class ValidationErrors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the ValidationError with the specified index.
	 * @param index The index.
	 */
	[index: number]: ValidationError;

	/**
	 * Returns any ValidationError in the collection.
	 */
	anyItem(): ValidationError;

	/**
	 * Displays the number of elements in the ValidationError.
	 */
	count(): number;

	/**
	 * Returns every ValidationError in the collection.
	 */
	everyItem(): ValidationError[];

	/**
	 * Returns the first ValidationError in the collection.
	 */
	firstItem(): ValidationError;

	/**
	 * Returns the ValidationError with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ValidationError;

	/**
	 * Returns the ValidationErrors within the specified range.
	 * @param from The ValidationError, index, or name at the beginning of the range.
	 * @param to The ValidationError, index, or name at the end of the range.
	 */
	itemByRange(from: ValidationError | number | string, to: ValidationError | number | string): ValidationError[];

	/**
	 * Returns the last ValidationError in the collection.
	 */
	lastItem(): ValidationError;

	/**
	 * Returns the middle ValidationError in the collection.
	 */
	middleItem(): ValidationError;

	/**
	 * Returns the ValidationError whose index follows the specified ValidationError in the collection.
	 * @param obj The ValidationError whose index comes before the desired ValidationError.
	 */
	nextItem(obj: ValidationError): ValidationError;

	/**
	 * Returns the ValidationError with the index previous to the specified index.
	 * @param obj The index of the ValidationError that follows the desired ValidationError.
	 */
	previousItem(obj: ValidationError): ValidationError;

	/**
	 * Generates a string which, if executed, will return the ValidationError.
	 */
	toSource(): string;

}

/**
 * An XML comment.
 */
declare class XMLComment extends XMLItem {
	/**
	 * The insertion point before the table in the story containing the table.
	 */
	readonly storyOffset: InsertionPoint;

	/**
	 * The text of the XML comment.
	 */
	value: string;

	/**
	 * Moves the element to the specified location.
	 * @param to The location in relation to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after. .
	 */
	move(to: LocationOptions, reference: XMLItem | Text): XMLComment;

}

/**
 * A collection of XML comments.
 */
declare class XMLComments {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the XMLComment with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLComment;

	/**
	 * Creates a new XML comment.
	 * @param value The value of the comment.
	 * @param storyOffset The location within the story, specified as an insertion point.
	 * @param withProperties Initial values for properties of the new XMLComment
	 */
	add(value?: string, storyOffset?: InsertionPoint | number, withProperties?: object): XMLComment;

	/**
	 * Returns any XMLComment in the collection.
	 */
	anyItem(): XMLComment;

	/**
	 * Displays the number of elements in the XMLComment.
	 */
	count(): number;

	/**
	 * Returns every XMLComment in the collection.
	 */
	everyItem(): XMLComment[];

	/**
	 * Returns the first XMLComment in the collection.
	 */
	firstItem(): XMLComment;

	/**
	 * Returns the XMLComment with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLComment;

	/**
	 * Returns the XMLComment with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XMLComment;

	/**
	 * Returns the XMLComments within the specified range.
	 * @param from The XMLComment, index, or name at the beginning of the range.
	 * @param to The XMLComment, index, or name at the end of the range.
	 */
	itemByRange(from: XMLComment | number | string, to: XMLComment | number | string): XMLComment[];

	/**
	 * Returns the last XMLComment in the collection.
	 */
	lastItem(): XMLComment;

	/**
	 * Returns the middle XMLComment in the collection.
	 */
	middleItem(): XMLComment;

	/**
	 * Returns the XMLComment whose index follows the specified XMLComment in the collection.
	 * @param obj The XMLComment whose index comes before the desired XMLComment.
	 */
	nextItem(obj: XMLComment): XMLComment;

	/**
	 * Returns the XMLComment with the index previous to the specified index.
	 * @param obj The index of the XMLComment that follows the desired XMLComment.
	 */
	previousItem(obj: XMLComment): XMLComment;

	/**
	 * Generates a string which, if executed, will return the XMLComment.
	 */
	toSource(): string;

}

/**
 * An XML processing instruction.
 */
declare class XMLInstruction extends XMLItem {
	/**
	 * A value that tells the application reading the exported XML file what to do with the processing instruction.
	 */
	data: string;

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	readonly storyOffset: InsertionPoint;

	/**
	 * A name that identifies the processing instruction to an application reading the exported XML file.
	 */
	target: string;

	/**
	 * Moves the element to the specified location.
	 * @param to The location in relation to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after. .
	 */
	move(to: LocationOptions, reference: XMLItem | Text): XMLInstruction;

}

/**
 * A collection of XML instructions.
 */
declare class XMLInstructions {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the XMLInstruction with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLInstruction;

	/**
	 * Creates a new XML processing instruction.
	 * @param target A name that identifies the processing instruction to an application reading the exported XML file.
	 * @param data A value that tells the application what to do with the processing instruction identified in the target.
	 * @param storyOffset The location within the story, specified as an insertion point.
	 * @param withProperties Initial values for properties of the new XMLInstruction
	 */
	add(target: string, data?: string, storyOffset?: InsertionPoint | number, withProperties?: object): XMLInstruction;

	/**
	 * Returns any XMLInstruction in the collection.
	 */
	anyItem(): XMLInstruction;

	/**
	 * Displays the number of elements in the XMLInstruction.
	 */
	count(): number;

	/**
	 * Returns every XMLInstruction in the collection.
	 */
	everyItem(): XMLInstruction[];

	/**
	 * Returns the first XMLInstruction in the collection.
	 */
	firstItem(): XMLInstruction;

	/**
	 * Returns the XMLInstruction with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLInstruction;

	/**
	 * Returns the XMLInstruction with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XMLInstruction;

	/**
	 * Returns the XMLInstructions within the specified range.
	 * @param from The XMLInstruction, index, or name at the beginning of the range.
	 * @param to The XMLInstruction, index, or name at the end of the range.
	 */
	itemByRange(from: XMLInstruction | number | string, to: XMLInstruction | number | string): XMLInstruction[];

	/**
	 * Returns the last XMLInstruction in the collection.
	 */
	lastItem(): XMLInstruction;

	/**
	 * Returns the middle XMLInstruction in the collection.
	 */
	middleItem(): XMLInstruction;

	/**
	 * Returns the XMLInstruction whose index follows the specified XMLInstruction in the collection.
	 * @param obj The XMLInstruction whose index comes before the desired XMLInstruction.
	 */
	nextItem(obj: XMLInstruction): XMLInstruction;

	/**
	 * Returns the XMLInstruction with the index previous to the specified index.
	 * @param obj The index of the XMLInstruction that follows the desired XMLInstruction.
	 */
	previousItem(obj: XMLInstruction): XMLInstruction;

	/**
	 * Generates a string which, if executed, will return the XMLInstruction.
	 */
	toSource(): string;

}

/**
 * An XML item.
 */
declare class XMLItem {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The unique ID of the XMLItem.
	 */
	readonly id: number;

	/**
	 * The index of the XMLItem within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The parent of the XMLItem (a Document or XMLElement).
	 */
	readonly parent: any;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Duplicates the XMLItem.
	 */
	duplicate(): XMLItem;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLItem[];

	/**
	 * Deletes the XMLItem.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the XMLItem in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void;

	/**
	 * Generates a string which, if executed, will return the XMLItem.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of XML items.
 */
declare class XMLItems {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the XMLItem with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLItem;

	/**
	 * Returns any XMLItem in the collection.
	 */
	anyItem(): XMLItem;

	/**
	 * Displays the number of elements in the XMLItem.
	 */
	count(): number;

	/**
	 * Returns every XMLItem in the collection.
	 */
	everyItem(): XMLItem[];

	/**
	 * Returns the first XMLItem in the collection.
	 */
	firstItem(): XMLItem;

	/**
	 * Returns the XMLItem with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLItem;

	/**
	 * Returns the XMLItem with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XMLItem;

	/**
	 * Returns the XMLItems within the specified range.
	 * @param from The XMLItem, index, or name at the beginning of the range.
	 * @param to The XMLItem, index, or name at the end of the range.
	 */
	itemByRange(from: XMLItem | number | string, to: XMLItem | number | string): XMLItem[];

	/**
	 * Returns the last XMLItem in the collection.
	 */
	lastItem(): XMLItem;

	/**
	 * Returns the middle XMLItem in the collection.
	 */
	middleItem(): XMLItem;

	/**
	 * Returns the XMLItem whose index follows the specified XMLItem in the collection.
	 * @param obj The XMLItem whose index comes before the desired XMLItem.
	 */
	nextItem(obj: XMLItem): XMLItem;

	/**
	 * Returns the XMLItem with the index previous to the specified index.
	 * @param obj The index of the XMLItem that follows the desired XMLItem.
	 */
	previousItem(obj: XMLItem): XMLItem;

	/**
	 * Generates a string which, if executed, will return the XMLItem.
	 */
	toSource(): string;

}

/**
 * The document DTD.
 */
declare class DTD extends XMLItem {
	/**
	 * The contents of the text.
	 */
	readonly contents: string | SpecialCharacters;

	/**
	 * The public ID of the DOCTYPE declaration. Note: Valid only when the DTD is an external subset.
	 */
	readonly publicId: string;

	/**
	 * The tag of the root object.
	 */
	rootTag: XMLTag;

	/**
	 * The system ID of the DOCTYPE declaration. Note: Valid only when the DTD is an external subset.
	 */
	readonly systemId: string;

}

/**
 * A collection of DTDs.
 */
declare class DTDs {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the DTD with the specified index.
	 * @param index The index.
	 */
	[index: number]: DTD;

	/**
	 * Returns any DTD in the collection.
	 */
	anyItem(): DTD;

	/**
	 * Displays the number of elements in the DTD.
	 */
	count(): number;

	/**
	 * Returns every DTD in the collection.
	 */
	everyItem(): DTD[];

	/**
	 * Returns the first DTD in the collection.
	 */
	firstItem(): DTD;

	/**
	 * Returns the DTD with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DTD;

	/**
	 * Returns the DTD with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): DTD;

	/**
	 * Returns the DTDs within the specified range.
	 * @param from The DTD, index, or name at the beginning of the range.
	 * @param to The DTD, index, or name at the end of the range.
	 */
	itemByRange(from: DTD | number | string, to: DTD | number | string): DTD[];

	/**
	 * Returns the last DTD in the collection.
	 */
	lastItem(): DTD;

	/**
	 * Returns the middle DTD in the collection.
	 */
	middleItem(): DTD;

	/**
	 * Returns the DTD whose index follows the specified DTD in the collection.
	 * @param obj The DTD whose index comes before the desired DTD.
	 */
	nextItem(obj: DTD): DTD;

	/**
	 * Returns the DTD with the index previous to the specified index.
	 * @param obj The index of the DTD that follows the desired DTD.
	 */
	previousItem(obj: DTD): DTD;

	/**
	 * Generates a string which, if executed, will return the DTD.
	 */
	toSource(): string;

}

/**
 * XML text content that has not yet been placed in the layout.
 */
declare class XmlStory extends Story {
}

/**
 * A collection of xml stories.
 */
declare class XmlStories {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the XmlStory with the specified index.
	 * @param index The index.
	 */
	[index: number]: XmlStory;

	/**
	 * Returns any XmlStory in the collection.
	 */
	anyItem(): XmlStory;

	/**
	 * Displays the number of elements in the XmlStory.
	 */
	count(): number;

	/**
	 * Returns every XmlStory in the collection.
	 */
	everyItem(): XmlStory[];

	/**
	 * Returns the first XmlStory in the collection.
	 */
	firstItem(): XmlStory;

	/**
	 * Returns the XmlStory with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XmlStory;

	/**
	 * Returns the XmlStory with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XmlStory;

	/**
	 * Returns the XmlStory with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): XmlStory;

	/**
	 * Returns the XmlStories within the specified range.
	 * @param from The XmlStory, index, or name at the beginning of the range.
	 * @param to The XmlStory, index, or name at the end of the range.
	 */
	itemByRange(from: XmlStory | number | string, to: XmlStory | number | string): XmlStory[];

	/**
	 * Returns the last XmlStory in the collection.
	 */
	lastItem(): XmlStory;

	/**
	 * Returns the middle XmlStory in the collection.
	 */
	middleItem(): XmlStory;

	/**
	 * Returns the XmlStory whose index follows the specified XmlStory in the collection.
	 * @param obj The XmlStory whose index comes before the desired XmlStory.
	 */
	nextItem(obj: XmlStory): XmlStory;

	/**
	 * Returns the XmlStory with the index previous to the specified index.
	 * @param obj The index of the XmlStory that follows the desired XmlStory.
	 */
	previousItem(obj: XmlStory): XmlStory;

	/**
	 * Generates a string which, if executed, will return the XmlStory.
	 */
	toSource(): string;

}

/**
 * An XML rule processor.
 */
declare class XMLRuleProcessor {
	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * If true, the XML rule process has halted.
	 */
	readonly halted: boolean;

	/**
	 * The unique ID of the XMLRuleProcessor.
	 */
	readonly id: number;

	/**
	 * The index of the XMLRuleProcessor within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * A property that can be set to any string.
	 */
	label: string;

	/**
	 * The name of the XMLRuleProcessor; this is an alias to the XMLRuleProcessor's label property.
	 */
	name: string;

	/**
	 * The parent of the XMLRuleProcessor (a Application).
	 */
	readonly parent: Application;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * The XPath condition paths of the rules in the rule set.
	 */
	readonly rulePaths: string[];

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Stop processing XML rule set.
	 */
	endProcessingRuleSet(): void;

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string;

	/**
	 * Finds the next matching XML element.
	 */
	findNextMatch(): XMLRuleMatchData;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLRuleProcessor[];

	/**
	 * Halt the XML rule processor.
	 */
	halt(): void;

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void;

	/**
	 * Deletes the XMLRuleProcessor.
	 */
	remove(): void;

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Do not process XML elements (children) of the current XML element.
	 */
	skipChildren(): void;

	/**
	 * Start processing an XML rule set.
	 * @param initialElement The XML element at which to start processing the rule set.
	 */
	startProcessingRuleSet(initialElement: XMLElement): XMLRuleMatchData;

	/**
	 * Process the XML elements of the current XML element.
	 */
	startProcessingSubtree(): XMLRuleMatchData;

	/**
	 * Generates a string which, if executed, will return the XMLRuleProcessor.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * A collection of XML rule processors.
 */
declare class XMLRuleProcessors {
	/**
	 * The number of objects in the collection.
	 */
	readonly length: number;

	/**
	 * Returns the XMLRuleProcessor with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLRuleProcessor;

	/**
	 * Create a new XMLRuleProcessor
	 * @param rulePaths The XPath condition paths of the rules in the rule set.
	 * @param prefixMappingTable The namespace mapping table. Can accept: Array of Arrays of 2 Strings.
	 * @param withProperties Initial values for properties of the new XMLRuleProcessor
	 */
	add(rulePaths: string[], prefixMappingTable: any[], withProperties: object): XMLRuleProcessor;

	/**
	 * Returns any XMLRuleProcessor in the collection.
	 */
	anyItem(): XMLRuleProcessor;

	/**
	 * Displays the number of elements in the XMLRuleProcessor.
	 */
	count(): number;

	/**
	 * Returns every XMLRuleProcessor in the collection.
	 */
	everyItem(): XMLRuleProcessor[];

	/**
	 * Returns the first XMLRuleProcessor in the collection.
	 */
	firstItem(): XMLRuleProcessor;

	/**
	 * Returns the XMLRuleProcessor with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLRuleProcessor;

	/**
	 * Returns the XMLRuleProcessor with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XMLRuleProcessor;

	/**
	 * Returns the XMLRuleProcessor with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): XMLRuleProcessor;

	/**
	 * Returns the XMLRuleProcessors within the specified range.
	 * @param from The XMLRuleProcessor, index, or name at the beginning of the range.
	 * @param to The XMLRuleProcessor, index, or name at the end of the range.
	 */
	itemByRange(from: XMLRuleProcessor | number | string, to: XMLRuleProcessor | number | string): XMLRuleProcessor[];

	/**
	 * Returns the last XMLRuleProcessor in the collection.
	 */
	lastItem(): XMLRuleProcessor;

	/**
	 * Returns the middle XMLRuleProcessor in the collection.
	 */
	middleItem(): XMLRuleProcessor;

	/**
	 * Returns the XMLRuleProcessor whose index follows the specified XMLRuleProcessor in the collection.
	 * @param obj The XMLRuleProcessor whose index comes before the desired XMLRuleProcessor.
	 */
	nextItem(obj: XMLRuleProcessor): XMLRuleProcessor;

	/**
	 * Returns the XMLRuleProcessor with the index previous to the specified index.
	 * @param obj The index of the XMLRuleProcessor that follows the desired XMLRuleProcessor.
	 */
	previousItem(obj: XMLRuleProcessor): XMLRuleProcessor;

	/**
	 * Generates a string which, if executed, will return the XMLRuleProcessor.
	 */
	toSource(): string;

}

/**
 * An XML element matched by a rule or rules in the current XML rule set.
 */
declare class XMLRuleMatchData {
	/**
	 * An XML element matched by a rule or rules in the current XML rule set.
	 */
	readonly element: XMLItem;

	/**
	 * A collection of event listeners.
	 */
	readonly eventListeners: EventListeners;

	/**
	 * A collection of events.
	 */
	readonly events: Events;

	/**
	 * The index of the XMLRuleMatchData within its containing object.
	 */
	readonly index: number;

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	readonly isValid: boolean;

	/**
	 * The indices of matching XML rules in the rule set.
	 */
	readonly matchRules: number[];

	/**
	 * The parent of the XMLRuleMatchData (a XMLRuleProcessor).
	 */
	readonly parent: XMLRuleProcessor;

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object;

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener;

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLRuleMatchData[];

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean;

	/**
	 * Generates a string which, if executed, will return the XMLRuleMatchData.
	 */
	toSource(): string;

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string;

}

/**
 * @summary Sets the blend mode of a page item.
 * @description Sets the Effects blendMode property of an object.
 *
 * @cat     Color
 * @method  blendMode
 *
 * @param   {object} obj The object to set blendMode of.
 * @param   {Number} blendMode The blendMode must be one of the InDesign BlendMode enum values:
 *   - `BlendMode.NORMAL`
 *   - `BlendMode.MULTIPLY`
 *   - `BlendMode.SCREEN`
 *   - `BlendMode.OVERLAY`
 *   - `BlendMode.SOFT_LIGHT`
 *   - `BlendMode.HARD_LIGHT`
 *   - `BlendMode.COLOR_DODGE`
 *   - `BlendMode.COLOR_BURN`
 *   - `BlendMode.DARKEN`
 *   - `BlendMode.LIGHTEN`
 *   - `BlendMode.DIFFERENCE`
 *   - `BlendMode.EXCLUSION`
 *   - `BlendMode.HUE`
 *   - `BlendMode.SATURATION`
 *   - `BlendMode.COLOR`
 *   - `BlendMode.LUMINOSITY`
 */
declare function blendMode(obj: any, blendMode: number): void;

/**
 * @summary Gets or creates a color.
 * @description Creates a new RGB / CMYK color and adds it to the document, or gets a color by name from the document. The default color mode is RGB.
 *
 * @cat     Color
 * @method  color
 *
 * @param   {String|Numbers} Get color: the color name. Create new color: GRAY,[name] / R,G,B,[name] / C,M,Y,K,[name]. Name is always optional.
 * @return  {Color} Found or new color
 */
declare function color(Get: string | Numbers): Color;

/**
 * @summary Sets the color mode to RGB or CMYK.
 * @description Sets the colormode for creating new colors with color() to RGB or CMYK. The default color mode is RGB.
 *
 * @cat     Color
 * @method  colorMode
 *
 * @param   {Number} colorMode RGB or CMYK.
 */
declare function colorMode(colorMode: number): void;

/**
 * @summary Sets the fill color of shapes and text.
 * @description Sets the color or gradient used to fill shapes.
 *
 * @cat     Color
 * @method  fill
 *
 * @param   {Color|Gradient|Swatch|Numbers|String} fillColor Accepts a color/gradient/swatch as string name or variable. Or values: GRAY / R,G,B / C,M,Y,K.
 * @param   {String} [name] If created with numbers, a custom swatch name can be given.
 */
declare function fill(fillColor: Color | Gradient | Swatch | Numbers | string, name?: string): void;

/**
 * @summary Sets a tint for the current fill color.
 * @description Sets the tint of the color used to fill shapes.
 *
 * @cat     Color
 * @method  fillTint
 *
 * @param   {Number} tint Number from 0 to 100
 */
declare function fillTint(tint: number): void;

/**
 * @summary Gets or creates a gradient.
 * @description Creates a new gradient and adds it to the document, or gets a gradient by name from the document.
 * If two colors are given as the first two parameters, a gradient is created that blends between these two colors. If an array of colors is used as the first parameter, a gradient with the contained colors will be created. The colors will be distributed evenly. If additionally to this array a second array of gradient stop positions is given, the colors will be positioned at the given gradient stops. Possible gradient stop positions range from 0 to 100. All parameter options allow for an additional name parameter at the end to name the new gradient. If a string is used as the only parameter, the gradient with that name will be returned, if it exists in the document.
 *
 * @cat     Color
 * @method  gradient
 *
 * @param   {Color|Array|String} c1 First color of the gradient. Alternatively: Array of colors/gradients or name of gradient to get.
 * @param   {Color|Array|String} c2 Second color of the gradient. Alternatively: Array of gradient stop positions (if first parameter is an array of colors).
 * @param   {String} [name] Optional name of the gradient.
 * @return  {Gradient} Found or new gradient
 */
declare function gradient(c1: Color | any[] | string, c2: Color | any[] | string, name?: string): Gradient;

/**
 * @summary Sets the gradient mode to linear or radial.
 * @description Sets the gradient mode for gradient() to `LINEAR` or `RADIAL`. The default gradient mode is `LINEAR`.
 *
 * @cat     Color
 * @method  gradientMode
 *
 * @param   {String} gradientMode `LINEAR` or `RADIAL`.
 */
declare function gradientMode(gradientMode: string): void;

/**
 * @summary Calculates colors between two other colors.
 * @description Calculates a color or colors between two colors at a specific increment.
 * The `amt` parameter is the amount to interpolate between the two values where 0.0 equals the first color, 0.5 is half-way in between and 1.0 equals the second color. N.B.: Both colors must be either CMYK or RGB.
 *
 * @cat     Color
 * @method  lerpColor
 *
 * @param   {Color} c1 Input color 1.
 * @param   {Color} c2 Input color 2.
 * @param   {Number} amt The amount to interpolate between the two colors.
 * @return  {Color} Interpolated color
 */
declare function lerpColor(c1: Color, c2: Color, amt: number): Color;

/**
 * @summary Disables fill color of shapes and text.
 * @description Disables filling geometry. If both `noStroke()` and `noFill()` are called, newly drawn shapes will be invisible.
 *
 * @cat     Color
 * @method  noFill
 */
declare function noFill(): void;

/**
 * @summary Disables drawing a stroke around shapes.
 * @description Disables drawing the stroke. If both noStroke() and noFill() are called, newly drawn shapes will be invisible.
 *
 * @cat     Color
 * @method  noStroke
 */
declare function noStroke(): void;

/**
 * @summary Sets the opacity of a page item.
 * @description Sets the opacity property of an object.
 *
 * @cat     Color
 * @method  opacity
 *
 * @param   {object} obj The object to set opacity of.
 * @param   {Number} opacity The opacity value from 0 to 100.
 */
declare function opacity(obj: any, opacity: number): void;

/**
 * @summary Sets the stroke color.
 * @description Sets the color or gradient used to draw lines and borders around shapes.
 *
 * @cat     Color
 * @method  stroke
 *
 * @param   {Color|Gradient|Swatch|Numbers|String} strokeColor Accepts a color/gradient/swatch as string name or variable. Or values: GRAY / R,G,B / C,M,Y,K.
 */
declare function stroke(strokeColor: Color | Gradient | Swatch | Numbers | string): void;

/**
 * @summary Sets the tint of the current stroke color.
 * @description Sets the tint of the color used to draw lines and borders around shapes.
 *
 * @cat     Color
 * @method  strokeTint
 *
 * @param   {Number} tint Number from 0 to 100.
 */
declare function strokeTint(tint: number): void;

/**
 * @summary Gets a color swatch.
 * @description Gets a swatch by name.
 *
 * @cat     Color
 * @method  swatch
 *
 * @param   {String} swatchName Returns the swatch color/gradient for a given name by string.
 */
declare function swatch(swatchName: string): void;

/**
 * @summary Runs a function on all elements of an array.
 * @description Used to run a function on all elements of an array. `forEach()` calls this callback function on each element of the given array. When the callback function returns false, the loop stops and an array of all elements up to this point is returned.
 * Please note the existence of the convenience methods `stories()`, `paragraphs()`, `lines()`, `words()` and `characters()` that are used to iterate through all instances of the given type in the given document.
 *
 * @cat     Data
 * @subcat  Collections
 * @method  forEach
 *
 * @param   {Array} collection The array to be processed.
 * @param   {Function} cb The function that will be called on each element. The call will be like `function(item, i)` where `i` is the current index of the item within the array.
 * @return  {Array} An array of the input array elements.
 */
declare function forEach(collection: any[], cb: (...params: any[]) => any): any[];

/**
 * @summary Converts a number to a binary string.
 * @description Converts a byte, char, int, or color to a String containing the equivalent binary notation. For example `color(0, 102, 153, 255)` will convert to the String `"11111111000000000110011010011001"`. This function can help make your geeky debugging sessions much happier.
 *
 *
 * @cat     Data
 * @subcat  Conversion
 * @method  binary
 *
 * @param   {Number} num value to convert
 * @param   {Number} [numBits] number of digits to return
 * @return  {String} A formatted string
 */
declare function binary(num: number, numBits?: number): string;

/**
 * @summary Converts a number to a hex number.
 * @description Convert a number to a hex representation.
 *
 * @cat     Data
 * @subcat  Conversion
 * @method  hex
 *
 * @param   {Number} value The number to convert
 * @param   {Number} [len] The length of the hex number to be created, default: `8`
 * @return  {String} The hex representation as a string
 */
declare function hex(value: number, len?: number): string;

/**
 * @summary Converts a binary number string to a number.
 * @description Converts a String representation of a binary number to its equivalent integer value. For example, `unbinary("00001000")` will return `8`.
 *
 * @cat     Data
 * @subcat  Conversion
 * @method  unbinary
 *
 * @param   {String} binaryString value to convert
 * @return  {Number} The integer representation
 */
declare function unbinary(binaryString: string): number;

/**
 * @summary Converts a hex number to a number.
 * @description Convert a hex representation to a number.
 *
 * @cat     Data
 * @subcat  Conversion
 * @method  unhex
 *
 * @param   {String} hex The hex representation
 * @return  {Number} The number
 */
declare function unhex(hex: string): number;

/**
 * @summary HashList is a data container to store key - value pairs.
 * @description HashList is a data container that allows you to store information as key - value pairs. As usual in JavaScript mixed types of keys and values are accepted in one HashList instance.
 *
 * @cat     Data
 * @subcat  HashList
 * @method  HashList
 *
 * @class
 */
declare class HashList {
    /**
     * @summary Deletes all key - value pairs in a HashList.
     * @description Deletes all the key - value pairs in this HashList.
     *
     * @cat     Data
     * @subcat  HashList
     * @method  HashList.clear
     */
    static clear(): void;
    /**
     * @summary Gets a HashList value by its key.
     * @description This gets a value by its key.
     *
     * @cat     Data
     * @subcat  HashList
     * @method  HashList.get
     *
     * @param   {String} key The key to look for.
     * @return  {object} The value.
     */
    static get(key: string): any;
    /**
     * @summary Gets an array of all HashList keys.
     * @description Returns an array with all keys.
     *
     * @cat     Data
     * @subcat  HashList
     * @method  HashList.getKeys
     *
     * @return  {Array} An array with all the keys.
     */
    static getKeys(): any[];
    /**
     * @summary Gets an array of all HashList keys sorted by their values.
     * @description Returns an array of all keys that are sorted by their values from highest to lowest. Please note that this only works if you have conistently used Numbers for values.
     *
     * @cat     Data
     * @subcat  HashList
     * @method  HashList.getKeysByValues
     *
     * @return  {Array} An array with all the keys.
     */
    static getKeysByValues(): any[];
    /**
     * @summary Gets an array of all HashList keys in a sorted order from higher to lower magnitude.
     * @description Returns an array with all keys in a sorted order from higher to lower magnitude.
     *
     * @cat     Data
     * @subcat  HashList
     * @method  HashList.getSortedKeys
     *
     * @return  {Array} An array with all the keys sorted.
     */
    static getSortedKeys(): any[];
    /**
     * @summary Gets an array of all HashList values.
     * @description Returns an array with all values.
     *
     * @cat     Data
     * @subcat  HashList
     * @method  HashList.getValues
     *
     * @return  {Array} An array with all the values.
     */
    static getValues(): any[];
    /**
     * @summary Checks if a HashList key exists.
     * @description Checks for the existence of a given key.
     *
     * @cat     Data
     * @subcat  HashList
     * @method  HashList.hasKey
     *
     * @param   {String} key The key to check.
     * @return  {Boolean} Returns true or false.
     */
    static hasKey(key: string): boolean;
    /**
     * @summary Checks if a HashList value exists.
     * @description Checks if a certain value exists at least once in all of the key - value pairs.
     *
     * @cat     Data
     * @subcat  HashList
     * @method  HashList.hasValue
     *
     * @param   {Object|String|Number|Boolean} value The value to check.
     * @return  {Boolean} Returns true or false.
     */
    static hasValue(value: any | string | number | boolean): boolean;
    /**
     * @summary Removes a HashList key - value pair by its key.
     * @description This removes a key - value pair by its key.
     *
     * @cat     Data
     * @subcat  HashList
     * @method  HashList.remove
     *
     * @param   {String} key The key to delete.
     * @return  {object} The value before deletion.
     */
    static remove(key: string): any;
    /**
     * @summary Sets a HashList key - value pair.
     * @description This sets a key - value pair. If a key is already existing, the value will be updated. Please note that Functions are currently not supported as values.
     *
     * @cat     Data
     * @subcat  HashList
     * @method  HashList.set
     *
     * @param   {String} key The key to use.
     * @param   {Object|String|Number|Boolean} value The value to set.
     * @return  {object} The value after setting.
     */
    static set(key: string, value: any | string | number | boolean): any;
}

/**
 * @summary Checks wether a string contains a specific string or if an array contains a specific element.
 * @description Checks wether a string contains a specific string or if an array contains a specific element.
 *
 * @cat     Data
 * @subcat  String Functions
 * @method  contains
 *
 * @param   {String} searchContainer A string or an array to be checked
 * @param   {String} valueToFind The value to search for
 * @return  {Boolean} Returns either true or false
 */
declare function contains(searchContainer: string, valueToFind: string): boolean;

/**
 * @summary Checks wether a string ends with a specific string or if an array ends with a specific element.
 * @description Checks whether a string ends with a specific character or string or if an array ends with a specific element.
 *
 * @cat     Data
 * @subcat  String Functions
 * @method  endsWith
 *
 * @param   {String} searchContainer A string or array to be checked
 * @param   {String} valueToFind The value to search for
 * @return  {Boolean} Returns either true or false
 */
declare function endsWith(searchContainer: string, valueToFind: string): boolean;

/**
 * @summary Combines an array into a string.
 * @description Combines an array of Strings into one String, each separated by the character(s) used for the separator parameter. To join arrays of ints or floats, it's necessary to first convert them to strings using `nf()` or `nfs()`.
 *
 * @cat     Data
 * @subcat  String Functions
 * @method  join
 *
 * @param   {Array} array A string array
 * @param   {String} separator The separator to be inserted
 * @return  {String} The joined string
 */
declare function join(array: any[], separator: string): string;

/**
 * @summary Formats numbers into strings, with options for leading and trailing zeros.
 * @description Utility function for formatting numbers into strings. There are two versions, one for formatting floats and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers.
 *
 * `nf()` is used to add zeros to the left and/or right of a number. This is typically for aligning a list of numbers. To remove digits from a floating-point number, use the `ceil()`, `floor()`, or `round()` functions.
 *
 * @cat     Data
 * @subcat  String Functions
 * @method  nf
 *
 * @param   {Number} value The Number to convert
 * @param   {Number} leftDigits
 * @param   {Number} rightDigits
 * @return  {String} The formatted string
 */
declare function nf(value: number, leftDigits: number, rightDigits: number): string;

/**
 * @summary Formats numbers into strings, including comma separators to mark units of 1000.
 * @description Utility function for formatting numbers into strings and placing appropriate commas to mark units of 1000. There are two versions, one for formatting ints and one for formatting an array of ints. The value for the digits parameter should always be a positive integer.
 *
 * @cat     Data
 * @subcat  String Functions
 * @method  nfc
 *
 * @param   {Number} value The Number to convert
 * @param   {Number} leftDigits
 * @param   {Number} rightDigits
 * @return  {String} The formatted string
 */
declare function nfc(value: number, leftDigits: number, rightDigits: number): string;

/**
 * @summary Formats numbers into strings, including a leading + or -.
 * @description Utility function for formatting numbers into strings. Similar to `nf()` but puts a `+` in front of positive numbers and a `-` in front of negative numbers. There are two versions, one for formatting floats and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers.
 *
 * @cat     Data
 * @subcat  String Functions
 * @method  nfp
 *
 * @param   {Number} value The Number to convert
 * @param   {Number} leftDigits
 * @param   {Number} rightDigits
 * @return  {String} The formatted string
 */
declare function nfp(value: number, leftDigits: number, rightDigits: number): string;

/**
 * @summary Formats numbers into strings, including a blank space before positive numbers.
 * @description Utility function for formatting numbers into strings. Similar to `nf()` but leaves a blank space in front of positive numbers so they align with negative numbers in spite of the minus symbol. There are two versions, one for formatting floats and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers.
 *
 * @cat     Data
 * @subcat  String Functions
 * @method  nfs
 *
 * @param   {Number} value The Number to convert
 * @param   {Number} leftDigits
 * @param   {Number} rightDigits
 * @return  {String} The formatted string
 */
declare function nfs(value: number, leftDigits: number, rightDigits: number): string;

/**
 * @summary Splits a string using a specific string or character as divider.
 * @description The `split()` function breaks a string into pieces using a character or string as the divider. The `delim` parameter specifies the character or characters that mark the boundaries between each piece. An array of strings is returned that contains each of the pieces.
 *
 * The `splitTokens()` function works in a similar fashion, except that it splits using a range of characters instead of a specific character or sequence.
 *
 * @cat     Data
 * @subcat  String Functions
 * @method  split
 *
 * @param   {String} str the String to be split
 * @param   {String} [delim] The string used to separate the data
 * @return  {Array} Array of strings
 */
declare function split(str: string, delim?: string): any[];

/**
 * @summary Splits a string using a list of strings as dividers.
 * @description The `splitTokens()` function splits a string at one or many character "tokens." The tokens parameter specifies the character or characters to be used as a boundary.
 *
 * If no tokens character is specified, any whitespace character is used to split. Whitespace characters include tab (`\t`), line feed (`\n`), carriage return (`\r`), form feed (`\f`), and space.
 *
 * @cat     Data
 * @subcat  String Functions
 * @method  splitTokens
 *
 * @param   {String} str the String to be split
 * @param   {String} [tokens] list of individual characters that will be used as separators
 * @return  {Array} Array of strings
 */
declare function splitTokens(str: string, tokens?: string): any[];

/**
 * @summary Checks whether a string starts with a specific string or if an array starts with a specific value.
 * @description Checks whether a string starts with a specific character or string or if an array starts with a specific value.
 *
 * @cat     Data
 * @subcat  String Functions
 * @method  startsWith
 *
 * @param   {String} searchContainer A string or an array to be checked
 * @param   {String} valueToFind The value to search for
 * @return  {Boolean} Returns either true or false
 */
declare function startsWith(searchContainer: string, valueToFind: string): boolean;

/**
 * @summary Removes whitespace from the beginning or end of a string.
 * @description Removes whitespace characters from the beginning and end of a String. In addition to standard whitespace characters such as space, carriage return, and tab, this function also removes the Unicode "nbsp" character.
 *
 * @cat     Data
 * @subcat  String Functions
 * @method  trim
 *
 * @param   {String|Array} str A string or an array of strings to be trimmed
 * @return  {String|Array} Returns the input in a trimmed way
 */
declare function trim(str: string | any[]): string | any[];

/**
 * @summary Removes whitespace and punctuation from the beginning and end of a string.
 * @description Removes multiple, leading or trailing spaces and punctuation from "words". E.g. converts `"word!"` to `"word"`. Especially useful together with `words()`;
 *
 * @cat     Data
 * @subcat  String Functions
 * @method  trimWord
 *
 * @param   {String} s The String to trim
 * @return  {String} The trimmed string
 */
declare function trimWord(s: string): string;

/**
 * @summary Checks wether a var is an array.
 * @description Checks whether a var is an array, returns `true` if this is the case.
 *
 * @cat     Data
 * @subcat  Type-Check
 * @method  isArray
 *
 * @param   {Object|String|Number|Boolean} obj The object to check
 * @return  {Boolean} returns true if this is the case
 */
declare function isArray(obj: any | string | number | boolean): boolean;

/**
 * @summary Checks wether a var is an integer.
 * @description Checks whether a var is an integer, returns `true` if this is the case.
 *
 * @cat     Data
 * @subcat  Type-Check
 * @method  isInteger
 *
 * @param   {Object|String|Number|Boolean} num The number to check.
 * @return  {Boolean} Returns true if the given argument is an integer.
 */
declare function isInteger(num: any | string | number | boolean): boolean;

/**
 * @summary Checks wether a var is a number.
 * @description Checks whether a var is a number, returns `true if this is the case.
 *
 * @cat     Data
 * @subcat  Type-Check
 * @method  isNumber
 *
 * @param   {Object|String|Number|Boolean} num The number to check
 * @return  {Boolean} returns true if this is the case
 */
declare function isNumber(num: any | string | number | boolean): boolean;

/**
 * @summary Checks wether a var is a string.
 * @description Checks whether a var is a string, returns `true` if this is the case
 *
 * @cat     Data
 * @subcat  Type-Check
 * @method  isString
 *
 * @param   {Object|String|Number|Boolean} str The string to check
 * @return  {Boolean} returns true if this is the case
 */
declare function isString(str: any | string | number | boolean): boolean;

/**
 * @summary Checks wether a var is an InDesign text object.
 * @description Checks whether a var is an InDesign text object, returns `true` if this is the case.
 * NB: a InDesign text frame will return `false` as it is just a container holding text. So you could say that `isText()` refers to all the things inside a text frame.
 *
 * @cat     Document
 * @subcat  Type-Check
 * @method  isText
 *
 * @param   {Character|InsertionPoint|Line|Paragraph|TextColumn|TextStyleRange|Word} obj The object to check
 * @return  {Boolean} returns true if this is the case
 */
declare function isText(obj: Character | InsertionPoint | Line | Paragraph | TextColumn | TextStyleRange | Word): boolean;

/**
 * @summary Checks wether a var is a valid URL string.
 * @description Checks wether an URL string is valid.
 *
 * @cat     Data
 * @subcat  Type-Check
 * @method  isURL
 *
 * @param   {String} url An url string to be checked
 * @return  {Boolean} Returns either true or false
 */
declare function isURL(url: string): boolean;

/**
 * @summary Removes all page items in a given container.
 * @description Removes all page items (including locked ones) in the given Document, Page, Layer or Group. If the selected container is a group, the group itself will be removed as well.
 *
 * @cat     Document
 * @method  clear
 *
 * @param   {Document|Page|Layer|Group} container The container where the PageItems sit in.
 */
declare function clear(container: Document | Page | Layer | Group): void;

/**
 * @summary Closes the current document.
 * @description Closes the current document. If no `saveOptions` argument is used, the user will be asked if they want to save or not.
 *
 * @cat     Document
 * @method  close
 *
 * @param   {Object|Boolean} [saveOptions] The InDesign SaveOptions constant or either true for triggering saving before closing or false for closing without saving.
 * @param   {File} [file] The InDesign file instance to save the document to.
 */
declare function close(saveOptions?: any | boolean, file?: File): void;

/**
 * @summary Creates a document or gets the current one.
 * @description Sets or possibly creates the current document and returns it. If the `doc` parameter is not given, the current document gets set to the active document in the application. If no document at all is open, a new document gets created.
 *
 * @cat     Document
 * @method  doc
 *
 * @param   {Document} [doc] The document to set the current document to.
 * @return  {Document} The current document instance.
 */
declare function doc(doc?: Document): Document;

/**
 * @summary Creates, sets or gets a layer.
 * @description Returns the current layer if no argument is given. Sets active layer if layer object or name of existing layer is given. Newly creates layer and sets it to active if new name is given.
 *
 * @cat     Document
 * @method  layer
 *
 * @param   {Layer|String} [layer] The layer or layer name to set the current layer to.
 * @return  {Layer} The current layer instance.
 */
declare function layer(layer?: Layer | string): Layer;

/**
 * @summary Sets the reference point for the `transform()` function.
 * @description Sets the reference point for transformations using the `transform()` function. The reference point will be used for all following transformations, until it is changed again. By default, the reference point is set to the top left.
 * Arguments can be the basil constants `TOP_LEFT`, `TOP_CENTER`, `TOP_RIGHT`, `CENTER_LEFT`, `CENTER`, `CENTER_RIGHT`, `BOTTOM_LEFT`, `BOTTOM_CENTER` or `BOTTOM_RIGHT`. Alternatively the digits `1` through `9` (as they are arranged on a num pad) can be used to set the anchor point. Lastly the function can also use an InDesign anchor point enumerator to set the reference point.
 * If the function is used without any arguments the currently set reference point will be returned.
 *
 * @cat     Document
 * @method  referencePoint
 *
 * @param   {String} [referencePoint] The reference point to set.
 * @return  {String} Current reference point setting.
 */
declare function referencePoint(referencePoint?: string): string;

/**
 * @summary Removes an InDesign object.
 * @description Removes the provided Page, Layer, PageItem, Swatch, etc.
 *
 * @cat     Document
 * @method  remove
 *
 * @param   {PageItem} obj The object to be removed.
 */
declare function remove(obj: PageItem): void;

/**
 * @summary Reverts a document to its last saved state.
 * @description Reverts the document to its last saved state. If the current document is not saved yet, this function will close the document without saving it and reopen a fresh document so as to "revert" the unsaved document. This function is helpful during development stage to start from a new or default document each time the script is run.
 *
 * @cat     Document
 * @method  revert
 *
 * @return  {Document} The reverted document.
 */
declare function revert(): Document;

/**
 * @summary Sets the units of the document.
 * @description Sets the units of the document (like right clicking the rulers). By default basil uses the units of the user's document or the user's default units.
 *
 * @cat     Document
 * @method  units
 *
 * @param   {String} [units] Supported units: PT, PX, CM, MM or IN.
 * @return  {String} Current unit setting.
 */
declare function units(units?: string): string;

/**
 * @summary Sets the document bleeds.
 * @description Sets the document bleeds. If one value is given, all 4 are set equally. If 4 values are given, the top/right/bottom/left document bleeds will be adjusted. Calling the function without any values, will return the document bleed settings.
 *
 * @cat     Document
 * @subcat  Canvas
 * @method  bleeds
 *
 * @param   {Number} [top] Top bleed or all if only one.
 * @param   {Number} [right] Right bleed.
 * @param   {Number} [bottom] Bottom bleed.
 * @param   {Number} [left] Left bleed.
 * @return  {object} Current document bleeds settings.
 */
declare function bleeds(top?: number, right?: number, bottom?: number, left?: number): any;

/**
 * @summary Sets the dimensions of the working canvas.
 * @description Use this to set the dimensions of the canvas. Choose between `PAGE` (default), `MARGIN`, `BLEED` resp. `FACING_PAGES`, `FACING_MARGINS` and `FACING_BLEEDS` for book setups with facing page. Please note: Setups with more than two facing pages are not yet supported.
 * Please note that you will loose your current MatrixTransformation. You should set the canvasMode before you attempt to use `translate()`, `rotate()` and `scale()`.
 *
 * @cat     Document
 * @subcat  Canvas
 * @method  canvasMode
 *
 * @param   {String} mode The canvas mode to set.
 * @return  {String} The current canvas mode.
 */
declare function canvasMode(mode: string): string;

/**
 * @summary Creates a vertical guide line.
 * @description Creates a vertical guide line at the current spread and current layer.
 *
 * @cat     Document
 * @subcat  Canvas
 * @method  guideX
 *
 * @param   {Number} x Position of the new guide line.
 * @return  {Guide} New guide line.
 */
declare function guideX(x: number): Guide;

/**
 * @summary Creates a horizontal guide line.
 * @description Creates a horizontal guide line at the current spread and current layer.
 *
 * @cat     Document
 * @subcat  Canvas
 * @method  guideY
 *
 * @param   {Number} y Position of the new guide line.
 * @return  {Guide} New guide line.
 */
declare function guideY(y: number): Guide;

/**
 * @summary Sets or gets the margins of a page.
 * @description Sets the margins of a given page. If 1 value is given, all 4 sides are set equally. If 4 values are given, the current page will be adjusted. Adding a 5th value will set the margin of a given page. Calling the function without any values, will return the margins for the current page.
 *
 * @cat     Document
 * @subcat  Canvas
 * @method  margins
 *
 * @param   {Number} [top] Top margin or all if only one.
 * @param   {Number} [right] Right margin.
 * @param   {Number} [bottom] Bottom margin.
 * @param   {Number} [left] Left margin.
 * @param   {Number} [pageNumber] Sets margins to selected page, currentPage() if left blank.
 * @return  {object} Current page margins with the properties: `top`, `right`, `bottom`, `left`.
 */
declare function margins(top?: number, right?: number, bottom?: number, left?: number, pageNumber?: number): any;

/**
 * @summary Sets or gets the pasteboard margins.
 * @description Returns the current horizontal and vertical pasteboard margins and sets them if both arguements are given.
 *
 * @cat     Document
 * @subcat  Canvas
 * @method  pasteboard
 *
 * @param   {Number} h The desired horizontal pasteboard margin.
 * @param   {Number} v The desired vertical pasteboard margin.
 * @return  {Array} The current horizontal, vertical pasteboard margins.
 */
declare function pasteboard(h: number, v: number): any[];

/**
 * @summary Adds a new page to the document.
 * @description Adds a new page to the document. Set the optional location parameter to either `AT_END` (default), `AT_BEGINNING`, `AFTER` or `BEFORE`. `AFTER` and `BEFORE` will use the current page as insertion point.
 *
 * @cat     Document
 * @subcat  Page
 * @method  addPage
 *
 * @param   {String} [location] The location placement mode.
 * @return  {Page} The new page.
 */
declare function addPage(location?: string): Page;

/**
 * @summary Applies a master page to a page.
 * @description Applies a master page to the given page.
 *
 * The `page` parameter can be given as a page object, as a page name or as a page number (numbering starts at 1).
 *
 * The `master` parameter can be given as a master spread object or as a string. If a string is used, it can either hold the master page prefix (e.g "A", "B") or the full name *including* the prefix (e.g "A-Master", "B-Master"). The latter is useful, if there are several masters using the same prefix. Alternatively, the constant `NONE` can be used to apply InDesign's `[none]` master to the page and thus remove the previously applied master page from the page.
 *
 * @cat     Document
 * @subcat  Page
 * @method  applyMasterPage
 *
 * @param   {Number|String|Page} page The page to apply the master page to.
 * @param   {String|MasterSpread} master The master page to apply.
 * @return  {Page} The page the master page was applied to.
 *
 * @example <caption>Apply the master with prefix "B" to the documents third page</caption>
 * applyMasterPage(3, "B");
 *
 * @example <caption>In a document with master pages "A-Text" and "A-Images", apply "A-Images" to the current page</caption>
 * applyMasterPage(page(), "A-Images");
 *
 * @example <caption>Remove the master page from the page named "IV"</caption>
 * applyMasterPage("IV", NONE);
 */
declare function applyMasterPage(page: number | string | Page, master: string | MasterSpread): Page;

/**
 * @summary Sets a master page to be the active page.
 * @description Sets a master page to be the active page. This can be used to set up and arrange page items on master pages, so they appear throughout the entire document.
 *
 * The `master` parameter describes the master spread that contains the master page. It can be given as a master spread object or as a string. If a string is used, it can either hold the master page prefix (e.g "A", "B") or the full name *including* the prefix (e.g "A-Master", "B-Master"). The latter is useful, if there are several masters using the same prefix.
 *
 * As master pages cannot directly be targeted by number, the optional `pageIndex` parameter can be used to specify which master page of the given master spread should be set as the active page, in case there are several pages on the master spread. Counting starts from 0, beginning from the leftmost page. If the `pageIndex` parameter is not given, the first page of the master spread is returned.
 *
 * @cat     Document
 * @subcat  Page
 * @method  masterPage
 *
 * @param   {String|MasterSpread} master The master spread that contains the master page.
 * @param   {Number} [pageIndex] The index of the page on the master spread, counting from 0.
 * @return  {Page} The active master page.
 *
 * @example <caption>Set master page to be the first page of master "A".</caption>
 * masterPage("A");
 *
 * @example <caption>Set master page to be the second page of master "B".</caption>
 * masterPage("B", 1);
 *
 * @example <caption>Alternate way to set master page ot the second page of master "B".</caption>
 * masterPage("B");
 * nextPage();
 */
declare function masterPage(master: string | MasterSpread, pageIndex?: number): Page;

/**
 * @summary Jumps to the next page.
 * @description Set the next page of the document to be the active one and returns the new active page. If the current page is the last page or the last master page, this page will be returned.
 *
 * @cat     Document
 * @subcat  Page
 * @method  nextPage
 *
 * @return  {Page} The active page.
 */
declare function nextPage(): Page;

/**
 * @summary Jumps to a page or gets the current one.
 * @description Returns the current page and sets it if argument page is given. If page is given as string, the page will be set to the page with this name (e.g. "4", "04", "D", "IV"). If the page is given as an integer, the page will be set to the page according to this number, no matter the actual naming of the page. Numbering starts with 1 in this case. If you pass a page item the current page will be set to its containing page. If this page item is off the page (on the pasteboard) the current page will be set to the first page of its containing spread.
 *
 * @cat     Document
 * @subcat  Page
 * @method  page
 *
 * @param   {Number|String|Page|PageItem} [page] The page number (as integer), page name or page object to set the current page to or an page item to refer to its containing page.
 * @return  {Page} The current page instance.
 *
 * @example <caption>Sets the current page to the third page of the document</caption>
 * page(3);
 *
 * @example <caption>Sets the current page to the page named "004"</caption>
 * page("004");
 *
 * @example <caption>Sets the current page to the containing page of a rectangle</caption>
 * var myRect = rect(100, 100, 200, 200);
 * page(myRect);
 */
declare function page(page?: number | string | Page | PageItem): Page;

/**
 * @summary Returns the number of pages in the document.
 * @description Returns the number of all pages in the current document. If a number is given as an argument, it will set the document's page count to the given number by either adding pages or removing pages until the number is reached. If pages are added, the master page of the document's last page will be applied to the new pages.
 *
 * @cat     Document
 * @subcat  Page
 * @method  pageCount
 *
 * @param   {Number} [pageCount] New page count of the document (integer between 1 and 9999).
 * @return  {Number} The amount of pages.
 */
declare function pageCount(pageCount?: number): number;

/**
 * @summary Returns the page number of a page.
 * @description Returns the current page number of either the current page or the given page name or page object. Numbering of pages starts at 1. Master pages have no real numbering and will return -1 instead.
 *
 * @cat     Document
 * @subcat  Page
 * @method  pageNumber
 *
 * @param   {String|Page} [page] The page name or page object of the page you want to know the number of.
 * @return  {Number} The page number within the document.
 */
declare function pageNumber(page?: string | Page): number;

/**
 * @summary Jumps to the previous page.
 * @description Set the previous page of the document to be the active one and returns the new active page. If the current page is the first page or the first master page, this page will be returned.
 *
 * @cat     Document
 * @subcat  Page
 * @method  previousPage
 *
 * @return  {Page} The active page.
 */
declare function previousPage(): Page;

/**
 * @summary Removes a page from the document.
 * @description Removes a page from the current document. This will either be the current page if the parameter page is left empty, or the given page object or the page of a specific number or name.
 *
 * @cat     Document
 * @subcat  Page
 * @method  removePage
 *
 * @param   {Number|String|Page} [page] The page to be removed as page number, page name or page object.
 */
declare function removePage(page?: number | string | Page): void;

/**
 * @summary Applies an object style to a page item.
 * @description Applies an object style to the given page item. The object style can be given as name or as an object style instance.
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  applyObjectStyle
 *
 * @param   {PageItem} item The page item to apply the style to.
 * @param   {ObjectStyle|String} style An object style instance or the name of the object style to apply.
 * @return  {PageItem} The page item that the style was applied to.
 */
declare function applyObjectStyle(item: PageItem, style: ObjectStyle | string): PageItem;

/**
 * @summary Arranges a page item or layer before or behind other page items and layers.
 * @description Arranges a page item or a layer before or behind other page items or layers. If using the constants `FORWARD` or `BACKWARD` the object is sent forward or back one step. The constants `FRONT` or `BACK` send the object to the very front or very back. Using `FRONT` or `BACK` together with the optional reference object, sends the object in front or behind this reference object.
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  arrange
 *
 * @param   {PageItem|Layer} pItemOrLayer The page item or layer to be moved to a new position.
 * @param   {String} positionOrDirection The position or direction to move the page item or layer. Can be `FRONT`, `BACK`, `FORWARD` or `BACKWARD`.
 * @param   {PageItem|Layer} [reference] A reference object to move the page item or layer behind or in front of.
 * @return  {PageItem|Layer} The newly arranged page item or layer.
 */
declare function arrange(pItemOrLayer: PageItem | Layer, positionOrDirection: string, reference?: PageItem | Layer): PageItem | Layer;

/**
 * @summary Calculates the geometric bounds of a page item or text.
 * @description The function calculates the geometric bounds of any given page item or text. Use the `transforms()` function to modify page items. In case the object is any kind of text, additional typographic information `baseline` and `xHeight` are calculated.
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  bounds
 *
 * @param   {PageItem|Text} obj The page item or text to calculate the geometric bounds.
 * @return  {object} Geometric bounds object with these properties: `width`, `height`, `left`, `right`, `top`, `bottom` and for text: `baseline`, `xHeight`.
 */
declare function bounds(obj: PageItem | Text): any;

/**
 * @summary Duplicates a page or page item.
 * @description Duplicates the given page after the current page or the given page item to the current page and layer. Use `rectMode()` to set center point.
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  duplicate
 *
 * @param   {PageItem|Page} item The page item or page to duplicate.
 * @return  {object} The new page item or page.
 */
declare function duplicate(item: PageItem | Page): any;

/**
 * @summary Runs a function on a collection of graphics in a container or returns them.
 * @description Returns a collection of all graphics in the given container. The container object can be a Document, Page, Layer, Group, Story, Page Item or Text Object. This function can be used to get the graphic within a graphic frame and move it independently of its parent frame.
 * If a callback function is given, `graphics()` calls this callback function on each graphic of the given container. When the callback function returns false, the loop stops and the `graphics()` function returns an array of all graphics up to this point.
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  graphics
 *
 * @param   {Document|Page|Layer|Group|Story|PageItem|TextObject} container The document, page, layer, group, story, page item or text object to iterate the graphics in.
 * @param   {Function} [cb] The callback function to call with each graphic. When this function returns false the loop stops. Passed arguments: `graphic`, `loopCount`.
 * @return  {Array} An array of Graphics.
 */
declare function graphics(container: Document | Page | Layer | Group | Story | PageItem | TextObject, cb?: (...params: any[]) => any): any[];

/**
 * @summary Creates a group from page items or gets a group.
 * @description Returns the Group instance and sets it if argument Group is given. Groups items to a new group. Returns the resulting group instance. If a string is given as the only argument, the group by the given name will be returned.
 *
 * @cat     Document
 * @subCat  Page Items
 * @method  group
 *
 * @param   {Array} pItems An array of page items (must contain at least two items) or name of group instance.
 * @param   {String} [name] The name of the group, only when creating a group from page items.
 * @return  {Group} The group instance.
 */
declare function group(pItems: any[], name?: string): Group;

/**
 * @summary Runs a function on a collection of page items in a container or returns them.
 * @description Returns a collection of all page items in the given container. The container object can be a Document, Page, Layer, Group, Story, Page Item or Text Object.
 * If a callback function is given, `items()` calls this callback function on each page item of the given container. When the callback function returns false, the loop stops and the `items()` function returns an array of all page items up to this point.
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  items
 *
 * @param   {Document|Page|Layer|Group|Story|PageItem|TextObject} container The document, page, layer, group, story, page item or text object instance to iterate the page items in.
 * @param   {Function} [cb] Optional: The callback function to call with each page item. When this function returns false the loop stops. Passed arguments: `item`, `loopCount`
 * @return  {PageItems|Array} A collection or an array of page items.
 */
declare function items(container: Document | Page | Layer | Group | Story | PageItem | TextObject, cb?: (...params: any[]) => any): PageItems | any[];

/**
 * @summary Tags a page item with a script label or finds an item by label.
 * @description Tags a page item with a given script label in the InDesign Script Label panel (`Window -> Utilities -> Script Label`). If only one argument is given, `label()` returns the first item that is tagged with the given label. Use this instead of `labels()`, when you know you just have one thing with that label and don't want to deal with a single-element array.
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  label
 *
 * @param   {String|PageItem} itemOrLabel The page item to tag or the label identifier to search for.
 * @param   {String} label The label identifier to tag the page item with.
 * @return  {PageItem} The tagged page item or the first page item with the given label.
 */
declare function label(itemOrLabel: string | PageItem, label: string): PageItem;

/**
 * @summary Runs a function on all page items of a script label or returns them.
 * @description Returns items tagged with the given label in the InDesign Script Label pane (`Window -> Utilities -> Script Label`).
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  labels
 *
 * @param   {String} label The label identifier.
 * @param   {Function} [cb] The callback function to call with each item in the search result. When this function returns `false`, the loop stops. Passed arguments: `item`, `loopCount`.
 * @return  {Array} Array of concrete page item instances, e.g. text frame or spline item.
 */
declare function labels(label: string, cb?: (...params: any[]) => any): any[];

/**
 * @summary Runs a function on a chain of linked text frames or returns them.
 * @description Returns an array of all linked text frames or text paths in relation to a given Text Frame, Text Path, Story or Text Object.
 * If a callback function is given, `textFrames()` calls this callback function on each text frame of the given container. When the callback function returns false, the loop stops and the `textFrames()` function returns an array of all text frames up to this point.
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  linkedTextFrames
 *
 * @param   {TextFrame|TextPath|Story|TextObject} item The text frame, text path, story or text object of the text frame chain.
 * @param   {Function} [cb] The callback function to call with each text frame or text path. When this function returns false the loop stops. Passed arguments: `textFrame`, `loopCount`.
 * @return  {Array} The array of linked text frames or text paths.
 */
declare function linkedTextFrames(item: TextFrame | TextPath | Story | TextObject, cb?: (...params: any[]) => any): any[];

/**
 * @summary Returns an item on the active page by name.
 * @description Returns the first item on the active page that is named by the given name in the Layers pane (`Window -> Layer`).
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  nameOnPage
 *
 * @return  {object} The first object on the active page with the given name.
 */
declare function nameOnPage(): any;

/**
 * @summary Creates or gets an object style.
 * @description Returns the object style of a given page item or the object style with the given name. If an object style of the given name does not exist, it gets created. Optionally a props object of property name/value pairs can be used to set the object style's properties.
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  objectStyle
 *
 * @param   {PageItem|String} itemOrName A page item whose style to return or the name of the object style to return.
 * @param   {object} [props] An object of property name/value pairs to set the style's properties.
 * @return  {ObjectStyle} The object style instance.
 */
declare function objectStyle(itemOrName: PageItem | string, props?: any): ObjectStyle;

/**
 * @summary Returns the first selected object or selects an object.
 * @description If no argument is given, returns the first currently selected object. If a page item is given as argument, the page item will be selected.
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  selection
 *
 * @param   {PageItem} [item] The page item to select.
 * @return  {object} The first selected object.
 */
declare function selection(item?: PageItem): any;

/**
 * @summary Runs a function on all selected page items or returns them.
 * @description Returns the currently selected object(s)
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  selections
 *
 * @param   {Function} [cb] The callback function to call with each item in the selection. When this function returns false the loop stops. Passed arguments: item, loopCount.
 * @return  {Array} Array of selected object(s).
 */
declare function selections(cb?: (...params: any[]) => any): any[];

/**
 * @summary Runs a function on a collection of text frames in a container or returns them.
 * @description Returns a collection of all text frames in the given container. The container object can be a Document, Page, Layer, Group, Story, Page Item or Text Object.
 * If a callback function is given, `textFrames()` calls this callback function on each text frame of the given container. When the callback function returns false, the loop stops and the `textFrames()` function returns an array of all text frames up to this point.
 *
 * @cat     Document
 * @subcat  Page Items
 * @method  textFrames
 *
 * @param   {Document|Page|Layer|Group|Story|PageItem|TextObject} container The document, page, layer, group, story, page item or text object to iterate the text frames in.
 * @param   {Function} [cb] The callback function to call with each text frame. When this function returns false the loop stops. Passed arguments: `textFrame`, `loopCount`.
 * @return  {Array} An array of Text Frames.
 */
declare function textFrames(container: Document | Page | Layer | Group | Story | PageItem | TextObject, cb?: (...params: any[]) => any): any[];

/**
 * @summary Ungroups a group and returns its items.
 * @description Ungroups an existing group. Returns an array of the items that were within the group before ungroup() was called.
 *
 * @cat     Document
 * @subCat  Page Items
 * @method  ungroup
 *
 * @param   {Group|String} group The group instance or name of the group to ungroup.
 * @return  {Array} An array of the ungrouped page items.
 */
declare function ungroup(group: Group | string): any[];

/**
 * @summary Adds a page item or string to a story.
 * @description Adds a page item or a string to an existing story. You can control the position of the insert via the last parameter. It accepts either an insertion point or one the following constants: `AT_BEGINNING` and `AT_END`.
 *
 * @cat     Document
 * @subcat  Text
 * @method  addToStory
 *
 * @param   {Story} story The story.
 * @param   {PageItem|String} itemOrString Either a page item or a string.
 * @param   {InsertionPoint|String} insertionPointOrMode Insertion point object or one the following constants: `AT_BEGINNING` and `AT_END`.
 */
declare function addToStory(story: Story, itemOrString: PageItem | string, insertionPointOrMode: InsertionPoint | string): void;

/**
 * @summary Runs a function on all characters in a container or returns them.
 * @description Returns a collection of all character objects in the given container. The container object can be a Document, Page, Layer, Group, Story, Text Frame, Paragraph, Line or Word.
 * If a callback function is given, `characters()` calls this callback function on each character object of the given container. When the callback function returns false, the loop stops and the `characters()` function returns an array of all characters up to this point.
 *
 * @cat     Document
 * @subcat  Text
 * @method  characters
 *
 * @param   {Document|Page|Layer|Group|Story|TextFrame|Paragraph|Line|Word} container The document, page, layer, group, story, textFrame, paragraph, line or word instance to  iterate the characters in.
 * @param   {Function} [cb] Optional: The callback function to call with each character. When this function returns false the loop stops. Passed arguments: `character`, `loopCount`
 * @return  {Characters|Array} A collection or an array of Character objects.
 */
declare function characters(container: Document | Page | Layer | Group | Story | TextFrame | Paragraph | Line | Word, cb?: (...params: any[]) => any): Characters | any[];

/**
 * @summary Runs a function on all text lines in a container or returns them.
 * @description Returns a collection of all line objects in the given container. The container object can be a Document, Page, Layer, Group, Story, Text Frame or Paragraph. Please note that `lines()` refers to lines of text in a text frame. If you need to construct a geometric line on a page, use `line()` instead.
 * If a callback function is given, `lines()` calls this callback function on each line object of the given container. When the callback function returns false, the loop stops and the `lines()` function returns an array of all lines up to this point.
 *
 * @cat     Document
 * @subcat  Text
 * @method  lines
 *
 * @param   {Document|Page|Layer|Group|Story|TextFrame|Paragraph|Line} container The document, page, layer, group, story, textFrame or paragraph instance to  iterate the lines in.
 * @param   {Function} [cb] Optional: The callback function to call with each line. When this function returns false the loop stops. Passed arguments: `line`, `loopCount`
 * @return  {Lines|Array} A collection or an array of Line objects.
 */
declare function lines(container: Document | Page | Layer | Group | Story | TextFrame | Paragraph | Line, cb?: (...params: any[]) => any): Lines | any[];

/**
 * @summary Links two textframes.
 * @description Links the stories of two textframes to one story. Text of first textframe overflows to second one.
 *
 * @cat     Document
 * @subcat  Text
 * @method  linkTextFrames
 *
 * @param   {TextFrame} textFrameA
 * @param   {TextFrame} textFrameB
 */
declare function linkTextFrames(textFrameA: TextFrame, textFrameB: TextFrame): void;

/**
 * @summary Runs a function on all paragraphs in a container or returns them.
 * @description Returns a collection of all paragraph objects in the given container. The container object can be a Document, Page, Layer, Group, Story or Text Frame.
 * If a callback function is given, `paragraphs()` calls this callback function on each paragraph object of the given container. When the callback function returns false, the loop stops and the `paragraphs()` function returns an array of all paragraphs up to this point.
 *
 * @cat     Document
 * @subcat  Text
 * @method  paragraphs
 *
 * @param   {Document|Page|Layer|Group|Story|TextFrame} container The document, page, layer, group, story or textFrame instance to  iterate the paragraphs in.
 * @param   {Function} [cb] Optional: The callback function to call with each paragraph. When this function returns false the loop stops. Passed arguments: `paragraph`, `loopCount`
 * @return  {Paragraphs|Array} A collection or an array of Paragraph objects.
 */
declare function paragraphs(container: Document | Page | Layer | Group | Story | TextFrame, cb?: (...params: any[]) => any): Paragraphs | any[];

/**
 * @summary Fills a text frame with placeholder text.
 * @description Fills the given text frame and all linked text frames with random placeholder text. The placeholder text will be added at the end of any already existing text in the text frame.
 *
 * @cat     Document
 * @subcat  Text
 * @method  placeholder
 *
 * @param   {TextFrame} textFrame The text frame to fill.
 * @return  {Text} The inserted placeholder text.
 */
declare function placeholder(textFrame: TextFrame): Text;

/**
 * @summary Runs a function on all stories in a container or returns them.
 * @description Returns a collection of all story objects in the given document or returns the parent story of a certain element. These elements can be text frames or text objects.
 * If a callback function is given, `stories()` calls this callback function on each story object of the given document or on the parent story of the given element. When the callback function returns false, the loop stops and the `stories()` function returns an array of all stories up to this point.
 *
 * @cat     Document
 * @subcat  Text
 * @method  stories
 *
 * @param   {Document} container The document instance to iterate the stories in or the element whose parent story to get.
 * @param   {Function} [cb] Optional: The callback function to call with each story. When this function returns false the loop stops. Passed arguments: `story`, `loopCount`
 * @return  {Stories|Array} A collection or an array of Story objects.
 *
 * @example
 * stories(container(), function(story, loopCount){
 *   println("Number of words in each Story:");
 *   println(story.words.length);
 * });
 */
declare function stories(container: Document, cb?: (...params: any[]) => any): Stories | any[];

/**
 * @summary Runs a function on all text style ranges in a container or returns them.
 * @description Returns a collection of all text style range objects in the given container. A text style range is a continuous range of identically formatted text (i.e., three consecutive red words in an otherwise black text of the same style would form a text style range). The container object can be a Document, Page, Layer, Group, Story, Text Frame, Paragraph, Line or Word.
 * If a callback function is given, `textStyleRanges()` calls this callback function on each text style range object of the given container. When the callback function returns false, the loop stops and the `textStyleRanges()` function returns an array of all text style ranges up to this point.
 *
 * @cat     Document
 * @subcat  Text
 * @method  textStyleRanges
 *
 * @param   {Document|Page|Layer|Group|Story|TextFrame|Paragraph|Line|Word} container The document, page, layer, group, story, textFrame, paragraph, line or word instance to iterate the text style ranges in.
 * @param   {Function} [cb] Optional: The callback function to call with each text style range. When this function returns false the loop stops. Passed arguments: `textStyleRange`, `loopCount`
 * @return  {TextStyleRanges|Array} A collection or an array of TextStyleRange objects.
 */
declare function textStyleRanges(container: Document | Page | Layer | Group | Story | TextFrame | Paragraph | Line | Word, cb?: (...params: any[]) => any): TextStyleRanges | any[];

/**
 * @summary Runs a function on all words in a container or returns them.
 * @description Returns a collection of all word objects in the given container. The container object can be a Document, Page, Layer, Group, Story, Text Frame, Paragraph or Line.
 * If a callback function is given, `words()` calls this callback function on each word object of the given container. When the callback function returns false, the loop stops and the `words()` function returns an array of all words up to this point.
 *
 * @cat     Document
 * @subcat  Text
 * @method  words
 *
 * @param   {Document|Page|Layer|Group|Story|TextFrame|Paragraph|Line} container The document, page, layer, group, story, textFrame, paragraph or line instance to iterate the words in.
 * @param   {Function} [cb] Optional: The callback function to call with each word. When this function returns false the loop stops. Passed arguments: `word`, `loopCount`
 * @return  {Words|Array} A collection or an array of Word objects.
 */
declare function words(container: Document | Page | Layer | Group | Story | TextFrame | Paragraph | Line, cb?: (...params: any[]) => any): Words | any[];

/**
 * @summary Pauses script execution for a certain amount of time.
 * @description Suspends the calling thread for a number of milliseconds.
 * During a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated.
 *
 * @cat     Environment
 * @method  delay
 *
 * @param   {Number} milliseconds The delay time in milliseconds.
 */
declare function delay(milliseconds: number): void;

/**
 * @summary Sets the framerate of a looping script.
 * @description Sets the framerate per second to determine how often `loop()` is called per second. If the processor is not fast enough to maintain the specified rate, the frame rate will not be achieved. Setting the frame rate within `setup()` is recommended. The default rate is 25 frames per second. Calling `frameRate()` with no arguments returns the currently set framerate.
 *
 * @cat     Environment
 * @method  frameRate
 *
 * @param   {Number} [fps] Frames per second.
 * @return  {Number} Currently set frame rate.
 */
declare function frameRate(fps?: number): number;

/**
 * @summary Inspects a var and lists its properties and methods.
 * @description Inspects a given object or any other data item and prints the result to the console. This is useful for inspecting or debugging any kind of variable or data item. The optional settings object allows to control the function's output. The following parameters can be set in the settings object:
 * - `showProps`: Show or hide properties. Default: `true`
 * - `showValues`: Show or hide values. Default: `true`
 * - `showMethods`: Show or hide methods. Default: `false`
 * - `maxLevel`: Chooses how many levels of properties should be inspected recursively. Default: `1`
 * - `propList`: Allows to pass an array of property names to show. If `propList` is not set all properties will be shown. Default: `[]` (no propList)
 * If no settings object is set, the default values will be used.
 *
 * @cat     Environment
 * @method  inspect
 *
 * @param   {object} obj An object or any other data item to be inspected.
 * @param   {object} [settings] A settings object to control the function's behavior.
 * @param   {Boolean} [settings.showProps] Show or hide properties. Default: `true`
 * @param   {Boolean} [settings.showValues] Show or hide values. Default: `true`
 * @param   {Boolean} [settings.showMethods] Show or hide methods. Default: `false`
 * @param   {Number} [settings.maxLevel] How many levels of properties should be inspected recursively. Default: `1`
 * @param   {Array} [settings.propList] Array of properties to show. Default: `[]` (no propList)
 *
 * @example <caption>Inspecting a string</caption>
 * inspect("foo");
 *
 * @example <caption>Inspecting the current page, its methods and an additional level of properties</caption>
 * inspect(page(), {showMethods: true, maxLevel: 2})
 *
 * @example <caption>Inspecting an ellipse, listing only the properties "geometricBounds" and "strokeWeight"</caption>
 * var myEllipse = ellipse(0, 0, 10, 10);
 * inspect(myEllipse, {maxLevel: 2, propList: ["geometricBounds, strokeWeight"]});
 */
declare function inspect(obj: any, settings?: {
    showProps?: boolean;
    showValues?: boolean;
    showMethods?: boolean;
    maxLevel?: number;
    propList?: any[];
}): void;

/**
 * @summary Prints info about the current environment to the console.
 * @description Print numerous information about the current environment to the console.
 *
 * @cat     Environment
 * @method  printInfo
 */
declare function printInfo(): void;

/**
 * @summary Gets the current document's project folder.
 * @description Get the folder of the active document as a Folder object. Use .absoluteURI to access a string representation of the folder path.
 *
 * @cat     Environment
 * @method  projectFolder
 *
 * @return  {Folder} The folder of the the active document
 */
declare function projectFolder(): Folder;

/**
 * @summary Sets an objects property.
 * @description Sets a property of an object or of any other given data item to the specified value. Alternatively an object of key value pairs can be used as the second argument to set several properties to specified values at once. To retrieve a list of available properties for the different data types, the inspect() method can be used.
 *
 * @cat     Environment
 * @method  property
 *
 * @param   {Any} obj An object or any other data item whose properties to change.
 * @param   {String|Object} prop A string describing an object's property or alternatively an object containing key value pairs.
 * @param   {Any} [value] A value of the appropriate type to set the object's property to.
 * @return  {Any} The object or other data item with the newly set property.
 *
 * @example <caption>Sets name and fill color of an ellipse</caption>
 * var ell = ellipse(100, 100, 50, 50);
 * property(ell, "name", "Red Circle");
 * property(ell, "fillColor", color(255, 0, 0));
 *
 * @example <caption>Sets name and fill color of a rectangle and locks it, using an object with key value pairs</caption>
 * var blueSquare = rect(100, 100, 50, 50);
 * var squareProps = {
 *   name: "Blue Square",
 *   fillColor: color(0, 0, 255),
 *   locked: true
 * }
 * property(blueSquare, squareProps);
 */
declare function property(obj: any, prop: string | any, value?: any): any;

/**
 * @summary Sets the size of the current document.
 * @description Sets the size of the current document, if arguments are given. If only one argument is given, both the width and the height are set to this value. Alternatively, a string can be given as the first argument to apply an existing page size preset (`"A4"`, `"Letter"` etc.). In this case, either `PORTRAIT` or `LANDSCAPE` can be used as a second argument to determine the orientation of the page. If no argument is given, an object containing the current document's width and height is returned.
 *
 * @cat     Environment
 * @method  size
 *
 * @param   {Number|String} [widthOrPageSize] The desired width of the current document or the name of a page size preset.
 * @param   {Number|String} [heightOrOrientation] The desired height of the current document. If not provided the width will be used as the height. If the first argument is a page size preset, the second argument can be used to set the orientation.
 * @return  {object} Object containing the current `width` and `height` of the document.
 *
 * @example <caption>Sets the document size to 70 x 100 units</caption>
 * size(70, 100);
 *
 * @example <caption>Sets the document size to 70 x 70</caption>
 * size(70);
 *
 * @example <caption>Sets the document size to A4, keeps the current orientation in place</caption>
 * size("A4");
 *
 * @example <caption>Sets the document size to A4, set the orientation to landscape</caption>
 * size("A4", LANDSCAPE);
 */
declare function size(widthOrPageSize?: number | string, heightOrOrientation?: number | string): any;

/**
 * @summary Adds an image to the document.
 * @description Adds an image to the document. If the image argument is given as a string, the path can point either directly at an image in the document's data directory or be specified as an absolute path to the image file. The image argument can also be a File instance. The second argument can either be the `x` position of the frame to create or an instance of a rectangle, oval or polygon to place the image in. If an `x` position is given, a `y` position must be given, too. If `x` and `y` positions are given and width and height are not given, the frame's size gets set to the original image size.
 *
 * @cat     Image
 * @method  image
 *
 * @param   {String|File} img The image file name in the document's data directory or a File instance.
 * @param   {Number|Rectangle|Oval|Polygon|TextFrame} x The `x` position on the current page or the item instance to place the image in.
 * @param   {Number} [y] The `y` position on the current page. Ignored if `x` is not a number.
 * @param   {Number} [w] The width of the rectangle to add the image to. Ignored if `x` is not a number.
 * @param   {Number} [h] The height of the rectangle to add the image to. Ignored if `x` is not a number.
 * @return  {Rectangle|Oval|Polygon} The item instance the image was placed in.
 */
declare function image(img: string | File, x: number | Rectangle | Oval | Polygon | TextFrame, y?: number, w?: number, h?: number): Rectangle | Oval | Polygon;

/**
 * @summary Modiefies the location from which images draw.
 * @description Modifies the location from which images draw. The default mode is `CORNER`, which specifies the location to be the upper left corner and uses the fourth and fifth parameters of `image()` to set the image's width and height. The syntax `imageMode(CORNERS)` uses the second and third parameters of `image()` to set the location of one corner of the image and uses the fourth and fifth parameters to set the opposite corner. Use `imageMode(CENTER)` to draw images centered at the given `x` and `y` position. If no parameter is passed the currently set mode is returned as String.
 *
 * @cat     Image
 * @method  imageMode
 *
 * @param   {String} [mode] Either `CORNER`, `CORNERS`, or `CENTER`.
 * @return  {String} The current mode.
 */
declare function imageMode(mode?: string): string;

/**
 * @summary Executes a shell command and returns the result.
 * @description Executes a shell command and returns the result, currently Mac only.
 *
 * BE CAREFUL!
 *
 * @cat     Input
 * @method  shellExecute
 *
 * @param   {String} cmd The shell command to execute
 * @return  {String} { description_of_the_return_value }
 */
declare function shellExecute(cmd: string): string;

/**
 * @summary Downloads an URL to a file.
 * @description Downloads an URL to a file, currently Mac only.
 *
 * @cat     Input
 * @subcat  Files
 * @method  download
 *
 * @param   {String} url The download url
 * @param   {String|File} [file] A relative file path in the project folder or a File instance
 */
declare function download(url: string, file?: string | File): void;

/**
 * @summary Returns a file.
 * @description Returns a file object.
 * Note that the resulting file object can either refer to an already existing file or if the file does not exist, it can create a preliminary "virtual" file that refers to a file that could be created later (i.e. by an export command).
 *
 * @cat     Input
 * @subcat  Files
 * @method  file
 *
 * @param   {String} filePath The file path.
 * @return  {File} File at the given path.
 *
 * @example <caption>Get an image file from the desktop and place it in the document</caption>
 * var myImage = file("~/Desktop/myImage.jpg");
 * image(myImage, 0, 0);
 *
 * @example <caption>Create a file and export it to the desktop</caption>
 * var myExportFile = file("~/Desktop/myNewExportFile.pdf");
 * savePDF(myExportFile);
 */
declare function file(filePath: string): File;

/**
 * @summary Gets all files of a folder.
 * @description Gets all files of a folder and returns them in an array of file objects. The settings object can be used to restrict the search to certain file types only, to include hidden files and to include files in subfolders.
 *
 * @cat     Input
 * @subcat  Files
 * @method  files
 *
 * @param   {Folder|String} [folder] The folder that holds the files or a string describing the path to that folder.
 * @param   {object} [settings] A settings object to control the function's behavior.
 * @param   {String|Array} [settings.filter] Suffix(es) of file types to include. Default: `"*"` (include all file types)
 * @param   {Boolean} [settings.hidden] Hidden files will be included. Default: `false`
 * @param   {Boolean} [settings.recursive] Searches subfolders recursively for matching files. Default: `false`
 * @return  {Array} Array of the resulting file(s). If no files are found, an empty array will be returned.
 *
 * @example <caption>Get a folder from the desktop and load all its JPEG files</caption>
 * var myImageFolder = folder("~/Desktop/myImages/");
 * var myImageFiles = files(myImageFolder, {filter: ["jpeg", "jpg"]});
 *
 * @example <caption>If the document is saved, load all files from its data folder, including from its subfolders</caption>
 * var myDataFolder = folder();
 * var allMyDataFiles = files(myDataFolder, {recursive: true});
 */
declare function files(folder?: Folder | string, settings?: {
    filter?: string | any[];
    hidden?: boolean;
    recursive?: boolean;
}): any[];

/**
 * @summary Returns a folder.
 * @description Returns a folder object.
 * Note that the resulting folder object can either refer to an already existing folder or if the folder does not exist, it can create a preliminary "virtual" folder that refers to a folder that could be created later.
 *
 * @cat     Input
 * @subcat  Files
 * @method  folder
 *
 * @param   {String} [folderPath] The path of the folder.
 * @return  {Folder} Folder at the given path. If no path is given, but the document is already saved, the document's data folder will be returned.
 *
 * @example <caption>Get a folder from the desktop and load its files</caption>
 * var myImageFolder = folder("~/Desktop/myImages/");
 * var myImageFiles = files(myImageFolder);
 *
 * @example <caption>Get the data folder, if the document is already saved</caption>
 * var myDataFolder = folder();
 */
declare function folder(folderPath?: string): Folder;

/**
 * @summary Gets and parses the contents of a JSON file.
 * @description Reads the contents of a JSON file and returns an object with the data. If the file is specified by name as string, the path can point either directly at a file in the document's data directory or be specified as an absolute path.
 *
 * @cat     Input
 * @subcat  Files
 * @method  loadJSON
 *
 * @param   {String|File} file The JSON file name in the document's data directory, an absolute path to a JSON file, a File instance or an URL.
 * @return  {object} The resulting data object.
 */
declare function loadJSON(file: string | File): any;

/**
 * @summary Gets the contents of a file or loads an URL into a string.
 * @description Reads the contents of a file or loads an URL into a String. If the file is specified by name as string, the path can point either directly at a file in the document's data directory or be specified as an absolute path.
 *
 * @cat     Input
 * @subcat  Files
 * @method  loadString
 *
 * @param   {String|File} file The text file name in the document's data directory or a File instance or an URL
 * @return  {String} String file or URL content.
 */
declare function loadString(file: string | File): string;

/**
 * @summary Gets the contents of a file or loads an URL into an array of its individual lines.
 * @description Reads the contents of a file or loads an URL and creates a string array of its individual lines. If the file is specified by name as string, the path can point either directly at a file in the document's data directory or be specified as an absolute path.
 *
 * @cat     Input
 * @subcat  Files
 * @method  loadStrings
 *
 * @param   {String|File} file The text file name in the document's data directory or a file instance or an URL
 * @return  {Array} Array of the individual lines in the given file or URL
 */
declare function loadStrings(file: string | File): any[];

/**
 * @summary Opens a dialog to select a file.
 * @description Opens a selection dialog that allows to select one file. The settings object can be used to add a prompt text at the top of the dialog, to restrict the selection to certain file types and to set the dialog's starting folder.
 *
 * @cat     Input
 * @subcat  Files
 * @method  selectFile
 *
 * @param   {object} [settings] A settings object to control the function's behavior.
 * @param   {String} [settings.prompt] The prompt text at the top of the file selection dialog. Default: `""` (no prompt)
 * @param   {String|Array} [settings.filter] String or an array containing strings of file endings to include in the dialog. Default: `""` (include all)
 * @param   {Folder|String} [settings.folder] Folder or a folder path string defining the start location of the dialog. Default: most recent dialog folder or main user folder.
 * @return  {File|Null} The selected file. If the user cancels, `null` will be returned.
 *
 * @example <caption>Open file selection dialog with a prompt text</caption>
 * selectFile({prompt: "Please select a file."});
 *
 * @example <caption>Open selection dialog starting at the user's desktop, allowing to only select PNG or JPEG files</caption>
 * selectFile({folder: "~/Desktop/", filter: ["jpeg", "jpg", "png"]});
 */
declare function selectFile(settings?: {
    prompt?: string;
    filter?: string | any[];
    folder?: Folder | string;
}): File | null;

/**
 * @summary Opens a dialog to select multiple files.
 * @description Opens a selection dialog that allows to select one or multiple files. The settings object can be used to add a prompt text at the top of the dialog, to restrict the selection to certain file types and to set the dialog's starting folder.
 *
 * @cat     Input
 * @subcat  Files
 * @method  selectFiles
 *
 * @param   {object} [settings] A settings object to control the function's behavior.
 * @param   {String} [settings.prompt] The prompt text at the top of the file selection dialog. Default: `""` (no prompt)
 * @param   {String|Array} [settings.filter] String or an array containing strings of file endings to include in the dialog. Default: `""` (include all)
 * @param   {Folder|String} [settings.folder] Folder or a folder path string defining the start location of the dialog. Default: most recent dialog folder or main user folder.
 * @return  {Array} Array of the selected file(s). If the user cancels, an empty array will be returned.
 *
 * @example <caption>Open file selection dialog with a prompt text</caption>
 * selectFiles({prompt: "Please select your files."});
 *
 * @example <caption>Open selection dialog starting at the user's desktop, allowing to only select PNG or JPEG files</caption>
 * selectFiles({folder: "~/Desktop/", filter: ["jpeg", "jpg", "png"]});
 */
declare function selectFiles(settings?: {
    prompt?: string;
    filter?: string | any[];
    folder?: Folder | string;
}): any[];

/**
 * @summary Opens a dialog to select a folder.
 * @description Opens a selection dialog that allows to select a folder. The settings object can be used to add a prompt text at the top of the dialog and to set the dialog's starting folder.
 *
 * @cat     Input
 * @subcat  Files
 * @method  selectFolder
 *
 * @param   {object} [settings] A settings object to control the function's behavior.
 * @param   {String} [settings.prompt] The prompt text at the top of the folder selection dialog. Default: `""` (no prompt)
 * @param   {Folder|String} [settings.folder] Folder or a folder path string defining the start location of the dialog. Default: most recent dialog folder or main user folder.
 * @return  {Folder|Null} The selected folder. If the user cancels, `null` will be returned.
 *
 * @example <caption>Open folder selection dialog with a prompt text</caption>
 * selectFolder({prompt: "Please select a folder."});
 *
 * @example <caption>Open folder selection dialog starting at the user's desktop</caption>
 * selectFolder({folder: "~/Desktop/"});
 */
declare function selectFolder(settings?: {
    prompt?: string;
    folder?: Folder | string;
}): Folder | null;

/**
 * @summary Returns the current day of the month.
 * @description The `day()` function returns the current day as a value from `1`-`31`.
 *
 * @cat     Input
 * @subcat  Time & Date
 * @method  day
 *
 * @return  {Number} The current day number.
 */
declare function day(): number;

/**
 * @summary Returns the current hour.
 * @description The `hour()` function returns the current hour as a value from `0` - `23`.
 *
 * @cat     Input
 * @subcat  Time & Date
 * @method  hour
 *
 * @return  {Number} The current hour.
 */
declare function hour(): number;

/**
 * @summary Returns the milliseconds since starting the script.
 * @description Returns the number of milliseconds (thousandths of a second) since starting the script.
 *
 * @cat     Input
 * @subcat  Time & Date
 * @method  millis
 *
 * @return  {Number} The current milli.
 */
declare function millis(): number;

/**
 * @summary Returns the milliseconds of the current time.
 * @description The `millisecond()` function differs from `millis()`, in that it returns the exact millisecond (thousandths of a second) of the current time.
 *
 * @cat     Input
 * @subcat  Time & Date
 * @method  millisecond
 *
 * @return  {Number} The current millisecond.
 */
declare function millisecond(): number;

/**
 * @summary Returns the current minute.
 * @description The `minute()` function returns the current minute as a value from `0` - `59`.
 *
 * @cat     Input
 * @subcat  Time & Date
 * @method  minute
 *
 * @return  {Number} The current minute.
 */
declare function minute(): number;

/**
 * @summary Returns the current month.
 * @description The `month()` function returns the current month as a value from `1`-`12`.
 *
 * @cat     Input
 * @subcat  Time & Date
 * @method  month
 *
 * @return  {Number} The current month number.
 */
declare function month(): number;

/**
 * @summary Returns the current second.
 * @description The `second()` function returns the current second as a value from `0` - `59`.
 *
 * @cat     Input
 * @subcat  Time & Date
 * @method  second
 *
 * @return  {Number} The current second.
 */
declare function second(): number;

/**
 * @summary Returns a timestamp.
 * @description The `timestamp()` function returns the current date formatted as `YYYYMMDD_HHMMSS` for useful unique filenaming.
 *
 * @cat     Input
 * @subcat  Time & Date
 * @method  timestamp
 *
 * @return  {String} The current time in `YYYYMMDD_HHMMSS`.
 */
declare function timestamp(): string;

/**
 * @summary Returns the current day of the week.
 * @description The `weekday()` function returns the current weekday as a string from `Sunday`, `Monday`, `Tuesday` ...
 *
 * @cat     Input
 * @subcat  Time & Date
 * @method  weekday
 *
 * @return  {String} The current weekday name.
 */
declare function weekday(): string;

/**
 * @summary Returns the current year.
 * @description The `year()` function returns the current year as a number (`2018`, `2019` etc).
 *
 * @cat     Input
 * @subcat  Time & Date
 * @method  year
 *
 * @return  {Number} The current year.
 */
declare function year(): number;

/**
 * @summary Calculates the absolute value (magnitude) of a number.
 * @description Calculates the absolute value (magnitude) of a number. The absolute value of a number is always positive.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  abs
 *
 * @param   {Number} val A number.
 * @return  {Number} The absolute value of that number.
 */
declare function abs(val: number): number;

/**
 * @summary Calculates the closest integer value that is greater than or equal to the value of the parameter.
 * @description Calculates the closest integer value that is greater than or equal to the value of the parameter. For example, `ceil(9.03)` returns the value `10`.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  ceil
 *
 * @param   {Number} val An arbitrary number.
 * @return  {Number} The next highest integer value.
 */
declare function ceil(val: number): number;

/**
 * @summary Constrains a value to not exceed a maximum and minimum.
 * @description Constrains a value to not exceed a maximum and minimum value.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  constrain
 *
 * @param   {Number} aNumber The value to constrain.
 * @param   {Number} aMin Minimum limit.
 * @param   {Number} aMax Maximum limit.
 * @return  {Number} The constrained value.
 */
declare function constrain(aNumber: number, aMin: number, aMax: number): number;

/**
 * @summary Calculates the distance between two points.
 * @description Calculates the distance between two points.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  dist
 *
 * @param   {Number} x1 The x-coordinate of the first point.
 * @param   {Number} y1 The y-coordinate of the first point.
 * @param   {Number} x2 The x-coordinate of the second point.
 * @param   {Number} y2 The y-coordinate of the second point.
 * @return  {Number} The distance.
 */
declare function dist(x1: number, y1: number, x2: number, y2: number): number;

/**
 * @summary The `exp()` function returns `ex`, where `x` is the argument, and `e` is Euler's number
 * @description The `exp()` function returns `ex`, where `x` is the argument, and `e` is Euler's number (also known as Napier's constant), the base of the natural logarithms.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  exp
 *
 * @param   {Number} x A number.
 * @return  {Number} A number representing `ex`.
 */
declare function exp(x: number): number;

/**
 * @summary Calculates the closest integer value less than or equal to a value.
 * @description Calculates the closest integer value that is less than or equal to the value of the parameter.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  floor
 *
 * @param   {Number} a A number.
 * @return  {Number} Integer number.
 */
declare function floor(a: number): number;

/**
 * @summary Calculates a number between two numbers at a specific increment.
 * @description Calculates a number between two numbers at a specific increment. The `amt` parameter is the amount to interpolate between the two values where `0.0` is equal to the first point, `0.1` is very near the first point, `0.5` is half-way in between, etc. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  lerp
 *
 * @param   {Number} value1 First value.
 * @param   {Number} value2 Second value.
 * @param   {Number} amt Amount between 0.0 and 1.0.
 * @return  {Number} The mapped value.
 */
declare function lerp(value1: number, value2: number, amt: number): number;

/**
 * @summary Calculates the natural logarithm of a number.
 * @description Calculates the natural logarithm (the base-e logarithm) of a number. This function expects the values greater than `0`.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  log
 *
 * @param   {Number} x A number, must be greater than `0`.
 * @return  {Number} The natural logarithm.
 */
declare function log(x: number): number;

/**
 * @summary Calculates the magnitude (or length) of a vector.
 * @description Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no "start" position, the magnitude of a vector can be thought of as the distance from coordinate `(0,0)` to its `(x,y)` value. Therefore, `mag()` is a shortcut for writing `dist(0, 0, x, y)`.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  mag
 *
 * @param   {Number} x Coordinate.
 * @param   {Number} y Coordinate.
 * @param   {Number} [z] Coordinate, optional.
 * @return  {Number} The magnitude.
 */
declare function mag(x: number, y: number, z?: number): number;

/**
 * @summary Maps a number from one range to another.
 * @description Re-maps a number from one range to another.
 * Numbers outside the range are not clamped to `0` and `1`, because out-of-range values are often intentional and useful.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  map
 *
 * @param   {Number} value The value to be mapped.
 * @param   {Number} istart The start of the input range.
 * @param   {Number} istop The end of the input range.
 * @param   {Number} ostart The start of the output range.
 * @param   {Number} ostop The end of the output range.
 * @return  {Number} The mapped value.
 */
declare function map(value: number, istart: number, istop: number, ostart: number, ostop: number): number;

/**
 * @summary Determines the largest value in a sequence of numbers.
 * @description Determines the largest value in a sequence of numbers.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  max
 *
 * @param   {Number|Array} a A value or an array of Numbers.
 * @param   {Number} [b] Another value to be compared.
 * @param   {Number} [c] Another value to be compared.
 * @return  {Number} The highest value.
 */
declare function max(a: number | any[], b?: number, c?: number): number;

/**
 * @summary Determines the smallest value in a sequence of numbers.
 * @description Determines the smallest value in a sequence of numbers.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  min
 *
 * @param   {Number|Array} a A value or an array of Numbers.
 * @param   {Number} [b] Another value to be compared.
 * @param   {Number} [c] Another value to be compared.
 * @return  {Number} The lowest value.
 */
declare function min(a: number | any[], b?: number, c?: number): number;

/**
 * @summary Normalizes a number from another range into a value between `0` and `1`.
 * @description Normalizes a number from another range into a value between `0` and `1`.
 * Identical to `map(value, low, high, 0, 1);`
 * Numbers outside the range are not clamped to `0` and `1`, because out-of-range values are often intentional and useful.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  norm
 *
 * @param   {Number} aNumber The value to be normed.
 * @param   {Number} low The lowest value to be expected.
 * @param   {Number} high The highest value to be expected.
 * @return  {Number} The normalized value.
 */
declare function norm(aNumber: number, low: number, high: number): number;

/**
 * @summary Facilitates exponential expressions.
 * @description Facilitates exponential expressions. The `pow()` function is an efficient way of multiplying numbers by themselves (or their reciprocal) in large quantities. For example, `pow(3, 5)` is equivalent to the expression `3 * 3 * 3 * 3 * 3` and `pow(3, -5)` is equivalent to `1 / 3 * 3 * 3 * 3 * 3`.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  pow
 *
 * @param   {Number} num Base of the exponential expression.
 * @param   {Number} exponent Power of which to raise the base.
 * @return  {Number} the result
 */
declare function pow(num: number, exponent: number): number;

/**
 * @summary Calculates the integer closest to a value.
 * @description Calculates the integer closest to the value parameter. For example, `round(9.2)` returns the value `9`.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  round
 *
 * @param   {Number} value The value to be rounded.
 * @return  {Number} The rounded value.
 */
declare function round(value: number): number;

/**
 * @summary Squares a number.
 * @description Squares a number (multiplies a number by itself). The result is always a positive number, as multiplying two negative numbers always yields a positive result. For example, `-1 * -1 = 1`.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  sq
 *
 * @param   {Number} aNumber The value to be squared.
 * @return  {Number} Squared number.
 */
declare function sq(aNumber: number): number;

/**
 * @summary Calculates the square root of a number.
 * @description Calculates the square root of a number. The square root of a number is always positive, even though there may be a valid negative root. The square root s of number a is such that `s * s = a`. It is the opposite of squaring.
 *
 * @cat     Math
 * @subcat  Calculation
 * @method  sqrt
 *
 * @param   {Number} val A value.
 * @return  {Number} Square root.
 */
declare function sqrt(val: number): number;

/**
 * @summary Returns the Perlin noise value at specified coordinates.
 * @description Returns the Perlin noise value at specified coordinates. Perlin noise is a random sequence generator producing a more natural ordered, harmonic succession of numbers compared to the standard `random()` function. It was invented by Ken Perlin in the 1980s and been used since in graphical applications to produce procedural textures, natural motion, shapes, terrains etc.
 *
 * The main difference to the `random()` function is that Perlin noise is defined in an infinite n-dimensional space where each pair of coordinates corresponds to a fixed semi-random value (fixed only for the lifespan of the program). The resulting value will always be between `0` and `1`. basil.js can compute 1D, 2D and 3D noise, depending on the number of coordinates given. The noise value can be animated by moving through the noise space. The 2nd and 3rd dimension can also be interpreted as time.
 *
 * The actual noise is structured similar to an audio signal, in respect to the function's use of frequencies. Similar to the concept of harmonics in physics, perlin noise is computed over several octaves which are added together for the final result.
 *
 * Another way to adjust the character of the resulting sequence is the scale of the input coordinates. As the function works within an infinite space the value of the coordinates doesn't matter as such, only the distance between successive coordinates does (eg. when using `noise()` within a loop). As a general rule the smaller the difference between coordinates, the smoother the resulting noise sequence will be. Steps of `0.005`- `0.03` work best for most applications, but this will differ depending on use.
 *
 * @cat     Math
 * @subcat  Random
 * @method  noise
 *
 * @param   {Number} x Coordinate in x space.
 * @param   {Number} [y] Coordinate in y space.
 * @param   {Number} [z] Coordinate in z space.
 * @return  {Number} The noise value.
 */
declare function noise(x: number, y?: number, z?: number): number;

/**
 * @summary Adjusts the character and detail of the `noise()` function.
 * @description Adjusts the character and level of detail produced by the Perlin noise function. Similar to harmonics in physics, noise is computed over several octaves. Lower octaves contribute more to the output signal and as such define the overal intensity of the noise, whereas higher octaves create finer grained details in the noise sequence. By default, noise is computed over 4 octaves with each octave contributing exactly half than its predecessor, starting at 50% strength for the 1st octave. This falloff amount can be changed by adding an additional function parameter. Eg. a falloff factor of `0.75` means each octave will now have 75% impact (25% less) of the previous lower octave. Any value between `0` and `1` is valid, however note that values greater than `0.5` might result in greater than `1` values returned by `noise()`.
 *
 * By changing these parameters, the signal created by the `noise()` function can be adapted to fit very specific needs and characteristics.
 *
 * @cat     Math
 * @subcat  Random
 * @method  noiseDetail
 *
 * @param   {Number} octaves Number of octaves to be used by the noise() function.
 * @param   {Number} fallout Falloff factor for each octave.
 */
declare function noiseDetail(octaves: number, fallout: number): void;

/**
 * @summary Sets the seed value for `noise()`.
 * @description Sets the seed value for `noise()`. By default, `noise()` produces different results each time the program is run. Set the value parameter to a constant to return the same pseudo-random numbers each time the software is run.
 *
 * @cat     Math
 * @subcat  Random
 * @method  noiseSeed
 *
 * @param   {Number} seed Noise seed value.
 */
declare function noiseSeed(seed: number): void;

/**
 * @summary  Generates a random number.
 * @description Generates random numbers. Each time the `random()` function is called, it returns an unexpected value within the specified range. If one parameter is passed to the function it will return a float between zero and the value of the high parameter. The function call `random(5)` returns values between `0` and `5`. If two parameters are passed, it will return a float with a value between the the parameters. The function call `random(-5, 10.2)` returns values between `-5` and `10.2`.
 * One parameter sets the range from `0` to the given parameter, while with two parameters present you set the range from `val1` to `val2`.
 *
 * @cat     Math
 * @subcat  Random
 * @method  random
 *
 * @param   {Number} [low] The low border of the range.
 * @param   {Number} [high] The high border of the range.
 * @return  {Number} A random number.
 */
declare function random(low?: number, high?: number): number;

/**
 * @summary Sets the seed value for `random()`.
 * @description Sets the seed value for `random()`.
 * By default, `random()` produces different results each time the program is run. Set the seed parameter to a constant to return the same pseudo-random numbers each time the software is run.
 *
 * @cat     Math
 * @subcat  Random
 * @method  randomSeed
 *
 * @param   {Number} seed The seed value.
 */
declare function randomSeed(seed: number): void;

/**
 * @summary Returns the arc cosine of a value.
 * @description The inverse of `cos()`, returns the arc cosine of a value. This function expects the values in the range of `-1` to `1` and values are returned in the range `0` to `PI` (`3.1415927`).
 *
 * @cat     Math
 * @subcat  Trigonometry
 * @method  acos
 *
 * @param   {Number} value The value whose arc cosine is to be returned.
 * @return  {Number} The arc cosine.
 */
declare function acos(value: number): number;

/**
 * @summary Returns the arc sine of a value.
 * @description The inverse of `sin()`, returns the arc sine of a value. This function expects the values in the range of `-1` to `1` and values are returned in the range `0` to `PI` (`3.1415927`).
 *
 * @cat     Math
 * @subcat  Trigonometry
 * @method  asin
 *
 * @param   {Number} value The value whose arc sine is to be returned.
 * @return  {Number} The arc sine.
 */
declare function asin(value: number): number;

/**
 * @summary Returns the arc tangent of a value.
 * @description The inverse of `tan()`, returns the arc tangent of a value. This function expects the values in the range of `-1` to `1` and values are returned in the range `0` to `PI` (`3.1415927`).
 *
 * @cat     Math
 * @subcat  Trigonometry
 * @method  atan
 *
 * @param   {Number} value The value whose arc tangent is to be returned.
 * @return  {Number} The arc tangent.
 */
declare function atan(value: number): number;

/**
 * @summary Calculates the angle from a specified point to the coordinate origin.
 * @description Calculates the angle (in radians) from a specified point to the coordinate origin as measured from the positive x-axis. Values are returned as a float in the range from `PI` to `-PI`. The `atan2()` function is most often used for orienting geometry to the position of the cursor. Note: The y-coordinate of the point is the first parameter and the x-coordinate is the second due the the structure of calculating the tangent.
 *
 * @cat     Math
 * @subcat  Trigonometry
 * @method  atan2
 *
 * @param   {Number} y The y coordinate.
 * @param   {Number} x The x coordinate.
 * @return  {Number} The atan2 value.
 */
declare function atan2(y: number, x: number): number;

/**
 * @summary Calculates the cosine of an angle.
 * @description Calculates the cosine of an angle. This function expects the values of the angle parameter to be provided in radians (values from `0` to `PI * 2`). Values are returned in the range `-1` to `1`.
 *
 * @cat     Math
 * @subcat  Trigonometry
 * @method  cos
 *
 * @param   {Number} rad A value in radians.
 * @return  {Number} The cosine.
 */
declare function cos(rad: number): number;

/**
 * @summary Converts a radian measurement to the corresponding value in degrees.
 * @description Converts a radian measurement to its corresponding value in degrees. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and `2 * PI` radians in a circle. For example, `90° = PI / 2 = 1.5707964`. All trigonometric methods in basil require their parameters to be specified in radians.
 *
 * @cat     Math
 * @subcat  Trigonometry
 * @method  degrees
 *
 * @param   {Number} aAngle An angle in radians.
 * @return  {Number} The given angle in degree.
 */
declare function degrees(aAngle: number): number;

/**
 * @summary Converts a degree measurement to the corresponding value in radians.
 * @description Converts a degree measurement to its corresponding value in radians. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and `2 * PI` radians in a circle. For example, `90° = PI / 2 = 1.5707964`. All trigonometric methods in basil require their parameters to be specified in radians.
 *
 * @cat     Math
 * @subcat  Trigonometry
 * @method  radians
 *
 * @param   {Number} aAngle An angle in degree.
 * @return  {Number} The given angle in radians.
 */
declare function radians(aAngle: number): number;

/**
 * @summary Calculates the sine of an angle.
 * @description Calculates the sine of an angle. This function expects the values of the angle parameter to be provided in radians (values from `0` to `6.28`). Values are returned in the range `-1` to `1`.
 *
 * @cat     Math
 * @subcat  Trigonometry
 * @method  sin
 *
 * @param   {Number} rad A value in radians.
 * @return  {Number} The sine value.
 */
declare function sin(rad: number): number;

/**
 * @summary Calculates the ratio of the sine and cosine of an angle.
 * @description Calculates the ratio of the sine and cosine of an angle. This function expects the values of the angle parameter to be provided in radians (values from `0` to `PI * 2`). Values are returned in the range `infinity` to `-infinity`.
 *
 * @cat     Math
 * @subcat  Trigonometry
 * @method  tan
 *
 * @param   {Number} rad A value in radians.
 * @return  {Number} The tangent value.
 */
declare function tan(rad: number): number;

/**
 * @summary A class to describe a two or three dimensional vector.
 * @description A class to describe a two or three dimensional vector. This data type stores two or three variables that are commonly used as a position, velocity, and/or acceleration. Technically, position is a point and velocity and acceleration are vectors, but this is often simplified to consider all three as vectors. For example, if you consider a rectangle moving across the screen, at any given instant it has a position (the object's location, expressed as a point.), a velocity (the rate at which the object's position changes per time unit, expressed as a vector), and acceleration (the rate at which the object's velocity changes per time unit, expressed as a vector). Since vectors represent groupings of values, we cannot simply use traditional addition/multiplication/etc. Instead, we'll need to do some "vector" math, which is made easy by the methods inside the Vector class.
 *
 * Constructor of Vector, can be two- or three-dimensional.
 *
 * @cat     Math
 * @subcat  Vector
 * @method  Vector
 *
 * @param   {Number} x The first vector.
 * @param   {Number} y The second vector.
 * @param   {Number} [z] The third vector.
 * @class
 */
declare class Vector {
    constructor(x: number, y: number, z?: number);
    /**
     * @summary Calculates the angle between two vectors.
     * @description Static function. Calculates the angle between two vectors. Is meant to be called "static" i.e. `Vector.angleBetween(v1, v2);`
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.angleBetween
     *
     * @param   {Vector} v1 The first vector.
     * @param   {Vector} v2 The second vector.
     * @return  {Number} The angle.
     * @static
     */
    static angleBetween(v1: Vector, v2: Vector): number;
    /**
     * @summary Calculates the cross product of two vectors.
     * @description Static function. Calculates the cross product of two vectors. Is meant to be called "static" i.e. `Vector.cross(v1, v2);`
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.cross
     *
     * @param   {Vector} v1 The first vector.
     * @param   {Vector} v2 The second vector.
     * @return  {Number} The cross product.
     * @static
     */
    static cross(v1: Vector, v2: Vector): number;
    /**
     * @summary Calculates the Euclidean distance between two points.
     * @description Static function. Calculates the Euclidean distance between two points (considering a point as a vector object). Is meant to be called "static" i.e. `Vector.dist(v1, v2);`
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.dist
     *
     * @param   {Vector} v1 The first vector.
     * @param   {Vector} v2 The second vector.
     * @return  {Number} The distance.
     * @static
     */
    static dist(v1: Vector, v2: Vector): number;
    /**
     * @summary Calculates the dot product of two vectors.
     * @description Static function. Calculates the dot product of two vectors. Is meant to be called "static" i.e. `Vector.dot(v1, v2);`
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.dot
     *
     * @param   {Vector} v1 The first vector.
     * @param   {Vector} v2 The second vector.
     * @return  {Number} The dot product.
     * @static
     */
    static dot(v1: Vector, v2: Vector): number;
    /**
     * @summary Adds `x`, `y`, and `z` components to a vector or adds one vector to another.
     * @description Adds `x`, `y`, and `z` components to a vector, adds one vector to another.
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.add
     *
     * @param   {Vector|Number} v Either a full vector or an `x` component.
     * @param   {Number} [y] The `y` component.
     * @param   {Number} [z] The `z` component.
     */
    static add(v: Vector | number, y?: number, z?: number): void;
    /**
     * @summary Returns the vector as an array.
     * @description Returns this vector as an array `[x,y,z]`.
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.array
     *
     * @return  {Array} The `x`, `y` and `z` components as an array of `[x,y,z]`.
     */
    static array(): any[];
    /**
     * @summary Calculates the cross product of two vectors.
     * @description Static function. Calculates the cross product of two vectors. Is meant to be called "static" i.e. `Vector.cross(v1, v2);`
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.cross
     *
     * @param   {Vector} v1 The first vector.
     * @param   {Vector} v2 The second vector.
     * @return  {Number} The cross product.
     * @static
     */
    static cross(v1: Vector, v2: Vector): number;
    /**
     * @summary Calculates the Euclidean distance between two points.
     * @description Static function. Calculates the Euclidean distance between two points (considering a point as a vector object). Is meant to be called "static" i.e. `Vector.dist(v1, v2);`
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.dist
     *
     * @param   {Vector} v1 The first vector.
     * @param   {Vector} v2 The second vector.
     * @return  {Number} The distance.
     * @static
     */
    static dist(v1: Vector, v2: Vector): number;
    /**
     * @summary Divides this vector through another.
     * @description Divides this vector through `x`, `y`, and `z` components or another vector.
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.div
     *
     * @param   {Vector|Number} v Either a full vector or an `x` component.
     * @param   {Number} [y] The `y` component.
     * @param   {Number} [z] The `z` component.
     */
    static div(v: Vector | number, y?: number, z?: number): void;
    /**
     * @summary Calculates the dot product of two vectors.
     * @description Static function. Calculates the dot product of two vectors. Is meant to be called "static" i.e. `Vector.dot(v1, v2);`
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.dot
     *
     * @param   {Vector} v1 The first vector.
     * @param   {Vector} v2 The second vector.
     * @return  {Number} The dot product.
     * @static
     */
    static dot(v1: Vector, v2: Vector): number;
    /**
     * @summary Gets a copy of the vector.
     * @description Gets a copy of the vector, returns a Vector object.
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.get
     *
     * @return  {Vector} A copy of the vector.
     */
    static get(): Vector;
    /**
     * @summary Returns the 2D orientation of the vector.
     * @description The 2D orientation (heading) of this vector in radian.
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.heading
     *
     * @return  {Number} A radian angle value.
     */
    static heading(): number;
    /**
     * @summary Normalizes the length of the vector.
     * @description Normalizes the length of this vector to the given parameter.
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.limit
     *
     * @param   {Number} high The value to scale to.
     */
    static limit(high: number): void;
    /**
     * @summary Calculates the magnitude of the vector.
     * @description Calculates the magnitude (length) of the vector and returns the result as a float
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.mag
     *
     * @return  {Number} The length.
     */
    static mag(): number;
    /**
     * @summary Multiplies this vector with another vector.
     * @description Multiplies this vector with `x`, `y`, and `z` components or another vector.
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.mult
     *
     * @param   {Vector|Number} v Either a full vector or an `x` component.
     * @param   {Number} [y] The `y` component.
     * @param   {Number} [z] The `z` component.
     */
    static mult(v: Vector | number, y?: number, z?: number): void;
    /**
     * @summary Normalizes the length of the vector to 1.
     * @description Normalizes the length of this vector to 1.
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.normalize
     */
    static normalize(): void;
    /**
     * @summary Sets the `x`, `y`, and `z` component of the vector.
     * @description Sets the `x`, `y`, and `z` component of the vector using three separate variables, the data from a Vector, or the values from a float array.
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.set
     *
     * @param   {Number|Array|Vector} v Either a vector, array or `x` component.
     * @param   {Number} [y] The `y` component.
     * @param   {Number} [z] The `z` component.
     */
    static set(v: number | any[] | Vector, y?: number, z?: number): void;
    /**
     * @summary Substracts `x`, `y`, and `z` components or another vector from this vector.
     * @description Substracts `x`, `y`, and `z` components or a full vector from this vector.
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.sub
     *
     * @param   {Vector|Number} v Either a full vector or an `x` component.
     * @param   {Number} [y] The `y` component.
     * @param   {Number} [z] The `z` component.
     */
    static sub(v: Vector | number, y?: number, z?: number): void;
    /**
     * @summary Returns data about a vector as string.
     * @description Returns data about this vector as a string.
     *
     * @cat     Math
     * @subcat  Vector
     * @method  Vector.toString
     *
     * @return  {String} The `x`, `y` and `z` components as a string.
     */
    static toString(): string;
}

/**
 * @summary Prints a message to the console.
 * @description Prints a message to the console output in the ExtendScript editor, but unlike `println()` it doesn't return the carriage to a new line at the end.
 *
 * @cat     Output
 * @subcat  Console
 * @method  print
 *
 * @param   {Any} msg Any combination of Number, String, Object, Boolean, Array to print.
 */
declare function print(msg: any): void;

/**
 * @summary Prints a message line to the console.
 * @description Prints a message line to the console output in the ExtendScript editor.
 *
 * @cat     Output
 * @subcat  Console
 * @method  println
 *
 * @param   {Any} msg Any combination of Number, String, Object, Boolean, Array to print.
 */
declare function println(msg: any): void;

/**
 * @summary  Encodes an object to a JSON string and saves it to a JSON file.
 * @description Encodes an object to a JSON string and saves it to a JSON file. If the given file exists it gets overridden.
 *
 * @cat     Output
 * @subcat  Files
 * @method  saveJSON
 *
 * @param   {String|File} file The file name or a File instance.
 * @param   {object} data The object to encode and save in the file.
 * @return  {File} The JSON file the data was written to.
 */
declare function saveJSON(file: string | File, data: any): File;

/**
 * @summary  Exports the document as PDF.
 * @description Exports the current document as PDF to the documents folder. Please note that export options default to the last used export settings.
 *
 * @cat     Output
 * @subcat  Files
 * @method  savePDF
 *
 * @param   {String|File} file The file name or a File instance.
 * @param   {Boolean} [showOptions] Whether to show the export dialog.
 * @return  {File} The exported PDF file.
 */
declare function savePDF(file: string | File, showOptions?: boolean): File;

/**
 * @summary  Exports the document as PNG.
 * @description Exports the current document as PNG (or sequence of PNG files) to the documents folder. Please note, that export options default to the last used export settings.
 *
 * @cat     Output
 * @subcat  Files
 * @method  savePNG
 *
 * @param   {String|File} file The file name or a File instance
 * @param   {Boolean} [showOptions] Whether to show the export dialog
 * @return  {File} The exported PNG file.
 */
declare function savePNG(file: string | File, showOptions?: boolean): File;

/**
 * @summary Writes a string to a file.
 * @description Writes a string to a file. If the given file exists it gets overridden.
 *
 * @cat     Output
 * @subcat  Files
 * @method  saveString
 *
 * @param   {String|File} file The file name or a File instance.
 * @param   {String} string The string to be written.
 * @return  {File} The file the string was written to.
 */
declare function saveString(file: string | File, string: string): File;

/**
 * @summary Writes an array of strings to a file.
 * @description Writes an array of strings to a file, one line per string. If the given file exists it gets overridden.
 *
 * @cat     Output
 * @subcat  Files
 * @method  saveStrings
 *
 * @param   {String|File} file The file name or a File instance
 * @param   {Array} strings The string array to be written
 * @return  {File} The file the strings were written to.
 */
declare function saveStrings(file: string | File, strings: any[]): File;

/**
 * @summary Sets how new ellipses are drawn.
 * @description The origin of new ellipses is modified by the `ellipseMode()` function. The default configuration is `ellipseMode(CENTER)`, which specifies the location of the ellipse as the center of the shape. The `RADIUS` mode is the same, but the `w` and `h` parameters to `ellipse()` specify the radius of the ellipse, rather than the diameter. The `CORNER` mode draws the shape from the upper-left corner of its bounding box. The `CORNERS` mode uses the four parameters to `ellipse()` to set two opposing corners of the ellipse's bounding box.
 *
 * @cat     Shape
 * @subcat  Attributes
 * @method  ellipseMode
 *
 * @param   {String} mode The ellipse mode to switch to: either `CENTER`, `RADIUS`, `CORNER`, or `CORNERS`.
 */
declare function ellipseMode(mode: string): void;

/**
 * @summary Sets how new rectangles are drawn.
 * @description Modifies the location from which rectangles or text frames draw. The default mode is `rectMode(CORNER)`, which specifies the location to be the upper left corner of the shape and uses the `w` and `h` parameters to specify the width and height. The syntax `rectMode(CORNERS)` uses the `x` and `y` parameters of `rect()` or `text()` to set the location of one corner and uses the `w` and `h` parameters to set the opposite corner. The syntax `rectMode(CENTER)` draws the shape from its center point and uses the `w` and `h` parameters to specify the shape's width and height. The syntax `rectMode(RADIUS)` draws the shape from its center point and uses the `w` and `h` parameters to specify half of the shape's width and height.
 *
 * @cat     Shape
 * @subcat  Attributes
 * @method  rectMode
 *
 * @param   {String} mode The rectMode to switch to: either `CORNER`, `CORNERS`, `CENTER`, or `RADIUS`.
 */
declare function rectMode(mode: string): void;

/**
 * @summary Sets the stroke width for lines and borders.
 * @description Sets the width of the stroke used for lines and the border around shapes.
 *
 * @cat     Shape
 * @subcat  Attributes
 * @method  strokeWeight
 *
 * @param   {Number} weight The width of the stroke in points.
 */
declare function strokeWeight(weight: number): void;

/**
 * @summary Draws an arc.
 * @description The `arc()` function draws an arc. Arcs are drawn along the outer edge of an ellipse defined by the `x`, `y`, `width` and `height` parameters. The origin or the arc's ellipse may be changed with the `ellipseMode()` function. The start and stop parameters specify the angles at which to draw the arc.
 *
 * @cat     Shape
 * @subcat  Primitives
 * @method  arc
 *
 * @param   {Number} cx X-coordinate of the arc's center.
 * @param   {Number} cy Y-coordinate of the arc's center.
 * @param   {Number} w Width of the arc's ellipse.
 * @param   {Number} h Height of the arc's ellipse.
 * @param   {Number} startAngle Starting angle of the arc in radians.
 * @param   {Number} endAngle Ending angle of the arc in radians.
 * @param   {String} [mode] Mode to define the rendering technique of the arc: `OPEN` (default), `CHORD`, or `PIE`.
 * @return  {GraphicLine|Polygon} The resulting GraphicLine or Polygon object (in InDesign Scripting terms the corresponding type is GraphicLine or Polygon, not Arc).
 */
declare function arc(cx: number, cy: number, w: number, h: number, startAngle: number, endAngle: number, mode?: string): GraphicLine | Polygon;

/**
 * @summary Draws an ellipse.
 * @description Draws an ellipse (oval) in the display window. An ellipse with an equal width and height is a circle. The first two parameters set the location, the third sets the width, and the fourth sets the height. If no height is specified, the value of width is used for both the width and height. If a negative height or width is specified, the absolute value is taken. The origin may be changed with the ellipseMode() function.
 *
 * @cat     Shape
 * @subcat  Primitives
 * @method  ellipse
 *
 * @param   {Number} x X-coordinate of the ellipse.
 * @param   {Number} y Y-coordinate of the ellipse.
 * @param   {Number} w Width of the ellipse.
 * @param   {Number} h Height of the ellipse.
 * @return  {Oval} New Oval (in InDesign Scripting terms the corresponding type is Oval, not Ellipse).
 */
declare function ellipse(x: number, y: number, w: number, h: number): Oval;

/**
 * @summary Draws a line.
 * @description Draws a line (a direct path between two points) to the page.
 *
 * @cat     Shape
 * @subcat  Primitives
 * @method  line
 *
 * @param   {Number} x1 X-coordinate of Point 1.
 * @param   {Number} y1 Y-coordinate of Point 1.
 * @param   {Number} x2 X-coordinate of Point 2.
 * @param   {Number} y2 Y-coordinate of Point 2.
 * @return  {GraphicLine} New GraphicLine.
 *
 * @example
 * var vec1 = new Vector(x1, y1);
 * var vec2 = new Vector(x2, y2);
 * line( vec1, vec2 );
 */
declare function line(x1: number, y1: number, x2: number, y2: number): GraphicLine;

/**
 * @summary Draws a point.
 * @description Draws a point, a coordinate in space at the dimension of the current stroke weight. The first parameter is the horizontal value for the point, the second value is the vertical value for the point. The color of the point is determined by the current stroke.
 *
 * @cat     Shape
 * @subcat  Primitives
 * @method  point
 *
 * @param   {Number} x X-coordinate of the point.
 * @param   {Number} y Y-coordinate of the point.
 * @return  {Oval} The point as an Oval object.
 */
declare function point(x: number, y: number): Oval;

/**
 * @summary Draws a quad.
 * @description Draws a quad to the page. A quad is a quadrilateral, a four sided polygon. It is similar to a rectangle, but the angles between its edges are not constrained to ninety degrees. The first pair of parameters (`x1`, `y1`) sets the first vertex, the subsequent pairs proceed around the defined shape.
 *
 * @cat     Shape
 * @subcat  Primitives
 * @method  quad
 *
 * @param   {Number} x1 X-coordinate of Point 1.
 * @param   {Number} y1 Y-coordinate of Point 1.
 * @param   {Number} x2 X-coordinate of Point 2.
 * @param   {Number} y2 Y-coordinate of Point 2.
 * @param   {Number} x3 X-coordinate of Point 3.
 * @param   {Number} y3 Y-coordinate of Point 3.
 * @param   {Number} x3 X-coordinate of Point 4.
 * @param   {Number} y3 Y-coordinate of Point 4.
 * @return  {Polygon} The new quad as a Polygon object.
 */
declare function quad(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x3: number, y3: number): Polygon;

/**
 * @summary Draws a rectangle.
 * @description Draws a rectangle on the page.
 * By default, the first two parameters set the location of the upper-left corner, the third sets the width, and the fourth sets the height. The way these parameters are interpreted, however, may be changed with the `rectMode()` function.
 * The fifth, sixth, seventh and eighth parameters, if specified, determine corner radius for the top-right, top-left, lower-right and lower-left corners, respectively. If only a fifth parameter is provided, all corners will be set to this radius.
 *
 * @cat     Shape
 * @subcat  Primitives
 * @method  rect
 *
 * @param   {Number} x X-coordinate of the rectangle.
 * @param   {Number} y Y-coordinate of the rectangle.
 * @param   {Number} w Width of the rectangle.
 * @param   {Number} h Height of the rectangle.
 * @param   {Number} [tl] Radius of top left corner or radius of all 4 corners (optional).
 * @param   {Number} [tr] Radius of top right corner (optional).
 * @param   {Number} [br] Radius of bottom right corner (optional).
 * @param   {Number} [bl] Radius of bottom left corner (optional).
 * @return  {Rectangle} The rectangle that was created.
 */
declare function rect(x: number, y: number, w: number, h: number, tl?: number, tr?: number, br?: number, bl?: number): Rectangle;

/**
 * @summary Draws a triangle.
 * @description Draws a triangle to the page. The first two arguments specify the first point, the middle two arguments specify the second point, and the last two arguments specify the third point.
 *
 * @cat     Shape
 * @subcat  Primitives
 * @method  triangle
 *
 * @param   {Number} x1 X-coordinate of Point 1.
 * @param   {Number} y1 Y-coordinate of Point 1.
 * @param   {Number} x2 X-coordinate of Point 2.
 * @param   {Number} y2 Y-coordinate of Point 2.
 * @param   {Number} x3 X-coordinate of Point 3.
 * @param   {Number} y3 Y-coordinate of Point 3.
 * @return  {Polygon} The new triangle as a Polygon object.
 */
declare function triangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): Polygon;

/**
 * @summary Adds a new path during shape drawing.
 * @description `addPath()` is used to create multi component paths. Call `addPath()` to add the vertices drawn so far to a single path. New vertices will then end up in a new path and `endShape()` will return a multi path object. All component paths will account for the setting (see `CLOSE`) given in `beginShape(shapeMode)`.
 *
 * @cat     Shape
 * @subcat  Vertex
 * @method  addPath
 */
declare function addPath(): void;

/**
 * @summary  Starts drawing a complex path or shape.
 * @description Using the `beginShape()` and `endShape()` functions allows to create more complex forms. `beginShape()` begins recording vertices for a shape and `endShape()` stops recording. After calling the `beginShape()` function, a series of `vertex()` commands must follow. To stop drawing the shape, call `endShape()`.
 *
 * @cat     Shape
 * @subcat  Vertex
 * @method  beginShape
 *
 */
declare function beginShape(): void;

/**
 * @summary Finishes drawing a complex path or shape.
 * @description The `endShape()` function is the companion to `beginShape()` and may only be called after `beginShape()`. It creates and returns a path of the previously called `vertex()` points. The `shapeMode` parameter allows to close the shape (to connect the beginning and the end).
 *
 * @cat     Shape
 * @subcat  Vertex
 * @method  endShape
 *
 * @param   {String} shapeMode Set to `CLOSE` if the new path should be auto-closed.
 * @return  {GraphicLine|Polygon} The GraphicLine or Polygon object that was created.
 */
declare function endShape(shapeMode: string): GraphicLine | Polygon;

/**
 * @summary Adds a vertex during drawing complex paths or shapes.
 * @description Shapes are constructed by connecting a series of vertices. `vertex()` is used to specify the vertex coordinates of lines and polygons. It is used exclusively between the `beginShape()` and `endShape()` functions.
 *
 * Use either `vertex(x, y)` for drawing straight corners or `vertex(x, y, xLeftHandle, yLeftHandle, xRightHandle, yRightHandle)` for drawing bezier shapes. You can also mix the two approaches.
 *
 * @cat     Shape
 * @subcat  Vertex
 * @method  vertex
 *
 * @param   {Number} x X-coordinate of the vertex.
 * @param   {Number} y Y-coordinate of the vertex.
 * @param   {Number} [xLeftHandle] X-coordinate of the left-direction point.
 * @param   {Number} [yLeftHandle] Y-coordinate of the left-direction point.
 * @param   {Number} [xRightHandle] X-coordinate of the right-direction point.
 * @param   {Number} [yRightHandle] Y-coordinate of the right-direction point.
 */
declare function vertex(x: number, y: number, xLeftHandle?: number, yLeftHandle?: number, xRightHandle?: number, yRightHandle?: number): void;

/**
 * @summary Sets the performance mode to allow hiding or freezing the document during script execution.
 * @description Used to set the performance mode. While modes can be switched during script execution, to use a mode for the entire script execution, `mode()` should be placed in the beginning of the script. In basil there are three different performance modes:
 *
 * - `VISIBLE` is the default mode. In this mode, during script execution the document will be processed with screen redraw, allowing to see direct results during the process. As the screen needs to redraw continuously, this is slower than the other modes.
 * - `HIDDEN` allows to process the document in background mode. The document is not visible in this mode, which speeds up the script execution. In this mode you will likely look at InDesign with no open document for quite some time – do not work in InDesign during this time. You may want to use `println("yourMessage")` in your script and look at the console to get information about the process. Note: In order to enter this mode either a saved document needs to be open or no document at all. If you have an unsaved document open, basil will automatically save it for you. If it has not been saved before, you will be prompted to save it to your hard drive.
 * - `SILENT` processes the document without redrawing the screen. The document will stay visible and only update once the script is finished or once the mode is changed back to `VISIBLE`.
 *
 * @cat     Structure
 * @method  mode
 *
 * @param   {String} mode The performance mode to switch to.
 */
declare function mode(mode: string): void;

/**
 * @summary Stops basil from looping.
 * @description Stops basil from continuously executing the code within `loop()` and quits the script.
 *
 * @cat     Structure
 * @method  noLoop
 */
declare function noLoop(): void;

/**
 * @summary Multiplies the current matrix by another one.
 * @description Multiplies the current matrix by the one specified through the parameters.
 *
 * @cat     Transform
 * @method  applyMatrix
 *
 * @param   {Matrix2D} matrix The matrix to be applied.
 */
declare function applyMatrix(matrix: Matrix2D): void;

/**
 * @summary Pops the current transformation matrix off the matrix stack.
 * @description Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires understanding the concept of a matrix stack. The `pushMatrix()` function saves the current coordinate system to the stack and `popMatrix()` restores the prior coordinate system. `pushMatrix()` and `popMatrix()` are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations.
 *
 * @cat     Transform
 * @method  popMatrix
 */
declare function popMatrix(): void;

/**
 * @summary Prints the current matrix to the console.
 * @description Prints the current matrix to the console window.
 *
 * @cat     Transform
 * @method  printMatrix
 */
declare function printMatrix(): void;

/**
 * @summary Pushes the current transformation matrix onto the matrix stack.
 * @description Pushes the current transformation matrix onto the matrix stack. Understanding `pushMatrix()` and `popMatrix()` requires understanding the concept of a matrix stack. The `pushMatrix()` function saves the current coordinate system to the stack and `popMatrix()` restores the prior coordinate system. `pushMatrix()` and `popMatrix()` are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations.
 *
 * @cat     Transform
 * @method  pushMatrix
 */
declare function pushMatrix(): void;

/**
 * @summary Replaces the current matrix with the identity matrix.
 * @description Replaces the current matrix with the identity matrix.
 *
 * @cat     Transform
 * @method  resetMatrix
 */
declare function resetMatrix(): void;

/**
 * @summary Rotates an object.
 * @description Rotates an object the amount specified by the angle parameter. Angles should be specified in radians (values from 0 to `PI`*2) or converted to radians with the `radians()` function. Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction with 0 radians or degrees being up and `HALF_PI` being to the right etc. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling `rotate(PI/2)` and then `rotate(PI/2)` is the same as `rotate(PI)`. If `rotate()` is called within the `draw()`, the transformation is reset when the loop begins again. Technically, `rotate()` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the `pushMatrix()` and `popMatrix()`.
 *
 * @cat     Transform
 * @method  rotate
 *
 * @param   {Number} angle The angle specified in radians
 */
declare function rotate(angle: number): void;

/**
 * @summary Scales an object.
 * @description Increasing and decreasing the size of an object by expanding and contracting vertices. Scale values are specified as decimal percentages. The function call `scale(2.0)` increases the dimension of a shape by 200%. Objects always scale from their relative origin to the coordinate system. Transformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling `scale(2.0)` and then `scale(1.5)` is the same as `scale(3.0)`. If `scale()` is called within `draw()`, the transformation is reset when the loop begins again. This function can be further controlled by `pushMatrix()` and `popMatrix()`. If only one parameter is given, it is applied on X and Y axis.
 *
 * @cat     Transform
 * @method  scale
 *
 * @param   {Number} scaleX The amount to scale the X axis.
 * @param   {Number} scaleY The amount to scale the Y axis.
 */
declare function scale(scaleX: number, scaleY: number): void;

/**
 * @summary Transforms an object.
 * @description Transforms a given page item. The type of transformation is determinded with the second parameter. The third parameter is the transformation value, either a number or an array of x and y values. The transformation's reference point (top left, bottom center etc.) can be set beforehand by using the `referencePoint()` function. If the third parameter is ommited, the function can be used to measure the value of the page item. There are 10 different transformation types:
 * - `"translate"`: Translates the page item by the given `[x, y]` values. Returns the coordinates of the page item's anchor point as anray.
 * - `"rotate"`: Rotates the page item to the given degree value. Returns the page item's rotation value in degrees.
 * - `"scale"`: Scales the page item to the given `[x, y]` scale factor values. Alternatively, a single scale factor value can be usto scale the page item uniformely. Returns the scale factor values of the page item's current scale as an array.
 * - `"shear"`: Shears the page item to the given degree value. Returns the page item's shear value in degrees.
 * - `"size"`: Sets the page item's size to the given `[x, y]` dimensions. Returns the size of the page item as an array.
 * - `"width"`: Sets the page item's width to the given value. Returns the width of the page item.
 * - `"height"`: Sets the page item's height to the given value. Returns the height of the page item.
 * - `"position"`: Sets the position of the page item's anchor point to the given `[x, y]` coordinates. Returns the coordinates of the page item's anchor point as an array.
 * - `"x"`: Sets the x-position of the page item's anchor point to the given value. Returns the x-coordinate of the page item's anr point.
 * - `"y"`: Sets the y-position of the page item's anchor point to the given value. Returns the y-coordinate of the page item's anchor point.
 *
 * @cat     Transform
 * @method  transform
 *
 * @param   {PageItem} pItem The page item to transform.
 * @param   {String} type The type of transformation.
 * @param   {Number|Array} [value] The value(s) of the transformation.
 * @return  {Number|Array} The current value(s) of the specified transformation.
 *
 * @example <caption>Rotating a rectangle to a 25 degrees angle</caption>
 * var r = rect(20, 40, 200, 100);
 * transform(r, "rotate", 25);
 *
 * @example <caption>Measure the width of a rectangle</caption>
 * var r = rect(20, 40, random(100, 300), 100);
 * var w = transform(r, "width");
 * println(w); // prints the rectangle's random width between 100 and 300
 *
 * @example <caption>Position a rectangle's lower right corner at a certain position</caption>
 * var r = rect(20, 40, random(100, 300), random(50, 150));
 * referencePoint(BOTTOM_RIGHT);
 * transform(r, "position", [40, 40]);
 */
declare function transform(pItem: PageItem, type: string, value?: number | any[]): number | any[];

/**
 * @summary Translates (moves) an object.
 * @description Specifies an amount to displace objects within the page. The `x` parameter specifies left/right translation, the `y` parameter specifies up/down translation. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling `translate(50, 0)` and then `translate(20, 0)` is the same as `translate(70, 0)`. This function can be further controlled by the `pushMatrix()` and `popMatrix()`.
 *
 * @cat     Transform
 * @method  translate
 *
 * @param   {Number} tx The amount of offset on the X axis.
 * @param   {Number} ty The amount of offset on the Y axis.
 */
declare function translate(tx: number, ty: number): void;

/**
 * @summary Creates a text frame.
 * @description Creates a text frame on the current layer on the current page in the current document. The text frame gets created in the position specified by the `x` and `y` parameters. The default document font will be used unless a font is set with the `textFont()` function. The default document font size will be used unless a font size is set with the `textSize()` function. Change the color of the text with the `fill()` function. The text displays in relation to the `textAlign()` and `textYAlign()` functions. The `w` and `h` parameters define a rectangular area. If a rectangle, an oval, a polygon or a graphic line are used instead of an x position, the given text will be placed in/on this shape.
 *
 * @cat     Typography
 * @method  text
 *
 * @param   {String} txt The text content to set in the text frame.
 * @param   {Number|Rectangle|Oval|Polygon|GraphicLine|TextFrame} x x-coordinate of text frame or item to place the text in or graphic line to place the text onto as a text path.
 * @param   {Number} y y-coordinate of text frame
 * @param   {Number} w width of text frame
 * @param   {Number} h height of text frame
 * @return  {TextFrame|TextPath} The created text frame instance or the text path
 *
 * @example <caption>Create a text frame with a Lorem ipsum text.</caption>
 * text(LOREM, 50, 50, 100, 200);
 *
 * @example <caption>Place a Lorem ipsum text inside an oval shape.</caption>
 * var ell = ellipse(50, 50, 100, 100);
 * text(LOREM, ell);
 *
 * @example <caption>Place a Lorem ipsum text as a text path onto a line.</caption>
 * var l = line(50, 50, 200, 80);
 * text(LOREM, l);
 */
declare function text(txt: string, x: number | Rectangle | Oval | Polygon | GraphicLine | TextFrame, y: number, w: number, h: number): TextFrame | TextPath;

/**
 * @summary Sets the text alignment.
 * @description Sets the current horizontal and vertical text alignment.
 *
 * @cat     Typography
 * @subcat  Attributes
 * @method  textAlign
 *
 * @param   {String} align The horizontal text alignment to set. Must be one of the InDesign `Justification` enum values:
 * - `Justification.AWAY_FROM_BINDING_SIDE`
 * - `Justification.CENTER_ALIGN`
 * - `Justification.CENTER_JUSTIFIED`
 * - `Justification.FULLY_JUSTIFIED`
 * - `Justification.LEFT_ALIGN`
 * - `Justification.RIGHT_ALIGN`
 * - `Justification.RIGHT_JUSTIFIED`
 * - `Justification.TO_BINDING_SIDE`
 * @param   {String} [yAlign] The vertical text alignment to set. Must be one of the InDesign `VerticalJustification` enum values:
 * - `VerticalJustification.BOTTOM_ALIGN`
 * - `VerticalJustification.CENTER_ALIGN`
 * - `VerticalJustification.JUSTIFY_ALIGN`
 * - `VerticalJustification.TOP_ALIGN`
 */
declare function textAlign(align: string, yAlign?: string): void;

/**
 * @summary Sets the text font.
 * @description Returns the current font and sets it if argument `fontName` is given.
 *
 * @cat     Typography
 * @subcat  Attributes
 * @method  textFont
 *
 * @param   {String} [fontName] The name of the font to set e.g. Helvetica
 * @param   {String} [fontStyle] The font style e.g. Bold
 * @return  {Font} The current font object
 */
declare function textFont(fontName?: string, fontStyle?: string): Font;

/**
 * @summary Sets the text kerning.
 * @description Returns the current kerning and sets it if argument `kerning` is given.
 *
 * @cat     Typography
 * @subcat  Attributes
 * @method  textKerning
 *
 * @param   {Number} [kerning] The value to set.
 * @return  {Number} The current kerning.
 */
declare function textKerning(kerning?: number): number;

/**
 * @summary Sets the text leading.
 * @description Returns the spacing between lines of text in units of points and sets it if argument `leading` is given.
 *
 * @cat     Typography
 * @subcat  Attributes
 * @method  textLeading
 *
 * @param   {Number|String} [leading] The spacing between lines of text in units of points or the default InDesign enum value `Leading.AUTO`.
 * @return  {Number|String} The current leading.
 */
declare function textLeading(leading?: number | string): number | string;

/**
 * @summary Sets the text size.
 * @description Returns the current font size in points and sets it if argument `pointSize` is given.
 *
 * @cat     Typography
 * @subcat  Attributes
 * @method  textSize
 *
 * @param   {Number} [pointSize] The size in points to set.
 * @return  {Number} The current point size.
 */
declare function textSize(pointSize?: number): number;

/**
 * @summary Sets the text tracking.
 * @description Returns the current tracking and sets it if argument `tracking` is given.
 *
 * @cat     Typography
 * @subcat  Attributes
 * @method  textTracking
 *
 * @param   {Number} [tracking] The value to set.
 * @return  {Number} The current tracking.
 */
declare function textTracking(tracking?: number): number;

/**
 * @summary Sets text properties.
 * @description Sets text properties to the given item. If the item is not an instance the text property can be set to, the property gets set to the direct descendants of the given item, e.g. all stories of a given document.
 *
 * If no value is given and the given property is a string, the function acts as a getter and returns the corresponding value(s) in an array. This can either be an array containing the value of the concrete item (e.g. character) the values of the item's descendants (e.g. paragraphs of given text frame).
 *
 * @cat     Typography
 * @subcat  Attributes
 * @method  typo
 *
 * @param   {Document|Spread|Page|Layer|Story|TextFrame|TextPath|Text} item The object to apply the property to.
 * @param   {String|Object} property The text property name or an object of key/value property/value pairs. If property is a string and no value is given, the function acts as getter.
 * @param   {String|Number|Object} [value] The value to apply to the property.
 * @return  {String[]|Number[]|Object[]} The property value(s) if the function acts as getter or the items the property was assigned to.
 */
declare function typo(item: Document | Spread | Page | Layer | Story | TextFrame | TextPath | Text, property: string | any, value?: string | number | any): String[] | Number[] | object[];

/**
 * @summary Applies a character style to text.
 * @description Applies a character style to the given text object, text frame or story. The character style can be given as name or as character style instance.
 *
 * @cat     Typography
 * @subcat  Styles
 * @method  applyCharacterStyle
 *
 * @param   {TextFrame|TextObject|Story} text The text frame, text object or story to apply the style to.
 * @param   {CharacterStyle|String} style A character style instance or the name of the character style to apply.
 * @return  {Text} The text that the style was applied to.
 */
declare function applyCharacterStyle(text: TextFrame | TextObject | Story, style: CharacterStyle | string): Text;

/**
 * @summary Applies a paragraph style to text.
 * @description Applies a paragraph style to the given text object, text frame or story. The paragraph style can be given as name or as paragraph style instance.
 *
 * @cat     Typography
 * @subcat  Styles
 * @method  applyParagraphStyle
 *
 * @param   {TextFrame|TextObject|Story} text The text frame, text object or story to apply the style to.
 * @param   {ParagraphStyle|String} style A paragraph style instance or the name of the paragraph style to apply.
 * @return  {Text} The text that the style was applied to.
 */
declare function applyParagraphStyle(text: TextFrame | TextObject | Story, style: ParagraphStyle | string): Text;

/**
 * @summary Gets a text's character style or gets a character style by name.
 * @description Returns the character style of a given text object or the character style with the given name. If a character style of the given name does not exist, it gets created. Optionally a props object of property name/value pairs can be used to set the character style's properties.
 *
 * @cat     Typography
 * @subcat  Styles
 * @method  characterStyle
 *
 * @param   {Text|String} textOrName A text object whose style to return or the name of the character style to return.
 * @param   {object} [props] Optional: An object of property name/value pairs to set the style's properties.
 * @return  {CharacterStyle} The character style instance.
 */
declare function characterStyle(textOrName: Text | string, props?: any): CharacterStyle;

/**
 * @summary Gets a text's paragraph style or gets a paragraph style by name.
 * @description Returns the paragraph style of a given text object or the paragraph style with the given name. If a paragraph style of the given name does not exist, it gets created. Optionally a props object of property name/value pairs can be used to set the paragraph style's properties.
 *
 * @cat     Typography
 * @subcat  Styles
 * @method  paragraphStyle
 *
 * @param   {Text|String} textOrName A text object whose style to return or the name of the paragraph style to return.
 * @param   {object} [props] Optional: An object of property name/value pairs to set the style's properties.
 * @return  {ParagraphStyle} The paragraph style instance.
 */
declare function paragraphStyle(textOrName: Text | string, props?: any): ParagraphStyle;

