{
    "project": {
        "name": "basil.js",
        "description": "basil.js API documentation",
        "version": "see header basil.js",
        "url": "http://basiljs.ch"
    },
    "files": {
        "includes/color.js": {
            "name": "includes/color.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "includes/constants.js": {
            "name": "includes/constants.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "includes/core.js": {
            "name": "includes/core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "includes/data.js": {
            "name": "includes/data.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "includes/environment.js": {
            "name": "includes/environment.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "includes/global-functions.js": {
            "name": "includes/global-functions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "includes/image.js": {
            "name": "includes/image.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "includes/math.js": {
            "name": "includes/math.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "includes/public-vars.js": {
            "name": "includes/public-vars.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "includes/shape.js": {
            "name": "includes/shape.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "includes/structure.js": {
            "name": "includes/structure.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "includes/transformation.js": {
            "name": "includes/transformation.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "includes/typography.js": {
            "name": "includes/typography.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "basil.js": {
            "name": "basil.js",
            "modules": {},
            "classes": {
                "b": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "b": {
            "name": "b",
            "shortname": "b",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "basil.js",
            "line": 44,
            "static": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "includes/color.js",
            "line": 4,
            "description": "Sets the color used to fill shapes.",
            "cat": "Color",
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "fillColor",
                    "description": "Accepts a Color/swatch or a string with the name of a color. Or values: C,M,Y,K / R,G,B / Grey",
                    "type": "Color|Swatch|Numbers"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/color.js",
            "line": 36,
            "description": "Disables filling geometry. If both noStroke() and noFill() are called, \nnewly drawn shapes will be invisible.",
            "cat": "Color",
            "itemtype": "method",
            "name": "noFill",
            "class": "b"
        },
        {
            "file": "includes/color.js",
            "line": 47,
            "description": "Sets the color used to draw lines and borders around shapes.",
            "cat": "Color",
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "strokeColor",
                    "description": "Accepts a Color/swatch or a string with the name of a color. Or values: C,M,Y,K / R,G,B / Grey",
                    "type": "Color|Swatch|Numbers"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/color.js",
            "line": 77,
            "description": "Disables drawing the stroke (outline). If both noStroke() and noFill() \nare called, nothing will be drawn to the screen.",
            "cat": "Color",
            "itemtype": "method",
            "name": "noStroke",
            "class": "b"
        },
        {
            "file": "includes/color.js",
            "line": 88,
            "description": "Sets the tint of the color used to fill shapes.",
            "cat": "Color",
            "itemtype": "method",
            "name": "fillTint",
            "params": [
                {
                    "name": "tint",
                    "description": "Number from 0 to 100",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/color.js",
            "line": 104,
            "description": "Sets the tint of the color used to draw lines and borders around shapes.",
            "cat": "Color",
            "itemtype": "method",
            "name": "strokeTint",
            "params": [
                {
                    "name": "tint",
                    "description": "Number from 0 to 100",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/color.js",
            "line": 120,
            "description": "Sets the colormode for creating new colors with b.color() to RGB or CMYK. The default color mode is RBG.",
            "cat": "Color",
            "itemtype": "method",
            "name": "colorMode",
            "params": [
                {
                    "name": "colorMode",
                    "description": "Either b.RGB or b.CMYK",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/color.js",
            "line": 137,
            "description": "Creates a new RGB or CMYK color and adds the new color to the document, or gets a color by name from the document. The default color mode is RBG.",
            "cat": "Color",
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "Get",
                    "description": "color: the color name. Create new color: R,G,B,name or C,M,Y,K,name or Grey,name. Name is always optional",
                    "type": "String|Numbers"
                }
            ],
            "return": {
                "description": "found or new color",
                "type": "Color"
            },
            "class": "b"
        },
        {
            "file": "includes/color.js",
            "line": 266,
            "description": "Sets the opacity property of an object.",
            "cat": "Color",
            "itemtype": "method",
            "name": "opacity",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to set opacity property",
                    "type": "Object"
                },
                {
                    "name": "opacity",
                    "description": "The opacity value form 0 to 100",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/color.js",
            "line": 283,
            "description": "Sets the Effects blendMode property of an object.",
            "cat": "Color",
            "itemtype": "method",
            "name": "blendMode",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to set blendMode property",
                    "type": "Object"
                },
                {
                    "name": "blendMode",
                    "description": "The blendMode must be one of the InDesign BlendMode enum values:\n                          BlendMode.NORMAL <br />\n                          BlendMode.MULTIPLY <br />\n                          BlendMode.SCREEN <br />\n                          BlendMode.OVERLAY <br />\n                          BlendMode.SOFT_LIGHT <br />\n                          BlendMode.HARD_LIGHT <br />\n                          BlendMode.COLOR_DODGE <br />\n                          BlendMode.COLOR_BURN <br />\n                          BlendMode.DARKEN <br />\n                          BlendMode.LIGHTEN <br />\n                          BlendMode.DIFFERENCE <br />\n                          BlendMode.EXCLUSION <br />\n                          BlendMode.HUE <br />\n                          BlendMode.SATURATION <br />\n                          BlendMode.COLOR <br />\n                          BlendMode.LUMINOSITY <br />",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/color.js",
            "line": 316,
            "description": "Calculates a color or colors between two color at a specific increment. \nThe amt parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc.\nN.B.: Both color must be either CMYK or RGB.",
            "cat": "Color",
            "itemtype": "method",
            "name": "lerpColor",
            "params": [
                {
                    "name": "c1",
                    "description": "Input color 1",
                    "type": "Color"
                },
                {
                    "name": "c2",
                    "description": "Input color 2",
                    "type": "Color"
                },
                {
                    "name": "amt",
                    "description": "The Amount to interpolate between the two colors",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Interpolated color",
                "type": "Color"
            },
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 1,
            "description": "Used with b.units() to set the coordinate system to points.",
            "itemtype": "property",
            "name": "PT",
            "type": "String",
            "cat": "Document",
            "subcat": "Units",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 9,
            "description": "Used with b.units() to set the coordinate system to pixels.",
            "itemtype": "property",
            "name": "PX",
            "type": "String",
            "cat": "Document",
            "subcat": "Units",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 17,
            "description": "Used with b.units() to set the coordinate system to centimeters.",
            "itemtype": "property",
            "name": "CM",
            "type": "String",
            "cat": "Document",
            "subcat": "Units",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 26,
            "description": "Used with b.units() to set the coordinate system to millimeters.",
            "itemtype": "property",
            "name": "MM",
            "type": "String",
            "cat": "Document",
            "subcat": "Units",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 34,
            "description": "Used with b.units() to set the coordinate system to inches.",
            "itemtype": "property",
            "name": "IN",
            "type": "String",
            "cat": "Document",
            "subcat": "Units",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 42,
            "description": "Used with b.colorMode() to set the color space.",
            "itemtype": "property",
            "name": "RGB",
            "type": "String",
            "cat": "Color",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 49,
            "description": "Used with b.colorMode() to set the color space.",
            "itemtype": "property",
            "name": "CMYK",
            "type": "String",
            "cat": "Color",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 56,
            "description": "Corner, used for drawing modes.",
            "itemtype": "property",
            "name": "CORNER",
            "type": "String",
            "cat": "Document",
            "subcat": "Primitives",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 64,
            "description": "Corners, used for drawing modes.",
            "itemtype": "property",
            "name": "CORNERS",
            "type": "String",
            "cat": "Document",
            "subcat": "Primitives",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 72,
            "description": "Center, used for drawing modes.",
            "itemtype": "property",
            "name": "CENTER",
            "type": "String",
            "cat": "Document",
            "subcat": "Primitives",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 80,
            "description": "Radius, used for drawing modes.",
            "itemtype": "property",
            "name": "RADIUS",
            "type": "String",
            "cat": "Document",
            "subcat": "Primitives",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 88,
            "description": "Close, used for endShape() modes.",
            "itemtype": "property",
            "name": "CLOSE",
            "type": "String",
            "cat": "Document",
            "subcat": "Primitives",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 96,
            "description": "Open, used for arc() modes.",
            "itemtype": "property",
            "name": "OPEN",
            "type": "String",
            "cat": "Document",
            "subcat": "Primitives",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 104,
            "description": "Chord, used for arc() modes.",
            "itemtype": "property",
            "name": "CHORD",
            "type": "String",
            "cat": "Document",
            "subcat": "Primitives",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 112,
            "description": "Pie, used for arc() modes.",
            "itemtype": "property",
            "name": "PIE",
            "type": "String",
            "cat": "Document",
            "subcat": "Primitives",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 120,
            "description": "Two Pi",
            "itemtype": "property",
            "name": "TWO_PI",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 128,
            "description": "Pi",
            "itemtype": "property",
            "name": "PI",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 136,
            "description": "Half Pi",
            "itemtype": "property",
            "name": "HALF_PI",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 144,
            "description": "Quarter Pi",
            "itemtype": "property",
            "name": "QUARTER_PI",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 152,
            "description": "Sin Cos Length",
            "itemtype": "property",
            "name": "SINCOS_LENGTH",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 160,
            "description": "Epsilon",
            "itemtype": "property",
            "name": "EPSILON",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 168,
            "description": "Kappa",
            "itemtype": "property",
            "name": "KAPPA",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 177,
            "description": "Used with b.canvasMode() to set the canvas to the full current page.",
            "itemtype": "property",
            "name": "PAGE",
            "type": "String",
            "cat": "Document",
            "subcat": "Page",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 185,
            "description": "Used with b.canvasMode() to set the canvas to the full current page minus the margins.",
            "itemtype": "property",
            "name": "MARGIN",
            "type": "String",
            "cat": "Document",
            "subcat": "Page",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 193,
            "description": "Used with b.canvasMode() to set the canvas to the full current page plus the bleed.",
            "itemtype": "property",
            "name": "BLEED",
            "type": "String",
            "cat": "Document",
            "subcat": "Page",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 201,
            "description": "Used with b.canvasMode() to set the canvas to use the current facing pages.",
            "itemtype": "property",
            "name": "FACING_PAGES",
            "type": "String",
            "cat": "Document",
            "subcat": "Page",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 209,
            "description": "Used with b.canvasMode() to set the canvas to use the current facing pages plus bleeds.",
            "itemtype": "property",
            "name": "FACING_BLEEDS",
            "type": "String",
            "cat": "Document",
            "subcat": "Page",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 217,
            "description": "Used with b.canvasMode() to set the canvas to use the current facing pages minus margins.",
            "itemtype": "property",
            "name": "FACING_MARGINS",
            "type": "String",
            "cat": "Document",
            "subcat": "Page",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 225,
            "description": "Used with b.addPage() to set the position of the new page in the book.",
            "itemtype": "property",
            "name": "AT_BEGINNING",
            "type": "String",
            "cat": "Document",
            "subcat": "Page",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 233,
            "description": "Used with b.addPage() to set the position of the new page in the book.",
            "itemtype": "property",
            "name": "AT_END",
            "type": "String",
            "cat": "Document",
            "subcat": "Page",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 241,
            "description": "Used with b.addPage() to set the position of the new page in the book.",
            "itemtype": "property",
            "name": "BEFORE",
            "type": "String",
            "cat": "Document",
            "subcat": "Page",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 249,
            "description": "Used with b.addPage() to set the position of the new page in the book.",
            "itemtype": "property",
            "name": "AFTER",
            "type": "String",
            "cat": "Document",
            "subcat": "Page",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 257,
            "description": "Used with b.go() to set Performance Mode. Disables ScreenRedraw during processing.",
            "itemtype": "property",
            "name": "MODESILENT",
            "type": "String",
            "cat": "Environment",
            "subcat": "modes",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 265,
            "description": "Used with b.go() to set Performance Mode. Processes Document in background mode. Document will not be visible until the script is done. If you are firing on a open document you'll need to save it before calling b.go(). The document will be removed from the display list and added again after the script is done. In this mode you will likely look at indesign with no open document for quite some time - do not work in indesign during this time. You may want to use b.println(\"yourMessage\") in your script and look at the Console in estk to get information about the process.",
            "itemtype": "property",
            "name": "MODEHIDDEN",
            "type": "String",
            "cat": "Environment",
            "subcat": "modes",
            "class": "b"
        },
        {
            "file": "includes/constants.js",
            "line": 273,
            "description": "Default mode. Used with b.go() to set Performance Mode. Processes Document with Screen redraw, use this option to see direct results during the process. This will slow down the process in terms of processing time. This mode was also the default in Versions prior to 0.22",
            "itemtype": "property",
            "name": "MODEVISIBLE",
            "type": "String",
            "cat": "Environment",
            "subcat": "modes",
            "class": "b"
        },
        {
            "file": "includes/core.js",
            "line": 20,
            "description": "Run the sketch! Has to be called in every sketch a the very end of the code.\nYou may add performance setting options when calling b.go():<br /><br />\n\nb.go(b.MODEVISIBLE) or alternatively: b.go()<br />\nb.go(b.MODESILENT) <br />\nb.go(b.MODEHIDDEN)<br /><br />\n\nCurrently there is no performance optimization in b.loop()<br />",
            "cat": "Environment",
            "itemtype": "method",
            "name": "go",
            "params": [
                {
                    "name": "modes",
                    "description": "Optional: Switch performanceMode",
                    "type": "MODESILENT|MODEHIDDEN|MODEVISIBLE",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/core.js",
            "line": 80,
            "description": "EXPERIMENTAL!\n\nCauses basil to continuously execute the code within draw() when InDesign is idle.\n#targetengine \"loop\"; must be at the very top in the script file.\nIf noLoop() is called, the code in draw() stops executing.\nIt is essential to call noLoop() or execute the script lib/stop.jsx when the script is finished!\nThe framerate property determines how often draw() is called per second, e.g. a framerate of 20 will 20times call draw() per second.",
            "cat": "Environment",
            "itemtype": "method",
            "name": "loop",
            "params": [
                {
                    "name": "framerate",
                    "description": "The framerate per second, determines how often draw() is called per second.",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/core.js",
            "line": 113,
            "description": "EXPERIMENTAL!\n\nStops basil from continuously executing the code within draw().",
            "cat": "Environment",
            "itemtype": "method",
            "name": "noLoop",
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 5,
            "description": "Function parses and validates a string as JSON-object. Usage:\nvar obj = b.JSON.decode(str);\nvar str = b.JSON.encode(obj);",
            "cat": "Data",
            "subcat": "JSON",
            "itemtype": "method",
            "name": "JSON.decode",
            "params": [
                {
                    "name": "String",
                    "description": "to be parsed as JSON-object.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns JSON-object or throws an error if invalid JSON has been provided.",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 35,
            "description": "Function convert an javascript object to a JSON-string. Usage:\nvar str = b.JSON.encode(obj);\nvar obj = b.JSON.decode(str);",
            "cat": "Data",
            "subcat": "JSON",
            "itemtype": "method",
            "name": "JSON.encode",
            "params": [
                {
                    "name": "Object",
                    "description": "to be converted to a JSON-string",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns JSON-string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 87,
            "description": "Sets the delimiter of the CSV decode and encode function.",
            "cat": "Data",
            "subcat": "CSV",
            "itemtype": "method",
            "name": "CSV.delimiter",
            "params": [
                {
                    "name": "delimiter",
                    "description": "Optional Sets the delimiter for CSV parsing",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current delimiter if called without argument",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 105,
            "description": "Function parses a string as CSV-object Array. Usage:\nvar arr = b.CSV.decode(str);\nvar str = b.CSV.encode(arr);",
            "cat": "Data",
            "subcat": "CSV",
            "itemtype": "method",
            "name": "CSV.decode",
            "params": [
                {
                    "name": "String",
                    "description": "to be parsed as CSV-object.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns CSV-object Array",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 130,
            "description": "Function convert an javascript array of objects to a CSV-string. Usage:\nvar str = b.CSV.encode(arr);\nvar arr = b.CSV.decode(str);",
            "cat": "Data",
            "subcat": "CSV",
            "itemtype": "method",
            "name": "CSV.encode",
            "params": [
                {
                    "name": "Array",
                    "description": "to be converted to a CSV-string",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns CSV-string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 232,
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 234,
            "description": "Converts a byte, char, int, or color to a String containing the\nequivalent binary notation. For example color(0, 102, 153, 255) \nwill convert to the String \"11111111000000000110011010011001\". This \nfunction can help make your geeky debugging sessions much happier.",
            "cat": "Data",
            "subcat": "Conversion",
            "itemtype": "method",
            "name": "binary",
            "params": [
                {
                    "name": "num",
                    "description": "value to convert",
                    "type": "Number"
                },
                {
                    "name": "numBits",
                    "description": "number of digits to return",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "A formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 264,
            "description": "Converts a String representation of a binary number to its \nequivalent integer value. For example, unbinary(\"00001000\") will \nreturn 8.",
            "cat": "Data",
            "subcat": "Conversion",
            "itemtype": "method",
            "name": "unbinary",
            "params": [
                {
                    "name": "binaryString",
                    "description": "value to convert",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The integer representation",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 299,
            "description": "Convert a number to a hex representation.",
            "cat": "Data",
            "subcat": "Conversion",
            "itemtype": "method",
            "name": "hex",
            "params": [
                {
                    "name": "value",
                    "description": "The number to convert",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "The length of the hex number to be created, default: 8",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The hex representation as a string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 320,
            "description": "Convert a hex representation to a number.",
            "cat": "Data",
            "subcat": "Conversion",
            "itemtype": "method",
            "name": "unhex",
            "params": [
                {
                    "name": "hex",
                    "description": "The hex representation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The number",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 343,
            "description": "Removes multiple, leading or trailing spaces and punctuation from \"words\". E.g. converts \"word!\" to \"word\". Especially useful together with b.words();",
            "itemtype": "method",
            "name": "trimWord",
            "cat": "Data",
            "subcat": "String Functions",
            "params": [
                {
                    "name": "s",
                    "description": "The String to trim",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 361,
            "description": "Combines an array of Strings into one String, each separated by \nthe character(s) used for the separator parameter. To join arrays \nof ints or floats, it's necessary to first convert them to strings \nusing nf() or nfs().",
            "itemtype": "method",
            "name": "join",
            "cat": "Data",
            "subcat": "String Functions",
            "params": [
                {
                    "name": "array",
                    "description": "A string array",
                    "type": "Array"
                },
                {
                    "name": "separator",
                    "description": "The separator to be inserted",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The joined string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 379,
            "description": "The split() function breaks a string into pieces using a\ncharacter or string as the divider. The delim parameter specifies the\ncharacter or characters that mark the boundaries between each piece. A\nString[] array is returned that contains each of the pieces.\n\nIf the result is a set of numbers, you can convert the String[] array\nto to a float[] or int[] array using the datatype conversion functions\nint() and float() (see example above).\n\nThe splitTokens() function works in a similar fashion, except that it\nsplits using a range of characters instead of a specific character or\nsequence.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "str",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "delim",
                    "description": "The string used to separate the data",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of strings",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 405,
            "description": "The splitTokens() function splits a String at one or many character \n\"tokens.\" The tokens parameter specifies the character or characters \nto be used as a boundary.\n\nIf no tokens character is specified, any whitespace character is used \nto split. Whitespace characters include tab (\\t), line feed (\\n), \ncarriage return (\\r), form feed (\\f), and space. To convert a String \nto an array of integers or floats, use the datatype conversion functions \nint() and float() to convert the array of Strings.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "splitTokens",
            "params": [
                {
                    "name": "str",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "tokens",
                    "description": "list of individual characters that will be used as separators",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of strings",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 506,
            "description": "Utility function for formatting numbers into strings. There\nare two versions, one for formatting floats and one for formatting\nints. The values for the digits, left, and right parameters should\nalways be positive integers.\n\nAs shown in the above example, nf() is used to add zeros to the\nleft and/or right of a number. This is typically for aligning a list\nof numbers. To remove digits from a floating-point number, use the\nint(), ceil(), floor(), or round() functions.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "nf",
            "params": [
                {
                    "name": "value",
                    "description": "The Number to convert",
                    "type": "Number"
                },
                {
                    "name": "leftDigits",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rightDigits",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 530,
            "description": "Utility function for formatting numbers into strings. Similar to nf() \nbut leaves a blank space in front of positive numbers so they align \nwith negative numbers in spite of the minus symbol. There are two \nversions, one for formatting floats and one for formatting ints. The \nvalues for the digits, left, and right parameters should always be \npositive integers.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "nfs",
            "params": [
                {
                    "name": "value",
                    "description": "The Number to convert",
                    "type": "Number"
                },
                {
                    "name": "leftDigits",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rightDigits",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 551,
            "description": "Utility function for formatting numbers into strings. Similar to nf() \nbut puts a \"+\" in front of positive numbers and a \"-\" in front of \nnegative numbers. There are two versions, one for formatting floats \nand one for formatting ints. The values for the digits, left, and right \nparameters should always be positive integers.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "nfp",
            "params": [
                {
                    "name": "value",
                    "description": "The Number to convert",
                    "type": "Number"
                },
                {
                    "name": "leftDigits",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rightDigits",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 571,
            "description": "Utility function for formatting numbers into strings and placing \nappropriate commas to mark units of 1000. There are two versions, one \nfor formatting ints and one for formatting an array of ints. The value \nfor the digits parameter should always be a positive integer.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "nfc",
            "params": [
                {
                    "name": "value",
                    "description": "The Number to convert",
                    "type": "Number"
                },
                {
                    "name": "leftDigits",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rightDigits",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 591,
            "description": "Removes whitespace characters from the beginning and end of a String. \nIn addition to standard whitespace characters such as space, carriage \nreturn, and tab, this function also removes the Unicode \"nbsp\" character.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "str",
                    "description": "A string or an array of strings to be trimmed",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "Returns the input in a trimmed way",
                "type": "String|Array"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 612,
            "description": "Checks whether an URL string is valid.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "isURL",
            "params": [
                {
                    "name": "url",
                    "description": "An url string to be checked",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns either true or false",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 626,
            "description": "Checks whether a string ends with a specific character or string.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "endsWith",
            "params": [
                {
                    "name": "str",
                    "description": "A string to be checked",
                    "type": "String"
                },
                {
                    "name": "suffix",
                    "description": "The string to look for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns either true or false",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 640,
            "description": "Checks whether a string starts with a specific character or string.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "startsWith",
            "params": [
                {
                    "name": "str",
                    "description": "A string to be checked",
                    "type": "String"
                },
                {
                    "name": "prefix",
                    "description": "The string to look for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns either true or false",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 655,
            "description": "Checks whether a var is an Array, returns true if this is the case",
            "cat": "Data",
            "subcat": "Type-Check",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check",
                    "type": "Object|String|Number|Boolean"
                }
            ],
            "return": {
                "description": "returns true if this is the case",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 668,
            "description": "Checks whether a var is a number, returns true if this is the case",
            "cat": "Data",
            "subcat": "Type-Check",
            "itemtype": "method",
            "name": "isNumber",
            "params": [
                {
                    "name": "num",
                    "description": "The number to check",
                    "type": "Object|String|Number|Boolean"
                }
            ],
            "return": {
                "description": "returns true if this is the case",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 681,
            "description": "Checks whether a var is a string, returns true if this is the case",
            "cat": "Data",
            "subcat": "Type-Check",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "str",
                    "description": "The string to check",
                    "type": "Object|String|Number|Boolean"
                }
            ],
            "return": {
                "description": "returns true if this is the case",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 694,
            "description": "Checks whether a var is an indesign text object, returns true if this is the case\nNB: a indesign TextFrame will return false as it is just a container holding text. \nSo you could say that isText() refers to all the things inside a TextFrame.",
            "cat": "Document",
            "subcat": "Type-Check",
            "itemtype": "method",
            "name": "isText",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check",
                    "type": "Character|InsertionPoint|Line|Paragraph|TextColumn|TextStyleRange|Word"
                }
            ],
            "return": {
                "description": "returns true if this is the case",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 767,
            "description": "Get the folder of the active document as a Folder object. Use .absoluteURI to access a string representation of the folder path.",
            "cat": "Document",
            "subcat": "Misc",
            "itemtype": "method",
            "name": "projectFolder",
            "return": {
                "description": "The folder of the the active document",
                "type": "Folder"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 786,
            "description": "Executes a shell command and returns the result, currently Mac only.\n\nBE CAREFUL!",
            "cat": "Data",
            "subcat": "Input",
            "itemtype": "method",
            "name": "shellExecute",
            "params": [
                {
                    "name": "cmd",
                    "description": "The shell command to execute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 809,
            "description": "Reads the contents of a file or loads an URL into a String.\nIf the file is specified by name as String, it must be located in the document's data directory.",
            "cat": "Data",
            "subcat": "Input",
            "itemtype": "method",
            "name": "loadString",
            "params": [
                {
                    "name": "fileOrString",
                    "description": "The text file name in the document's data directory or a File instance or an URL",
                    "type": "String|File"
                }
            ],
            "return": {
                "description": "String file or URL content.",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 844,
            "description": "Reads the contents of a file or loads an URL and creates a String array of its individual lines.\nIf the file is specified by name as String, it must be located in the document's data directory.",
            "cat": "Data",
            "subcat": "Input",
            "itemtype": "method",
            "name": "loadStrings",
            "params": [
                {
                    "name": "file",
                    "description": "The text file name in the document's data directory or a File instance or an URL",
                    "type": "String|File"
                }
            ],
            "return": {
                "description": "Array of the individual lines in the given File or URL",
                "type": "String[]"
            },
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 874,
            "description": "Prints a message line to the console output in the ExtendScript editor.",
            "cat": "Output",
            "itemtype": "method",
            "name": "println",
            "params": [
                {
                    "name": "msg",
                    "description": "The message to print",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 887,
            "description": "Prints a message to the console output in the ExtendScript editor, but unlike b.println() it doesn't return the carriage to a new line at the end.",
            "cat": "Output",
            "itemtype": "method",
            "name": "print",
            "params": [
                {
                    "name": "msg",
                    "description": "The message to print",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 900,
            "description": "Print numerous information about the current environment to the console",
            "cat": "Output",
            "itemtype": "method",
            "name": "printInfo",
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 918,
            "description": "Writes an array of strings to a file, one line per string.\nIf the given file exists it gets overridden.",
            "cat": "Output",
            "itemtype": "method",
            "name": "saveStrings",
            "params": [
                {
                    "name": "file",
                    "description": "The file name or a File instance",
                    "type": "String|File"
                },
                {
                    "name": "strings",
                    "description": "The string array to be written",
                    "type": "String[]"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 936,
            "description": "Writes a string to a file.\nIf the given file exists it gets overridden.",
            "cat": "Output",
            "itemtype": "method",
            "name": "saveString",
            "params": [
                {
                    "name": "file",
                    "description": "The file name or a File instance",
                    "type": "String|File"
                },
                {
                    "name": "string",
                    "description": "The string to be written",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 953,
            "description": "Exports the current document as PDF to the documents folder. Please note, that export options default to the last used export settings.",
            "cat": "Output",
            "itemtype": "method",
            "name": "savePDF",
            "params": [
                {
                    "name": "file",
                    "description": "The file name or a File instance",
                    "type": "String|File"
                },
                {
                    "name": "showOptions",
                    "description": "Whether to show the export dialog",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 967,
            "description": "Exports the current document as PNG (or sequence of PNG files) to the documents folder. Please note, that export options default to the last used export settings.",
            "cat": "Output",
            "itemtype": "method",
            "name": "savePNG",
            "params": [
                {
                    "name": "file",
                    "description": "The file name or a File instance",
                    "type": "String|File"
                },
                {
                    "name": "showOptions",
                    "description": "Whether to show the export dialog",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/data.js",
            "line": 981,
            "description": "Downloads an URL to a file, currently Mac only.",
            "cat": "Output",
            "itemtype": "method",
            "name": "download",
            "params": [
                {
                    "name": "url",
                    "description": "The download url",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "A relative file path in the project folder or a File instance",
                    "type": "String|File",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 4,
            "description": "Sets or possibly creates the current document and returns it.\nIf the param doc is not given the current document gets set to the active document\nin the application. If no document at all is open, a new document gets created.",
            "cat": "Document",
            "itemtype": "method",
            "name": "doc",
            "params": [
                {
                    "name": "doc",
                    "description": "The document to set the current document to",
                    "type": "Document",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current document instance",
                "type": "Document"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 21,
            "description": "Closes the current document.",
            "cat": "Document",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "saveOptions",
                    "description": "The indesign SaveOptions constant or either true for triggering saving before closing or false for closing without saving.",
                    "type": "SaveOptions|Boolean",
                    "optional": true
                },
                {
                    "name": "file",
                    "description": "Optional: The indesign file instance to save the document to",
                    "type": "File",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 39,
            "description": "Use this to set the dimensions of the canvas. Choose between b.PAGE (default), b.MARGIN, b.BLEED resp. b.FACING_PAGES, b.FACING_MARGINS and b.FACING_BLEEDS for book setups with facing page. Please note: Setups with more than two facing pages are not yet supported.\nPlease note that you will loose your current MatrixTransformation. You should set the canvasMode before you attempt to use b.translate(), b.rotate() and b.scale();",
            "itemtype": "method",
            "name": "canvasMode",
            "cat": "Document",
            "subcat": "Page",
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 62,
            "description": "Returns the current horizontal and vertical pasteboard margins and sets them if both arguements are given.",
            "cat": "Document",
            "subcat": "Page",
            "itemtype": "method",
            "name": "pasteboard",
            "params": [
                {
                    "name": "The",
                    "description": "desired horizontal pasteboard margin.",
                    "type": "Number"
                },
                {
                    "name": "The",
                    "description": "desired vertical pasteboard margin.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The current horizontal, vertical pasteboard margins.",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 85,
            "description": "Returns the current page and sets it if argument page is given. Numbering starts with 1.",
            "cat": "Document",
            "subcat": "Page",
            "itemtype": "method",
            "name": "page",
            "params": [
                {
                    "name": "page",
                    "description": "The page object or page number to set the current page to. If you pass a PageItem the current page will be set to it's containing page.",
                    "type": "Page|Number|PageItem",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current page instance",
                "type": "Page"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 121,
            "description": "Adds a new page to the document. Set the optional location parameter to either b.AT_END (default), b.AT_BEGINNING, b.AFTER or b.BEFORE. b.AFTER and b.BEFORE will use the current page as insertion point.",
            "cat": "Document",
            "subcat": "Page",
            "itemtype": "method",
            "name": "addPage",
            "params": [
                {
                    "name": "location",
                    "description": "The location placement mode",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The new page",
                "type": "Page"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 172,
            "description": "Removes a page from the current document. This will either be the current Page if the parameter page is left empty, or the given Page object or page number.",
            "cat": "Document",
            "subcat": "Page",
            "itemtype": "method",
            "name": "removePage",
            "params": [
                {
                    "name": "page",
                    "description": "Optional: The page to be removed as Page object or page number.",
                    "type": "Page|Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 195,
            "description": "Returns the current page number of either the current page or the given Page object.",
            "cat": "Document",
            "subcat": "Page",
            "itemtype": "method",
            "name": "pageNumber",
            "params": [
                {
                    "name": "pageObj",
                    "description": "Optional: The page you want to know the number of.",
                    "type": "Page",
                    "optional": true
                }
            ],
            "return": {
                "description": "The page number within the document.",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 230,
            "description": "The number of all pages in the current document.",
            "cat": "Document",
            "subcat": "Page",
            "itemtype": "method",
            "name": "pageCount",
            "return": {
                "description": "The amount of pages."
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 242,
            "description": "The number of all stories in the current document.",
            "cat": "Story",
            "itemtype": "method",
            "name": "storyCount",
            "return": {
                "description": "count The amount of stories.",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 253,
            "description": "Adds a page item or a string to an existing story. You can control the position of the insert via the last parameter. It accepts either an InsertionPoint or one the following constants: b.AT_BEGINNING and b.AT_END.",
            "cat": "Story",
            "itemtype": "method",
            "name": "addToStory",
            "params": [
                {
                    "name": "story",
                    "description": "The story",
                    "type": "Story"
                },
                {
                    "name": "itemOrString",
                    "description": "The itemOrString either a PageItem, a String or one the following constants: b.AT_BEGINNING and b.AT_END.",
                    "type": "PageItem|String"
                },
                {
                    "name": "insertionPointOrMode",
                    "description": "InsertionPoint or one the following constants: b.AT_BEGINNING and b.AT_END.",
                    "type": "InsertionPoint|String"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 316,
            "description": "Returns the current layer and sets it if argument layer is given.",
            "cat": "Document",
            "subcat": "Page",
            "itemtype": "method",
            "name": "layer",
            "params": [
                {
                    "name": "layer",
                    "description": "The layer or layer name to set the current layer to",
                    "type": "Layer|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current layer instance",
                "type": "Layer"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 339,
            "description": "Returns the Group instance and sets it if argument Group is given.",
            "cat": "Document",
            "subcat": "Page",
            "itemtype": "method",
            "name": "Group",
            "params": [
                {
                    "name": "pItem",
                    "description": "The PageItems array (must be at least 2) or name of Group name instance",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "name",
                    "description": "(optional) The name of the Group, only when creating a Group from Page Item(s)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the current Group instance",
                "type": "Group"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 369,
            "description": "Returns an array of the items that were within the Group before b.ungroup() was called",
            "cat": "Document",
            "subcat": "Page",
            "itemtype": "method",
            "name": "Group",
            "params": [
                {
                    "name": "pItem",
                    "description": "The Group or name of Group name instance",
                    "type": "Object|String",
                    "optional": true
                },
                {
                    "name": "name",
                    "description": "The name of the Group, only when creating a Group from Page Item(s)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the Page Item(s) that were grouped",
                "type": "Group"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 399,
            "description": "Returns items tagged with the given label in the InDesign Script Label pane (Window -> Utilities -> Script Label).",
            "cat": "Document",
            "subcat": "Multi-Getters",
            "itemtype": "method",
            "name": "labels",
            "params": [
                {
                    "name": "label",
                    "description": "The label identifier",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Optional: The callback function to call with each item in the search result. When this function returns false the loop stops. Passed arguments: item, loopCount",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of concrete PageItem instances, e.g. TextFrame or SplineItem.",
                "type": "PageItem[]"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 427,
            "description": "Returns the first item that is tagged with the given label in the InDesign Script Label pane (Window -> Utilities -> Script Label). Use this instead of b.labels, when you know you just have one thing with that label and don't want to deal with a single-element array.",
            "cat": "Document",
            "subcat": "Multi-Getters",
            "itemtype": "method",
            "name": "label",
            "params": [
                {
                    "name": "label",
                    "description": "The label identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The first PageItem of all the hits",
                "type": "PageItem"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 448,
            "description": "Returns the first currently selected object. Use this if you know you only have one selected item and don't want to deal with an array.",
            "cat": "Document",
            "subcat": "Multi-Getters",
            "itemtype": "method",
            "name": "selection",
            "return": {
                "description": "The first selected object",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 461,
            "description": "Returns the currently selected object(s)",
            "cat": "Document",
            "subcat": "Multi-Getters",
            "itemtype": "method",
            "name": "selections",
            "params": [
                {
                    "name": "cb",
                    "description": "Optional: The callback function to call with each item in the selection. When this function returns false the loop stops. Passed arguments: item, loopCount",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of selected object(s).",
                "type": "Object[]"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 478,
            "description": "Returns the first item on the active page that is named by the given name in the Layers pane (Window -> Layer).",
            "cat": "Document",
            "subcat": "Multi-Getters",
            "itemtype": "method",
            "name": "nameOnPage",
            "return": {
                "description": "The first object on the active page with the given name",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 501,
            "description": "Sets the units of the document (like right clicking the rulers). The default unit setting of basil.js is MM.",
            "cat": "Document",
            "itemtype": "method",
            "name": "units",
            "params": [
                {
                    "name": "units",
                    "description": "Supported units: PT, PX, CM, MM or IN",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current unit setting",
                "type": "Constant"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 550,
            "description": "Creates a vertical guide line at the current spread and current layer.",
            "cat": "Document",
            "itemtype": "method",
            "name": "guideX",
            "params": [
                {
                    "name": "x",
                    "description": "Position of the new guide",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New guide",
                "type": "Guide"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 570,
            "description": "Creates a horizontal guide line at the current spread and current layer.",
            "cat": "Document",
            "itemtype": "method",
            "name": "guideY",
            "params": [
                {
                    "name": "y",
                    "description": "Position of the new guide",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New guide",
                "type": "Guide"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 590,
            "description": "Sets the margins of a given page. If 1 value is given, all 4 sides are set equally. If 4 values are given, the current page will be adjusted. Adding a 5th value will set the margin of a given page. Calling the function without any values, will return the margins for the current page.",
            "cat": "Document",
            "subcat": "Page",
            "itemtype": "method",
            "name": "margins",
            "params": [
                {
                    "name": "top",
                    "description": "Top margin or all if only one",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "Right margin",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "bottom",
                    "description": "Bottom margin",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "left",
                    "description": "Left margin",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "pageNumber",
                    "description": "Sets margins to selected page, currentPage() if left blank",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current page margins with these properties: top, right, bottom, left",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 631,
            "description": "Sets the document bleeds. If one value is given, all 4 are set equally. If 4 values are given, the top/right/bottom/left document bleeds will be adjusted. Calling the function without any values, will return the document bleed settings.",
            "cat": "Document",
            "subcat": "Page",
            "itemtype": "method",
            "name": "bleeds",
            "params": [
                {
                    "name": "top",
                    "description": "Top bleed or all if only one",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "Right bleed",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "bottom",
                    "description": "Bottom bleed",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "left",
                    "description": "Left bleed",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 664,
            "description": "Prints out all properties and values off an object in a recursive manner to the console. Useful for inspecting (or debugging) nested variable. the default value for the recursion is maxlevel = 2.",
            "cat": "Output",
            "itemtype": "method",
            "name": "inspect",
            "params": [
                {
                    "name": "obj",
                    "description": ": the Object to inspect",
                    "type": "Object"
                },
                {
                    "name": "maxlevel",
                    "description": "Optional: recursion limit, default maxlevel = 2",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 724,
            "description": "The year() function returns the current year as an integer (2012, 2013 etc).",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "year",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 736,
            "description": "The month() function returns the current month as a value from 1 - 12.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "month",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 748,
            "description": "The day() function returns the current day as a value from 1 - 31.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "day",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 760,
            "description": "The weekday() function returns the current weekday as a string from Sunday, Monday, Tuesday...",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "weekday",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 773,
            "description": "The hour() function returns the current hour as a value from 0 - 23.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "hour",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 785,
            "description": "The minute() function returns the current minute as a value from 0 - 59.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "minute",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 797,
            "description": "The second() function returns the current second as a value from 0 - 59.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "second",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 809,
            "description": "Returns the number of milliseconds (thousandths of a second) since starting an applet.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "millis",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 821,
            "description": "The millisecond() function differs from millis(), in that it returns the exact millisecond (thousandths of a second) of the current time.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "millisecond",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/environment.js",
            "line": 833,
            "description": "The timestamp() function returns the current date formatted as YYYYMMDD_HHMMSS for useful unique filenaming.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "timestamp",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/global-functions.js",
            "line": 56,
            "description": "Used to run a function on all elements of an array. Please note the existance of the convenience methods b.stories(), b.paragraphs(), b.lines(), b.words() and b.characters() that are used to iterate through all instances of the given type in the given document.",
            "cat": "Data",
            "subcat": "Array Functions",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "collection",
                    "description": "The array to be processed.",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "The function that will be called on each element. The call will be like function(item,i) where i is the current index of the item within the array.",
                    "type": "Function"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/global-functions.js",
            "line": 83,
            "description": "HashList is a data container that allows you to store information as key -> value pairs. As usual in JavaScript mixed types of keys and values are accepted in one HashList instance.",
            "is_constructor": 1,
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList",
            "class": "b"
        },
        {
            "file": "includes/global-functions.js",
            "line": 109,
            "description": "This removes a key -> value pair by its key.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.remove",
            "params": [
                {
                    "name": "key",
                    "description": "The key to delete",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The value before deletion",
                "type": "Any"
            },
            "class": "b"
        },
        {
            "file": "includes/global-functions.js",
            "line": 129,
            "description": "This gets a value by its key.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.get",
            "params": [
                {
                    "name": "key",
                    "description": "The key to look for",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The value",
                "type": "Any"
            },
            "class": "b"
        },
        {
            "file": "includes/global-functions.js",
            "line": 142,
            "description": "This sets a key -> value pair. If a key is already existing, the value will be updated. Please note that Functions are currently not supported as values.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.set",
            "params": [
                {
                    "name": "key",
                    "description": "The key to use",
                    "type": "Any"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The value after setting",
                "type": "Any"
            },
            "class": "b"
        },
        {
            "file": "includes/global-functions.js",
            "line": 165,
            "description": "Checks for the existence of a given key.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.hasKey",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "includes/global-functions.js",
            "line": 179,
            "description": "Checks if a certain value exists at least once in all of the key -> value pairs.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.hasValue",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "includes/global-functions.js",
            "line": 200,
            "description": "Returns an array of all keys that are sorted by their values from highest to lowest. Please note that this only works if you have conistently used Numbers for values.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.getKeysByValues",
            "return": {
                "description": "An array with all the keys",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "includes/global-functions.js",
            "line": 219,
            "description": "Returns an array with all keys in a sorted order from higher to lower magnitude.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.getSortedKeys",
            "return": {
                "description": "An array with all the keys",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "includes/global-functions.js",
            "line": 231,
            "description": "Returns an array with all keys.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.getKeys",
            "return": {
                "description": "An array with all the keys",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "includes/global-functions.js",
            "line": 252,
            "description": "Returns an array with all keys.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.getKeys",
            "return": {
                "description": "An array with all the keys",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "includes/global-functions.js",
            "line": 272,
            "description": "Deletes all the key -> value pairs in this HashList.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.clear",
            "class": "b"
        },
        {
            "file": "includes/image.js",
            "line": 4,
            "description": "Adds an image to the document. If the image argument is given as a string the image file  must be in the document's\ndata directory which is in the same directory where the document is saved in. The image argument can also be a File\ninstance which can be placed even before the document was saved.\nThe second argument can either be the x position of the frame to create or an instance of a rectangle,\noval or polygon to place the image in.\nIf x and y positions are given and width and height are not given, the frame's size gets set to the original image size.",
            "cat": "Document",
            "subcat": "Image",
            "itemtype": "method",
            "name": "image",
            "params": [
                {
                    "name": "img",
                    "description": "The image file name in the document's data directory or a File instance",
                    "type": "String|File"
                },
                {
                    "name": "x",
                    "description": "The x position on the current page or the item instance to place the image in",
                    "type": "Number|Rectangle|Oval|Polygon"
                },
                {
                    "name": "y",
                    "description": "The y position on the current page. Ignored if x is not a number.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "The width of the rectangle to add the image to. Ignored if x is not a number.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "The height of the rectangle to add the image to. Ignored if x is not a number.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The item instance the image was placed in.",
                "type": "Rectangle|Oval|Polygon"
            },
            "class": "b"
        },
        {
            "file": "includes/image.js",
            "line": 83,
            "description": "Transforms position and size of an image.\nThe image fit options are always \"contentToFrame\".",
            "cat": "Document",
            "subcat": "Image",
            "itemtype": "method",
            "name": "transformImage",
            "params": [
                {
                    "name": "img",
                    "description": "The image to transform",
                    "type": "Graphic"
                },
                {
                    "name": "x",
                    "description": "New x",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "New y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "New width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "New height",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/image.js",
            "line": 110,
            "description": "Modifies the location from which images draw. The default mode is imageMode(CORNER), which specifies the location to be the upper left corner and uses the fourth and fifth parameters of image() to set the image's width and height. The syntax imageMode(CORNERS) uses the second and third parameters of image() to set the location of one corner of the image and uses the fourth and fifth parameters to set the opposite corner. Use imageMode(CENTER) to draw images centered at the given x and y position.\nIf no parameter is passed the currently set mode is returned as String.",
            "cat": "Document",
            "subcat": "Image",
            "itemtype": "method",
            "name": "imageMode",
            "params": [
                {
                    "name": "mode",
                    "description": "Either b.CORNER, b.CORNERS, or b.CENTER",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current mode",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 7,
            "description": "A class to describe a two or three dimensional vector. This datatype stores two or three variables that are commonly used as a position, velocity, and/or acceleration. Technically, position is a point and velocity and acceleration are vectors, but this is often simplified to consider all three as vectors. For example, if you consider a rectangle moving across the screen, at any given instant it has a position (the object's location, expressed as a point.), a velocity (the rate at which the object's position changes per time unit, expressed as a vector), and acceleration (the rate at which the object's velocity changes per time unit, expressed as a vector). Since vectors represent groupings of values, we cannot simply use traditional addition/multiplication/etc. Instead, we'll need to do some \"vector\" math, which is made easy by the methods inside the Vector class.\n\nConstructor of Vector, can be two- or three-dimensional.",
            "is_constructor": 1,
            "cat": "Data",
            "subcat": "Vector",
            "itemtype": "method",
            "name": "Vector",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 25,
            "description": "Static function. Calculates the Euclidean distance between two points (considering a point as a vector object).\nIs meant to be called \"static\" i.e. Vector.dist(v1, v2);",
            "cat": "Data",
            "subcat": "Vector",
            "itemtype": "method",
            "name": "Vector.dist",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 40,
            "description": "Static function. Calculates the dot product of two vectors.\nIs meant to be called \"static\" i.e. Vector.dot(v1, v2);",
            "itemtype": "method",
            "name": "Vector.dot",
            "cat": "Data",
            "subcat": "Vector",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The dot product",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 55,
            "description": "Static function. Calculates the cross product of two vectors.\nIs meant to be called \"static\" i.e. Vector.cross(v1, v2);",
            "itemtype": "method",
            "name": "Vector.cross",
            "cat": "Data",
            "subcat": "Vector",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The cross product",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 70,
            "description": "Static function. Calculates the angle between two vectors.\nIs meant to be called \"static\" i.e. Vector.angleBetween(v1, v2);",
            "itemtype": "method",
            "name": "Vector.angleBetween",
            "cat": "Data",
            "subcat": "Vector",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The angle",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 87,
            "description": "Sets the x, y, and z component of the vector using three separate variables, the data from a Vector, or the values from a float array.",
            "itemtype": "method",
            "name": "Vector.set",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a vector, array or x component",
                    "type": "Number|Array|Vector"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 104,
            "description": "Gets a copy of the vector, returns a Vector object.",
            "itemtype": "method",
            "name": "Vector.get",
            "cat": "Data",
            "subcat": "Vector",
            "return": {
                "description": "A copy of the vector",
                "type": "Vector"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 114,
            "description": "Calculates the magnitude (length) of the vector and returns the result as a float",
            "itemtype": "method",
            "name": "Vector.mag",
            "cat": "Data",
            "subcat": "Vector",
            "return": {
                "description": "The length",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 127,
            "description": "Adds x, y, and z components to a vector, adds one vector to another.",
            "itemtype": "method",
            "name": "Vector.add",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 147,
            "description": "Substract x, y, and z components or a full vector from this vector",
            "itemtype": "method",
            "name": "Vector.sub",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 167,
            "description": "Multiplies this vector with x, y, and z components or another vector.",
            "itemtype": "method",
            "name": "Vector.mult",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 187,
            "description": "Divides this vector through x, y, and z components or another vector.",
            "itemtype": "method",
            "name": "Vector.div",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 207,
            "description": "Calculates the distance from this vector to another as x, y, and z components or full vector.",
            "itemtype": "method",
            "name": "Vector.dist",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 223,
            "description": "Calculates the dot product from this vector to another as x, y, and z components or full vector.",
            "itemtype": "method",
            "name": "Vector.dot",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The dot product",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 237,
            "description": "Calculates the cross product from this vector to another as x, y, and z components or full vector.",
            "itemtype": "method",
            "name": "Vector.cross",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The cross product",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 253,
            "description": "Normalizes the length of this vector to 1.",
            "cat": "Data",
            "subcat": "Vector",
            "itemtype": "method",
            "name": "Vector.normalize",
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 263,
            "description": "Normalizes the length of this vector to the given parameter.",
            "itemtype": "method",
            "name": "Vector.limit",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "high",
                    "description": "The value to scale to.",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 276,
            "description": "The 2D orientation (heading) of this vector in radian.",
            "itemtype": "method",
            "name": "Vector.heading",
            "cat": "Data",
            "subcat": "Vector",
            "return": {
                "description": "A radian angle value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 286,
            "description": "Returns data about this vector as a string.",
            "itemtype": "method",
            "name": "Vector.toString",
            "cat": "Data",
            "subcat": "Vector",
            "return": {
                "description": "The x, y and z components as a string.",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 296,
            "description": "Returns this vector as an array [x,y,z].",
            "itemtype": "method",
            "name": "Vector.array",
            "cat": "Data",
            "subcat": "Vector",
            "return": {
                "description": "[x,y,z]",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 322,
            "description": "Calculates the absolute value (magnitude) of a number. The absolute value of a number is always positive.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "abs",
            "params": [
                {
                    "name": "val",
                    "description": "An arbitrary number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The absolute value of that number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 333,
            "description": "Calculates the closest int value that is greater than or equal to the value of the parameter. For example, ceil(9.03) returns the value 10.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "ceil",
            "params": [
                {
                    "name": "val",
                    "description": "An arbitrary number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The next highest integer value"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 344,
            "description": "Constrains a value to not exceed a maximum and minimum value.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "constrain",
            "params": [
                {
                    "name": "aNumber",
                    "description": "the value to constrain",
                    "type": "Number"
                },
                {
                    "name": "aMin",
                    "description": "minimum limit",
                    "type": "Number"
                },
                {
                    "name": "aMax",
                    "description": "maximum limit",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The constrained value"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 362,
            "description": "Calculates the distance between two points.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "dist",
            "params": [
                {
                    "name": "x1",
                    "description": "the x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "the y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "the x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "the y-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 385,
            "description": "Returns Euler's number e (2.71828...) raised to the power of the value parameter.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "exp",
            "params": [
                {
                    "name": "a",
                    "description": "value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 396,
            "description": "Calculates the closest int value that is less than or equal to the value of the parameter.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "floor",
            "params": [
                {
                    "name": "a",
                    "description": "value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 407,
            "description": "Calculates a number between two numbers at a specific increment. The amt parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "value1",
                    "description": "first value",
                    "type": "Number"
                },
                {
                    "name": "value2",
                    "description": "second value",
                    "type": "Number"
                },
                {
                    "name": "amt",
                    "description": "between 0.0 and 1.0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The mapped value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 423,
            "description": "Calculates the natural logarithm (the base-e logarithm) of a number. This function expects the values greater than 0.0.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "number",
                    "description": "must be greater then 0.0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 434,
            "description": "Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no \"start\" position, the magnitude of a vector can be thought of as the distance from coordinate (0,0) to its (x,y) value. Therefore, mag() is a shortcut for writing \"dist(0, 0, x, y)\".",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "mag",
            "params": [
                {
                    "name": "a",
                    "description": "x-coordinate",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "y-coordinate",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "z-coordinate",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the magnitude",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 451,
            "description": "Re-maps a number from one range to another. In the example above, the number '25' is converted from a value in the range 0..100 into a value that ranges from the left edge (0) to the right edge (width) of the screen.\n\nNumbers outside the range are not clamped to 0 and 1, because out-of-range values are often intentional and useful.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "value",
                    "description": "the value to be mapped",
                    "type": "Number"
                },
                {
                    "name": "istart",
                    "description": "start of the input range",
                    "type": "Number"
                },
                {
                    "name": "istop",
                    "description": "end of the input range",
                    "type": "Number"
                },
                {
                    "name": "ostart",
                    "description": "start of the output range",
                    "type": "Number"
                },
                {
                    "name": "ostop",
                    "description": "end of the output range",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the mapped value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 471,
            "description": "Determines the largest value in a sequence of numbers.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "param1",
                    "description": "Either the first value or an array of Numbers",
                    "type": "Number|Array"
                },
                {
                    "name": "param2",
                    "description": "Another value to be compared",
                    "type": "Number"
                },
                {
                    "name": "param3",
                    "description": "Another value to be compared",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The highest value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 492,
            "description": "Determines the smallest value in a sequence of numbers.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "param1",
                    "description": "Either the first value or an array of Numbers",
                    "type": "Number|Array"
                },
                {
                    "name": "param2",
                    "description": "Another value to be compared",
                    "type": "Number"
                },
                {
                    "name": "param3",
                    "description": "Another value to be compared",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The lowest value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 513,
            "description": "Normalizes a number from another range into a value between 0 and 1. \n\nIdentical to map(value, low, high, 0, 1); \n\nNumbers outside the range are not clamped to 0 and 1, because out-of-range values are often intentional and useful.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "norm",
            "params": [
                {
                    "name": "aNumber",
                    "description": "The value to be normed",
                    "type": "Number"
                },
                {
                    "name": "low",
                    "description": "The lowest value to be expected",
                    "type": "Number"
                },
                {
                    "name": "low",
                    "description": "The highest value to be expected",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The normalized value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 533,
            "description": "Facilitates exponential expressions. The pow() function is an efficient way of multiplying numbers by themselves (or their reciprocal) in large quantities. For example, pow(3, 5) is equivalent to the expression 3*3*3*3*3 and pow(3, -5) is equivalent to 1 / 3*3*3*3*3",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "pow",
            "params": [
                {
                    "name": "num",
                    "description": "base of the exponential expression",
                    "type": "Number"
                },
                {
                    "name": "exponent",
                    "description": "power of which to raise the base",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the result",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 545,
            "description": "Calculates the integer closest to the value parameter. For example, round(9.2) returns the value 9.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "round",
            "params": [
                {
                    "name": "value",
                    "description": "The value to be rounded",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The rounded value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 556,
            "description": "Squares a number (multiplies a number by itself). The result is always a positive number, as multiplying two negative numbers always yields a positive result. For example, -1 * -1 = 1.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "sq",
            "params": [
                {
                    "name": "aNumber",
                    "description": "The value to be squared",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 572,
            "description": "Calculates the square root of a number. The square root of a number is always positive, even though there may be a valid negative root. The square root s of number a is such that s*s = a. It is the opposite of squaring.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "sqrt",
            "params": [
                {
                    "name": "val",
                    "description": "The value to be calculated",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 583,
            "description": "The inverse of cos(), returns the arc cosine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range 0 to PI (3.1415927).",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "acos",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc cosine is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 594,
            "description": "The inverse of sin(), returns the arc sine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range 0 to PI (3.1415927).",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "asin",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc sine is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 605,
            "description": "The inverse of tan(), returns the arc tangent of a value. This function expects the values in the range of -1 to 1 and values are returned in the range 0 to PI (3.1415927).",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "atan",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc tangent is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 616,
            "description": "Calculates the angle (in radians) from a specified point to the coordinate origin as measured from the positive x-axis. Values are returned as a float in the range from PI to -PI. The atan2() function is most often used for orienting geometry to the position of the cursor. Note: The y-coordinate of the point is the first parameter and the x-coordinate is the second due the the structure of calculating the tangent.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "atan2",
            "params": [
                {
                    "name": "y",
                    "description": "the y coordinate",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "the x coordinate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 628,
            "description": "Calculates the cosine of an angle. This function expects the values of the angle parameter to be provided in radians (values from 0 to PI*2). Values are returned in the range -1 to 1.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "cos",
            "params": [
                {
                    "name": "rad",
                    "description": "a value in radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 639,
            "description": "Converts a radian measurement to its corresponding value in degrees. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 = 1.5707964. All trigonometric methods in Processing require their parameters to be specified in radians.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "degrees",
            "params": [
                {
                    "name": "aAngle",
                    "description": "an angle in radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The given angle in degree",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 652,
            "description": "Converts a degree measurement to its corresponding value in radians. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 = 1.5707964. All trigonometric methods in Processing require their parameters to be specified in radians.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "radians",
            "params": [
                {
                    "name": "aAngle",
                    "description": "an angle in degree",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The given angle in radians",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 665,
            "description": "Calculates the sine of an angle. This function expects the values of the angle parameter to be provided in radians (values from 0 to 6.28). Values are returned in the range -1 to 1.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "sin",
            "params": [
                {
                    "name": "rad",
                    "description": "a value in radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 676,
            "description": "Calculates the ratio of the sine and cosine of an angle. This function expects the values of the angle parameter to be provided in radians (values from 0 to PI*2). Values are returned in the range infinity to -infinity.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "tan",
            "params": [
                {
                    "name": "rad",
                    "description": "a value in radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 691,
            "description": "Generates random numbers. Each time the random() function is called, it returns an unexpected value within the specified range. If one parameter is passed to the function it will return a float between zero and the value of the high parameter. The function call random(5) returns values between 0 and 5. If two parameters are passed, it will return a float with a value between the the parameters. The function call random(-5, 10.2) returns values between -5 and 10.2.\n\nOne parameter sets the range from 0 to the given parameter, while with two parameters present you set the range from val1 - val2.",
            "cat": "Math",
            "subcat": "Random",
            "itemtype": "method",
            "name": "random",
            "params": [
                {
                    "name": "low",
                    "description": "The low border of the range",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "high",
                    "description": "The high border of the range",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "A random number",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 833,
            "description": "Returns the Perlin noise value at specified coordinates. Perlin noise is a random sequence generator producing a more natural ordered, harmonic succession of numbers compared to the standard random() function. It was invented by Ken Perlin in the 1980s and been used since in graphical applications to produce procedural textures, natural motion, shapes, terrains etc.\n\nThe main difference to the random() function is that Perlin noise is defined in an infinite n-dimensional space where each pair of coordinates corresponds to a fixed semi-random value (fixed only for the lifespan of the program). The resulting value will always be between 0.0 and 1.0. basil.js can compute 1D, 2D and 3D noise, depending on the number of coordinates given. The noise value can be animated by moving through the noise space. The 2nd and 3rd dimension can also be interpreted as time.\n\nThe actual noise is structured similar to an audio signal, in respect to the function's use of frequencies. Similar to the concept of harmonics in physics, perlin noise is computed over several octaves which are added together for the final result. \n\nAnother way to adjust the character of the resulting sequence is the scale of the input coordinates. As the function works within an infinite space the value of the coordinates doesn't matter as such, only the distance between successive coordinates does (eg. when using noise() within a loop). As a general rule the smaller the difference between coordinates, the smoother the resulting noise sequence will be. Steps of 0.005-0.03 work best for most applications, but this will differ depending on use.",
            "cat": "Math",
            "subcat": "Random",
            "itemtype": "method",
            "name": "noise",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate in x space",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate in y space",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "Coordinate in z space",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the noise value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 874,
            "description": "Adjusts the character and level of detail produced by the Perlin noise function. Similar to harmonics in physics, noise is computed over several octaves. Lower octaves contribute more to the output signal and as such define the overal intensity of the noise, whereas higher octaves create finer grained details in the noise sequence. By default, noise is computed over 4 octaves with each octave contributing exactly half than its predecessor, starting at 50% strength for the 1st octave. This falloff amount can be changed by adding an additional function parameter. Eg. a falloff factor of 0.75 means each octave will now have 75% impact (25% less) of the previous lower octave. Any value between 0.0 and 1.0 is valid, however note that values greater than 0.5 might result in greater than 1.0 values returned by noise().\n\nBy changing these parameters, the signal created by the noise() function can be adapted to fit very specific needs and characteristics.",
            "cat": "Math",
            "subcat": "Random",
            "itemtype": "method",
            "name": "noiseDetail",
            "params": [
                {
                    "name": "octaves",
                    "description": "number of octaves to be used by the noise() function",
                    "type": "Number"
                },
                {
                    "name": "fallout",
                    "description": "falloff factor for each octave",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 890,
            "description": "Sets the seed value for noise(). By default, noise() produces different results each time the program is run. Set the value parameter to a constant to return the same pseudo-random numbers each time the software is run.",
            "cat": "Math",
            "subcat": "Random",
            "itemtype": "method",
            "name": "noiseSeed",
            "params": [
                {
                    "name": "seed",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 913,
            "description": "The function calculates the geometric bounds of any given object. Use b.itemX(), b.itemY(), b.itemPosition(), b.itemWidth(), b.itemHeight() and b.itemSize() to modify PageItems.\nIn case the object is any kind of text, then additional typographic information baseline and xHeight are calculated",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "bounds",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to calculate the geometric bounds",
                    "type": "Text|Object"
                }
            ],
            "return": {
                "description": "Geometric bounds object with these properties: width, height, left, right, top, bottom and for text: baseline, xHeight",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 984,
            "description": "Positions a PageItem at the designated spot on the x axis. If no x argument is given the current x position is returned.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "itemX",
            "params": [
                {
                    "name": "pItem",
                    "description": "The PageItem to alter",
                    "type": "PageItem"
                },
                {
                    "name": "x",
                    "description": "The new x position",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current x position",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/math.js",
            "line": 1012,
            "description": "Positions a PageItem at the designated spot on the y axis. If no y argument is given the current y position is returned.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "itemY",
            "params": [
                {
                    "name": "pItem",
                    "description": "The PageItem to alter",
                    "type": "PageItem"
                },
                {
                    "name": "y",
                    "description": "The new y position",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current y position",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/public-vars.js",
            "line": 4,
            "description": "System variable which stores the width of the current page.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "cat": "Environment",
            "class": "b"
        },
        {
            "file": "includes/public-vars.js",
            "line": 11,
            "description": "System variable which stores the height of the current page.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "cat": "Environment",
            "class": "b"
        },
        {
            "file": "includes/shape.js",
            "line": 4,
            "description": "Draws an ellipse (oval) in the display window. An ellipse with an equal <b>width</b> and <b>height</b> is a circle.\nThe first two parameters set the location, the third sets the width, and the fourth sets the height.",
            "cat": "Document",
            "subcat": "Primitives",
            "itemtype": "method",
            "name": "ellipse",
            "params": [
                {
                    "name": "x",
                    "description": "Location X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Location Y",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New oval (n.b. in Adobe Scripting the corresponding type is Oval, not Ellipse)",
                "type": "Oval"
            },
            "class": "b"
        },
        {
            "file": "includes/shape.js",
            "line": 68,
            "description": "Draws a line (a direct path between two points) to the page.",
            "cat": "Document",
            "subcat": "Primitives",
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "x1",
                    "description": "Point A x-value",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "Point A y-value",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "Point B x-value",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "Point B y-value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New GraphicLine",
                "type": "GraphicLine"
            },
            "class": "b"
        },
        {
            "file": "includes/shape.js",
            "line": 105,
            "description": "Using the beginShape() and endShape() functions allow creating more complex forms.\nbeginShape() begins recording vertices for a shape and endShape() stops recording.\nAfter calling the beginShape() function, a series of vertex() commands must follow.\nTo stop drawing the shape, call endShape(). The value of the parameter tells whether the paths to\ncreate from the provided vertices have to be closed or not (to connect the beginning and the end).",
            "cat": "Document",
            "subcat": "Primitives",
            "itemtype": "method",
            "name": "beginShape",
            "params": [
                {
                    "name": "shapeMode",
                    "description": "Set b.CLOSE if the new Path should be auto-closed."
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/shape.js",
            "line": 128,
            "description": "Shapes are constructed by connecting a series of vertices. vertex() is used to\nspecify the vertex coordinates lines and polygons. It is used exclusively within\nthe beginShape() and endShape() functions.\n\nPlease use either vertex(x, y) or\nfor drawing bezier shapes vertex(x, y, xAnchorLeft, yAnchorLeft, xAnchorRight, yAnchorRight).\nYou can also mix the two approaches.",
            "cat": "Document",
            "subcat": "Primitives",
            "itemtype": "method",
            "name": "vertex",
            "params": [
                {
                    "name": "x",
                    "description": "position x-value",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "position y-value",
                    "type": "Number"
                },
                {
                    "name": "xAnchorLeft",
                    "description": "position xAnchorLeft-value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yAnchorLeft",
                    "description": "position yAnchorLeft-value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "xAnchorRight",
                    "description": "position xAnchorRight-value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yAnchorRight",
                    "description": "position yAnchorRight-value",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/shape.js",
            "line": 164,
            "description": "The arc() function draws an arc in the display window.\nArcs are drawn along the outer edge of an ellipse defined by the\n<b>x</b>, <b>y</b>, <b>width</b> and <b>height</b> parameters.\nThe origin or the arc's ellipse may be changed with the\n<b>ellipseMode()</b> function.\nThe <b>start</b> and <b>stop</b> parameters specify the angles\nat which to draw the arc.",
            "cat": "Document",
            "subcat": "Primitives",
            "itemtype": "method",
            "name": "arc",
            "params": [
                {
                    "name": "cx",
                    "description": "x-coordinate of the arc's center",
                    "type": "Number"
                },
                {
                    "name": "cy",
                    "description": "y-coordinate of the arc's center",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "width of the arc's ellipse",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the arc's ellipse",
                    "type": "Number"
                },
                {
                    "name": "startAngle",
                    "description": "starting angle of the arc (radians)",
                    "type": "Number"
                },
                {
                    "name": "endAngle",
                    "description": "ending angle of the arc (radians)",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "optional property defines rendering technique of arc, b.OPEN (default), b.CHORD, or b.PIE",
                    "type": "String"
                }
            ],
            "return": {
                "description": "newShape (n.b. in Adobe Scripting the corresponding type is a Path Item)\n\nTODO(S)\n- fix overlapping points bug",
                "type": "GraphicLine|Polygon"
            },
            "class": "b"
        },
        {
            "file": "includes/shape.js",
            "line": 300,
            "description": "addPath() is used to create multi component paths. Call addPath() to add the so far drawn vertices to a single path.\nNew vertices will then end up in a new path. endShape() will then return a multi path object. All component paths will account for\nthe setting (see b.CLOSE) given in beginShape(shapeMode).",
            "cat": "Document",
            "subcat": "Primitives",
            "itemtype": "method",
            "name": "addPath",
            "class": "b"
        },
        {
            "file": "includes/shape.js",
            "line": 314,
            "description": "The endShape() function is the companion to beginShape() and may only be called\nafter beginShape().",
            "cat": "Document",
            "subcat": "Primitives",
            "itemtype": "method",
            "name": "endShape",
            "return": {
                "description": "newShape",
                "type": "GraphicLine|Polygon"
            },
            "class": "b"
        },
        {
            "file": "includes/shape.js",
            "line": 369,
            "description": "Draws a rectangle on the page.",
            "cat": "Document",
            "subcat": "Primitives",
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "x",
                    "description": "Position X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Position Y",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New rectangle",
                "type": "Rectangle"
            },
            "class": "b"
        },
        {
            "file": "includes/shape.js",
            "line": 431,
            "description": "Modifies the location from which rectangles draw. The default mode is\nrectMode(CORNER), which specifies the location to be the upper left\ncorner of the shape and uses the third and fourth parameters of rect()\nto specify the width and height. The syntax rectMode(CORNERS) uses the\nfirst and second parameters of rect() to set the location of one corner\nand uses the third and fourth parameters to set the opposite corner.\nThe syntax rectMode(CENTER) draws the image from its center point and\nuses the third and forth parameters of rect() to specify the image's\nwidth and height. The syntax rectMode(RADIUS) draws the image from its\ncenter point and uses the third and forth parameters of rect() to specify\nhalf of the image's width and height. The parameter must be written in\n\"ALL CAPS\".",
            "cat": "Document",
            "subcat": "Attributes",
            "itemtype": "method",
            "name": "rectMode",
            "params": [
                {
                    "name": "mode",
                    "description": "Either b.CORNER, b.CORNERS, b.CENTER, or b.RADIUS",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/shape.js",
            "line": 461,
            "description": "The origin of the ellipse is modified by the ellipseMode() function.\nThe default configuration is ellipseMode(CENTER), which specifies the\nlocation of the ellipse as the center of the shape. The RADIUS mode is\nthe same, but the width and height parameters to ellipse() specify the\nradius of the ellipse, rather than the diameter. The CORNER mode draws\nthe shape from the upper-left corner of its bounding box. The CORNERS\nmode uses the four parameters to ellipse() to set two opposing corners\nof the ellipse's bounding box. The parameter must be written in \"ALL CAPS\".",
            "cat": "Document",
            "subcat": "Attributes",
            "itemtype": "method",
            "name": "ellipseMode",
            "params": [
                {
                    "name": "mode",
                    "description": "Either b.CENTER, b.RADIUS, b.CORNER, or b.CORNERS",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/shape.js",
            "line": 486,
            "description": "Sets the width of the stroke used for lines and the border\naround shapes.",
            "cat": "Document",
            "subcat": "Attributes",
            "itemtype": "method",
            "name": "strokeWeight",
            "params": [
                {
                    "name": "weight",
                    "description": "The width of the stroke",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/shape.js",
            "line": 503,
            "description": "Returns the object style with the given name. If the style does not exist it gets created.",
            "cat": "Typography",
            "itemtype": "method",
            "name": "objectStyle",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the object style to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object style instance.",
                "type": "ObjectStyle"
            },
            "class": "b"
        },
        {
            "file": "includes/shape.js",
            "line": 521,
            "description": "Duplicates the given page after the current page or the given pageitem to the current page and layer. Use b.rectMode() to set center point.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "duplicate",
            "params": [
                {
                    "name": "item",
                    "description": "The item to duplicate",
                    "type": "PageItem|Page"
                }
            ],
            "return": {
                "description": "Returns the new item",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "includes/structure.js",
            "line": 4,
            "description": "Suspends the calling thread for a number of milliseconds.\nDuring a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated.",
            "cat": "Environment",
            "itemtype": "method",
            "name": "delay",
            "params": [
                {
                    "name": "milliseconds",
                    "description": "The delay time in milliseconds",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/structure.js",
            "line": 16,
            "description": "If no callback function is given it returns a Collection of items otherwise calls the given callback function with each story of the given document.",
            "cat": "Document",
            "subcat": "Multi-Getters",
            "itemtype": "method",
            "name": "stories",
            "params": [
                {
                    "name": "doc",
                    "description": "The document instance to iterate the stories in",
                    "type": "Document"
                },
                {
                    "name": "cb",
                    "description": "Optional: The callback function to call with each story. When this function returns false the loop stops. Passed arguments: story, loopCount;",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of Stories.",
                "type": "Stories[]"
            },
            "class": "b"
        },
        {
            "file": "includes/structure.js",
            "line": 39,
            "description": "If no callback function is given it returns a Collection of items otherwise calls the given callback function with each paragraph of the given document, story or text frame.",
            "cat": "Document",
            "subcat": "Multi-Getters",
            "itemtype": "method",
            "name": "paragraphs",
            "params": [
                {
                    "name": "item",
                    "description": "The story or text frame instance to iterate the paragraphs in",
                    "type": "Document|Story|TextFrame"
                },
                {
                    "name": "cb",
                    "description": "Optional: The callback function to call with each paragraph. When this function returns false the loop stops. Passed arguments: para, loopCount",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of Paragraphs.",
                "type": "Paragraphs[]"
            },
            "class": "b"
        },
        {
            "file": "includes/structure.js",
            "line": 109,
            "description": "If no callback function is given it returns a Collection of items otherwise calls the given callback function with each line of the given document, story, text frame or paragraph.",
            "cat": "Document",
            "subcat": "Multi-Getters",
            "itemtype": "method",
            "name": "lines",
            "params": [
                {
                    "name": "item",
                    "description": "The document, story, text frame or paragraph instance to\n                                                  iterate the lines in",
                    "type": "Document|Story|TextFrame|Paragraph"
                },
                {
                    "name": "cb",
                    "description": "Optional: The callback function to call with each line. When this function returns false the loop stops. Passed arguments: line, loopCount",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of lines.",
                "type": "Lines[]"
            },
            "class": "b"
        },
        {
            "file": "includes/structure.js",
            "line": 137,
            "description": "If no callback function is given it returns a Collection of items otherwise calls the given callback function with each word of the given document, story, text frame, paragraph or line.",
            "cat": "Document",
            "subcat": "Multi-Getters",
            "itemtype": "method",
            "name": "words",
            "params": [
                {
                    "name": "item",
                    "description": "The document, story, text frame, paragraph or line instance\n                                                       to iterate the words in",
                    "type": "Document|Story|TextFrame|Paragraph|Line"
                },
                {
                    "name": "cb",
                    "description": "Optional: The callback function to call with each word. When this function returns false the loop stops. Passed arguments: word, loopCount",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of Words.",
                "type": "Words[]"
            },
            "class": "b"
        },
        {
            "file": "includes/structure.js",
            "line": 165,
            "description": "If no callback function is given it returns a Collection of items otherwise calls the given callback function with each character of the given document, story, text frame, paragraph, line or word.",
            "cat": "Document",
            "subcat": "Multi-Getters",
            "itemtype": "method",
            "name": "characters",
            "params": [
                {
                    "name": "item",
                    "description": "The document, story, text frame, paragraph, line or word instance to\n                                                   iterate the characters in",
                    "type": "Document|Story|TextFrame|Paragraph|Line|Word"
                },
                {
                    "name": "cb",
                    "description": "Optional: The callback function to call with each character. When this function returns false the loop stops. Passed arguments: character, loopCount",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "You can use it like an array.",
                "type": "Characters"
            },
            "class": "b"
        },
        {
            "file": "includes/structure.js",
            "line": 206,
            "description": "If no callback function is given it returns a Collection of items otherwise calls the given callback function for each of the PageItems in the given Document, Page, Layer or Group.",
            "cat": "Document",
            "subcat": "Multi-Getters",
            "itemtype": "method",
            "name": "items",
            "params": [
                {
                    "name": "container",
                    "description": "The container where the PageItems sit in",
                    "type": "Document|Page|Layer|Group"
                },
                {
                    "name": "cb",
                    "description": "Optional: The callback function to call for each PageItem. When this function returns false the loop stops. Passed arguments: item, loopCount.",
                    "type": "Function|Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "array or PageItems.",
                "type": "PageItems[]"
            },
            "class": "b"
        },
        {
            "file": "includes/structure.js",
            "line": 234,
            "description": "Removes all PageItems in the given Document, Page, Layer or Group.",
            "cat": "Document",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "container",
                    "description": "The container where the PageItems sit in",
                    "type": "Document|Page|Layer|Group"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/structure.js",
            "line": 262,
            "description": "Removes the provided Page, Layer, PageItem, Swatch, etc.",
            "cat": "Document",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to be removed",
                    "type": "PageItem"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 2,
            "description": "Scales the given PageItem to the given width. If width is not given as argument the current width is returned.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "itemWidth",
            "params": [
                {
                    "name": "pItem",
                    "description": "The PageItem to alter",
                    "type": "PageItem"
                },
                {
                    "name": "width",
                    "description": "The new width",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current width",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 25,
            "description": "Scales the given PageItem to the given height. If height is not given as argument the current height is returned.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "itemHeight",
            "params": [
                {
                    "name": "pItem",
                    "description": "The PageItem to alter",
                    "type": "PageItem"
                },
                {
                    "name": "height",
                    "description": "The new height",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current height",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 48,
            "description": "Moves the given PageItem to the given position. If x or y is not given as argument the current position is returned.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "itemPosition",
            "params": [
                {
                    "name": "pItem",
                    "description": "The PageItem to alter",
                    "type": "PageItem"
                },
                {
                    "name": "x",
                    "description": "The new x coordinate",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "The new y coordinate",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an object with the fields x and y",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 85,
            "description": "Scales the given PageItem to the given size. If width or height is not given as argument the current size is returned.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "itemSize",
            "params": [
                {
                    "name": "pItem",
                    "description": "The PageItem to alter",
                    "type": "PageItem"
                },
                {
                    "name": "width",
                    "description": "The new width",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "The new height",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an object with the fields width and height",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 298,
            "description": "Returns the current matrix as a Matrix2D object for altering existing PageItems with b.transform(). If a Matrix2D object is provided to the function it will overwrite the current matrix.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "matrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "The matrix to be set as new current matrix",
                    "type": "Matrix2D",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current matrix",
                "type": "Matrix2D"
            },
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 315,
            "description": "Transforms the given PageItem with the given Matrix2D object.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "transform",
            "params": [
                {
                    "name": "obj",
                    "description": "The item to be transformed",
                    "type": "PageItem"
                },
                {
                    "name": "matrix",
                    "description": "The matrix to be applied",
                    "type": "Matrix2D"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 333,
            "description": "Multiplies the current matrix by the one specified through the parameters.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "applyMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "The matrix to be applied",
                    "type": "Matrix2D"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 345,
            "description": "Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires understanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate system to the stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "popMatrix",
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 360,
            "description": "Prints the current matrix to the console window.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "printMatrix",
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 371,
            "description": "Pushes the current transformation matrix onto the matrix stack. Understanding pushMatrix() and popMatrix() requires understanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate system to the stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "pushMatrix",
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 382,
            "description": "Replaces the current matrix with the identity matrix.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "resetMatrix",
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 394,
            "description": "Rotates an object the amount specified by the angle parameter. Angles should be specified in radians (values from 0 to PI*2) or converted to radians with the radians() function. Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction with 0 radians or degrees being up and HALF_PI being to the right etc. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling rotate(PI/2) and then rotate(PI/2) is the same as rotate(PI). If rotate() is called within the draw(), the transformation is reset when the loop begins again. Technically, rotate() multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the pushMatrix() and popMatrix().",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle specified in radians",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 407,
            "description": "Increasing and decreasing the size of an object by expanding and contracting vertices. Scale values are specified as decimal percentages. The function call scale(2.0) increases the dimension of a shape by 200%. Objects always scale from their relative origin to the coordinate system. Transformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling scale(2.0) and then scale(1.5) is the same as scale(3.0). If scale() is called within draw(), the transformation is reset when the loop begins again. This function can be further controlled by pushMatrix() and popMatrix().\nIf only one parameter is given, it is applied on X and Y axis.",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "scaleX",
                    "description": "The amount to scale the X axis.",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "The amount to scale the Y axis.",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/transformation.js",
            "line": 422,
            "description": "Specifies an amount to displace objects within the page. The x parameter specifies left/right translation, the y parameter specifies up/down translation. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling translate(50, 0) and then translate(20, 0) is the same as translate(70, 0). This function can be further controlled by the pushMatrix() and popMatrix().",
            "cat": "Document",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "tx",
                    "description": "The amount of offset on the X axis.",
                    "type": "Number"
                },
                {
                    "name": "ty",
                    "description": "The amount of offset on the Y axis.",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/typography.js",
            "line": 4,
            "description": "Creates a text frame on the current layer on the current page in the current document. \nThe text frame gets created in the position specified by the x and y parameters.\nThe default document font will be used unless a font is set with the textFont() function. \nThe default document font size will be used unless a font size is set with the textSize() function. \nChange the color of the text with the fill() function.\nThe text displays in relation to the textAlign() and textYAlign() functions. \nThe width and height parameters define a rectangular area.",
            "cat": "Typography",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "txt",
                    "description": "The text content to set in the text frame.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of text frame",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of text frame",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "width of text frame",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of text frame",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The created text frame instance",
                "type": "TextFrame"
            },
            "class": "b"
        },
        {
            "file": "includes/typography.js",
            "line": 55,
            "description": "Sets text properties to the given item. If the item is not an instance the text property can be set to,\nthe property gets set to the direct descendants of the given item, e.g. all stories of a given document.\n\nIf no value is given and the given property is a string, the function acts as a getter and returns the\ncorresponding value(s) in an array. This can either be an array containing the value of the concrete item\n(e.g. character) the values of the item's descendants (e.g. paragraphs of given text frame).",
            "cat": "Typography",
            "itemtype": "method",
            "name": "typo",
            "params": [
                {
                    "name": "item",
                    "description": "The object to apply the property to.",
                    "type": "Document|Spread|Page|Layer|Story|TextFrame|Text"
                },
                {
                    "name": "property",
                    "description": "The text property name or an object of key/value property/value pairs.\n                                  If property is a string and no value is given, the function acts as getter.",
                    "type": "String|Object"
                },
                {
                    "name": "value",
                    "description": "The value to apply to the property.",
                    "type": "String|Number|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The property value(s) if the function acts as getter or the items the property\n                                      was assigned to.",
                "type": "String[]|Number[]|Object[]"
            },
            "class": "b"
        },
        {
            "file": "includes/typography.js",
            "line": 142,
            "description": "Returns the current font and sets it if argument fontName is given.",
            "cat": "Typography",
            "itemtype": "method",
            "name": "textFont",
            "params": [
                {
                    "name": "fontName",
                    "description": "The name of the font to set e.g. Helvetica",
                    "type": "String"
                },
                {
                    "name": "fontStyle",
                    "description": "The Font style e.g. Bold",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "currFont The name of the current font",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "includes/typography.js",
            "line": 161,
            "description": "Returns the current font size in points and sets it if argument pointSize is given.",
            "cat": "Typography",
            "itemtype": "method",
            "name": "textSize",
            "params": [
                {
                    "name": "pointSize",
                    "description": "The size in points to set.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current point size.",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/typography.js",
            "line": 176,
            "description": "Sets the current horizontal and vertical text alignment.",
            "cat": "Typography",
            "itemtype": "method",
            "name": "textAlign",
            "params": [
                {
                    "name": "align",
                    "description": "The horizontal text alignment to set. Must be one of the InDesign Justification enum values:\n                          Justification.AWAY_FROM_BINDING_SIDE <br />\n                          Justification.CENTER_ALIGN <br />\n                          Justification.CENTER_JUSTIFIED <br />\n                          Justification.FULLY_JUSTIFIED <br />\n                          Justification.LEFT_ALIGN <br />\n                          Justification.RIGHT_ALIGN <br />\n                          Justification.RIGHT_JUSTIFIED <br />\n                          Justification.TO_BINDING_SIDE <br />",
                    "type": "String"
                },
                {
                    "name": "yAlign",
                    "description": "The vertical text alignment to set. Must be one of the InDesign VerticalJustification enum values:\n                          VerticalJustification.BOTTOM_ALIGN <br />\n                          VerticalJustification.CENTER_ALIGN <br />\n                          VerticalJustification.JUSTIFY_ALIGN <br />\n                          VerticalJustification.TOP_ALIGN <br />",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "includes/typography.js",
            "line": 201,
            "description": "Returns the spacing between lines of text in units of points and sets it if argument leading is given.",
            "cat": "Typography",
            "itemtype": "method",
            "name": "textLeading",
            "params": [
                {
                    "name": "leading",
                    "description": "The spacing between lines of text in units of points or the default Indesign enum\n                                  value Leading.AUTO.",
                    "type": "Number|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current leading.",
                "type": "Number|String"
            },
            "class": "b"
        },
        {
            "file": "includes/typography.js",
            "line": 217,
            "description": "Returns the current kerning and sets it if argument kerning is given.",
            "cat": "Typography",
            "itemtype": "method",
            "name": "textKerning",
            "params": [
                {
                    "name": "kerning",
                    "description": "The value to set.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current kerning.",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/typography.js",
            "line": 232,
            "description": "Returns the current tracking and sets it if argument tracking is given.",
            "cat": "Typography",
            "itemtype": "method",
            "name": "textTracking",
            "params": [
                {
                    "name": "tracking",
                    "description": "The value to set.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current tracking.",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "includes/typography.js",
            "line": 247,
            "description": "Returns the character style with the given name. If the style does not exist it gets created.",
            "cat": "Typography",
            "itemtype": "method",
            "name": "characterStyle",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the character style to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The character style instance.",
                "type": "CharachterStyle"
            },
            "class": "b"
        },
        {
            "file": "includes/typography.js",
            "line": 264,
            "description": "Returns the paragraph style with the given name. If the style does not exist it gets created.",
            "cat": "Typography",
            "itemtype": "method",
            "name": "paragraphStyle",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the paragraph style to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The paragraph style instance.",
                "type": "ParagraphStyle"
            },
            "class": "b"
        },
        {
            "file": "includes/typography.js",
            "line": 281,
            "description": "Links the stories of two textframes to one story. Text of first textframe overflows to second one.",
            "cat": "Story",
            "itemtype": "method",
            "name": "linkTextFrames",
            "params": [
                {
                    "name": "textFrameA",
                    "description": "",
                    "type": "TextFrame"
                },
                {
                    "name": "textFrameB",
                    "description": "",
                    "type": "TextFrame"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 50,
            "description": "The basil version",
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "cat": "Environment",
            "class": "b"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: cat",
            "line": " includes/color.js:4"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/color.js:36"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/color.js:47"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/color.js:77"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/color.js:88"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/color.js:104"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/color.js:120"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/color.js:137"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/color.js:266"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/color.js:283"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/color.js:316"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:1"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:1"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:9"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:9"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:17"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:17"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:26"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:26"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:34"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:34"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:42"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:49"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:56"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:56"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:64"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:64"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:72"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:72"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:80"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:80"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:88"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:88"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:96"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:96"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:104"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:104"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:112"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:112"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:120"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:120"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:128"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:128"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:136"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:136"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:144"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:144"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:152"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:152"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:160"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:160"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:168"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:168"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:177"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:177"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:185"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:185"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:193"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:193"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:201"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:201"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:209"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:209"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:217"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:217"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:225"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:225"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:233"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:233"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:241"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:241"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:249"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:249"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:257"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:257"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:265"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:265"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/constants.js:273"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/constants.js:273"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/core.js:20"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/core.js:80"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/core.js:113"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:5"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:5"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:35"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:35"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:87"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:87"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:105"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:105"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:130"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:130"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:234"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:234"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:264"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:264"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:299"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:299"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:320"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:320"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:343"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:343"
        },
        {
            "message": "param name/type/descript missing",
            "line": " includes/data.js:343"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:361"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:361"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:379"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:379"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:405"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:405"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:506"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:506"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:530"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:530"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:551"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:551"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:571"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:571"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:591"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:591"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:612"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:612"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:626"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:626"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:640"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:640"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:655"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:655"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:668"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:668"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:681"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:681"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:694"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:694"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:767"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:767"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:786"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:786"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:809"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:809"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:844"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/data.js:844"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:874"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:887"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:900"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:918"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:936"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:953"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:967"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/data.js:981"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:4"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:21"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:39"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:39"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:62"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:62"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:85"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:85"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:121"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:121"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:172"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:172"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:195"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:195"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:230"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:230"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:242"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:253"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:316"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:316"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:339"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:339"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:369"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:369"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:399"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:399"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:427"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:427"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:448"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:448"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:461"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:461"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:478"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:478"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:501"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:550"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:570"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:590"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:590"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:631"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:631"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:664"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:724"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:724"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:736"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:736"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:748"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:748"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:760"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:760"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:773"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:773"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:785"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:785"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:797"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:797"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:809"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:809"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:821"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:821"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/environment.js:833"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/environment.js:833"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/global-functions.js:56"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/global-functions.js:56"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/global-functions.js:83"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/global-functions.js:83"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/global-functions.js:109"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/global-functions.js:109"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/global-functions.js:129"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/global-functions.js:129"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/global-functions.js:142"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/global-functions.js:142"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/global-functions.js:165"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/global-functions.js:165"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/global-functions.js:179"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/global-functions.js:179"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/global-functions.js:200"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/global-functions.js:200"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/global-functions.js:219"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/global-functions.js:219"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/global-functions.js:231"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/global-functions.js:231"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/global-functions.js:252"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/global-functions.js:252"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/global-functions.js:272"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/global-functions.js:272"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/image.js:4"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/image.js:4"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/image.js:83"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/image.js:83"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/image.js:110"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/image.js:110"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:7"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:7"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:25"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:25"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:40"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:40"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:55"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:55"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:70"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:70"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:87"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:87"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:104"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:104"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:114"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:114"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:127"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:127"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:147"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:147"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:167"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:167"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:187"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:187"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:207"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:207"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:223"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:223"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:237"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:237"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:253"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:253"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:263"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:263"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:276"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:276"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:286"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:286"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:296"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:296"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:322"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:322"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:333"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:333"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:344"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:344"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:362"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:362"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:385"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:385"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:396"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:396"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:407"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:407"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:423"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:423"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:434"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:434"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:451"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:451"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:471"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:471"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:492"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:492"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:513"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:513"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:533"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:533"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:545"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:545"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:556"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:556"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:572"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:572"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:583"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:583"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:594"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:594"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:605"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:605"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:616"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:616"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:628"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:628"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:639"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:639"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:652"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:652"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:665"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:665"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:676"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:676"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:691"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:691"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:833"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:833"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:874"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:874"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:890"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:890"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:913"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:913"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:984"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:984"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " includes/math.js:984"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/math.js:1012"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/math.js:1012"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " includes/math.js:1012"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/public-vars.js:4"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/public-vars.js:11"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/shape.js:4"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/shape.js:4"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/shape.js:68"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/shape.js:68"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/shape.js:105"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/shape.js:105"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/shape.js:128"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/shape.js:128"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/shape.js:164"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/shape.js:164"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/shape.js:300"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/shape.js:300"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/shape.js:314"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/shape.js:314"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/shape.js:369"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/shape.js:369"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/shape.js:431"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/shape.js:431"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/shape.js:461"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/shape.js:461"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/shape.js:486"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/shape.js:486"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/shape.js:503"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/shape.js:521"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/shape.js:521"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " includes/shape.js:521"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/structure.js:4"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/structure.js:16"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/structure.js:16"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/structure.js:39"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/structure.js:39"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/structure.js:109"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/structure.js:109"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/structure.js:137"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/structure.js:137"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/structure.js:165"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/structure.js:165"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/structure.js:206"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/structure.js:206"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/structure.js:234"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/structure.js:262"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:2"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:2"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " includes/transformation.js:2"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:25"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:25"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " includes/transformation.js:25"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:48"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:48"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " includes/transformation.js:48"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:85"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:85"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " includes/transformation.js:85"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:298"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:298"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " includes/transformation.js:298"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:315"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:315"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:333"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:333"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:345"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:345"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:360"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:360"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:371"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:371"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:382"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:382"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:394"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:394"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:407"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:407"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/transformation.js:422"
        },
        {
            "message": "unknown tag: subcat",
            "line": " includes/transformation.js:422"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/typography.js:4"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/typography.js:55"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/typography.js:142"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/typography.js:161"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/typography.js:176"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/typography.js:201"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/typography.js:217"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/typography.js:232"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/typography.js:247"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/typography.js:264"
        },
        {
            "message": "unknown tag: cat",
            "line": " includes/typography.js:281"
        },
        {
            "message": "unknown tag: cat",
            "line": " basil.js:50"
        },
        {
            "message": "Missing item type",
            "line": " includes/data.js:232"
        }
    ]
}